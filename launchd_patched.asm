launchd:
(__TEXT,__text) section
00000001000037f8	stp	x22, x21, [sp, #-0x30]!
00000001000037fc	stp	x20, x19, [sp, #0x10]
0000000100003800	stp	x29, x30, [sp, #0x20]
0000000100003804	add	x29, sp, #0x20
0000000100003808	mov	x19, x0
000000010000380c	ldr	w8, [x19, #0x170]
0000000100003810	cbnz	w8, 0x100003a18
0000000100003814	ldr	x8, [x19, #0x8]
0000000100003818	cmn	x8, #0x1
000000010000381c	b.ne	0x100003a00
0000000100003820	ldr	x8, [x19, #0x10]
0000000100003824	cmn	x8, #0x1
0000000100003828	b.ne	0x100003a00
000000010000382c	ldr	x8, [x19, #0x18]
0000000100003830	cmn	x8, #0x1
0000000100003834	b.ne	0x100003a0c
0000000100003838	ldr	x8, [x19, #0x20]
000000010000383c	cmn	x8, #0x1
0000000100003840	b.ne	0x100003a0c
0000000100003844	ldr	x8, [x19, #0x2a8]
0000000100003848	cbnz	x8, 0x100003a24
000000010000384c	ldr	x8, [x19, #0x98]
0000000100003850	cbnz	x8, 0x100003a34
0000000100003854	ldr	x8, [x19, #0xa0]
0000000100003858	cbnz	x8, 0x100003a44
000000010000385c	ldr	x0, [x19, #0x208]
0000000100003860	add	x8, x19, #0x460
0000000100003864	cmp	x0, x8
0000000100003868	b.eq	0x100003870
000000010000386c	bl	0x100031010 ; symbol stub for: _free
0000000100003870	ldr	x0, [x19, #0x210]
0000000100003874	bl	0x100031010 ; symbol stub for: _free
0000000100003878	ldr	x0, [x19, #0x138]
000000010000387c	bl	0x100031010 ; symbol stub for: _free
0000000100003880	ldr	x0, [x19, #0x220]
0000000100003884	bl	0x100031010 ; symbol stub for: _free
0000000100003888	ldr	x0, [x19, #0x178]
000000010000388c	bl	0x100031010 ; symbol stub for: _free
0000000100003890	ldr	x0, [x19, #0x180]
0000000100003894	bl	0x100031010 ; symbol stub for: _free
0000000100003898	ldr	x0, [x19, #0x2b8]
000000010000389c	bl	0x100031010 ; symbol stub for: _free
00000001000038a0	ldr	x0, [x19, #0x1a0]
00000001000038a4	bl	0x100031010 ; symbol stub for: _free
00000001000038a8	ldr	x0, [x19, #0x1a8]
00000001000038ac	bl	0x100031010 ; symbol stub for: _free
00000001000038b0	ldr	x0, [x19, #0x188]
00000001000038b4	bl	0x100031010 ; symbol stub for: _free
00000001000038b8	ldr	x0, [x19, #0x190]
00000001000038bc	bl	0x100031010 ; symbol stub for: _free
00000001000038c0	ldr	x0, [x19, #0x198]
00000001000038c4	bl	0x100031010 ; symbol stub for: _free
00000001000038c8	ldr	x0, [x19, #0x268]
00000001000038cc	bl	0x100031010 ; symbol stub for: _free
00000001000038d0	ldr	x0, [x19, #0x270]
00000001000038d4	bl	0x100031010 ; symbol stub for: _free
00000001000038d8	ldr	x0, [x19, #0x2c8]
00000001000038dc	bl	0x100031010 ; symbol stub for: _free
00000001000038e0	ldr	x0, [x19, #0x228]
00000001000038e4	cbz	x0, 0x1000038ec
00000001000038e8	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000038ec	ldr	x0, [x19, #0x230]
00000001000038f0	cbz	x0, 0x1000038f8
00000001000038f4	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000038f8	ldr	x0, [x19, #0x1b0]
00000001000038fc	cbz	x0, 0x100003904
0000000100003900	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100003904	ldr	x0, [x19, #0x1b8]
0000000100003908	cbz	x0, 0x100003910
000000010000390c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100003910	ldr	x8, [x19, #0x260]
0000000100003914	cbz	x8, 0x100003920
0000000100003918	mov	x0, x19
000000010000391c	bl	0x100003a54
0000000100003920	ldr	x20, [x19, #0x300]
0000000100003924	cbz	x20, 0x10000397c
0000000100003928	mov	x21, #-0x1
000000010000392c	ldrh	w8, [x19, #0x308]
0000000100003930	sub	w8, w8, #0x1
0000000100003934	strh	w8, [x19, #0x308]
0000000100003938	add	x0, x20, #0x18
000000010000393c	bl	0x10003173c ; symbol stub for: _strlen
0000000100003940	ldr	x8, [x19, #0x218]
0000000100003944	mvn	x9, x0
0000000100003948	add	x8, x8, x9
000000010000394c	str	x8, [x19, #0x218]
0000000100003950	ldr	x8, [x20]
0000000100003954	cbz	x8, 0x100003960
0000000100003958	ldr	x9, [x20, #0x8]
000000010000395c	str	x9, [x8, #0x8]
0000000100003960	ldr	x9, [x20, #0x8]
0000000100003964	str	x8, [x9]
0000000100003968	stp	x21, x21, [x20]
000000010000396c	mov	x0, x20
0000000100003970	bl	0x10000e704
0000000100003974	ldr	x20, [x19, #0x300]
0000000100003978	cbnz	x20, 0x10000392c
000000010000397c	ldr	x0, [x19, #0x238]
0000000100003980	cbz	x0, 0x1000039d0
0000000100003984	mov	x20, #-0x1
0000000100003988	ldr	x8, [x0]
000000010000398c	cbz	x8, 0x100003998
0000000100003990	ldr	x9, [x0, #0x8]
0000000100003994	str	x9, [x8, #0x8]
0000000100003998	ldr	x9, [x0, #0x8]
000000010000399c	str	x8, [x9]
00000001000039a0	stp	x20, x20, [x0]
00000001000039a4	bl	0x100031010 ; symbol stub for: _free
00000001000039a8	ldr	x0, [x19, #0x238]
00000001000039ac	cbnz	x0, 0x100003988
00000001000039b0	b	0x1000039d0
00000001000039b4	ldr	x8, [x0]
00000001000039b8	cbz	x8, 0x1000039c4
00000001000039bc	ldr	x9, [x0, #0x8]
00000001000039c0	str	x9, [x8, #0x8]
00000001000039c4	ldr	x9, [x0, #0x8]
00000001000039c8	str	x8, [x9]
00000001000039cc	bl	0x100031010 ; symbol stub for: _free
00000001000039d0	ldr	x0, [x19, #0x240]
00000001000039d4	cbnz	x0, 0x1000039b4
00000001000039d8	ldr	x0, [x19, #0x450]
00000001000039dc	cbz	x0, 0x1000039f0
00000001000039e0	ldp	x29, x30, [sp, #0x20]
00000001000039e4	ldp	x20, x19, [sp, #0x10]
00000001000039e8	ldp	x22, x21, [sp], #0x30
00000001000039ec	b	0x100031b68 ; symbol stub for: _xpc_release
00000001000039f0	ldp	x29, x30, [sp, #0x20]
00000001000039f4	ldp	x20, x19, [sp, #0x10]
00000001000039f8	ldp	x22, x21, [sp], #0x30
00000001000039fc	ret
0000000100003a00	adr	x0, #193731 ; literal pool for: "service disposal while still in list"
0000000100003a04	nop
0000000100003a08	bl	0x100028f84
0000000100003a0c	adr	x0, #193756 ; literal pool for: "service disposal while in parent instance list"
0000000100003a10	nop
0000000100003a14	bl	0x100028f84
0000000100003a18	adr	x0, #193676 ; literal pool for: "deallocation of active service"
0000000100003a1c	nop
0000000100003a20	bl	0x100028f84
0000000100003a24	mov	x0, #0x0
0000000100003a28	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100003a2c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100003a30	brk	#0x1
0000000100003a34	mov	x0, #0x0
0000000100003a38	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100003a3c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100003a40	brk	#0x1
0000000100003a44	mov	x0, #0x0
0000000100003a48	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100003a4c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100003a50	brk	#0x1
0000000100003a54	stp	x20, x19, [sp, #-0x20]!
0000000100003a58	stp	x29, x30, [sp, #0x10]
0000000100003a5c	add	x29, sp, #0x10
0000000100003a60	mov	x19, x0
0000000100003a64	ldr	x0, [x19, #0x260]
0000000100003a68	cbz	x0, 0x100003a8c
0000000100003a6c	mov	x1, x0
0000000100003a70	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100003a74	ldr	x0, [x19, #0x260]
0000000100003a78	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100003a7c	str	xzr, [x19, #0x260]
0000000100003a80	ldp	x29, x30, [sp, #0x10]
0000000100003a84	ldp	x20, x19, [sp], #0x20
0000000100003a88	ret
0000000100003a8c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100003a90	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100003a94	brk	#0x1
0000000100003a98	sub	sp, sp, #0x40
0000000100003a9c	stp	x20, x19, [sp, #0x20]
0000000100003aa0	stp	x29, x30, [sp, #0x30]
0000000100003aa4	add	x29, sp, #0x30
0000000100003aa8	mov	x8, x2
0000000100003aac	mov	x20, x1
0000000100003ab0	mov	x19, x0
0000000100003ab4	str	xzr, [sp, #0x18]
0000000100003ab8	strb	wzr, [sp, #0x17]
0000000100003abc	add	x2, sp, #0x18
0000000100003ac0	add	x4, sp, #0x17
0000000100003ac4	mov	x0, x20
0000000100003ac8	mov	x1, x8
0000000100003acc	bl	0x10000e4dc
0000000100003ad0	cbz	x0, 0x100003b10
0000000100003ad4	add	x8, x19, #0x300
0000000100003ad8	ldr	x9, [x19, #0x300]
0000000100003adc	str	x9, [x0]
0000000100003ae0	cbz	x9, 0x100003ae8
0000000100003ae4	str	x0, [x9, #0x8]
0000000100003ae8	str	x0, [x19, #0x300]
0000000100003aec	str	x8, [x0, #0x8]
0000000100003af0	ldrh	w8, [x19, #0x308]
0000000100003af4	add	w8, w8, #0x1
0000000100003af8	strh	w8, [x19, #0x308]
0000000100003afc	ldr	x8, [sp, #0x18]
0000000100003b00	ldr	x9, [x19, #0x218]
0000000100003b04	add	x8, x9, x8
0000000100003b08	str	x8, [x19, #0x218]
0000000100003b0c	b	0x100003b30
0000000100003b10	ldrb	w8, [sp, #0x17]
0000000100003b14	cbz	w8, 0x100003b30
0000000100003b18	str	x20, [sp]
0000000100003b1c	adr	x2, #193531 ; literal pool for: "Service tried to set environment variable with reserved name: %s"
0000000100003b20	nop
0000000100003b24	orr	w1, wzr, #0x3
0000000100003b28	mov	x0, x19
0000000100003b2c	bl	0x1000118ec
0000000100003b30	ldp	x29, x30, [sp, #0x30]
0000000100003b34	ldp	x20, x19, [sp, #0x20]
0000000100003b38	add	sp, sp, #0x40
0000000100003b3c	ret
0000000100003b40	sub	sp, sp, #0x30
0000000100003b44	stp	x20, x19, [sp, #0x10]
0000000100003b48	stp	x29, x30, [sp, #0x20]
0000000100003b4c	add	x29, sp, #0x20
0000000100003b50	mov	x20, x1
0000000100003b54	mov	x19, x0
0000000100003b58	adr	x1, #193536 ; literal pool for: "Interactive"
0000000100003b5c	nop
0000000100003b60	mov	x0, x20
0000000100003b64	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100003b68	cbz	w0, 0x100003c1c
0000000100003b6c	adr	x1, #193528 ; literal pool for: "Adaptive"
0000000100003b70	nop
0000000100003b74	mov	x0, x20
0000000100003b78	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100003b7c	cbz	w0, 0x100003c24
0000000100003b80	adr	x1, #193517 ; literal pool for: "Standard"
0000000100003b84	nop
0000000100003b88	mov	x0, x20
0000000100003b8c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100003b90	cbz	w0, 0x100003c2c
0000000100003b94	adr	x1, #193506 ; literal pool for: "Background"
0000000100003b98	nop
0000000100003b9c	mov	x0, x20
0000000100003ba0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100003ba4	cbz	w0, 0x100003c34
0000000100003ba8	adr	x1, #193497 ; literal pool for: "TALApp"
0000000100003bac	nop
0000000100003bb0	mov	x0, x20
0000000100003bb4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100003bb8	cbz	w0, 0x100003c4c
0000000100003bbc	adr	x1, #193484 ; literal pool for: "SystemApp"
0000000100003bc0	nop
0000000100003bc4	mov	x0, x20
0000000100003bc8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100003bcc	cbz	w0, 0x100003c54
0000000100003bd0	adr	x1, #193474 ; literal pool for: "App"
0000000100003bd4	nop
0000000100003bd8	mov	x0, x20
0000000100003bdc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100003be0	cbz	w0, 0x100003c68
0000000100003be4	adr	x1, #193458 ; literal pool for: "_AdaptiveUtility"
0000000100003be8	nop
0000000100003bec	mov	x0, x20
0000000100003bf0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100003bf4	cbz	w0, 0x100003c80
0000000100003bf8	str	x20, [sp]
0000000100003bfc	adr	x2, #193451 ; literal pool for: "Unknown ProcessType: %s"
0000000100003c00	nop
0000000100003c04	orr	w1, wzr, #0x4
0000000100003c08	mov	x0, x19
0000000100003c0c	bl	0x1000118ec
0000000100003c10	ldr	x8, [x19, #0x458]
0000000100003c14	orr	x8, x8, #0x1
0000000100003c18	b	0x100003c78
0000000100003c1c	orr	w8, wzr, #0x400
0000000100003c20	b	0x100003c38
0000000100003c24	orr	w8, wzr, #0x600
0000000100003c28	b	0x100003c38
0000000100003c2c	orr	w8, wzr, #0x300
0000000100003c30	b	0x100003c38
0000000100003c34	mov	w8, #0x500
0000000100003c38	str	w8, [x19, #0x2c0]
0000000100003c3c	ldp	x29, x30, [sp, #0x20]
0000000100003c40	ldp	x20, x19, [sp, #0x10]
0000000100003c44	add	sp, sp, #0x30
0000000100003c48	ret
0000000100003c4c	orr	w8, wzr, #0x200
0000000100003c50	b	0x100003c6c
0000000100003c54	orr	w8, wzr, #0x100
0000000100003c58	str	w8, [x19, #0x2c0]
0000000100003c5c	ldr	x8, [x19, #0x458]
0000000100003c60	orr	x8, x8, #0x6000
0000000100003c64	b	0x100003c78
0000000100003c68	orr	w8, wzr, #0x100
0000000100003c6c	str	w8, [x19, #0x2c0]
0000000100003c70	ldr	x8, [x19, #0x458]
0000000100003c74	orr	x8, x8, #0x2000
0000000100003c78	str	x8, [x19, #0x458]
0000000100003c7c	b	0x100003c3c
0000000100003c80	orr	w8, wzr, #0x600
0000000100003c84	str	w8, [x19, #0x2c0]
0000000100003c88	mov	w8, #0x11
0000000100003c8c	str	w8, [x19, #0x2d8]
0000000100003c90	b	0x100003c3c
0000000100003c94	stp	x20, x19, [sp, #-0x20]!
0000000100003c98	stp	x29, x30, [sp, #0x10]
0000000100003c9c	add	x29, sp, #0x10
0000000100003ca0	mov	x19, x1
0000000100003ca4	mov	x20, x0
0000000100003ca8	ldr	w8, [x20, #0x110]
0000000100003cac	cbnz	w8, 0x100003d04
0000000100003cb0	ldrb	w8, [x20, #0x45d]
0000000100003cb4	tbnz	w8, #0x1, 0x100003cf4
0000000100003cb8	add	x1, x20, #0x460
0000000100003cbc	nop
0000000100003cc0	ldr	x2, #0x3c3d0 ; literal pool symbol address: __xpc_bool_true
0000000100003cc4	mov	x0, x20
0000000100003cc8	mov	x3, x19
0000000100003ccc	bl	0x100003d10
0000000100003cd0	ldr	x8, [x20, #0x458]
0000000100003cd4	orr	x8, x8, #0x20000000000
0000000100003cd8	str	x8, [x20, #0x458]
0000000100003cdc	cbnz	x0, 0x100003cf8
0000000100003ce0	adr	x2, #193292 ; literal pool for: "Failed to create the implicit endpoint"
0000000100003ce4	nop
0000000100003ce8	orr	w1, wzr, #0x3
0000000100003cec	mov	x0, x19
0000000100003cf0	bl	0x10000ce7c
0000000100003cf4	mov	x0, #0x0
0000000100003cf8	ldp	x29, x30, [sp, #0x10]
0000000100003cfc	ldp	x20, x19, [sp], #0x20
0000000100003d00	ret
0000000100003d04	adr	x0, #193211 ; literal pool for: "unmanaged service given to service interface"
0000000100003d08	nop
0000000100003d0c	bl	0x100028f84
0000000100003d10	sub	sp, sp, #0x40
0000000100003d14	stp	x22, x21, [sp, #0x10]
0000000100003d18	stp	x20, x19, [sp, #0x20]
0000000100003d1c	stp	x29, x30, [sp, #0x30]
0000000100003d20	add	x29, sp, #0x30
0000000100003d24	mov	x20, x3
0000000100003d28	mov	x22, x2
0000000100003d2c	mov	x21, x1
0000000100003d30	mov	x19, x0
0000000100003d34	ldr	x8, [x19, #0x458]
0000000100003d38	tbz	x8, #0x29, 0x100003d54
0000000100003d3c	and	x8, x8, #0x6
0000000100003d40	cbz	x8, 0x100003d54
0000000100003d44	add	x1, x19, #0x460
0000000100003d48	mov	x0, x21
0000000100003d4c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100003d50	cbz	w0, 0x100003d7c
0000000100003d54	ldr	x8, [x19, #0x1e0]
0000000100003d58	ldr	x5, [x19, #0x200]
0000000100003d5c	mov	x0, x19
0000000100003d60	mov	x1, x21
0000000100003d64	mov	x2, x22
0000000100003d68	mov	x3, #0x0
0000000100003d6c	mov	x4, x20
0000000100003d70	blr	x8
0000000100003d74	cbnz	x0, 0x100003da4
0000000100003d78	b	0x100003d94
0000000100003d7c	str	x21, [sp]
0000000100003d80	adr	x2, #194035 ; literal pool for: "MachService endpoint name specified was same as implicitly created endpoint: %s"
0000000100003d84	nop
0000000100003d88	orr	w1, wzr, #0x4
0000000100003d8c	mov	x0, x20
0000000100003d90	bl	0x10000ce7c
0000000100003d94	mov	x0, #0x0
0000000100003d98	ldr	x8, [x19, #0x458]
0000000100003d9c	orr	x8, x8, #0x1
0000000100003da0	str	x8, [x19, #0x458]
0000000100003da4	ldp	x29, x30, [sp, #0x30]
0000000100003da8	ldp	x20, x19, [sp, #0x20]
0000000100003dac	ldp	x22, x21, [sp, #0x10]
0000000100003db0	add	sp, sp, #0x40
0000000100003db4	ret
0000000100003db8	sub	sp, sp, #0xb0
0000000100003dbc	stp	x28, x27, [sp, #0x50]
0000000100003dc0	stp	x26, x25, [sp, #0x60]
0000000100003dc4	stp	x24, x23, [sp, #0x70]
0000000100003dc8	stp	x22, x21, [sp, #0x80]
0000000100003dcc	stp	x20, x19, [sp, #0x90]
0000000100003dd0	stp	x29, x30, [sp, #0xa0]
0000000100003dd4	add	x29, sp, #0xa0
0000000100003dd8	mov	x21, x6
0000000100003ddc	mov	x26, x5
0000000100003de0	mov	x24, x4
0000000100003de4	mov	x25, x3
0000000100003de8	mov	x19, x2
0000000100003dec	mov	x22, x1
0000000100003df0	mov	x20, x0
0000000100003df4	mov	x0, x22
0000000100003df8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100003dfc	nop
0000000100003e00	ldr	x23, #0x3c2c0 ; literal pool symbol address: __xpc_type_dictionary
0000000100003e04	cmp	x0, x23
0000000100003e08	b.eq	0x100003e30
0000000100003e0c	adr	x2, #193807 ; literal pool for: "Root node of launchd.plist is not a dictionary."
0000000100003e10	nop
0000000100003e14	orr	w1, wzr, #0x3
0000000100003e18	mov	x0, x20
0000000100003e1c	bl	0x100019bfc
0000000100003e20	mov	x23, #0x0
0000000100003e24	mov	w8, #0x6d
0000000100003e28	str	w8, [x21]
0000000100003e2c	b	0x100004460
0000000100003e30	adr	x1, #193108 ; literal pool for: "Label"
0000000100003e34	nop
0000000100003e38	mov	x0, x22
0000000100003e3c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100003e40	mov	x8, x0
0000000100003e44	cbz	x8, 0x100003ee8
0000000100003e48	mov	x0, x20
0000000100003e4c	mov	x1, x8
0000000100003e50	bl	0x10000ce0c
0000000100003e54	mov	x28, x0
0000000100003e58	adr	x1, #193068 ; literal pool for: "Label"
0000000100003e5c	nop
0000000100003e60	mov	x0, x22
0000000100003e64	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100003e68	mov	x27, x0
0000000100003e6c	cbz	x27, 0x100003f08
0000000100003e70	stp	x19, x28, [sp, #0x38]
0000000100003e74	adr	x1, #195123 ; literal pool for: "Disabled"
0000000100003e78	nop
0000000100003e7c	mov	x0, x22
0000000100003e80	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100003e84	mov	x19, x0
0000000100003e88	adr	x1, #195695 ; literal pool for: "ForceEnableHack"
0000000100003e8c	nop
0000000100003e90	mov	x0, x22
0000000100003e94	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100003e98	mov	x28, x0
0000000100003e9c	mov	x0, x20
0000000100003ea0	mov	x1, x27
0000000100003ea4	bl	0x10001dec8
0000000100003ea8	nop
0000000100003eac	ldr	x8, #0x3c1e4 ; literal pool symbol address: __xpc_bool_true
0000000100003eb0	cmp	x0, x8
0000000100003eb4	cset	w8, eq
0000000100003eb8	cmp	x0, #0x0
0000000100003ebc	csel	w9, w19, w8, eq
0000000100003ec0	ubfx	x8, x26, #1, #1
0000000100003ec4	orr	w8, w8, w28
0000000100003ec8	tbnz	w8, #0x0, 0x100003f28
0000000100003ecc	tbnz	w26, #0x5, 0x100003f28
0000000100003ed0	cbz	w9, 0x100003f28
0000000100003ed4	mov	x23, #0x0
0000000100003ed8	mov	w8, #0x77
0000000100003edc	str	w8, [x21]
0000000100003ee0	ldr	x28, [sp, #0x40]
0000000100003ee4	b	0x100004458
0000000100003ee8	adr	x2, #193635 ; literal pool for: "Service plist does not specify a label."
0000000100003eec	nop
0000000100003ef0	orr	w1, wzr, #0x3
0000000100003ef4	mov	x0, x20
0000000100003ef8	bl	0x100019bfc
0000000100003efc	mov	x23, #0x0
0000000100003f00	mov	w8, #0x6e
0000000100003f04	b	0x100003e28
0000000100003f08	adr	x2, #193603 ; literal pool for: "Service plist does not specify a label."
0000000100003f0c	nop
0000000100003f10	orr	w1, wzr, #0x3
0000000100003f14	mov	x0, x28
0000000100003f18	bl	0x10000ce7c
0000000100003f1c	mov	x23, #0x0
0000000100003f20	mov	w8, #0x6e
0000000100003f24	b	0x100004454
0000000100003f28	cbz	w8, 0x100003f3c
0000000100003f2c	mov	w2, #0x0
0000000100003f30	mov	x0, x20
0000000100003f34	mov	x1, x27
0000000100003f38	bl	0x10001ddec
0000000100003f3c	mov	x0, x20
0000000100003f40	bl	0x10001dddc
0000000100003f44	adr	x8, #258340
0000000100003f48	nop
0000000100003f4c	cmp	x0, x8
0000000100003f50	ldr	x28, [sp, #0x40]
0000000100003f54	b.ne	0x100004018
0000000100003f58	adr	x1, #196522 ; literal pool for: "LimitLoadToSessionType"
0000000100003f5c	nop
0000000100003f60	mov	x0, x22
0000000100003f64	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100003f68	mov	x28, x0
0000000100003f6c	cbz	x28, 0x100003f7c
0000000100003f70	mov	x0, x28
0000000100003f74	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100003f78	b	0x100003f88
0000000100003f7c	mov	x1, #0x0
0000000100003f80	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
0000000100003f84	mov	x28, x0
0000000100003f88	mov	x0, x28
0000000100003f8c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100003f90	nop
0000000100003f94	ldr	x8, #0x3c14c ; literal pool symbol address: __xpc_type_string
0000000100003f98	cmp	x0, x8
0000000100003f9c	b.eq	0x100004168
0000000100003fa0	mov	x0, x28
0000000100003fa4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100003fa8	nop
0000000100003fac	ldr	x8, #0x3c0ec ; literal pool symbol address: __xpc_type_array
0000000100003fb0	cmp	x0, x8
0000000100003fb4	b.ne	0x10000400c
0000000100003fb8	mov	x0, x28
0000000100003fbc	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100003fc0	mov	x19, #0x0
0000000100003fc4	cbz	x0, 0x100003ffc
0000000100003fc8	mov	x0, x28
0000000100003fcc	mov	x1, x19
0000000100003fd0	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
0000000100003fd4	cbz	x0, 0x100003fe8
0000000100003fd8	adr	x1, #199030 ; literal pool for: "PostLogOutSync"
0000000100003fdc	nop
0000000100003fe0	bl	0x100031700 ; symbol stub for: _strcmp
0000000100003fe4	cbz	w0, 0x100003ffc
0000000100003fe8	add	x19, x19, #0x1
0000000100003fec	mov	x0, x28
0000000100003ff0	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100003ff4	cmp	x19, x0
0000000100003ff8	b.lo	0x100003fc8
0000000100003ffc	mov	x0, x28
0000000100004000	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100004004	cmp	x19, x0
0000000100004008	b.eq	0x100004180
000000010000400c	mov	x0, x28
0000000100004010	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100004014	ldr	x28, [sp, #0x40]
0000000100004018	adr	x1, #197244 ; literal pool for: "LimitLoadToHardware"
000000010000401c	nop
0000000100004020	mov	x0, x22
0000000100004024	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100004028	mov	x19, x0
000000010000402c	cbz	x19, 0x100004060
0000000100004030	mov	x0, x19
0000000100004034	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100004038	cmp	x0, x23
000000010000403c	b.ne	0x100004060
0000000100004040	strb	wzr, [sp, #0x4f]
0000000100004044	adr	x2, #17248
0000000100004048	nop
000000010000404c	add	x1, sp, #0x4f
0000000100004050	mov	x0, x19
0000000100004054	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100004058	ldrb	w8, [sp, #0x4f]
000000010000405c	cbz	w8, 0x100004150
0000000100004060	adr	x1, #197192 ; literal pool for: "LimitLoadFromHardware"
0000000100004064	nop
0000000100004068	mov	x0, x22
000000010000406c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100004070	mov	x19, x0
0000000100004074	cbz	x19, 0x100004088
0000000100004078	mov	x0, x19
000000010000407c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100004080	cmp	x0, x23
0000000100004084	b.eq	0x100004130
0000000100004088	adr	x1, #197174 ; literal pool for: "_LimitLoadToDeviceTree"
000000010000408c	nop
0000000100004090	mov	x0, x22
0000000100004094	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100004098	cbz	x0, 0x1000040a8
000000010000409c	mov	x1, x28
00000001000040a0	bl	0x100008550
00000001000040a4	tbz	w0, #0x0, 0x100004150
00000001000040a8	adr	x8, #263042
00000001000040ac	nop
00000001000040b0	ldrb	w8, [x8]
00000001000040b4	cbz	w8, 0x1000040cc
00000001000040b8	adr	x1, #194787 ; literal pool for: "MinimalBootProfile"
00000001000040bc	nop
00000001000040c0	mov	x0, x22
00000001000040c4	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
00000001000040c8	tbz	w0, #0x0, 0x10000415c
00000001000040cc	mov	x0, x20
00000001000040d0	mov	x1, x27
00000001000040d4	bl	0x10001e1b8
00000001000040d8	cbz	x0, 0x100004194
00000001000040dc	ldr	x19, [x0, #0x138]
00000001000040e0	ldr	x0, [sp, #0x38]
00000001000040e4	mov	x1, x19
00000001000040e8	bl	0x100031700 ; symbol stub for: _strcmp
00000001000040ec	cbz	w0, 0x1000043e4
00000001000040f0	ldrb	w8, [x19]
00000001000040f4	cmp	w8, #0x2f
00000001000040f8	b.ne	0x100004128
00000001000040fc	ldr	x9, [sp, #0x38]
0000000100004100	ldrb	w8, [x9]
0000000100004104	cmp	w8, #0x2f
0000000100004108	b.ne	0x100004128
000000010000410c	stp	x19, x9, [sp, #0x8]
0000000100004110	str	x27, [sp]
0000000100004114	adr	x2, #192834 ; literal pool for: "Attempt to re-bootstrap service from different path, will use existing: service = %s, existing = %s, conflicting = %s"
0000000100004118	nop
000000010000411c	orr	w1, wzr, #0x4
0000000100004120	mov	x0, x20
0000000100004124	bl	0x100019bfc
0000000100004128	mov	w8, #0x11
000000010000412c	b	0x1000043e8
0000000100004130	strb	wzr, [sp, #0x4e]
0000000100004134	adr	x2, #17008
0000000100004138	nop
000000010000413c	add	x1, sp, #0x4e
0000000100004140	mov	x0, x19
0000000100004144	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100004148	ldrb	w8, [sp, #0x4e]
000000010000414c	cbz	w8, 0x100004088
0000000100004150	mov	x23, #0x0
0000000100004154	mov	w8, #0x8a
0000000100004158	b	0x100004454
000000010000415c	mov	x23, #0x0
0000000100004160	mov	w8, #0x98
0000000100004164	b	0x100004454
0000000100004168	mov	x0, x28
000000010000416c	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100004170	adr	x1, #198622 ; literal pool for: "PostLogOutSync"
0000000100004174	nop
0000000100004178	bl	0x100031700 ; symbol stub for: _strcmp
000000010000417c	cbz	w0, 0x10000400c
0000000100004180	mov	x0, x28
0000000100004184	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100004188	mov	x23, #0x0
000000010000418c	mov	w8, #0x86
0000000100004190	b	0x100003edc
0000000100004194	adr	x1, #192240 ; literal pool for: "Label"
0000000100004198	nop
000000010000419c	mov	x0, x22
00000001000041a0	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
00000001000041a4	mov	x23, x0
00000001000041a8	cbz	x23, 0x1000045b0
00000001000041ac	adr	x1, #192103 ; literal pool for: "Program"
00000001000041b0	nop
00000001000041b4	mov	x0, x22
00000001000041b8	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
00000001000041bc	mov	x27, x0
00000001000041c0	cbz	x27, 0x1000043f0
00000001000041c4	ldrb	w8, [x27]
00000001000041c8	cmp	w8, #0x2f
00000001000041cc	b.eq	0x1000041e4
00000001000041d0	adr	x1, #194658 ; literal pool for: "ResolveProgramIdentifier"
00000001000041d4	nop
00000001000041d8	mov	x0, x22
00000001000041dc	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
00000001000041e0	tbz	w0, #0x0, 0x100004438
00000001000041e4	adr	x1, #192055 ; literal pool for: "ProgramArguments"
00000001000041e8	nop
00000001000041ec	mov	x0, x22
00000001000041f0	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000041f4	mov	x19, x0
00000001000041f8	orr	x8, xzr, #0x20000000000
00000001000041fc	str	x8, [sp, #0x20]
0000000100004200	str	x19, [sp, #0x30]
0000000100004204	adr	x1, #192116 ; literal pool for: "ProcessType"
0000000100004208	nop
000000010000420c	mov	x0, x22
0000000100004210	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100004214	mov	x8, x0
0000000100004218	cbz	x8, 0x100004230
000000010000421c	adr	x1, #195703 ; literal pool for: "POSIXSpawnType"
0000000100004220	nop
0000000100004224	mov	x0, x22
0000000100004228	mov	x2, x8
000000010000422c	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100004230	mov	x0, x22
0000000100004234	bl	0x1000094e0
0000000100004238	mov	x28, x0
000000010000423c	ldr	x19, [sp, #0x40]
0000000100004240	mov	x1, x19
0000000100004244	bl	0x100008bbc
0000000100004248	mov	w3, #0x0
000000010000424c	mov	x0, x22
0000000100004250	mov	x1, x28
0000000100004254	mov	x2, x19
0000000100004258	bl	0x100007098
000000010000425c	adr	x1, #193675 ; literal pool for: "ExecuteAllowed"
0000000100004260	nop
0000000100004264	mov	x0, x28
0000000100004268	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000426c	mov	x19, x0
0000000100004270	cbz	x19, 0x10000428c
0000000100004274	mov	x0, x19
0000000100004278	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000427c	nop
0000000100004280	ldr	x8, #0x3be20 ; literal pool symbol address: __xpc_type_bool
0000000100004284	cmp	x0, x8
0000000100004288	b.eq	0x1000044e4
000000010000428c	str	x28, [sp, #0x28]
0000000100004290	adr	x1, #191736 ; literal pool for: "SystemApp"
0000000100004294	nop
0000000100004298	mov	x0, x22
000000010000429c	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
00000001000042a0	mov	x19, x0
00000001000042a4	orr	w1, wzr, #0x3
00000001000042a8	mov	x0, x25
00000001000042ac	bl	0x100009be8
00000001000042b0	mov	x28, x0
00000001000042b4	orr	x8, x26, #0x80
00000001000042b8	tst	w19, w28
00000001000042bc	csel	x26, x8, x26, ne
00000001000042c0	ldp	x0, x8, [sp, #0x38]
00000001000042c4	str	x8, [sp]
00000001000042c8	mov	x1, x25
00000001000042cc	mov	x2, x23
00000001000042d0	mov	x3, x27
00000001000042d4	ldr	x4, [sp, #0x30]
00000001000042d8	mov	x5, x24
00000001000042dc	mov	x6, x26
00000001000042e0	mov	x7, x21
00000001000042e4	bl	0x100004b34
00000001000042e8	mov	x23, x0
00000001000042ec	cbz	x23, 0x10000442c
00000001000042f0	eor	w8, w28, #0x1
00000001000042f4	orr	w9, w19, w8
00000001000042f8	ldr	x8, [x23, #0x458]
00000001000042fc	mov	x24, x28
0000000100004300	tbnz	w9, #0x0, 0x10000430c
0000000100004304	orr	x8, x8, #0x40000000000
0000000100004308	str	x8, [x23, #0x458]
000000010000430c	mov	x9, #-0x10000001
0000000100004310	movk	x9, #0xfdff, lsl #32
0000000100004314	and	x8, x8, x9
0000000100004318	ldr	x9, [sp, #0x20]
000000010000431c	orr	x8, x8, x9
0000000100004320	str	x8, [x23, #0x458]
0000000100004324	orr	w1, wzr, #0x1
0000000100004328	mov	x0, x23
000000010000432c	ldr	x21, [sp, #0x40]
0000000100004330	mov	x2, x21
0000000100004334	mov	x3, #0x0
0000000100004338	bl	0x10000e39c
000000010000433c	mov	x19, x0
0000000100004340	adr	x2, #5704
0000000100004344	nop
0000000100004348	mov	x0, x22
000000010000434c	mov	x1, x19
0000000100004350	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100004354	mov	x0, x19
0000000100004358	bl	0x10000e470
000000010000435c	mov	x0, x23
0000000100004360	ldr	x19, [sp, #0x28]
0000000100004364	mov	x1, x19
0000000100004368	mov	x2, x21
000000010000436c	bl	0x100008d74
0000000100004370	mov	x0, x19
0000000100004374	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100004378	ldr	x8, [x23, #0x458]
000000010000437c	tbz	x8, #0x22, 0x100004390
0000000100004380	ldr	x9, [x23, #0x268]
0000000100004384	cbnz	x9, 0x100004390
0000000100004388	and	x8, x8, #0xfffffffbffffffff
000000010000438c	str	x8, [x23, #0x458]
0000000100004390	and	x9, x8, #0x100000
0000000100004394	and	x10, x26, #0x10
0000000100004398	orr	x9, x9, x10
000000010000439c	ldr	x28, [sp, #0x40]
00000001000043a0	cbz	x9, 0x1000043ac
00000001000043a4	orr	x8, x8, #0x2000000
00000001000043a8	str	x8, [x23, #0x458]
00000001000043ac	ubfx	x9, x8, #32, #1
00000001000043b0	orr	w9, w24, w9
00000001000043b4	cmp	w9, #0x1
00000001000043b8	b.ne	0x100004484
00000001000043bc	orr	w9, wzr, #0x100
00000001000043c0	str	w9, [x23, #0x2c0]
00000001000043c4	orr	x9, x8, #0x2000
00000001000043c8	str	x9, [x23, #0x458]
00000001000043cc	tbz	x8, #0x20, 0x1000043d8
00000001000043d0	orr	w8, wzr, #0x10
00000001000043d4	str	w8, [x23, #0x2e0]
00000001000043d8	and	x8, x9, #0xfffffffffffff9ff
00000001000043dc	str	x8, [x23, #0x458]
00000001000043e0	b	0x100004490
00000001000043e4	mov	w8, #0x25
00000001000043e8	mov	x23, #0x0
00000001000043ec	b	0x100004454
00000001000043f0	adr	x1, #191531 ; literal pool for: "ProgramArguments"
00000001000043f4	nop
00000001000043f8	mov	x0, x22
00000001000043fc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100004400	mov	x19, x0
0000000100004404	cbz	x19, 0x100004420
0000000100004408	mov	x0, x19
000000010000440c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100004410	nop
0000000100004414	ldr	x8, #0x3bc84 ; literal pool symbol address: __xpc_type_array
0000000100004418	cmp	x0, x8
000000010000441c	b.eq	0x10000450c
0000000100004420	adr	x2, #198101 ; literal pool for: "Service specifies neither Program nor ProgramArguments."
0000000100004424	nop
0000000100004428	b	0x100004440
000000010000442c	ldr	x0, [sp, #0x28]
0000000100004430	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100004434	b	0x100003ee0
0000000100004438	adr	x2, #198032 ; literal pool for: "Service specifies non-absolute Program path."
000000010000443c	nop
0000000100004440	orr	w1, wzr, #0x3
0000000100004444	mov	x0, x28
0000000100004448	bl	0x10000ce7c
000000010000444c	mov	x23, #0x0
0000000100004450	mov	w8, #0x6f
0000000100004454	str	w8, [x21]
0000000100004458	mov	x0, x28
000000010000445c	bl	0x10000ce54
0000000100004460	mov	x0, x23
0000000100004464	ldp	x29, x30, [sp, #0xa0]
0000000100004468	ldp	x20, x19, [sp, #0x90]
000000010000446c	ldp	x22, x21, [sp, #0x80]
0000000100004470	ldp	x24, x23, [sp, #0x70]
0000000100004474	ldp	x26, x25, [sp, #0x60]
0000000100004478	ldp	x28, x27, [sp, #0x50]
000000010000447c	add	sp, sp, #0xb0
0000000100004480	ret
0000000100004484	ldr	w9, [x23, #0x2c0]
0000000100004488	cmp	w9, #0x100
000000010000448c	b.ne	0x100004498
0000000100004490	orr	x8, x8, #0x20000000
0000000100004494	str	x8, [x23, #0x458]
0000000100004498	mov	x0, x23
000000010000449c	mov	x1, x20
00000001000044a0	mov	x2, x28
00000001000044a4	bl	0x100004edc
00000001000044a8	ldrb	w8, [x23, #0x45c]
00000001000044ac	tbz	w8, #0x0, 0x10000453c
00000001000044b0	ldr	x8, [x20, #0x38]
00000001000044b4	cbz	x8, 0x100004538
00000001000044b8	add	x8, x8, #0x460
00000001000044bc	str	x8, [sp]
00000001000044c0	adr	x2, #198103 ; literal pool for: "Service tried to claim home screen from: %s"
00000001000044c4	nop
00000001000044c8	orr	w1, wzr, #0x3
00000001000044cc	mov	x0, x23
00000001000044d0	bl	0x1000118ec
00000001000044d4	ldr	x8, [x23, #0x458]
00000001000044d8	and	x8, x8, #0xfffffffeffffffff
00000001000044dc	str	x8, [x23, #0x458]
00000001000044e0	b	0x10000453c
00000001000044e4	mov	x0, x19
00000001000044e8	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
00000001000044ec	tbnz	w26, #0x9, 0x10000428c
00000001000044f0	cbnz	w0, 0x10000428c
00000001000044f4	mov	w8, #0x9d
00000001000044f8	str	w8, [x21]
00000001000044fc	mov	x0, x28
0000000100004500	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100004504	mov	x23, #0x0
0000000100004508	b	0x100003ee0
000000010000450c	mov	x0, x19
0000000100004510	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100004514	cbz	x0, 0x100004598
0000000100004518	mov	x0, x19
000000010000451c	mov	x1, #0x0
0000000100004520	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
0000000100004524	mov	x27, x0
0000000100004528	cbz	x27, 0x1000045a4
000000010000452c	mov	x8, #0x10000000
0000000100004530	movk	x8, #0x200, lsl #32
0000000100004534	b	0x1000041fc
0000000100004538	str	x23, [x20, #0x38]
000000010000453c	ldr	w8, [x23, #0x2c0]
0000000100004540	cmp	w8, #0x300
0000000100004544	b.ne	0x100004560
0000000100004548	adr	x8, #261951
000000010000454c	nop
0000000100004550	ldrb	w8, [x8]
0000000100004554	cbnz	w8, 0x100004560
0000000100004558	mov	w8, #0x11
000000010000455c	str	w8, [x23, #0x2d8]
0000000100004560	mov	x0, x23
0000000100004564	bl	0x100011a98
0000000100004568	cbz	w0, 0x100004458
000000010000456c	mov	x1, x0
0000000100004570	mov	x0, x23
0000000100004574	bl	0x100010bb8
0000000100004578	cbz	w0, 0x100004458
000000010000457c	sxtw	x2, w0
0000000100004580	adr	x0, #55336
0000000100004584	nop
0000000100004588	mov	x1, x23
000000010000458c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100004590	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100004594	b	0x100004458
0000000100004598	adr	x2, #197781 ; literal pool for: "Service specifies no Program and empty ProgramArguments."
000000010000459c	nop
00000001000045a0	b	0x100004440
00000001000045a4	adr	x2, #197826 ; literal pool for: "Service does not specify a valid argument array."
00000001000045a8	nop
00000001000045ac	b	0x100004440
00000001000045b0	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000045b4	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000045b8	brk	#0x1
00000001000045bc	sub	sp, sp, #0x1b0
00000001000045c0	stp	x28, x27, [sp, #0x150]
00000001000045c4	stp	x26, x25, [sp, #0x160]
00000001000045c8	stp	x24, x23, [sp, #0x170]
00000001000045cc	stp	x22, x21, [sp, #0x180]
00000001000045d0	stp	x20, x19, [sp, #0x190]
00000001000045d4	stp	x29, x30, [sp, #0x1a0]
00000001000045d8	add	x29, sp, #0x1a0
00000001000045dc	mov	x24, x6
00000001000045e0	mov	x25, x5
00000001000045e4	mov	x20, x4
00000001000045e8	mov	x22, x3
00000001000045ec	mov	x23, x2
00000001000045f0	mov	x21, x1
00000001000045f4	mov	x19, x0
00000001000045f8	nop
00000001000045fc	ldr	x8, #0x3ba1c ; literal pool symbol address: ___stack_chk_guard
0000000100004600	ldr	x8, [x8]
0000000100004604	stur	x8, [x29, #-0x58]
0000000100004608	ldr	x8, [x19, #0x458]
000000010000460c	tbnz	w8, #0x14, 0x100004634
0000000100004610	ldr	x9, [x19, #0xe0]
0000000100004614	ldr	x9, [x9, #0x38]
0000000100004618	cmp	x9, x19
000000010000461c	b.eq	0x100004634
0000000100004620	tbnz	x8, #0x20, 0x100004634
0000000100004624	tbnz	w8, #0xd, 0x100004634
0000000100004628	tbnz	w8, #0x7, 0x100004634
000000010000462c	ldr	x9, [x19, #0xa0]
0000000100004630	cbz	x9, 0x10000467c
0000000100004634	mov	x20, #0x0
0000000100004638	mov	w8, #0x88
000000010000463c	str	w8, [x24]
0000000100004640	ldur	x8, [x29, #-0x58]
0000000100004644	nop
0000000100004648	ldr	x9, #0x3b9d0 ; literal pool symbol address: ___stack_chk_guard
000000010000464c	ldr	x9, [x9]
0000000100004650	cmp	x9, x8
0000000100004654	b.ne	0x100004b24
0000000100004658	mov	x0, x20
000000010000465c	ldp	x29, x30, [sp, #0x1a0]
0000000100004660	ldp	x20, x19, [sp, #0x190]
0000000100004664	ldp	x22, x21, [sp, #0x180]
0000000100004668	ldp	x24, x23, [sp, #0x170]
000000010000466c	ldp	x26, x25, [sp, #0x160]
0000000100004670	ldp	x28, x27, [sp, #0x150]
0000000100004674	add	sp, sp, #0x1b0
0000000100004678	ret
000000010000467c	mov	w9, #0x8100
0000000100004680	tst	x8, x9
0000000100004684	b.eq	0x100004714
0000000100004688	tbnz	w8, #0x10, 0x100004714
000000010000468c	tbnz	w8, #0x13, 0x100004714
0000000100004690	tbz	x8, #0x29, 0x100004b28
0000000100004694	sub	x26, x29, #0x7d
0000000100004698	sub	x1, x29, #0x7d
000000010000469c	mov	x0, x21
00000001000046a0	bl	0x100031874 ; symbol stub for: _uuid_unparse
00000001000046a4	add	x8, x19, #0x460
00000001000046a8	adr	x4, #191022 ; literal pool for: "%s.%s"
00000001000046ac	nop
00000001000046b0	stp	x8, x26, [sp]
00000001000046b4	add	x0, sp, #0x23
00000001000046b8	orr	w1, wzr, #0x100
00000001000046bc	orr	w3, wzr, #0x100
00000001000046c0	mov	w2, #0x0
00000001000046c4	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
00000001000046c8	ldr	w8, [x19, #0x174]
00000001000046cc	cbz	w8, 0x100004720
00000001000046d0	mov	x0, #0x0
00000001000046d4	mov	x1, #0x0
00000001000046d8	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
00000001000046dc	mov	x26, x0
00000001000046e0	ldr	w8, [x19, #0x174]
00000001000046e4	cbz	w8, 0x100004724
00000001000046e8	mov	x27, #0x0
00000001000046ec	ldr	x8, [x19, #0x178]
00000001000046f0	ldr	x2, [x8, x27, lsl #3]
00000001000046f4	mov	x1, #-0x1
00000001000046f8	mov	x0, x26
00000001000046fc	bl	0x10003191c ; symbol stub for: _xpc_array_set_string
0000000100004700	add	x27, x27, #0x1
0000000100004704	ldr	w8, [x19, #0x174]
0000000100004708	cmp	x27, x8
000000010000470c	b.lo	0x1000046ec
0000000100004710	b	0x100004724
0000000100004714	mov	x20, #0x0
0000000100004718	mov	w8, #0x89
000000010000471c	b	0x10000463c
0000000100004720	mov	x26, #0x0
0000000100004724	ldr	x0, [x19, #0xe0]
0000000100004728	add	x1, sp, #0x23
000000010000472c	bl	0x10000ce0c
0000000100004730	mov	x27, x0
0000000100004734	ldr	x0, [x19, #0x138]
0000000100004738	ldr	x3, [x19, #0x220]
000000010000473c	orr	x6, x25, #0x4
0000000100004740	str	x27, [sp]
0000000100004744	add	x2, sp, #0x23
0000000100004748	mov	x1, x22
000000010000474c	mov	x4, x26
0000000100004750	mov	x5, x20
0000000100004754	mov	x7, x24
0000000100004758	bl	0x100004b34
000000010000475c	mov	x20, x0
0000000100004760	cbz	x20, 0x100004774
0000000100004764	ldr	x1, [x19, #0xe0]
0000000100004768	mov	x0, x20
000000010000476c	mov	x2, x27
0000000100004770	bl	0x100004edc
0000000100004774	mov	x0, x27
0000000100004778	bl	0x10000ce54
000000010000477c	cbz	x26, 0x100004788
0000000100004780	mov	x0, x26
0000000100004784	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100004788	cbz	x20, 0x100004640
000000010000478c	cmn	w23, #0x1
0000000100004790	b.eq	0x1000047e4
0000000100004794	ldp	x1, x2, [x19, #0x188]
0000000100004798	ldr	x3, [x19, #0x198]
000000010000479c	mov	x4, x23
00000001000047a0	mov	x0, x20
00000001000047a4	bl	0x100011c78
00000001000047a8	mov	x23, x0
00000001000047ac	cbz	w23, 0x1000047e4
00000001000047b0	mov	x0, x23
00000001000047b4	bl	0x100031724 ; symbol stub for: _strerror
00000001000047b8	stp	x23, x0, [sp]
00000001000047bc	adr	x2, #190752 ; literal pool for: "Could not set up nowait inetd service: %d: %s"
00000001000047c0	nop
00000001000047c4	orr	w1, wzr, #0x3
00000001000047c8	mov	x0, x19
00000001000047cc	bl	0x1000118ec
00000001000047d0	mov	w1, #0x0
00000001000047d4	mov	x0, x20
00000001000047d8	bl	0x10000e4a4
00000001000047dc	mov	x20, #0x0
00000001000047e0	b	0x100004640
00000001000047e4	cbnz	x22, 0x1000047f8
00000001000047e8	ldr	q0, [x19, #0x150]
00000001000047ec	str	q0, [x20, #0x150]
00000001000047f0	ldr	q0, [x19, #0x140]
00000001000047f4	str	q0, [x20, #0x140]
00000001000047f8	ldr	x0, [x19, #0x208]
00000001000047fc	cbz	x0, 0x100004808
0000000100004800	bl	0x10000d520
0000000100004804	str	x0, [x20, #0x208]
0000000100004808	ldr	x0, [x19, #0x180]
000000010000480c	cbz	x0, 0x100004818
0000000100004810	bl	0x10000d520
0000000100004814	str	x0, [x20, #0x180]
0000000100004818	ldr	x0, [x19, #0x2b8]
000000010000481c	cbz	x0, 0x100004828
0000000100004820	bl	0x10000d520
0000000100004824	str	x0, [x20, #0x2b8]
0000000100004828	ldr	x0, [x19, #0x188]
000000010000482c	cbz	x0, 0x100004838
0000000100004830	bl	0x10000d520
0000000100004834	str	x0, [x20, #0x188]
0000000100004838	ldr	x0, [x19, #0x190]
000000010000483c	cbz	x0, 0x100004848
0000000100004840	bl	0x10000d520
0000000100004844	str	x0, [x20, #0x190]
0000000100004848	ldr	x0, [x19, #0x198]
000000010000484c	cbz	x0, 0x100004858
0000000100004850	bl	0x10000d520
0000000100004854	str	x0, [x20, #0x198]
0000000100004858	ldr	x0, [x19, #0x1a8]
000000010000485c	cbz	x0, 0x100004868
0000000100004860	bl	0x10000d520
0000000100004864	str	x0, [x20, #0x1a8]
0000000100004868	ldr	x0, [x19, #0x1a0]
000000010000486c	cbz	x0, 0x100004884
0000000100004870	bl	0x10003173c ; symbol stub for: _strlen
0000000100004874	ldr	x8, [x20, #0x218]
0000000100004878	mvn	x9, x0
000000010000487c	add	x8, x8, x9
0000000100004880	str	x8, [x20, #0x218]
0000000100004884	add	x0, x20, #0x160
0000000100004888	mov	x1, x21
000000010000488c	bl	0x10003185c ; symbol stub for: _uuid_copy
0000000100004890	ldr	x0, [x19, #0x268]
0000000100004894	cbz	x0, 0x1000048a0
0000000100004898	bl	0x10000d520
000000010000489c	str	x0, [x20, #0x268]
00000001000048a0	ldr	x0, [x19, #0x270]
00000001000048a4	cbz	x0, 0x1000048b0
00000001000048a8	bl	0x10000d520
00000001000048ac	str	x0, [x20, #0x270]
00000001000048b0	ldr	x8, [x19, #0x2c0]
00000001000048b4	str	x8, [x20, #0x2c0]
00000001000048b8	add	x8, x19, #0x2dc
00000001000048bc	add	x9, x20, #0x2dc
00000001000048c0	ldr	x8, [x8]
00000001000048c4	str	x8, [x9]
00000001000048c8	add	x8, x19, #0x2e4
00000001000048cc	add	x9, x20, #0x2e4
00000001000048d0	ldr	x8, [x8]
00000001000048d4	str	x8, [x9]
00000001000048d8	ldr	w8, [x19, #0x2ec]
00000001000048dc	str	w8, [x20, #0x2ec]
00000001000048e0	ldr	x8, [x19, #0x2f0]
00000001000048e4	str	x8, [x20, #0x2f0]
00000001000048e8	ldr	x8, [x20, #0x458]
00000001000048ec	orr	x8, x8, #0x100000000000
00000001000048f0	str	x8, [x20, #0x458]
00000001000048f4	ldrb	w8, [x19, #0x30a]
00000001000048f8	strb	w8, [x20, #0x30a]
00000001000048fc	ldr	w8, [x19, #0x30c]
0000000100004900	str	w8, [x20, #0x30c]
0000000100004904	ldr	x8, [x19, #0x2c8]
0000000100004908	cbz	x8, 0x100004934
000000010000490c	ldr	x8, [x19, #0x2d0]
0000000100004910	str	x8, [x20, #0x2d0]
0000000100004914	ldr	x8, [x19, #0x2d0]
0000000100004918	lsl	x21, x8, #2
000000010000491c	mov	x0, x21
0000000100004920	bl	0x10000d408
0000000100004924	str	x0, [x20, #0x2c8]
0000000100004928	ldr	x1, [x19, #0x2c8]
000000010000492c	mov	x2, x21
0000000100004930	bl	0x100031328 ; symbol stub for: _memcpy
0000000100004934	ldr	w8, [x19, #0x2d8]
0000000100004938	str	w8, [x20, #0x2d8]
000000010000493c	ldr	x21, [x19, #0x300]
0000000100004940	cbz	x21, 0x100004994
0000000100004944	add	x22, x20, #0x300
0000000100004948	str	xzr, [sp, #0x18]
000000010000494c	add	x1, sp, #0x18
0000000100004950	mov	x0, x21
0000000100004954	bl	0x10000e5a0
0000000100004958	ldr	x8, [x22]
000000010000495c	str	x8, [x0]
0000000100004960	cbz	x8, 0x100004968
0000000100004964	str	x0, [x8, #0x8]
0000000100004968	str	x0, [x20, #0x300]
000000010000496c	str	x22, [x0, #0x8]
0000000100004970	ldrh	w8, [x20, #0x308]
0000000100004974	add	w8, w8, #0x1
0000000100004978	strh	w8, [x20, #0x308]
000000010000497c	ldr	x8, [sp, #0x18]
0000000100004980	ldr	x9, [x20, #0x218]
0000000100004984	add	x8, x9, x8
0000000100004988	str	x8, [x20, #0x218]
000000010000498c	ldr	x21, [x21]
0000000100004990	cbnz	x21, 0x100004948
0000000100004994	ldr	x8, [x19, #0x98]
0000000100004998	cbz	x8, 0x1000049b8
000000010000499c	ldrb	w8, [x19, #0x459]
00000001000049a0	tbnz	w8, #0x7, 0x1000049b8
00000001000049a4	adr	x2, #190310 ; literal pool for: "Service instances do not support events yet."
00000001000049a8	nop
00000001000049ac	mov	w1, #0x5
00000001000049b0	mov	x0, x20
00000001000049b4	bl	0x1000118ec
00000001000049b8	ldr	x9, [x19, #0x458]
00000001000049bc	ldr	x8, [x20, #0x458]
00000001000049c0	bfxil	x8, x9, #0, #1
00000001000049c4	str	x8, [x20, #0x458]
00000001000049c8	ldr	x9, [x19, #0x458]
00000001000049cc	lsr	x9, x9, #1
00000001000049d0	bfi	x8, x9, #1, #1
00000001000049d4	str	x8, [x20, #0x458]
00000001000049d8	ldr	x9, [x19, #0x458]
00000001000049dc	lsr	x9, x9, #2
00000001000049e0	bfi	x8, x9, #2, #1
00000001000049e4	str	x8, [x20, #0x458]
00000001000049e8	ldr	x9, [x19, #0x458]
00000001000049ec	lsr	x9, x9, #3
00000001000049f0	bfi	x8, x9, #3, #1
00000001000049f4	str	x8, [x20, #0x458]
00000001000049f8	ldr	x9, [x19, #0x458]
00000001000049fc	lsr	x9, x9, #5
0000000100004a00	bfi	x8, x9, #5, #1
0000000100004a04	str	x8, [x20, #0x458]
0000000100004a08	ldr	x9, [x19, #0x458]
0000000100004a0c	lsr	x9, x9, #6
0000000100004a10	bfi	x8, x9, #6, #1
0000000100004a14	str	x8, [x20, #0x458]
0000000100004a18	ldr	x9, [x19, #0x458]
0000000100004a1c	lsr	x9, x9, #9
0000000100004a20	bfi	x8, x9, #9, #1
0000000100004a24	str	x8, [x20, #0x458]
0000000100004a28	ldr	x9, [x19, #0x458]
0000000100004a2c	lsr	x9, x9, #10
0000000100004a30	bfi	x8, x9, #10, #1
0000000100004a34	str	x8, [x20, #0x458]
0000000100004a38	ldr	x9, [x19, #0x458]
0000000100004a3c	lsr	x9, x9, #11
0000000100004a40	bfi	x8, x9, #11, #1
0000000100004a44	str	x8, [x20, #0x458]
0000000100004a48	ldr	x9, [x19, #0x458]
0000000100004a4c	lsr	x9, x9, #17
0000000100004a50	bfi	x8, x9, #17, #1
0000000100004a54	str	x8, [x20, #0x458]
0000000100004a58	ldr	x9, [x19, #0x458]
0000000100004a5c	lsr	x9, x9, #26
0000000100004a60	bfi	x8, x9, #26, #1
0000000100004a64	str	x8, [x20, #0x458]
0000000100004a68	ldr	x9, [x19, #0x458]
0000000100004a6c	lsr	x9, x9, #27
0000000100004a70	bfi	x8, x9, #27, #1
0000000100004a74	str	x8, [x20, #0x458]
0000000100004a78	ldr	x9, [x19, #0x458]
0000000100004a7c	lsr	x9, x9, #28
0000000100004a80	bfi	x8, x9, #28, #1
0000000100004a84	str	x8, [x20, #0x458]
0000000100004a88	ldr	x9, [x19, #0x458]
0000000100004a8c	lsr	x9, x9, #33
0000000100004a90	bfi	x8, x9, #33, #1
0000000100004a94	str	x8, [x20, #0x458]
0000000100004a98	ldr	x9, [x19, #0x2f8]
0000000100004a9c	str	x9, [x20, #0x2f8]
0000000100004aa0	ldr	x9, [x19, #0x458]
0000000100004aa4	lsr	x9, x9, #36
0000000100004aa8	bfi	x8, x9, #36, #1
0000000100004aac	str	x8, [x20, #0x458]
0000000100004ab0	ldr	x9, [x19, #0x458]
0000000100004ab4	lsr	x9, x9, #37
0000000100004ab8	bfi	x8, x9, #37, #1
0000000100004abc	str	x8, [x20, #0x458]
0000000100004ac0	ldr	x9, [x19, #0x458]
0000000100004ac4	lsr	x9, x9, #43
0000000100004ac8	bfi	x8, x9, #43, #1
0000000100004acc	str	x8, [x20, #0x458]
0000000100004ad0	ldr	x9, [x19, #0x458]
0000000100004ad4	lsr	x9, x9, #46
0000000100004ad8	bfi	x8, x9, #46, #1
0000000100004adc	str	x8, [x20, #0x458]
0000000100004ae0	ldr	x9, [x19, #0x458]
0000000100004ae4	lsr	x9, x9, #47
0000000100004ae8	bfi	x8, x9, #47, #1
0000000100004aec	str	x8, [x20, #0x458]
0000000100004af0	ldr	x9, [x19, #0x458]
0000000100004af4	lsr	x9, x9, #49
0000000100004af8	bfi	x8, x9, #49, #1
0000000100004afc	str	x8, [x20, #0x458]
0000000100004b00	ldr	x8, [x19, #0x218]
0000000100004b04	str	x8, [x20, #0x218]
0000000100004b08	adr	x1, #189999 ; literal pool for: "LaunchInstanceID"
0000000100004b0c	nop
0000000100004b10	orr	w3, wzr, #0x1
0000000100004b14	sub	x2, x29, #0x7d
0000000100004b18	mov	x0, x20
0000000100004b1c	bl	0x100003a98
0000000100004b20	b	0x100004640
0000000100004b24	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100004b28	adr	x0, #189815 ; literal pool for: "multiple-instance service has no initialized endpoints"
0000000100004b2c	nop
0000000100004b30	bl	0x100028f84
0000000100004b34	sub	sp, sp, #0xa0
0000000100004b38	stp	d9, d8, [sp, #0x30]
0000000100004b3c	stp	x28, x27, [sp, #0x40]
0000000100004b40	stp	x26, x25, [sp, #0x50]
0000000100004b44	stp	x24, x23, [sp, #0x60]
0000000100004b48	stp	x22, x21, [sp, #0x70]
0000000100004b4c	stp	x20, x19, [sp, #0x80]
0000000100004b50	stp	x29, x30, [sp, #0x90]
0000000100004b54	add	x29, sp, #0x90
0000000100004b58	mov	x26, x7
0000000100004b5c	mov	x23, x6
0000000100004b60	mov	x21, x5
0000000100004b64	mov	x25, x4
0000000100004b68	mov	x19, x3
0000000100004b6c	mov	x20, x2
0000000100004b70	mov	x24, x1
0000000100004b74	mov	x27, x0
0000000100004b78	adr	x1, #190539 ; literal pool for: "shell"
0000000100004b7c	nop
0000000100004b80	mov	x0, x20
0000000100004b84	bl	0x100031700 ; symbol stub for: _strcmp
0000000100004b88	cbz	w0, 0x100004bd0
0000000100004b8c	cbz	x25, 0x100004c04
0000000100004b90	str	x27, [sp, #0x28]
0000000100004b94	ldr	x27, [x29, #0x10]
0000000100004b98	mov	x0, x25
0000000100004b9c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100004ba0	nop
0000000100004ba4	ldr	x8, #0x3b4f4 ; literal pool symbol address: __xpc_type_array
0000000100004ba8	cmp	x0, x8
0000000100004bac	b.eq	0x100004db8
0000000100004bb0	adr	x2, #190489 ; literal pool for: "ProgramArguments is not an array."
0000000100004bb4	nop
0000000100004bb8	orr	w1, wzr, #0x3
0000000100004bbc	mov	x0, x27
0000000100004bc0	bl	0x10000ce7c
0000000100004bc4	mov	x25, #0x0
0000000100004bc8	mov	w8, #0x6f
0000000100004bcc	b	0x100004bd8
0000000100004bd0	mov	x25, #0x0
0000000100004bd4	mov	w8, #0x8c
0000000100004bd8	str	w8, [x26]
0000000100004bdc	mov	x0, x25
0000000100004be0	ldp	x29, x30, [sp, #0x90]
0000000100004be4	ldp	x20, x19, [sp, #0x80]
0000000100004be8	ldp	x22, x21, [sp, #0x70]
0000000100004bec	ldp	x24, x23, [sp, #0x60]
0000000100004bf0	ldp	x26, x25, [sp, #0x50]
0000000100004bf4	ldp	x28, x27, [sp, #0x40]
0000000100004bf8	ldp	d9, d8, [sp, #0x30]
0000000100004bfc	add	sp, sp, #0xa0
0000000100004c00	ret
0000000100004c04	mov	x28, #0x0
0000000100004c08	mov	x22, #0x0
0000000100004c0c	mov	w26, #0x0
0000000100004c10	mov	x0, x20
0000000100004c14	bl	0x10003173c ; symbol stub for: _strlen
0000000100004c18	add	x0, x0, #0x1
0000000100004c1c	bl	0x10000eda8
0000000100004c20	mov	x25, x0
0000000100004c24	mov	x0, x27
0000000100004c28	bl	0x100031718 ; symbol stub for: _strdup
0000000100004c2c	str	x0, [x25, #0x138]
0000000100004c30	cbz	x24, 0x100004c44
0000000100004c34	ldr	q0, [x24, #0x10]
0000000100004c38	str	q0, [x25, #0x150]
0000000100004c3c	ldr	q0, [x24]
0000000100004c40	str	q0, [x25, #0x140]
0000000100004c44	str	wzr, [x25, #0x170]
0000000100004c48	mov	x0, x19
0000000100004c4c	bl	0x10003173c ; symbol stub for: _strlen
0000000100004c50	add	x8, x22, x0
0000000100004c54	add	x8, x8, #0xa1
0000000100004c58	str	x8, [x25, #0x218]
0000000100004c5c	mov	x0, x19
0000000100004c60	bl	0x10000d520
0000000100004c64	str	x0, [x25, #0x220]
0000000100004c68	str	w26, [x25, #0x174]
0000000100004c6c	str	x28, [x25, #0x178]
0000000100004c70	mov	w8, #0xa
0000000100004c74	str	w8, [x25, #0x28c]
0000000100004c78	nop
0000000100004c7c	nop
0000000100004c80	ldr	w8, 0x100043500
0000000100004c84	str	w8, [x25, #0x288]
0000000100004c88	add	x0, x25, #0x358
0000000100004c8c	mov	w2, #0xb8
0000000100004c90	mov	w1, #0x0
0000000100004c94	bl	0x100031340 ; symbol stub for: _memset
0000000100004c98	mov	w8, #0x5
0000000100004c9c	nop
0000000100004ca0	nop
0000000100004ca4	str	w8, [x25, #0x2a0]
0000000100004ca8	ldr	w8, 0x100043508
0000000100004cac	str	w8, [x25, #0x2a4]
0000000100004cb0	nop
0000000100004cb4	ldr	d0, 0x10003de80
0000000100004cb8	str	d0, [x25, #0x2c0]
0000000100004cbc	add	x8, x25, #0x2dc
0000000100004cc0	nop
0000000100004cc4	ldr	d0, 0x10003de88
0000000100004cc8	str	d0, [x8]
0000000100004ccc	strh	wzr, [x25, #0x448]
0000000100004cd0	movi	d0, #0x000000ffffffff
0000000100004cd4	str	d0, [x25, #0x440]
0000000100004cd8	add	x8, x25, #0x2e4
0000000100004cdc	movi	d8, #0xffffffffffffffff
0000000100004ce0	str	d8, [x8]
0000000100004ce4	strb	wzr, [x25, #0x30a]
0000000100004ce8	str	wzr, [x25, #0x30c]
0000000100004cec	str	wzr, [x25, #0x2d8]
0000000100004cf0	ldr	x8, [x21]
0000000100004cf4	str	x8, [x25, #0x1c8]
0000000100004cf8	ldr	x8, [x21, #0x18]
0000000100004cfc	str	x8, [x25, #0x1e0]
0000000100004d00	ldr	x8, [x21, #0x20]
0000000100004d04	str	x8, [x25, #0x1e8]
0000000100004d08	ldr	x8, [x21, #0x28]
0000000100004d0c	str	x8, [x25, #0x1f0]
0000000100004d10	ldr	x8, [x21, #0x8]
0000000100004d14	str	x8, [x25, #0x1d0]
0000000100004d18	ldr	x8, [x21, #0x10]
0000000100004d1c	str	x8, [x25, #0x1d8]
0000000100004d20	ldr	x8, [x21, #0x30]
0000000100004d24	str	x8, [x25, #0x1f8]
0000000100004d28	ldr	x8, [x21, #0x38]
0000000100004d2c	str	x8, [x25, #0x200]
0000000100004d30	add	x0, x25, #0x460
0000000100004d34	mov	x1, x20
0000000100004d38	bl	0x10003170c ; symbol stub for: _strcpy
0000000100004d3c	str	d8, [x25, #0x248]
0000000100004d40	mov	w8, #-0x1
0000000100004d44	str	w8, [x25, #0x250]
0000000100004d48	ldr	x8, [x25, #0x458]
0000000100004d4c	and	x8, x8, #0xffffbfffffffffff
0000000100004d50	mov	w9, #0x600
0000000100004d54	movk	w9, #0x4, lsl #16
0000000100004d58	orr	x8, x8, x9
0000000100004d5c	str	x8, [x25, #0x458]
0000000100004d60	mov	x8, #-0x1
0000000100004d64	stp	x8, x8, [x25, #0x8]
0000000100004d68	stp	x8, x8, [x25, #0x18]
0000000100004d6c	tbnz	w23, #0x2, 0x100004da0
0000000100004d70	adr	x1, #190120 ; literal pool for: "XPC_SERVICE_NAME"
0000000100004d74	nop
0000000100004d78	orr	w3, wzr, #0x1
0000000100004d7c	mov	x0, x25
0000000100004d80	mov	x2, x20
0000000100004d84	bl	0x100003a98
0000000100004d88	tbz	w23, #0x7, 0x100004da4
0000000100004d8c	ldr	x8, [x25, #0x458]
0000000100004d90	orr	x8, x8, #0x80000000000
0000000100004d94	str	x8, [x25, #0x458]
0000000100004d98	tbz	w23, #0x9, 0x100004bdc
0000000100004d9c	b	0x100004da8
0000000100004da0	tbnz	w23, #0x7, 0x100004d8c
0000000100004da4	tbz	w23, #0x9, 0x100004bdc
0000000100004da8	ldr	x8, [x25, #0x458]
0000000100004dac	orr	x8, x8, #0x200000000000
0000000100004db0	str	x8, [x25, #0x458]
0000000100004db4	b	0x100004bdc
0000000100004db8	mov	x0, x25
0000000100004dbc	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100004dc0	stp	x24, x19, [sp, #0x18]
0000000100004dc4	cbz	x0, 0x100004e1c
0000000100004dc8	mov	x28, #0x0
0000000100004dcc	mov	x22, #0x0
0000000100004dd0	nop
0000000100004dd4	ldr	x24, #0x3b30c ; literal pool symbol address: __xpc_type_string
0000000100004dd8	mov	x0, x25
0000000100004ddc	mov	x1, x28
0000000100004de0	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100004de4	mov	x19, x0
0000000100004de8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100004dec	cmp	x0, x24
0000000100004df0	b.ne	0x100004eb8
0000000100004df4	mov	x0, x19
0000000100004df8	bl	0x100031ba4 ; symbol stub for: _xpc_string_get_length
0000000100004dfc	add	x8, x22, x0
0000000100004e00	add	x22, x8, #0x1
0000000100004e04	add	x28, x28, #0x1
0000000100004e08	mov	x0, x25
0000000100004e0c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100004e10	cmp	x28, x0
0000000100004e14	b.lo	0x100004dd8
0000000100004e18	b	0x100004e20
0000000100004e1c	mov	x22, #0x0
0000000100004e20	mov	x0, x25
0000000100004e24	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100004e28	mov	x24, x0
0000000100004e2c	lsl	x8, x24, #3
0000000100004e30	add	x8, x8, #0x8
0000000100004e34	and	x19, x8, #0x7fffffff8
0000000100004e38	add	x0, x19, x22
0000000100004e3c	bl	0x10000d460
0000000100004e40	mov	x28, x0
0000000100004e44	cbz	x28, 0x100004ec4
0000000100004e48	str	x23, [sp, #0x10]
0000000100004e4c	ands	x23, x24, #0xffffffff
0000000100004e50	mov	x26, x24
0000000100004e54	b.eq	0x100004ed0
0000000100004e58	str	x26, [sp, #0x8]
0000000100004e5c	mov	x26, #0x0
0000000100004e60	add	x19, x28, x19
0000000100004e64	mov	x0, x25
0000000100004e68	mov	x1, x26
0000000100004e6c	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100004e70	mov	x27, x0
0000000100004e74	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100004e78	mov	x24, x0
0000000100004e7c	mov	x0, x27
0000000100004e80	bl	0x100031ba4 ; symbol stub for: _xpc_string_get_length
0000000100004e84	str	x19, [x28, x26, lsl #3]
0000000100004e88	add	x27, x19, x0
0000000100004e8c	mov	x0, x19
0000000100004e90	mov	x1, x24
0000000100004e94	bl	0x10003170c ; symbol stub for: _strcpy
0000000100004e98	add	x19, x27, #0x1
0000000100004e9c	add	x26, x26, #0x1
0000000100004ea0	cmp	x23, x26
0000000100004ea4	b.ne	0x100004e64
0000000100004ea8	ldp	x23, x24, [sp, #0x10]
0000000100004eac	ldp	x19, x27, [sp, #0x20]
0000000100004eb0	ldr	x26, [sp, #0x8]
0000000100004eb4	b	0x100004c10
0000000100004eb8	adr	x2, #189747 ; literal pool for: "ProgramArguments is not an array of strings."
0000000100004ebc	nop
0000000100004ec0	b	0x100004bb8
0000000100004ec4	mov	x25, #0x0
0000000100004ec8	orr	w8, wzr, #0xc
0000000100004ecc	b	0x100004bd8
0000000100004ed0	ldp	x23, x24, [sp, #0x10]
0000000100004ed4	ldp	x19, x27, [sp, #0x20]
0000000100004ed8	b	0x100004c10
0000000100004edc	sub	sp, sp, #0x70
0000000100004ee0	stp	x24, x23, [sp, #0x30]
0000000100004ee4	stp	x22, x21, [sp, #0x40]
0000000100004ee8	stp	x20, x19, [sp, #0x50]
0000000100004eec	stp	x29, x30, [sp, #0x60]
0000000100004ef0	add	x29, sp, #0x60
0000000100004ef4	mov	x21, x2
0000000100004ef8	mov	x20, x1
0000000100004efc	mov	x19, x0
0000000100004f00	ldr	x8, [x19, #0x458]
0000000100004f04	tbnz	w8, #0x1e, 0x1000051a4
0000000100004f08	orr	x8, x8, #0x40000000
0000000100004f0c	str	x8, [x19, #0x458]
0000000100004f10	mov	x0, x20
0000000100004f14	bl	0x10001dddc
0000000100004f18	mov	x22, x0
0000000100004f1c	ldr	x8, [x19, #0x458]
0000000100004f20	and	x9, x8, #0x200000000
0000000100004f24	adr	x10, #254708
0000000100004f28	nop
0000000100004f2c	cmp	x22, x10
0000000100004f30	ccmp	x9, #0x0, #0x4, ne
0000000100004f34	b.eq	0x100004f58
0000000100004f38	adr	x2, #189748 ; literal pool for: "_AbandonCoalition is only available to Application services."
0000000100004f3c	nop
0000000100004f40	orr	w1, wzr, #0x3
0000000100004f44	mov	x0, x21
0000000100004f48	bl	0x10000ce7c
0000000100004f4c	ldr	x8, [x19, #0x458]
0000000100004f50	and	x8, x8, #0xfffffffdffffffff
0000000100004f54	str	x8, [x19, #0x458]
0000000100004f58	and	x9, x8, #0x800000000000
0000000100004f5c	adr	x24, #254076
0000000100004f60	nop
0000000100004f64	cmp	x22, x24
0000000100004f68	ccmp	x9, #0x0, #0x4, ne
0000000100004f6c	b.eq	0x100004f90
0000000100004f70	adr	x2, #189753 ; literal pool for: "DisallowAllLookups is not supported for non-System services."
0000000100004f74	nop
0000000100004f78	orr	w1, wzr, #0x3
0000000100004f7c	mov	x0, x21
0000000100004f80	bl	0x10000ce7c
0000000100004f84	ldr	x8, [x19, #0x458]
0000000100004f88	and	x8, x8, #0xffff7fffffffffff
0000000100004f8c	str	x8, [x19, #0x458]
0000000100004f90	ldr	x9, [x19, #0x268]
0000000100004f94	cmp	x22, x24
0000000100004f98	ccmp	x9, #0x0, #0x4, ne
0000000100004f9c	b.eq	0x100004fec
0000000100004fa0	tbnz	w8, #0x2, 0x100004fb0
0000000100004fa4	adr	x2, #189817 ; literal pool for: "UserName is not supported for non-System services."
0000000100004fa8	nop
0000000100004fac	b	0x100004fb8
0000000100004fb0	adr	x2, #189750 ; literal pool for: "_RoleAccount is not supported for non-System services."
0000000100004fb4	nop
0000000100004fb8	orr	w1, wzr, #0x3
0000000100004fbc	mov	x0, x21
0000000100004fc0	bl	0x10000ce7c
0000000100004fc4	ldr	x23, [x19, #0x268]
0000000100004fc8	mov	x0, x23
0000000100004fcc	bl	0x10003173c ; symbol stub for: _strlen
0000000100004fd0	ldr	x8, [x19, #0x218]
0000000100004fd4	mvn	x9, x0
0000000100004fd8	add	x8, x8, x9
0000000100004fdc	str	x8, [x19, #0x218]
0000000100004fe0	mov	x0, x23
0000000100004fe4	bl	0x100031010 ; symbol stub for: _free
0000000100004fe8	str	xzr, [x19, #0x268]
0000000100004fec	cmp	x22, x24
0000000100004ff0	b.eq	0x100005038
0000000100004ff4	ldr	x8, [x19, #0x270]
0000000100004ff8	cbz	x8, 0x100005038
0000000100004ffc	adr	x2, #189780 ; literal pool for: "GroupName is not supported for non-System services."
0000000100005000	nop
0000000100005004	orr	w1, wzr, #0x3
0000000100005008	mov	x0, x21
000000010000500c	bl	0x10000ce7c
0000000100005010	ldr	x21, [x19, #0x270]
0000000100005014	mov	x0, x21
0000000100005018	bl	0x10003173c ; symbol stub for: _strlen
000000010000501c	ldr	x8, [x19, #0x218]
0000000100005020	mvn	x9, x0
0000000100005024	add	x8, x8, x9
0000000100005028	str	x8, [x19, #0x218]
000000010000502c	mov	x0, x21
0000000100005030	bl	0x100031010 ; symbol stub for: _free
0000000100005034	str	xzr, [x19, #0x270]
0000000100005038	str	x20, [x19, #0xe0]
000000010000503c	ldr	x8, [x19, #0x1f0]
0000000100005040	ldr	x1, [x19, #0x200]
0000000100005044	mov	x0, x19
0000000100005048	blr	x8
000000010000504c	ldr	x8, [x19, #0xe0]
0000000100005050	ldr	x20, [x8, #0x28]
0000000100005054	cbz	x20, 0x1000050b4
0000000100005058	add	x21, x19, #0x460
000000010000505c	ldr	x1, [x20, #0x10]
0000000100005060	mov	x0, x21
0000000100005064	bl	0x100031700 ; symbol stub for: _strcmp
0000000100005068	cbz	w0, 0x100005078
000000010000506c	ldr	x20, [x20]
0000000100005070	cbnz	x20, 0x10000505c
0000000100005074	b	0x1000050b4
0000000100005078	nop
000000010000507c	nop
0000000100005080	ldr	w0, 0x100044430
0000000100005084	ldr	x1, [x20, #0x18]
0000000100005088	bl	0x10002e418
000000010000508c	ldr	x0, [x20, #0x18]
0000000100005090	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100005094	ldr	x8, [x20]
0000000100005098	cbz	x8, 0x1000050a4
000000010000509c	ldr	x9, [x20, #0x8]
00000001000050a0	str	x9, [x8, #0x8]
00000001000050a4	ldr	x9, [x20, #0x8]
00000001000050a8	str	x8, [x9]
00000001000050ac	mov	x0, x20
00000001000050b0	bl	0x100031010 ; symbol stub for: _free
00000001000050b4	ldr	x0, [x19, #0x1b0]
00000001000050b8	cbz	x0, 0x100005100
00000001000050bc	adr	x8, #259011
00000001000050c0	nop
00000001000050c4	ldrb	w8, [x8]
00000001000050c8	cbz	w8, 0x1000050e4
00000001000050cc	adr	x2, #189624 ; literal pool for: "Operating in pure on-demand mode. Ignoring events"
00000001000050d0	nop
00000001000050d4	mov	w1, #0x5
00000001000050d8	mov	x0, x19
00000001000050dc	bl	0x1000118ec
00000001000050e0	b	0x1000050f4
00000001000050e4	adr	x2, #1888
00000001000050e8	nop
00000001000050ec	mov	x1, x19
00000001000050f0	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
00000001000050f4	ldr	x0, [x19, #0x1b0]
00000001000050f8	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000050fc	str	xzr, [x19, #0x1b0]
0000000100005100	ldr	x0, [x19, #0x1b8]
0000000100005104	cbz	x0, 0x10000518c
0000000100005108	nop
000000010000510c	ldr	x8, #0x3af04 ; literal pool symbol address: __NSConcreteStackBlock
0000000100005110	str	x8, [sp, #0x8]
0000000100005114	nop
0000000100005118	ldr	d0, 0x10003de90
000000010000511c	adr	x8, #1712
0000000100005120	nop
0000000100005124	str	d0, [sp, #0x10]
0000000100005128	str	x8, [sp, #0x18]
000000010000512c	adr	x8, #244660
0000000100005130	nop
0000000100005134	stp	x8, x19, [sp, #0x20]
0000000100005138	add	x1, sp, #0x8
000000010000513c	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
0000000100005140	ldr	x0, [x19, #0x1b8]
0000000100005144	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100005148	str	xzr, [x19, #0x1b8]
000000010000514c	mov	w0, #0x28
0000000100005150	bl	0x10000d464
0000000100005154	adr	x8, #47624
0000000100005158	nop
000000010000515c	orr	w9, wzr, #0x1
0000000100005160	adr	x10, #189180 ; literal pool for: "provides events"
0000000100005164	nop
0000000100005168	strb	w9, [x0, #0x20]
000000010000516c	stp	x8, x10, [x0, #0x10]
0000000100005170	add	x8, x19, #0x238
0000000100005174	ldr	x9, [x19, #0x238]
0000000100005178	str	x9, [x0]
000000010000517c	cbz	x9, 0x100005184
0000000100005180	str	x0, [x9, #0x8]
0000000100005184	str	x0, [x8]
0000000100005188	str	x8, [x0, #0x8]
000000010000518c	ldp	x29, x30, [sp, #0x60]
0000000100005190	ldp	x20, x19, [sp, #0x50]
0000000100005194	ldp	x22, x21, [sp, #0x40]
0000000100005198	ldp	x24, x23, [sp, #0x30]
000000010000519c	add	sp, sp, #0x70
00000001000051a0	ret
00000001000051a4	adr	x0, #189061 ; literal pool for: "attempted to animate a service twice"
00000001000051a8	nop
00000001000051ac	bl	0x100028f84
00000001000051b0	stp	x22, x21, [sp, #-0x30]!
00000001000051b4	stp	x20, x19, [sp, #0x10]
00000001000051b8	stp	x29, x30, [sp, #0x20]
00000001000051bc	add	x29, sp, #0x20
00000001000051c0	mov	x19, x0
00000001000051c4	ldr	x8, [x19, #0x458]
00000001000051c8	tbnz	w8, #0x1f, 0x100005238
00000001000051cc	orr	x9, x8, #0x80000000
00000001000051d0	str	x9, [x19, #0x458]
00000001000051d4	tbz	w8, #0x1e, 0x100005244
00000001000051d8	ldr	x20, [x19, #0x98]
00000001000051dc	cbz	x20, 0x100005200
00000001000051e0	ldr	x21, [x20, #0x8]
00000001000051e4	mov	x0, x20
00000001000051e8	bl	0x100028784
00000001000051ec	mov	w1, #0x0
00000001000051f0	mov	x0, x20
00000001000051f4	bl	0x10000e4a4
00000001000051f8	mov	x20, x21
00000001000051fc	cbnz	x21, 0x1000051e0
0000000100005200	ldr	x19, [x19, #0xa0]
0000000100005204	cbz	x19, 0x100005228
0000000100005208	ldr	x20, [x19, #0x8]
000000010000520c	mov	x0, x19
0000000100005210	bl	0x1000282a8
0000000100005214	mov	w1, #0x0
0000000100005218	mov	x0, x19
000000010000521c	bl	0x10000e4a4
0000000100005220	mov	x19, x20
0000000100005224	cbnz	x20, 0x100005208
0000000100005228	ldp	x29, x30, [sp, #0x20]
000000010000522c	ldp	x20, x19, [sp, #0x10]
0000000100005230	ldp	x22, x21, [sp], #0x30
0000000100005234	ret
0000000100005238	adr	x0, #188176 ; literal pool for: "attempted to petrify a service twice"
000000010000523c	nop
0000000100005240	bl	0x100028f84
0000000100005244	adr	x0, #188201 ; literal pool for: "attempted to petrify a service that hasn't been animated"
0000000100005248	nop
000000010000524c	bl	0x100028f84
0000000100005250	sub	sp, sp, #0x90
0000000100005254	stp	x28, x27, [sp, #0x30]
0000000100005258	stp	x26, x25, [sp, #0x40]
000000010000525c	stp	x24, x23, [sp, #0x50]
0000000100005260	stp	x22, x21, [sp, #0x60]
0000000100005264	stp	x20, x19, [sp, #0x70]
0000000100005268	stp	x29, x30, [sp, #0x80]
000000010000526c	add	x29, sp, #0x80
0000000100005270	mov	x21, x4
0000000100005274	mov	x22, x3
0000000100005278	mov	x24, x2
000000010000527c	mov	x26, x1
0000000100005280	mov	x19, x0
0000000100005284	orr	w1, wzr, #0x2
0000000100005288	mov	x0, x26
000000010000528c	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
0000000100005290	mov	x20, x0
0000000100005294	cbz	x20, 0x100005320
0000000100005298	mov	x0, x26
000000010000529c	bl	0x100031970 ; symbol stub for: _xpc_bundle_get_info_dictionary
00000001000052a0	mov	x27, x0
00000001000052a4	cbz	x27, 0x100005334
00000001000052a8	adr	x1, #188239 ; literal pool for: "CFBundleIdentifier"
00000001000052ac	nop
00000001000052b0	mov	x0, x27
00000001000052b4	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
00000001000052b8	mov	x25, x0
00000001000052bc	cbz	x25, 0x10000535c
00000001000052c0	mov	x0, x19
00000001000052c4	mov	x1, x25
00000001000052c8	bl	0x10001e1b8
00000001000052cc	mov	x23, x0
00000001000052d0	cbz	x23, 0x1000053a4
00000001000052d4	adr	x1, #188273 ; literal pool for: "LaunchProperties"
00000001000052d8	nop
00000001000052dc	mov	x0, x27
00000001000052e0	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000052e4	ldr	x22, [x23, #0x138]
00000001000052e8	cbnz	x0, 0x1000052fc
00000001000052ec	mov	x0, x20
00000001000052f0	mov	x1, x22
00000001000052f4	bl	0x100031700 ; symbol stub for: _strcmp
00000001000052f8	cbz	w0, 0x100005318
00000001000052fc	stp	x22, x20, [sp, #0x8]
0000000100005300	str	x25, [sp]
0000000100005304	adr	x2, #188242 ; literal pool for: "Attempt to re-bootstrap service from different path, will use existing: service = %s, existing = %s, conflicting = %s"
0000000100005308	nop
000000010000530c	orr	w1, wzr, #0x4
0000000100005310	mov	x0, x19
0000000100005314	bl	0x100019bfc
0000000100005318	mov	w8, #0x79
000000010000531c	b	0x10000537c
0000000100005320	mov	w8, #0x6b
0000000100005324	str	w8, [x21]
0000000100005328	adr	x2, #188030 ; literal pool for: "Could not get path for service bundle."
000000010000532c	nop
0000000100005330	b	0x100005348
0000000100005334	mov	w8, #0x6b
0000000100005338	str	w8, [x21]
000000010000533c	str	x20, [sp]
0000000100005340	adr	x2, #188045 ; literal pool for: "Could not get Info.plist for bundle at %s"
0000000100005344	nop
0000000100005348	orr	w1, wzr, #0x3
000000010000534c	mov	x0, x19
0000000100005350	bl	0x100019bfc
0000000100005354	mov	x23, #0x0
0000000100005358	b	0x100005380
000000010000535c	str	x20, [sp]
0000000100005360	adr	x2, #188074 ; literal pool for: "Bundle Info.plist at %s does not have a CFBundleIdentifier"
0000000100005364	nop
0000000100005368	orr	w1, wzr, #0x3
000000010000536c	mov	x0, x19
0000000100005370	bl	0x100019bfc
0000000100005374	mov	x23, #0x0
0000000100005378	mov	w8, #0x6b
000000010000537c	str	w8, [x21]
0000000100005380	mov	x0, x23
0000000100005384	ldp	x29, x30, [sp, #0x80]
0000000100005388	ldp	x20, x19, [sp, #0x70]
000000010000538c	ldp	x22, x21, [sp, #0x60]
0000000100005390	ldp	x24, x23, [sp, #0x50]
0000000100005394	ldp	x26, x25, [sp, #0x40]
0000000100005398	ldp	x28, x27, [sp, #0x30]
000000010000539c	add	sp, sp, #0x90
00000001000053a0	ret
00000001000053a4	mov	x0, x19
00000001000053a8	mov	x1, x25
00000001000053ac	bl	0x10000ce0c
00000001000053b0	mov	x20, x0
00000001000053b4	orr	w1, wzr, #0x2
00000001000053b8	mov	x0, x26
00000001000053bc	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
00000001000053c0	mov	x23, x0
00000001000053c4	cbz	x23, 0x10000579c
00000001000053c8	mov	x0, x26
00000001000053cc	bl	0x100031970 ; symbol stub for: _xpc_bundle_get_info_dictionary
00000001000053d0	mov	x27, x0
00000001000053d4	cbz	x27, 0x1000057a8
00000001000053d8	adr	x1, #187935 ; literal pool for: "CFBundleIdentifier"
00000001000053dc	nop
00000001000053e0	mov	x0, x27
00000001000053e4	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
00000001000053e8	mov	x25, x0
00000001000053ec	cbz	x25, 0x1000057b4
00000001000053f0	mov	x0, x26
00000001000053f4	bl	0x100031964 ; symbol stub for: _xpc_bundle_get_executable_path
00000001000053f8	mov	x28, x0
00000001000053fc	cbz	x28, 0x100005424
0000000100005400	adr	x1, #187973 ; literal pool for: "LaunchProperties"
0000000100005404	nop
0000000100005408	mov	x0, x27
000000010000540c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100005410	mov	x26, x0
0000000100005414	cbz	x26, 0x100005430
0000000100005418	adr	x8, #1392
000000010000541c	nop
0000000100005420	b	0x100005450
0000000100005424	adr	x2, #188877 ; literal pool for: "Bundle has no executable"
0000000100005428	nop
000000010000542c	b	0x100005758
0000000100005430	adr	x1, #188890 ; literal pool for: "XPCService"
0000000100005434	nop
0000000100005438	mov	x0, x27
000000010000543c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100005440	mov	x26, x0
0000000100005444	cbz	x26, 0x100005744
0000000100005448	adr	x8, #5760
000000010000544c	nop
0000000100005450	str	x8, [sp, #0x28]
0000000100005454	mov	x0, x26
0000000100005458	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000545c	nop
0000000100005460	ldr	x8, #0x3ac60 ; literal pool symbol address: __xpc_type_dictionary
0000000100005464	cmp	x0, x8
0000000100005468	b.eq	0x100005478
000000010000546c	adr	x2, #188897 ; literal pool for: "LaunchProperties or XPCService must be dictionaries"
0000000100005470	nop
0000000100005474	b	0x100005758
0000000100005478	tbz	w22, #0x6, 0x1000054b4
000000010000547c	adr	x1, #188933 ; literal pool for: "NSExtension"
0000000100005480	nop
0000000100005484	mov	x0, x27
0000000100005488	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
000000010000548c	cbz	x0, 0x100005750
0000000100005490	adr	x1, #188925 ; literal pool for: "NSExtensionPointIdentifier"
0000000100005494	nop
0000000100005498	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010000549c	cbz	x0, 0x100005750
00000001000054a0	str	x0, [sp, #0x18]
00000001000054a4	mov	x1, x26
00000001000054a8	bl	0x1000098d0
00000001000054ac	mov	x27, x0
00000001000054b0	b	0x1000054c8
00000001000054b4	mov	x0, x25
00000001000054b8	mov	x1, x26
00000001000054bc	bl	0x100009924
00000001000054c0	mov	x27, x0
00000001000054c4	str	xzr, [sp, #0x18]
00000001000054c8	mov	x0, x27
00000001000054cc	mov	x1, x20
00000001000054d0	bl	0x100008bbc
00000001000054d4	orr	w3, wzr, #0x1
00000001000054d8	mov	x0, x26
00000001000054dc	mov	x1, x27
00000001000054e0	mov	x2, x20
00000001000054e4	bl	0x100007098
00000001000054e8	adr	x1, #188927 ; literal pool for: "ExecuteAllowed"
00000001000054ec	nop
00000001000054f0	str	x27, [sp, #0x20]
00000001000054f4	mov	x0, x27
00000001000054f8	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000054fc	mov	x27, x0
0000000100005500	cbz	x27, 0x10000551c
0000000100005504	mov	x0, x27
0000000100005508	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000550c	nop
0000000100005510	ldr	x8, #0x3ab90 ; literal pool symbol address: __xpc_type_bool
0000000100005514	cmp	x0, x8
0000000100005518	b.eq	0x100005778
000000010000551c	str	x20, [sp]
0000000100005520	mov	x0, x23
0000000100005524	mov	x1, #0x0
0000000100005528	mov	x2, x25
000000010000552c	mov	x3, x28
0000000100005530	mov	x4, #0x0
0000000100005534	mov	x5, x24
0000000100005538	mov	x6, x22
000000010000553c	mov	x7, x21
0000000100005540	bl	0x100004b34
0000000100005544	mov	x23, x0
0000000100005548	cbz	x23, 0x100005790
000000010000554c	adr	x8, #5500
0000000100005550	nop
0000000100005554	ldr	x9, [x23, #0x458]
0000000100005558	ldr	x24, [sp, #0x28]
000000010000555c	cmp	x24, x8
0000000100005560	orr	w8, wzr, #0x2
0000000100005564	orr	w10, wzr, #0x4
0000000100005568	csel	x8, x10, x8, eq
000000010000556c	orr	x8, x9, x8
0000000100005570	str	x8, [x23, #0x458]
0000000100005574	mov	x0, x26
0000000100005578	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000557c	str	x0, [x23, #0x230]
0000000100005580	ldr	x27, [sp, #0x20]
0000000100005584	tbz	w22, #0x6, 0x1000055a8
0000000100005588	adr	x1, #188782 ; literal pool for: "com.apple."
000000010000558c	nop
0000000100005590	mov	x0, x25
0000000100005594	bl	0x10000d7a4
0000000100005598	tbnz	w0, #0x0, 0x1000055a8
000000010000559c	ldr	x8, [x23, #0x458]
00000001000055a0	orr	x8, x8, #0x40000000000
00000001000055a4	str	x8, [x23, #0x458]
00000001000055a8	orr	w1, wzr, #0x1
00000001000055ac	mov	x0, x23
00000001000055b0	mov	x2, x20
00000001000055b4	mov	x3, #0x0
00000001000055b8	bl	0x10000e39c
00000001000055bc	mov	x21, x0
00000001000055c0	mov	x0, x26
00000001000055c4	mov	x1, x21
00000001000055c8	mov	x2, x24
00000001000055cc	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
00000001000055d0	mov	x0, x21
00000001000055d4	bl	0x10000e470
00000001000055d8	ldr	x8, [x23, #0x458]
00000001000055dc	tst	x8, #0x4000000
00000001000055e0	orr	w8, wzr, #0x100
00000001000055e4	orr	w9, wzr, #0x600
00000001000055e8	csel	w8, w9, w8, eq
00000001000055ec	str	w8, [x23, #0x2c0]
00000001000055f0	mov	x0, x23
00000001000055f4	mov	x1, x27
00000001000055f8	mov	x2, x20
00000001000055fc	bl	0x100008d74
0000000100005600	mov	x0, x27
0000000100005604	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100005608	ldr	x8, [x23, #0x458]
000000010000560c	tbz	w22, #0x6, 0x100005680
0000000100005610	orr	x8, x8, #0x2000000000
0000000100005614	str	x8, [x23, #0x458]
0000000100005618	ldr	x0, [sp, #0x18]
000000010000561c	cbz	x0, 0x100005628
0000000100005620	bl	0x10000d520
0000000100005624	str	x0, [x23, #0x210]
0000000100005628	ldr	x8, [x23, #0x2d0]
000000010000562c	cbnz	x8, 0x1000057c0
0000000100005630	nop
0000000100005634	nop
0000000100005638	ldr	x8, #0x3deb8
000000010000563c	str	x8, [x23, #0x2d0]
0000000100005640	adr	x21, #253624
0000000100005644	nop
0000000100005648	ldr	x0, [x21]
000000010000564c	bl	0x10000d408
0000000100005650	str	x0, [x23, #0x2c8]
0000000100005654	ldr	x2, [x21]
0000000100005658	adr	x1, #253584
000000010000565c	nop
0000000100005660	bl	0x100031328 ; symbol stub for: _memcpy
0000000100005664	ldr	x8, [x21]
0000000100005668	ldr	x9, [x23, #0x218]
000000010000566c	add	x8, x9, x8
0000000100005670	str	x8, [x23, #0x218]
0000000100005674	ldr	x8, [x23, #0x458]
0000000100005678	orr	x8, x8, #0x200000000
000000010000567c	str	x8, [x23, #0x458]
0000000100005680	add	x21, x23, #0x460
0000000100005684	str	x21, [x23, #0x208]
0000000100005688	orr	x9, x8, #0x8000000000
000000010000568c	str	x9, [x23, #0x458]
0000000100005690	ldr	w9, [x23, #0x2c0]
0000000100005694	cmp	w9, #0x100
0000000100005698	b.ne	0x1000056ac
000000010000569c	mov	x9, #0x20000000
00000001000056a0	movk	x9, #0x80, lsl #32
00000001000056a4	orr	x8, x8, x9
00000001000056a8	str	x8, [x23, #0x458]
00000001000056ac	ldr	x8, [x23, #0xa8]
00000001000056b0	cbnz	x8, 0x1000056d4
00000001000056b4	mov	x0, x19
00000001000056b8	bl	0x10001dddc
00000001000056bc	adr	x8, #252764
00000001000056c0	nop
00000001000056c4	cmp	x0, x8
00000001000056c8	b.ne	0x1000056d4
00000001000056cc	ldrb	w8, [x23, #0x459]
00000001000056d0	tbz	w8, #0x0, 0x100005700
00000001000056d4	nop
00000001000056d8	nop
00000001000056dc	ldr	x0, #0x3ed44
00000001000056e0	str	x21, [sp]
00000001000056e4	adr	x2, #187368 ; literal pool for: "%s: creating the implicit endpoint upfront"
00000001000056e8	nop
00000001000056ec	mov	w1, #0x0
00000001000056f0	bl	0x1000270c8
00000001000056f4	mov	x0, x23
00000001000056f8	mov	x1, x20
00000001000056fc	bl	0x100003c94
0000000100005700	mov	x0, x23
0000000100005704	mov	x1, x19
0000000100005708	mov	x2, x20
000000010000570c	bl	0x100004edc
0000000100005710	ldr	x8, [x23, #0x1b0]
0000000100005714	cbz	x8, 0x100005738
0000000100005718	adr	x2, #187359 ; literal pool for: "Ignoring launch events for a bundle"
000000010000571c	nop
0000000100005720	orr	w1, wzr, #0x4
0000000100005724	mov	x0, x20
0000000100005728	bl	0x10000ce7c
000000010000572c	ldr	x0, [x23, #0x1b0]
0000000100005730	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100005734	str	xzr, [x23, #0x1b0]
0000000100005738	mov	x0, x20
000000010000573c	bl	0x10000ce54
0000000100005740	b	0x100005380
0000000100005744	adr	x2, #188113 ; literal pool for: "XPC Service Info.plist is missing XPCService dictionary"
0000000100005748	nop
000000010000574c	b	0x100005758
0000000100005750	adr	x2, #188248 ; literal pool for: "App Extension Info.plist is missing NSExtentionPointIdentifier"
0000000100005754	nop
0000000100005758	orr	w1, wzr, #0x3
000000010000575c	mov	x0, x20
0000000100005760	bl	0x10000ce7c
0000000100005764	mov	w8, #0x6b
0000000100005768	str	w8, [x21]
000000010000576c	mov	x0, x20
0000000100005770	bl	0x10000ce54
0000000100005774	b	0x100005354
0000000100005778	mov	x0, x27
000000010000577c	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100005780	tbnz	w22, #0x9, 0x10000551c
0000000100005784	cbnz	w0, 0x10000551c
0000000100005788	mov	w8, #0x9d
000000010000578c	str	w8, [x21]
0000000100005790	ldr	x0, [sp, #0x20]
0000000100005794	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100005798	b	0x10000576c
000000010000579c	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000057a0	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000057a4	brk	#0x1
00000001000057a8	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000057ac	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000057b0	brk	#0x1
00000001000057b4	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000057b8	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000057bc	brk	#0x1
00000001000057c0	adr	x0, #188225 ; literal pool for: "extensions should not have specified binary preference"
00000001000057c4	nop
00000001000057c8	bl	0x100028f84
00000001000057cc	stp	x22, x21, [sp, #-0x30]!
00000001000057d0	stp	x20, x19, [sp, #0x10]
00000001000057d4	stp	x29, x30, [sp, #0x20]
00000001000057d8	add	x29, sp, #0x20
00000001000057dc	mov	x20, x2
00000001000057e0	mov	x19, x1
00000001000057e4	mov	x21, x0
00000001000057e8	mov	x0, x20
00000001000057ec	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000057f0	nop
00000001000057f4	ldr	x8, #0x3a8f4 ; literal pool symbol address: __xpc_type_uint64
00000001000057f8	cmp	x0, x8
00000001000057fc	b.ne	0x100005834
0000000100005800	ldr	x21, [x21, #0x20]
0000000100005804	mov	x0, x20
0000000100005808	bl	0x100031bc8 ; symbol stub for: _xpc_uint64_get_value
000000010000580c	mov	x2, x0
0000000100005810	mov	x0, x21
0000000100005814	mov	x1, x19
0000000100005818	mov	x3, #0x0
000000010000581c	bl	0x100027efc
0000000100005820	orr	w0, wzr, #0x1
0000000100005824	ldp	x29, x30, [sp, #0x20]
0000000100005828	ldp	x20, x19, [sp, #0x10]
000000010000582c	ldp	x22, x21, [sp], #0x30
0000000100005830	ret
0000000100005834	mov	x0, #0x0
0000000100005838	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000583c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100005840	brk	#0x1
0000000100005844	sub	sp, sp, #0x70
0000000100005848	stp	x22, x21, [sp, #0x40]
000000010000584c	stp	x20, x19, [sp, #0x50]
0000000100005850	stp	x29, x30, [sp, #0x60]
0000000100005854	add	x29, sp, #0x60
0000000100005858	mov	x19, x2
000000010000585c	mov	x20, x1
0000000100005860	mov	x21, x0
0000000100005864	mov	x0, x20
0000000100005868	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000586c	nop
0000000100005870	ldr	x8, #0x3a850 ; literal pool symbol address: __xpc_type_dictionary
0000000100005874	cmp	x0, x8
0000000100005878	b.eq	0x1000058a4
000000010000587c	str	x21, [sp]
0000000100005880	adr	x2, #187702 ; literal pool for: "Invalid type for event stream %s"
0000000100005884	nop
0000000100005888	orr	w1, wzr, #0x3
000000010000588c	mov	x0, x19
0000000100005890	bl	0x1000118ec
0000000100005894	ldr	x8, [x19, #0x458]
0000000100005898	orr	x8, x8, #0x1
000000010000589c	str	x8, [x19, #0x458]
00000001000058a0	b	0x1000058e4
00000001000058a4	nop
00000001000058a8	ldr	x8, #0x3a768 ; literal pool symbol address: __NSConcreteStackBlock
00000001000058ac	str	x8, [sp, #0x10]
00000001000058b0	nop
00000001000058b4	ldr	d0, 0x10003de90
00000001000058b8	str	d0, [sp, #0x18]
00000001000058bc	adr	x8, #60
00000001000058c0	nop
00000001000058c4	str	x8, [sp, #0x20]
00000001000058c8	adr	x8, #242744
00000001000058cc	nop
00000001000058d0	stp	x8, x19, [sp, #0x28]
00000001000058d4	str	x21, [sp, #0x38]
00000001000058d8	add	x1, sp, #0x10
00000001000058dc	mov	x0, x20
00000001000058e0	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
00000001000058e4	ldp	x29, x30, [sp, #0x60]
00000001000058e8	ldp	x20, x19, [sp, #0x50]
00000001000058ec	ldp	x22, x21, [sp, #0x40]
00000001000058f0	add	sp, sp, #0x70
00000001000058f4	ret
00000001000058f8	sub	sp, sp, #0x40
00000001000058fc	stp	x22, x21, [sp, #0x10]
0000000100005900	stp	x20, x19, [sp, #0x20]
0000000100005904	stp	x29, x30, [sp, #0x30]
0000000100005908	add	x29, sp, #0x30
000000010000590c	mov	x21, x2
0000000100005910	mov	x20, x1
0000000100005914	mov	x19, x0
0000000100005918	mov	x0, x21
000000010000591c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100005920	mov	x8, x0
0000000100005924	nop
0000000100005928	ldr	x9, #0x3a798 ; literal pool symbol address: __xpc_type_dictionary
000000010000592c	ldr	x0, [x19, #0x20]
0000000100005930	cmp	x8, x9
0000000100005934	b.eq	0x100005960
0000000100005938	str	x20, [sp]
000000010000593c	adr	x2, #187547 ; literal pool for: "Invalid type for event %s"
0000000100005940	nop
0000000100005944	orr	w1, wzr, #0x3
0000000100005948	bl	0x1000118ec
000000010000594c	ldr	x8, [x19, #0x20]
0000000100005950	ldr	x9, [x8, #0x458]
0000000100005954	orr	x9, x9, #0x1
0000000100005958	str	x9, [x8, #0x458]
000000010000595c	b	0x100005970
0000000100005960	ldr	x1, [x19, #0x28]
0000000100005964	mov	x2, x20
0000000100005968	mov	x3, x21
000000010000596c	bl	0x100028668
0000000100005970	orr	w0, wzr, #0x1
0000000100005974	ldp	x29, x30, [sp, #0x30]
0000000100005978	ldp	x20, x19, [sp, #0x20]
000000010000597c	ldp	x22, x21, [sp, #0x10]
0000000100005980	add	sp, sp, #0x40
0000000100005984	ret
0000000100005988	sub	sp, sp, #0x90
000000010000598c	stp	x26, x25, [sp, #0x40]
0000000100005990	stp	x24, x23, [sp, #0x50]
0000000100005994	stp	x22, x21, [sp, #0x60]
0000000100005998	stp	x20, x19, [sp, #0x70]
000000010000599c	stp	x29, x30, [sp, #0x80]
00000001000059a0	add	x29, sp, #0x80
00000001000059a4	mov	x21, x1
00000001000059a8	mov	x20, x0
00000001000059ac	ldp	x19, x22, [x2]
00000001000059b0	mov	x0, x21
00000001000059b4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000059b8	nop
00000001000059bc	ldr	x8, #0x3a6e4 ; literal pool symbol address: __xpc_type_bool
00000001000059c0	cmp	x0, x8
00000001000059c4	b.eq	0x100005a3c
00000001000059c8	nop
00000001000059cc	ldr	x25, #0x3a704 ; literal pool symbol address: __xpc_type_int64
00000001000059d0	cmp	x0, x25
00000001000059d4	b.eq	0x100005aa0
00000001000059d8	nop
00000001000059dc	ldr	x8, #0x3a6ec ; literal pool symbol address: __xpc_type_double
00000001000059e0	cmp	x0, x8
00000001000059e4	b.eq	0x100005ad0
00000001000059e8	nop
00000001000059ec	ldr	x8, #0x3a6c4 ; literal pool symbol address: __xpc_type_data
00000001000059f0	cmp	x0, x8
00000001000059f4	b.eq	0x100005ae8
00000001000059f8	nop
00000001000059fc	ldr	x8, #0x3a6e4 ; literal pool symbol address: __xpc_type_string
0000000100005a00	cmp	x0, x8
0000000100005a04	b.eq	0x100005b2c
0000000100005a08	nop
0000000100005a0c	ldr	x8, #0x3a68c ; literal pool symbol address: __xpc_type_array
0000000100005a10	cmp	x0, x8
0000000100005a14	b.eq	0x100005b80
0000000100005a18	nop
0000000100005a1c	ldr	x8, #0x3a6a4 ; literal pool symbol address: __xpc_type_dictionary
0000000100005a20	cmp	x0, x8
0000000100005a24	b.eq	0x100005f14
0000000100005a28	ldr	x8, [x0, #0x30]
0000000100005a2c	stp	x20, x8, [sp]
0000000100005a30	adr	x2, #187656 ; literal pool for: "Invalid type for service dictionary (key/type): %s/%s"
0000000100005a34	nop
0000000100005a38	b	0x10000673c
0000000100005a3c	mov	x0, x21
0000000100005a40	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100005a44	mov	x21, x0
0000000100005a48	ldrsb	w8, [x20]
0000000100005a4c	sub	w8, w8, #0x41
0000000100005a50	cmp	w8, #0x36
0000000100005a54	b.hi	0x100005ed4
0000000100005a58	adr	x9, #3988
0000000100005a5c	nop
0000000100005a60	ldrsw	x8, [x9, x8, lsl #2]
0000000100005a64	add	x8, x8, x9
0000000100005a68	br	x8
0000000100005a6c	adr	x1, #187650 ; literal pool for: "AbandonProcessGroup"
0000000100005a70	nop
0000000100005a74	mov	x0, x20
0000000100005a78	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005a7c	cbz	w0, 0x100005f58
0000000100005a80	adr	x1, #187650 ; literal pool for: "AuxilliaryBootstrapper"
0000000100005a84	nop
0000000100005a88	mov	x0, x20
0000000100005a8c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005a90	cbz	w0, 0x100005ef8
0000000100005a94	adr	x1, #187653 ; literal pool for: "AlwaysSIGTERMOnShutdown"
0000000100005a98	nop
0000000100005a9c	b	0x100005eb0
0000000100005aa0	mov	x0, x21
0000000100005aa4	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100005aa8	mov	x2, x0
0000000100005aac	mov	x0, x19
0000000100005ab0	mov	x1, x20
0000000100005ab4	ldp	x29, x30, [sp, #0x80]
0000000100005ab8	ldp	x20, x19, [sp, #0x70]
0000000100005abc	ldp	x22, x21, [sp, #0x60]
0000000100005ac0	ldp	x24, x23, [sp, #0x50]
0000000100005ac4	ldp	x26, x25, [sp, #0x40]
0000000100005ac8	add	sp, sp, #0x90
0000000100005acc	b	0x10000724c
0000000100005ad0	mov	x0, x21
0000000100005ad4	bl	0x100031b2c ; symbol stub for: _xpc_double_get_value
0000000100005ad8	str	x20, [sp]
0000000100005adc	adr	x2, #189237 ; literal pool for: "Unknown key for double: %s"
0000000100005ae0	nop
0000000100005ae4	b	0x100005ee0
0000000100005ae8	mov	x0, x21
0000000100005aec	bl	0x1000319dc ; symbol stub for: _xpc_data_get_bytes_ptr
0000000100005af0	mov	x0, x21
0000000100005af4	bl	0x1000319e8 ; symbol stub for: _xpc_data_get_length
0000000100005af8	ldrsb	w8, [x20]
0000000100005afc	orr	w8, w8, #0x20
0000000100005b00	cmp	w8, #0x71
0000000100005b04	b.ne	0x100005b1c
0000000100005b08	adr	x1, #189220 ; literal pool for: "QuarantineData"
0000000100005b0c	nop
0000000100005b10	mov	x0, x20
0000000100005b14	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005b18	cbz	w0, 0x100006728
0000000100005b1c	str	x20, [sp]
0000000100005b20	adr	x2, #189211 ; literal pool for: "Unknown key for data: %s"
0000000100005b24	nop
0000000100005b28	b	0x100005ee0
0000000100005b2c	mov	x0, x21
0000000100005b30	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100005b34	mov	x21, x0
0000000100005b38	ldrsb	w0, [x20]
0000000100005b3c	bl	0x100030b18 ; symbol stub for: ___tolower
0000000100005b40	sub	w8, w0, #0x63
0000000100005b44	cmp	w8, #0x14
0000000100005b48	b.hi	0x10000625c
0000000100005b4c	adr	x9, #3660
0000000100005b50	nop
0000000100005b54	ldrsw	x8, [x9, x8, lsl #2]
0000000100005b58	add	x8, x8, x9
0000000100005b5c	br	x8
0000000100005b60	adr	x1, #186007 ; literal pool for: "CFBundleIdentifier"
0000000100005b64	nop
0000000100005b68	mov	x0, x20
0000000100005b6c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005b70	cbz	w0, 0x10000642c
0000000100005b74	adr	x1, #189152 ; literal pool for: "ContainingBundleID"
0000000100005b78	nop
0000000100005b7c	b	0x1000060d8
0000000100005b80	ldrsb	w0, [x20]
0000000100005b84	bl	0x100030b18 ; symbol stub for: ___tolower
0000000100005b88	sub	w8, w0, #0x6c
0000000100005b8c	cmp	w8, #0xb
0000000100005b90	b.hi	0x100005fa8
0000000100005b94	adr	x9, #3540
0000000100005b98	nop
0000000100005b9c	ldrsw	x8, [x9, x8, lsl #2]
0000000100005ba0	add	x8, x8, x9
0000000100005ba4	br	x8
0000000100005ba8	adr	x1, #189238 ; literal pool for: "LimitLoadToHosts"
0000000100005bac	nop
0000000100005bb0	mov	x0, x20
0000000100005bb4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005bb8	cbz	w0, 0x1000066ec
0000000100005bbc	adr	x1, #189235 ; literal pool for: "LimitLoadFromHosts"
0000000100005bc0	nop
0000000100005bc4	mov	x0, x20
0000000100005bc8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005bcc	cbz	w0, 0x1000066ec
0000000100005bd0	adr	x1, #189234 ; literal pool for: "LimitLoadToSessionType"
0000000100005bd4	nop
0000000100005bd8	mov	x0, x20
0000000100005bdc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005be0	cbnz	w0, 0x1000063a4
0000000100005be4	b	0x100005ef8
0000000100005be8	adr	x1, #187337 ; literal pool for: "BootShell"
0000000100005bec	nop
0000000100005bf0	b	0x100005eb0
0000000100005bf4	adr	x1, #187565 ; literal pool for: "Debug"
0000000100005bf8	nop
0000000100005bfc	mov	x0, x20
0000000100005c00	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005c04	cbz	w0, 0x1000066ec
0000000100005c08	adr	x1, #187551 ; literal pool for: "Disabled"
0000000100005c0c	nop
0000000100005c10	mov	x0, x20
0000000100005c14	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005c18	cbz	w0, 0x100005ef8
0000000100005c1c	adr	x1, #187540 ; literal pool for: "DisableASLR"
0000000100005c20	nop
0000000100005c24	mov	x0, x20
0000000100005c28	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005c2c	cbz	w0, 0x1000066ec
0000000100005c30	adr	x1, #187532 ; literal pool for: "DisallowAllLookups"
0000000100005c34	nop
0000000100005c38	mov	x0, x20
0000000100005c3c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005c40	cbz	w0, 0x1000063f0
0000000100005c44	adr	x1, #187531 ; literal pool for: "DrainMessagesOnFailedInit"
0000000100005c48	nop
0000000100005c4c	mov	x0, x20
0000000100005c50	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005c54	cbnz	w0, 0x100005ed4
0000000100005c58	ldr	x8, [x19, #0x458]
0000000100005c5c	bfi	x8, x21, #39, #1
0000000100005c60	b	0x100005ef4
0000000100005c64	adr	x1, #187879 ; literal pool for: "EnableGlobbing"
0000000100005c68	nop
0000000100005c6c	mov	x0, x20
0000000100005c70	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005c74	cbz	w0, 0x1000066ec
0000000100005c78	adr	x1, #187874 ; literal pool for: "EnableTransactions"
0000000100005c7c	nop
0000000100005c80	mov	x0, x20
0000000100005c84	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005c88	cbz	w0, 0x100005ef8
0000000100005c8c	adr	x1, #187873 ; literal pool for: "EnterKernelDebuggerBeforeKill"
0000000100005c90	nop
0000000100005c94	mov	x0, x20
0000000100005c98	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005c9c	cbz	w0, 0x1000063e4
0000000100005ca0	adr	x1, #187883 ; literal pool for: "EmbeddedHomeScreen"
0000000100005ca4	nop
0000000100005ca8	mov	x0, x20
0000000100005cac	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005cb0	cbz	w0, 0x1000063fc
0000000100005cb4	adr	x1, #187882 ; literal pool for: "EventMonitor"
0000000100005cb8	nop
0000000100005cbc	mov	x0, x20
0000000100005cc0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005cc4	cbz	w0, 0x1000067ac
0000000100005cc8	adr	x1, #187875 ; literal pool for: "EnablePressuredExit"
0000000100005ccc	nop
0000000100005cd0	mov	x0, x20
0000000100005cd4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005cd8	cbz	w0, 0x100005ef8
0000000100005cdc	adr	x1, #186891 ; literal pool for: "ExecuteAllowed"
0000000100005ce0	nop
0000000100005ce4	b	0x100005eb0
0000000100005ce8	adr	x1, #187919 ; literal pool for: "ForceEnableHack"
0000000100005cec	nop
0000000100005cf0	b	0x100005eb0
0000000100005cf4	adr	x1, #187381 ; literal pool for: "HopefullyExitsLast"
0000000100005cf8	nop
0000000100005cfc	mov	x0, x20
0000000100005d00	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005d04	cbnz	w0, 0x100005ed4
0000000100005d08	b	0x1000066ec
0000000100005d0c	adr	x1, #187554 ; literal pool for: "InitGroups"
0000000100005d10	nop
0000000100005d14	mov	x0, x20
0000000100005d18	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005d1c	cbz	w0, 0x100005f64
0000000100005d20	adr	x1, #187545 ; literal pool for: "IgnoreProcessGroupAtShutdown"
0000000100005d24	nop
0000000100005d28	mov	x0, x20
0000000100005d2c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005d30	cbnz	w0, 0x100005ed4
0000000100005d34	b	0x100006728
0000000100005d38	adr	x1, #187011 ; literal pool for: "KeepAlive"
0000000100005d3c	nop
0000000100005d40	mov	x0, x20
0000000100005d44	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005d48	cbnz	w0, 0x100005ed4
0000000100005d4c	ldrb	w8, [x19, #0x458]
0000000100005d50	tbnz	w8, #0x1, 0x1000066ec
0000000100005d54	cbz	w21, 0x100005ef8
0000000100005d58	adr	x2, #187045 ; literal pool for: "This service is defined to be constantly running and is inherently inefficient."
0000000100005d5c	nop
0000000100005d60	b	0x1000063cc
0000000100005d64	adr	x1, #187342 ; literal pool for: "LowPriorityIO"
0000000100005d68	nop
0000000100005d6c	mov	x0, x20
0000000100005d70	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005d74	cbz	w0, 0x100005f78
0000000100005d78	adr	x1, #187336 ; literal pool for: "LowPriorityBackgroundIO"
0000000100005d7c	nop
0000000100005d80	mov	x0, x20
0000000100005d84	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005d88	cbz	w0, 0x10000626c
0000000100005d8c	adr	x1, #187340 ; literal pool for: "LegacyTimers"
0000000100005d90	nop
0000000100005d94	mov	x0, x20
0000000100005d98	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005d9c	cbz	w0, 0x100005ef8
0000000100005da0	adr	x1, #187333 ; literal pool for: "LaunchOnlyOnce"
0000000100005da4	nop
0000000100005da8	mov	x0, x20
0000000100005dac	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005db0	cbnz	w0, 0x100005ed4
0000000100005db4	ldr	x8, [x19, #0x458]
0000000100005db8	bfi	x8, x21, #24, #1
0000000100005dbc	b	0x100005ef4
0000000100005dc0	adr	x1, #187316 ; literal pool for: "MachExceptionHandler"
0000000100005dc4	nop
0000000100005dc8	mov	x0, x20
0000000100005dcc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005dd0	cbz	w0, 0x100005f84
0000000100005dd4	adr	x1, #187317 ; literal pool for: "MultipleInstances"
0000000100005dd8	nop
0000000100005ddc	mov	x0, x20
0000000100005de0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005de4	cbz	w0, 0x100006278
0000000100005de8	adr	x1, #187315 ; literal pool for: "MinimalBootProfile"
0000000100005dec	nop
0000000100005df0	mov	x0, x20
0000000100005df4	bl	0x100031700 ; symbol stub for: _strcmp
0000000100005df8	cbnz	w0, 0x100005ed4
0000000100005dfc	b	0x100005ef8
0000000100005e00	adr	x1, #186957 ; literal pool for: "OnDemand"
0000000100005e04	nop
0000000100005e08	mov	x0, x20
0000000100005e0c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005e10	cbnz	w0, 0x100005ed4
0000000100005e14	cbz	w21, 0x1000063c0
0000000100005e18	str	x20, [sp]
0000000100005e1c	adr	x2, #186938 ; literal pool for: "This key does not do anything: %s"
0000000100005e20	nop
0000000100005e24	mov	w1, #0x5
0000000100005e28	b	0x100006740
0000000100005e2c	adr	x1, #187388 ; literal pool for: "RunAtLoad"
0000000100005e30	nop
0000000100005e34	mov	x0, x20
0000000100005e38	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005e3c	cbz	w0, 0x100005f90
0000000100005e40	adr	x1, #187378 ; literal pool for: "ResolveProgramIdentifier"
0000000100005e44	nop
0000000100005e48	b	0x100005eb0
0000000100005e4c	adr	x1, #187056 ; literal pool for: "SessionCreate"
0000000100005e50	nop
0000000100005e54	mov	x0, x20
0000000100005e58	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005e5c	cbz	w0, 0x100005ef8
0000000100005e60	adr	x1, #187050 ; literal pool for: "StartOnMount"
0000000100005e64	nop
0000000100005e68	mov	x0, x20
0000000100005e6c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005e70	cbz	w0, 0x100005ef8
0000000100005e74	adr	x1, #187043 ; literal pool for: "ServiceIPC"
0000000100005e78	nop
0000000100005e7c	mov	x0, x20
0000000100005e80	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005e84	cbz	w0, 0x1000066ec
0000000100005e88	adr	x1, #187034 ; literal pool for: "ShutdownMonitor"
0000000100005e8c	nop
0000000100005e90	b	0x100005cfc
0000000100005e94	adr	x1, #187435 ; literal pool for: "TransactionTimeLimitEnabled"
0000000100005e98	nop
0000000100005e9c	mov	x0, x20
0000000100005ea0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005ea4	cbz	w0, 0x100005ef8
0000000100005ea8	adr	x1, #187443 ; literal pool for: "TransactionTimeLimitIsFatal"
0000000100005eac	nop
0000000100005eb0	mov	x0, x20
0000000100005eb4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005eb8	cbnz	w0, 0x100005ed4
0000000100005ebc	b	0x100005ef8
0000000100005ec0	adr	x1, #184744 ; literal pool for: "WaitForDebugger"
0000000100005ec4	nop
0000000100005ec8	mov	x0, x20
0000000100005ecc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005ed0	cbz	w0, 0x100005f9c
0000000100005ed4	str	x20, [sp]
0000000100005ed8	adr	x2, #187439 ; literal pool for: "Unknown key for Boolean: %s"
0000000100005edc	nop
0000000100005ee0	orr	w1, wzr, #0x4
0000000100005ee4	mov	x0, x19
0000000100005ee8	bl	0x1000118ec
0000000100005eec	ldr	x8, [x19, #0x458]
0000000100005ef0	orr	x8, x8, #0x1
0000000100005ef4	str	x8, [x19, #0x458]
0000000100005ef8	ldp	x29, x30, [sp, #0x80]
0000000100005efc	ldp	x20, x19, [sp, #0x70]
0000000100005f00	ldp	x22, x21, [sp, #0x60]
0000000100005f04	ldp	x24, x23, [sp, #0x50]
0000000100005f08	ldp	x26, x25, [sp, #0x40]
0000000100005f0c	add	sp, sp, #0x90
0000000100005f10	ret
0000000100005f14	ldrsb	w8, [x20]
0000000100005f18	sub	w8, w8, #0x45
0000000100005f1c	cmp	w8, #0x30
0000000100005f20	b.hi	0x100006718
0000000100005f24	adr	x9, #2432
0000000100005f28	nop
0000000100005f2c	ldrsw	x8, [x9, x8, lsl #2]
0000000100005f30	add	x8, x8, x9
0000000100005f34	br	x8
0000000100005f38	adr	x1, #184564 ; literal pool for: "EnvironmentVariables"
0000000100005f3c	nop
0000000100005f40	mov	x0, x20
0000000100005f44	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005f48	cbnz	w0, 0x100006718
0000000100005f4c	adr	x2, #7784
0000000100005f50	nop
0000000100005f54	b	0x100006894
0000000100005f58	ldr	x8, [x19, #0x458]
0000000100005f5c	bfi	x8, x21, #17, #1
0000000100005f60	b	0x100005ef4
0000000100005f64	eor	w8, w21, #0x1
0000000100005f68	ldr	x9, [x19, #0x458]
0000000100005f6c	bfi	x9, x8, #34, #1
0000000100005f70	str	x9, [x19, #0x458]
0000000100005f74	b	0x100005ef8
0000000100005f78	ldr	x8, [x19, #0x458]
0000000100005f7c	bfi	x8, x21, #5, #1
0000000100005f80	b	0x100005ef4
0000000100005f84	ldr	x8, [x19, #0x458]
0000000100005f88	bfi	x8, x21, #7, #1
0000000100005f8c	b	0x100005ef4
0000000100005f90	ldr	x8, [x19, #0x458]
0000000100005f94	bfi	x8, x21, #4, #1
0000000100005f98	b	0x100005ef4
0000000100005f9c	ldr	x8, [x19, #0x458]
0000000100005fa0	bfi	x8, x21, #12, #1
0000000100005fa4	b	0x100005ef4
0000000100005fa8	cmp	w0, #0x62
0000000100005fac	b.ne	0x1000063a4
0000000100005fb0	adr	x1, #184482 ; literal pool for: "BinaryOrderPreference"
0000000100005fb4	nop
0000000100005fb8	mov	x0, x20
0000000100005fbc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100005fc0	cbnz	w0, 0x1000063a4
0000000100005fc4	mov	x0, x21
0000000100005fc8	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100005fcc	str	x0, [x19, #0x2d0]
0000000100005fd0	lsl	x0, x0, #2
0000000100005fd4	bl	0x10000d408
0000000100005fd8	str	x0, [x19, #0x2c8]
0000000100005fdc	ldr	x8, [x19, #0x2d0]
0000000100005fe0	cbz	x8, 0x100006054
0000000100005fe4	mov	x20, #0x0
0000000100005fe8	adr	x23, #188641 ; literal pool for: "Invalid CPU type value type specified: %s"
0000000100005fec	nop
0000000100005ff0	mov	x0, x21
0000000100005ff4	mov	x1, x20
0000000100005ff8	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100005ffc	mov	x24, x0
0000000100006000	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100006004	cmp	x0, x25
0000000100006008	b.eq	0x100006030
000000010000600c	mov	x0, x24
0000000100006010	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100006014	ldr	x8, [x0, #0x30]
0000000100006018	str	x8, [sp]
000000010000601c	orr	w1, wzr, #0x3
0000000100006020	mov	x0, x22
0000000100006024	mov	x2, x23
0000000100006028	bl	0x10000ce7c
000000010000602c	b	0x100006040
0000000100006030	mov	x0, x24
0000000100006034	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100006038	ldr	x8, [x19, #0x2c8]
000000010000603c	str	w0, [x8, x20, lsl #2]
0000000100006040	add	x20, x20, #0x1
0000000100006044	ldr	x8, [x19, #0x2d0]
0000000100006048	cmp	x20, x8
000000010000604c	b.lo	0x100005ff0
0000000100006050	lsl	x8, x8, #2
0000000100006054	ldr	x9, [x19, #0x218]
0000000100006058	add	x8, x9, x8
000000010000605c	str	x8, [x19, #0x218]
0000000100006060	b	0x100005ef8
0000000100006064	adr	x1, #188113 ; literal pool for: "GroupName"
0000000100006068	nop
000000010000606c	mov	x0, x20
0000000100006070	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006074	cbnz	w0, 0x10000625c
0000000100006078	adr	x1, #188103 ; literal pool for: "wheel"
000000010000607c	nop
0000000100006080	mov	x0, x21
0000000100006084	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006088	cbz	w0, 0x100005ef8
000000010000608c	add	x22, x19, #0x270
0000000100006090	b	0x100006840
0000000100006094	adr	x1, #184304 ; literal pool for: "Label"
0000000100006098	nop
000000010000609c	mov	x0, x20
00000001000060a0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000060a4	cbz	w0, 0x100006434
00000001000060a8	adr	x1, #187958 ; literal pool for: "LimitLoadToHosts"
00000001000060ac	nop
00000001000060b0	mov	x0, x20
00000001000060b4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000060b8	cbz	w0, 0x1000066ec
00000001000060bc	adr	x1, #187955 ; literal pool for: "LimitLoadFromHosts"
00000001000060c0	nop
00000001000060c4	mov	x0, x20
00000001000060c8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000060cc	cbz	w0, 0x1000066ec
00000001000060d0	adr	x1, #187954 ; literal pool for: "LimitLoadToSessionType"
00000001000060d4	nop
00000001000060d8	mov	x0, x20
00000001000060dc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000060e0	cbnz	w0, 0x10000625c
00000001000060e4	b	0x100005ef8
00000001000060e8	adr	x1, #186508 ; literal pool for: "MachExceptionHandler"
00000001000060ec	nop
00000001000060f0	mov	x0, x20
00000001000060f4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000060f8	cbnz	w0, 0x10000625c
00000001000060fc	add	x22, x19, #0x2b8
0000000100006100	b	0x100006858
0000000100006104	adr	x1, #184079 ; literal pool for: "Program"
0000000100006108	nop
000000010000610c	mov	x0, x20
0000000100006110	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006114	cbz	w0, 0x100006448
0000000100006118	adr	x1, #187771 ; literal pool for: "POSIXSpawnType"
000000010000611c	nop
0000000100006120	mov	x0, x20
0000000100006124	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006128	cbz	w0, 0x100006408
000000010000612c	adr	x1, #184140 ; literal pool for: "ProcessType"
0000000100006130	nop
0000000100006134	mov	x0, x20
0000000100006138	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000613c	cbz	w0, 0x100006408
0000000100006140	adr	x1, #187746 ; literal pool for: "PublishesEvents"
0000000100006144	nop
0000000100006148	mov	x0, x20
000000010000614c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006150	cbnz	w0, 0x10000625c
0000000100006154	orr	w0, wzr, #0x1
0000000100006158	bl	0x100031934 ; symbol stub for: _xpc_bool_create
000000010000615c	mov	x2, x0
0000000100006160	mov	x0, x19
0000000100006164	mov	x1, x21
0000000100006168	mov	x3, x22
000000010000616c	ldp	x29, x30, [sp, #0x80]
0000000100006170	ldp	x20, x19, [sp, #0x70]
0000000100006174	ldp	x22, x21, [sp, #0x60]
0000000100006178	ldp	x24, x23, [sp, #0x50]
000000010000617c	ldp	x26, x25, [sp, #0x40]
0000000100006180	add	sp, sp, #0x90
0000000100006184	b	0x10000763c
0000000100006188	adr	x1, #187793 ; literal pool for: "RootDirectory"
000000010000618c	nop
0000000100006190	mov	x0, x20
0000000100006194	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006198	cbnz	w0, 0x10000625c
000000010000619c	b	0x100006728
00000001000061a0	adr	x1, #187813 ; literal pool for: "StandardOutPath"
00000001000061a4	nop
00000001000061a8	mov	x0, x20
00000001000061ac	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000061b0	cbz	w0, 0x10000645c
00000001000061b4	adr	x1, #187809 ; literal pool for: "StandardErrorPath"
00000001000061b8	nop
00000001000061bc	mov	x0, x20
00000001000061c0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000061c4	cbz	w0, 0x1000067b8
00000001000061c8	adr	x1, #187807 ; literal pool for: "StandardInPath"
00000001000061cc	nop
00000001000061d0	mov	x0, x20
00000001000061d4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000061d8	cbz	w0, 0x1000067c0
00000001000061dc	adr	x1, #187802 ; literal pool for: "SandboxProfile"
00000001000061e0	nop
00000001000061e4	mov	x0, x20
00000001000061e8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000061ec	cbz	w0, 0x10000683c
00000001000061f0	adr	x1, #187797 ; literal pool for: "SandboxContainer"
00000001000061f4	nop
00000001000061f8	mov	x0, x20
00000001000061fc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006200	cbnz	w0, 0x10000625c
0000000100006204	add	x22, x19, #0x1a0
0000000100006208	b	0x100006840
000000010000620c	adr	x1, #187675 ; literal pool for: "UserName"
0000000100006210	nop
0000000100006214	mov	x0, x20
0000000100006218	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000621c	cbz	w0, 0x100006464
0000000100006220	adr	x1, #187208 ; literal pool for: "Umask"
0000000100006224	nop
0000000100006228	mov	x0, x20
000000010000622c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006230	cbnz	w0, 0x10000625c
0000000100006234	mov	w2, #0x0
0000000100006238	mov	x0, x21
000000010000623c	mov	x1, #0x0
0000000100006240	bl	0x1000317b4 ; symbol stub for: _strtoul
0000000100006244	b	0x100005aa8
0000000100006248	adr	x1, #183801 ; literal pool for: "WorkingDirectory"
000000010000624c	nop
0000000100006250	mov	x0, x20
0000000100006254	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006258	cbz	w0, 0x100006480
000000010000625c	str	x20, [sp]
0000000100006260	adr	x2, #187744 ; literal pool for: "Unknown key for string: %s"
0000000100006264	nop
0000000100006268	b	0x100005ee0
000000010000626c	ldr	x8, [x19, #0x458]
0000000100006270	bfi	x8, x21, #6, #1
0000000100006274	b	0x100005ef4
0000000100006278	ldr	x8, [x19, #0x458]
000000010000627c	bfi	x8, x21, #8, #1
0000000100006280	b	0x100005ef4
0000000100006284	adr	x1, #183703 ; literal pool for: "ProgramArguments"
0000000100006288	nop
000000010000628c	mov	x0, x20
0000000100006290	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006294	cbz	w0, 0x10000674c
0000000100006298	adr	x1, #187402 ; literal pool for: "PublishesEvents"
000000010000629c	nop
00000001000062a0	mov	x0, x20
00000001000062a4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000062a8	cbnz	w0, 0x1000063a4
00000001000062ac	nop
00000001000062b0	ldr	x8, #0x39d60 ; literal pool symbol address: __NSConcreteStackBlock
00000001000062b4	str	x8, [sp, #0x10]
00000001000062b8	nop
00000001000062bc	ldr	d0, 0x10003de90
00000001000062c0	str	d0, [sp, #0x18]
00000001000062c4	adr	x8, #5416
00000001000062c8	nop
00000001000062cc	str	x8, [sp, #0x20]
00000001000062d0	adr	x8, #240240
00000001000062d4	nop
00000001000062d8	stp	x8, x19, [sp, #0x28]
00000001000062dc	str	x22, [sp, #0x38]
00000001000062e0	add	x1, sp, #0x10
00000001000062e4	mov	x0, x21
00000001000062e8	bl	0x1000318bc ; symbol stub for: _xpc_array_apply
00000001000062ec	b	0x100005ef8
00000001000062f0	adr	x1, #187929 ; literal pool for: "QueueDirectories"
00000001000062f4	nop
00000001000062f8	mov	x0, x20
00000001000062fc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006300	cbnz	w0, 0x1000063a4
0000000100006304	mov	x0, #0x0
0000000100006308	mov	x1, #0x0
000000010000630c	mov	x2, #0x0
0000000100006310	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100006314	mov	x20, x0
0000000100006318	adr	x1, #187889 ; literal pool for: "QueueDirectories"
000000010000631c	nop
0000000100006320	mov	x2, x21
0000000100006324	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100006328	adr	x1, #187890 ; literal pool for: "com.apple.fsevents.matching"
000000010000632c	nop
0000000100006330	adr	x2, #187910 ; literal pool for: "com.apple.launchd.QueueDirectories"
0000000100006334	nop
0000000100006338	b	0x100006794
000000010000633c	adr	x1, #187831 ; literal pool for: "StartCalendarInterval"
0000000100006340	nop
0000000100006344	mov	x0, x20
0000000100006348	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000634c	cbnz	w0, 0x1000063a4
0000000100006350	mov	x0, x21
0000000100006354	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100006358	cbz	x0, 0x100005ef8
000000010000635c	mov	x20, #0x0
0000000100006360	mov	x0, x21
0000000100006364	mov	x1, x20
0000000100006368	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
000000010000636c	mov	x1, x0
0000000100006370	mov	x0, x19
0000000100006374	bl	0x1000078a0
0000000100006378	add	x20, x20, #0x1
000000010000637c	mov	x0, x21
0000000100006380	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100006384	cmp	x20, x0
0000000100006388	b.lo	0x100006360
000000010000638c	b	0x100005ef8
0000000100006390	adr	x1, #187849 ; literal pool for: "WatchPaths"
0000000100006394	nop
0000000100006398	mov	x0, x20
000000010000639c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000063a0	cbz	w0, 0x100006760
00000001000063a4	str	x20, [sp]
00000001000063a8	adr	x2, #187865 ; literal pool for: "Unknown key for array: %s"
00000001000063ac	nop
00000001000063b0	orr	w1, wzr, #0x4
00000001000063b4	mov	x0, x22
00000001000063b8	bl	0x10000ce7c
00000001000063bc	b	0x100005eec
00000001000063c0	str	x20, [sp]
00000001000063c4	adr	x2, #185524 ; literal pool for: "Please switch away from %s to KeepAlive."
00000001000063c8	nop
00000001000063cc	mov	w1, #0x5
00000001000063d0	mov	x0, x19
00000001000063d4	bl	0x1000118ec
00000001000063d8	ldr	x8, [x19, #0x458]
00000001000063dc	orr	x8, x8, #0x8
00000001000063e0	b	0x100005ef4
00000001000063e4	ldr	x8, [x19, #0x458]
00000001000063e8	bfi	x8, x21, #11, #1
00000001000063ec	b	0x100005ef4
00000001000063f0	ldr	x8, [x19, #0x458]
00000001000063f4	bfi	x8, x21, #47, #1
00000001000063f8	b	0x100005ef4
00000001000063fc	ldr	x8, [x19, #0x458]
0000000100006400	orr	x8, x8, #0x100000000
0000000100006404	b	0x100005ef4
0000000100006408	mov	x0, x19
000000010000640c	mov	x1, x21
0000000100006410	ldp	x29, x30, [sp, #0x80]
0000000100006414	ldp	x20, x19, [sp, #0x70]
0000000100006418	ldp	x22, x21, [sp, #0x60]
000000010000641c	ldp	x24, x23, [sp, #0x50]
0000000100006420	ldp	x26, x25, [sp, #0x40]
0000000100006424	add	sp, sp, #0x90
0000000100006428	b	0x100003b40
000000010000642c	add	x22, x19, #0x208
0000000100006430	b	0x100006858
0000000100006434	ldrb	w8, [x19, #0x458]
0000000100006438	tbz	w8, #0x1, 0x100005ef8
000000010000643c	adr	x2, #186998 ; literal pool for: "Service bundle specifies a Label. Ignoring."
0000000100006440	nop
0000000100006444	b	0x100005ee0
0000000100006448	ldrb	w8, [x19, #0x458]
000000010000644c	tbz	w8, #0x1, 0x100005ef8
0000000100006450	adr	x2, #186903 ; literal pool for: "Service bundle specifies Program. Ignoring."
0000000100006454	nop
0000000100006458	b	0x100005ee0
000000010000645c	add	x22, x19, #0x190
0000000100006460	b	0x100006840
0000000100006464	adr	x1, #187084 ; literal pool for: "root"
0000000100006468	nop
000000010000646c	mov	x0, x21
0000000100006470	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006474	cbz	w0, 0x100005ef8
0000000100006478	add	x22, x19, #0x268
000000010000647c	b	0x100006840
0000000100006480	add	x22, x19, #0x180
0000000100006484	b	0x100006840
0000000100006488	adr	x1, #187871 ; literal pool for: "HardResourceLimits"
000000010000648c	nop
0000000100006490	mov	x0, x20
0000000100006494	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006498	cbnz	w0, 0x100006718
000000010000649c	ldr	x8, [x19, #0x458]
00000001000064a0	orr	x8, x8, #0x4000000000
00000001000064a4	str	x8, [x19, #0x458]
00000001000064a8	adr	x2, #6940
00000001000064ac	nop
00000001000064b0	mov	x0, x21
00000001000064b4	mov	x1, x19
00000001000064b8	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
00000001000064bc	ldr	x8, [x19, #0x458]
00000001000064c0	and	x8, x8, #0xffffffbfffffffff
00000001000064c4	b	0x100005ef4
00000001000064c8	adr	x1, #187719 ; literal pool for: "inetdCompatibility"
00000001000064cc	nop
00000001000064d0	mov	x0, x20
00000001000064d4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000064d8	cbnz	w0, 0x100006718
00000001000064dc	ldr	x8, [x19, #0x458]
00000001000064e0	mov	w9, #0x8000
00000001000064e4	movk	w9, #0x2, lsl #16
00000001000064e8	orr	x8, x8, x9
00000001000064ec	str	x8, [x19, #0x458]
00000001000064f0	adr	x2, #6224
00000001000064f4	nop
00000001000064f8	b	0x100006894
00000001000064fc	adr	x1, #187686 ; literal pool for: "JetsamProperties"
0000000100006500	nop
0000000100006504	mov	x0, x20
0000000100006508	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000650c	cbnz	w0, 0x100006718
0000000100006510	b	0x100005ef8
0000000100006514	adr	x1, #184999 ; literal pool for: "KeepAlive"
0000000100006518	nop
000000010000651c	mov	x0, x20
0000000100006520	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006524	cbnz	w0, 0x100006718
0000000100006528	nop
000000010000652c	ldr	x8, #0x39ae4 ; literal pool symbol address: __NSConcreteStackBlock
0000000100006530	str	x8, [sp, #0x10]
0000000100006534	nop
0000000100006538	ldr	d0, 0x10003de90
000000010000653c	str	d0, [sp, #0x18]
0000000100006540	adr	x8, #5440
0000000100006544	nop
0000000100006548	str	x8, [sp, #0x20]
000000010000654c	adr	x8, #239668
0000000100006550	nop
0000000100006554	b	0x100006824
0000000100006558	adr	x1, #187695 ; literal pool for: "LaunchEvents"
000000010000655c	nop
0000000100006560	mov	x0, x20
0000000100006564	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006568	cbz	w0, 0x1000067c8
000000010000656c	adr	x1, #187688 ; literal pool for: "LimitLoadToHardware"
0000000100006570	nop
0000000100006574	mov	x0, x20
0000000100006578	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000657c	mov	x21, x0
0000000100006580	adr	x1, #187688 ; literal pool for: "LimitLoadFromHardware"
0000000100006584	nop
0000000100006588	mov	x0, x20
000000010000658c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006590	mov	x22, x0
0000000100006594	adr	x1, #187690 ; literal pool for: "_LimitLoadToDeviceTree"
0000000100006598	nop
000000010000659c	mov	x0, x20
00000001000065a0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000065a4	cbz	w0, 0x100005ef8
00000001000065a8	cbz	w21, 0x100005ef8
00000001000065ac	cbnz	w22, 0x100006718
00000001000065b0	b	0x100005ef8
00000001000065b4	adr	x1, #187590 ; literal pool for: "MachServices"
00000001000065b8	nop
00000001000065bc	mov	x0, x20
00000001000065c0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000065c4	cbnz	w0, 0x100006718
00000001000065c8	nop
00000001000065cc	ldr	x8, #0x39a44 ; literal pool symbol address: __NSConcreteStackBlock
00000001000065d0	str	x8, [sp, #0x10]
00000001000065d4	nop
00000001000065d8	ldr	d0, 0x10003de90
00000001000065dc	str	d0, [sp, #0x18]
00000001000065e0	adr	x8, #6876
00000001000065e4	nop
00000001000065e8	str	x8, [sp, #0x20]
00000001000065ec	adr	x8, #239572
00000001000065f0	nop
00000001000065f4	b	0x100006824
00000001000065f8	adr	x1, #187342 ; literal pool for: "Policies"
00000001000065fc	nop
0000000100006600	mov	x0, x20
0000000100006604	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006608	cbz	w0, 0x1000066ec
000000010000660c	adr	x1, #186518 ; literal pool for: "PublishesEvents"
0000000100006610	nop
0000000100006614	mov	x0, x20
0000000100006618	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000661c	cbnz	w0, 0x100006718
0000000100006620	nop
0000000100006624	ldr	x8, #0x399ec ; literal pool symbol address: __NSConcreteStackBlock
0000000100006628	str	x8, [sp, #0x10]
000000010000662c	nop
0000000100006630	ldr	d0, 0x10003de90
0000000100006634	str	d0, [sp, #0x18]
0000000100006638	adr	x8, #5028
000000010000663c	nop
0000000100006640	str	x8, [sp, #0x20]
0000000100006644	adr	x8, #239388
0000000100006648	nop
000000010000664c	b	0x100006824
0000000100006650	adr	x1, #187525 ; literal pool for: "RemoteServices"
0000000100006654	nop
0000000100006658	mov	x0, x20
000000010000665c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006660	cbnz	w0, 0x100006718
0000000100006664	nop
0000000100006668	ldr	x8, #0x399a8 ; literal pool symbol address: __NSConcreteStackBlock
000000010000666c	str	x8, [sp, #0x10]
0000000100006670	nop
0000000100006674	ldr	d0, 0x10003de90
0000000100006678	str	d0, [sp, #0x18]
000000010000667c	adr	x8, #6948
0000000100006680	nop
0000000100006684	str	x8, [sp, #0x20]
0000000100006688	adr	x8, #239480
000000010000668c	nop
0000000100006690	stp	x8, x22, [sp, #0x28]
0000000100006694	str	x19, [sp, #0x38]
0000000100006698	b	0x10000682c
000000010000669c	adr	x1, #187312 ; literal pool for: "Sockets"
00000001000066a0	nop
00000001000066a4	mov	x0, x20
00000001000066a8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000066ac	cbz	w0, 0x1000067f8
00000001000066b0	adr	x1, #186947 ; literal pool for: "StartCalendarInterval"
00000001000066b4	nop
00000001000066b8	mov	x0, x20
00000001000066bc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000066c0	cbz	w0, 0x10000687c
00000001000066c4	adr	x1, #187280 ; literal pool for: "SoftResourceLimits"
00000001000066c8	nop
00000001000066cc	mov	x0, x20
00000001000066d0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000066d4	cbz	w0, 0x10000688c
00000001000066d8	adr	x1, #186020 ; literal pool for: "SandboxFlags"
00000001000066dc	nop
00000001000066e0	mov	x0, x20
00000001000066e4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000066e8	cbnz	w0, 0x100006718
00000001000066ec	adr	x8, #184575 ; literal pool for: "Please remove it."
00000001000066f0	nop
00000001000066f4	stp	x20, x8, [sp]
00000001000066f8	adr	x2, #184525 ; literal pool for: "The %s key is no longer respected. %s"
00000001000066fc	nop
0000000100006700	b	0x10000673c
0000000100006704	adr	x1, #187183 ; literal pool for: "UserEnvironmentVariables"
0000000100006708	nop
000000010000670c	mov	x0, x20
0000000100006710	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006714	cbz	w0, 0x100006728
0000000100006718	str	x20, [sp]
000000010000671c	adr	x2, #187444 ; literal pool for: "Unknown key for dictionary: %s"
0000000100006720	nop
0000000100006724	b	0x100005ee0
0000000100006728	adr	x8, #185044 ; literal pool for: "If you rely on this key, please file a bug."
000000010000672c	nop
0000000100006730	stp	x20, x8, [sp]
0000000100006734	adr	x2, #184994 ; literal pool for: "The %s key is not yet implemented. %s"
0000000100006738	nop
000000010000673c	orr	w1, wzr, #0x3
0000000100006740	mov	x0, x19
0000000100006744	bl	0x1000118ec
0000000100006748	b	0x100005ef8
000000010000674c	ldrb	w8, [x19, #0x458]
0000000100006750	tbz	w8, #0x1, 0x100005ef8
0000000100006754	adr	x2, #186618 ; literal pool for: "Service bundle specifies ProgramArguments. Ignoring."
0000000100006758	nop
000000010000675c	b	0x1000063b0
0000000100006760	mov	x0, #0x0
0000000100006764	mov	x1, #0x0
0000000100006768	mov	x2, #0x0
000000010000676c	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100006770	mov	x20, x0
0000000100006774	adr	x1, #186853 ; literal pool for: "WatchPaths"
0000000100006778	nop
000000010000677c	mov	x2, x21
0000000100006780	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100006784	adr	x1, #186774 ; literal pool for: "com.apple.fsevents.matching"
0000000100006788	nop
000000010000678c	adr	x2, #186840 ; literal pool for: "com.apple.launchd.WatchPaths"
0000000100006790	nop
0000000100006794	mov	x0, x19
0000000100006798	mov	x3, x20
000000010000679c	bl	0x100007948
00000001000067a0	mov	x0, x20
00000001000067a4	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000067a8	b	0x100005ef8
00000001000067ac	ldr	x8, [x19, #0x458]
00000001000067b0	bfi	x8, x21, #20, #1
00000001000067b4	b	0x100005ef4
00000001000067b8	add	x22, x19, #0x198
00000001000067bc	b	0x100006840
00000001000067c0	add	x22, x19, #0x188
00000001000067c4	b	0x100006840
00000001000067c8	nop
00000001000067cc	ldr	x8, #0x39844 ; literal pool symbol address: __NSConcreteStackBlock
00000001000067d0	str	x8, [sp, #0x10]
00000001000067d4	nop
00000001000067d8	ldr	d0, 0x10003de90
00000001000067dc	str	d0, [sp, #0x18]
00000001000067e0	adr	x8, #6396
00000001000067e4	nop
00000001000067e8	str	x8, [sp, #0x20]
00000001000067ec	adr	x8, #239092
00000001000067f0	nop
00000001000067f4	b	0x100006824
00000001000067f8	nop
00000001000067fc	ldr	x8, #0x39814 ; literal pool symbol address: __NSConcreteStackBlock
0000000100006800	str	x8, [sp, #0x10]
0000000100006804	nop
0000000100006808	ldr	d0, 0x10003de90
000000010000680c	str	d0, [sp, #0x18]
0000000100006810	adr	x8, #5732
0000000100006814	nop
0000000100006818	str	x8, [sp, #0x20]
000000010000681c	adr	x8, #238980
0000000100006820	nop
0000000100006824	stp	x8, x19, [sp, #0x28]
0000000100006828	str	x22, [sp, #0x38]
000000010000682c	add	x1, sp, #0x10
0000000100006830	mov	x0, x21
0000000100006834	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
0000000100006838	b	0x100005ef8
000000010000683c	add	x22, x19, #0x1a8
0000000100006840	mov	x0, x21
0000000100006844	bl	0x10003173c ; symbol stub for: _strlen
0000000100006848	ldr	x8, [x19, #0x218]
000000010000684c	add	x8, x0, x8
0000000100006850	add	x8, x8, #0x1
0000000100006854	str	x8, [x19, #0x218]
0000000100006858	mov	x0, x21
000000010000685c	bl	0x10000d578
0000000100006860	str	x0, [x22]
0000000100006864	cbnz	x0, 0x100005ef8
0000000100006868	str	x20, [sp]
000000010000686c	adr	x2, #186154 ; literal pool for: "Could not set string argument for key: %s"
0000000100006870	nop
0000000100006874	orr	w1, wzr, #0x3
0000000100006878	b	0x100005ee4
000000010000687c	mov	x0, x19
0000000100006880	mov	x1, x21
0000000100006884	bl	0x1000078a0
0000000100006888	b	0x100005ef8
000000010000688c	adr	x2, #5944
0000000100006890	nop
0000000100006894	mov	x0, x21
0000000100006898	mov	x1, x19
000000010000689c	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
00000001000068a0	b	0x100005ef8
00000001000068a4	.long	0xfffff694
00000001000068a8	.long	0xfffffe74
00000001000068ac	.long	0xfffffe74
00000001000068b0	.long	0xfffffbe4
00000001000068b4	.long	0xfffffc24
00000001000068b8	.long	0xfffffc58
00000001000068bc	.long	0xfffffc70
00000001000068c0	.long	0xfffffcb4
00000001000068c4	.long	0xfffffd10
00000001000068c8	.long	0xfffffe74
00000001000068cc	.long	0xfffffe74
00000001000068d0	.long	0xfffffd54
00000001000068d4	.long	0xfffffe74
00000001000068d8	.long	0xfffffdac
00000001000068dc	.long	0xfffffdf8
00000001000068e0	.long	0xfffffe74
00000001000068e4	.long	0xfffffe60
00000001000068e8	.long	0xfffffe74
00000001000068ec	.long	0xfffffe74
00000001000068f0	.long	0xfffffe74
00000001000068f4	.long	0xfffffe74
00000001000068f8	.long	0xfffffe74
00000001000068fc	.long	0xfffffe74
0000000100006900	.long	0xfffffe74
0000000100006904	.long	0xfffffe74
0000000100006908	.long	0xfffffe74
000000010000690c	.long	0xfffffe74
0000000100006910	.long	0xfffffe74
0000000100006914	.long	0xfffffe74
0000000100006918	.long	0xfffffe74
000000010000691c	.long	0xfffffe74
0000000100006920	.long	0xfffffe74
0000000100006924	.long	0xfffff694
0000000100006928	.long	0xfffffe74
000000010000692c	.long	0xfffffe74
0000000100006930	.long	0xfffffbe4
0000000100006934	.long	0xfffffc24
0000000100006938	.long	0xfffffc58
000000010000693c	.long	0xfffffc70
0000000100006940	.long	0xfffffcb4
0000000100006944	.long	0xfffffd10
0000000100006948	.long	0xfffffe74
000000010000694c	.long	0xfffffe74
0000000100006950	.long	0xfffffd54
0000000100006954	.long	0xfffffe74
0000000100006958	.long	0xfffffdac
000000010000695c	.long	0xfffffdf8
0000000100006960	.long	0xfffffe74
0000000100006964	.long	0xfffffe60
0000000100006968	.long	0xfffff240
000000010000696c	.long	0xfffffa3c
0000000100006970	.long	0xfffffa3c
0000000100006974	.long	0xfffffa3c
0000000100006978	.long	0xfffff91c
000000010000697c	.long	0xfffff988
0000000100006980	.long	0xfffffa3c
0000000100006984	.long	0xfffff9d4
0000000100006988	.long	0xfffffa3c
000000010000698c	.long	0xfffffa3c
0000000100006990	.long	0xfffffa3c
0000000100006994	.long	0xfffffa28
0000000100006998	.long	0xfffff1c8
000000010000699c	.long	0xfffff8c4
00000001000069a0	.long	0xfffff8c4
00000001000069a4	.long	0xfffff8c4
00000001000069a8	.long	0xfffff6cc
00000001000069ac	.long	0xfffff8c4
00000001000069b0	.long	0xfffff8c4
00000001000069b4	.long	0xfffff8c4
00000001000069b8	.long	0xfffff8c4
00000001000069bc	.long	0xfffff6fc
00000001000069c0	.long	0xfffff750
00000001000069c4	.long	0xfffff8c4
00000001000069c8	.long	0xfffff8c4
00000001000069cc	.long	0xfffff76c
00000001000069d0	.long	0xfffff8c4
00000001000069d4	.long	0xfffff7f0
00000001000069d8	.long	0xfffff808
00000001000069dc	.long	0xfffff8c4
00000001000069e0	.long	0xfffff874
00000001000069e4	.long	0xfffff8c4
00000001000069e8	.long	0xfffff8b0
00000001000069ec	.long	0xfffff080
00000001000069f0	.long	0xfffff1fc
00000001000069f4	.long	0xfffff4e8
00000001000069f8	.long	0xfffff208
00000001000069fc	.long	0xfffff278
0000000100006a00	.long	0xfffff2fc
0000000100006a04	.long	0xfffff4e8
0000000100006a08	.long	0xfffff308
0000000100006a0c	.long	0xfffff320
0000000100006a10	.long	0xfffff4e8
0000000100006a14	.long	0xfffff34c
0000000100006a18	.long	0xfffff378
0000000100006a1c	.long	0xfffff3d4
0000000100006a20	.long	0xfffff4e8
0000000100006a24	.long	0xfffff414
0000000100006a28	.long	0xfffff4e8
0000000100006a2c	.long	0xfffff4e8
0000000100006a30	.long	0xfffff440
0000000100006a34	.long	0xfffff460
0000000100006a38	.long	0xfffff4a8
0000000100006a3c	.long	0xfffff4e8
0000000100006a40	.long	0xfffff4e8
0000000100006a44	.long	0xfffff4d4
0000000100006a48	.long	0xfffff4e8
0000000100006a4c	.long	0xfffff4e8
0000000100006a50	.long	0xfffff4e8
0000000100006a54	.long	0xfffff4e8
0000000100006a58	.long	0xfffff4e8
0000000100006a5c	.long	0xfffff4e8
0000000100006a60	.long	0xfffff4e8
0000000100006a64	.long	0xfffff4e8
0000000100006a68	.long	0xfffff4e8
0000000100006a6c	.long	0xfffff080
0000000100006a70	.long	0xfffff1fc
0000000100006a74	.long	0xfffff4e8
0000000100006a78	.long	0xfffff208
0000000100006a7c	.long	0xfffff278
0000000100006a80	.long	0xfffff2fc
0000000100006a84	.long	0xfffff4e8
0000000100006a88	.long	0xfffff308
0000000100006a8c	.long	0xfffff320
0000000100006a90	.long	0xfffff4e8
0000000100006a94	.long	0xfffff34c
0000000100006a98	.long	0xfffff378
0000000100006a9c	.long	0xfffff3d4
0000000100006aa0	.long	0xfffff4e8
0000000100006aa4	.long	0xfffff414
0000000100006aa8	.long	0xfffff4e8
0000000100006aac	.long	0xfffff4e8
0000000100006ab0	.long	0xfffff440
0000000100006ab4	.long	0xfffff460
0000000100006ab8	.long	0xfffff4a8
0000000100006abc	.long	0xfffff4e8
0000000100006ac0	.long	0xfffff4e8
0000000100006ac4	.long	0xfffff4d4
0000000100006ac8	sub	sp, sp, #0x70
0000000100006acc	stp	x22, x21, [sp, #0x40]
0000000100006ad0	stp	x20, x19, [sp, #0x50]
0000000100006ad4	stp	x29, x30, [sp, #0x60]
0000000100006ad8	add	x29, sp, #0x60
0000000100006adc	mov	x21, x1
0000000100006ae0	mov	x20, x0
0000000100006ae4	ldp	x19, x22, [x2]
0000000100006ae8	mov	x0, x21
0000000100006aec	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100006af0	nop
0000000100006af4	ldr	x8, #0x395ac ; literal pool symbol address: __xpc_type_bool
0000000100006af8	cmp	x0, x8
0000000100006afc	b.eq	0x100006b78
0000000100006b00	nop
0000000100006b04	ldr	x8, #0x395cc ; literal pool symbol address: __xpc_type_int64
0000000100006b08	cmp	x0, x8
0000000100006b0c	b.eq	0x100006bc4
0000000100006b10	nop
0000000100006b14	ldr	x8, #0x395b4 ; literal pool symbol address: __xpc_type_double
0000000100006b18	cmp	x0, x8
0000000100006b1c	b.eq	0x100006c28
0000000100006b20	nop
0000000100006b24	ldr	x8, #0x3958c ; literal pool symbol address: __xpc_type_data
0000000100006b28	cmp	x0, x8
0000000100006b2c	b.eq	0x100006cb0
0000000100006b30	nop
0000000100006b34	ldr	x8, #0x395ac ; literal pool symbol address: __xpc_type_string
0000000100006b38	cmp	x0, x8
0000000100006b3c	b.eq	0x100006cd0
0000000100006b40	nop
0000000100006b44	ldr	x8, #0x39554 ; literal pool symbol address: __xpc_type_array
0000000100006b48	cmp	x0, x8
0000000100006b4c	b.eq	0x100006d0c
0000000100006b50	nop
0000000100006b54	ldr	x8, #0x3956c ; literal pool symbol address: __xpc_type_dictionary
0000000100006b58	cmp	x0, x8
0000000100006b5c	b.eq	0x100006d8c
0000000100006b60	ldr	x8, [x0, #0x30]
0000000100006b64	stp	x20, x8, [sp]
0000000100006b68	adr	x2, #183248 ; literal pool for: "Invalid type for service dictionary (key/type): %s/%s"
0000000100006b6c	nop
0000000100006b70	orr	w1, wzr, #0x3
0000000100006b74	b	0x100006ef8
0000000100006b78	mov	x0, x21
0000000100006b7c	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100006b80	mov	x21, x0
0000000100006b84	ldrsb	w8, [x20]
0000000100006b88	cmp	w8, #0x6a
0000000100006b8c	b.eq	0x100006ba0
0000000100006b90	cmp	w8, #0x5f
0000000100006b94	b.eq	0x100006c40
0000000100006b98	cmp	w8, #0x4a
0000000100006b9c	b.ne	0x100006bb4
0000000100006ba0	adr	x1, #186985 ; literal pool for: "JoinExistingSession"
0000000100006ba4	nop
0000000100006ba8	mov	x0, x20
0000000100006bac	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006bb0	cbz	w0, 0x100006eac
0000000100006bb4	str	x20, [sp]
0000000100006bb8	adr	x2, #184143 ; literal pool for: "Unknown key for Boolean: %s"
0000000100006bbc	nop
0000000100006bc0	b	0x100006e94
0000000100006bc4	mov	x0, x21
0000000100006bc8	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100006bcc	mov	x21, x0
0000000100006bd0	ldrb	w8, [x20]
0000000100006bd4	cmp	w8, #0x5f
0000000100006bd8	b.ne	0x100006c18
0000000100006bdc	adr	x1, #187035 ; literal pool for: "_VoluntaryExitTimeOut"
0000000100006be0	nop
0000000100006be4	mov	x0, x20
0000000100006be8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006bec	cbz	w0, 0x100006d04
0000000100006bf0	adr	x1, #187037 ; literal pool for: "_LaunchWatchdogTimeOut"
0000000100006bf4	nop
0000000100006bf8	mov	x0, x20
0000000100006bfc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006c00	cbz	w0, 0x100006d5c
0000000100006c04	adr	x1, #187040 ; literal pool for: "_ThrottleInterval"
0000000100006c08	nop
0000000100006c0c	mov	x0, x20
0000000100006c10	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006c14	cbz	w0, 0x100006e34
0000000100006c18	str	x20, [sp]
0000000100006c1c	adr	x2, #184793 ; literal pool for: "Unknown key for integer: %s"
0000000100006c20	nop
0000000100006c24	b	0x100006e94
0000000100006c28	mov	x0, x21
0000000100006c2c	bl	0x100031b2c ; symbol stub for: _xpc_double_get_value
0000000100006c30	str	x20, [sp]
0000000100006c34	adr	x2, #184797 ; literal pool for: "Unknown key for double: %s"
0000000100006c38	nop
0000000100006c3c	b	0x100006e94
0000000100006c40	adr	x1, #186845 ; literal pool for: "_MultipleInstances"
0000000100006c44	nop
0000000100006c48	mov	x0, x20
0000000100006c4c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006c50	cbz	w0, 0x100006d50
0000000100006c54	adr	x1, #186844 ; literal pool for: "_JoinGUISession"
0000000100006c58	nop
0000000100006c5c	mov	x0, x20
0000000100006c60	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006c64	cbz	w0, 0x100006eac
0000000100006c68	adr	x1, #186840 ; literal pool for: "_AbandonCoalition"
0000000100006c6c	nop
0000000100006c70	mov	x0, x20
0000000100006c74	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006c78	cbz	w0, 0x100006e54
0000000100006c7c	adr	x1, #186838 ; literal pool for: "_OmitSandboxParameters"
0000000100006c80	nop
0000000100006c84	mov	x0, x20
0000000100006c88	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006c8c	cbz	w0, 0x100006eac
0000000100006c90	adr	x1, #186841 ; literal pool for: "_HighBitsASLR"
0000000100006c94	nop
0000000100006c98	mov	x0, x20
0000000100006c9c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006ca0	cbnz	w0, 0x100006bb4
0000000100006ca4	ldr	x8, [x19, #0x458]
0000000100006ca8	bfi	x8, x21, #36, #1
0000000100006cac	b	0x100006ea8
0000000100006cb0	mov	x0, x21
0000000100006cb4	bl	0x1000319dc ; symbol stub for: _xpc_data_get_bytes_ptr
0000000100006cb8	mov	x0, x21
0000000100006cbc	bl	0x1000319e8 ; symbol stub for: _xpc_data_get_length
0000000100006cc0	str	x20, [sp]
0000000100006cc4	adr	x2, #184695 ; literal pool for: "Unknown key for data: %s"
0000000100006cc8	nop
0000000100006ccc	b	0x100006e94
0000000100006cd0	mov	x0, x21
0000000100006cd4	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100006cd8	mov	x21, x0
0000000100006cdc	ldrsb	w8, [x20]
0000000100006ce0	cmp	w8, #0x5e
0000000100006ce4	b.le	0x100006d64
0000000100006ce8	cmp	w8, #0x5f
0000000100006cec	b.eq	0x100006e60
0000000100006cf0	cmp	w8, #0x73
0000000100006cf4	b.eq	0x100006d74
0000000100006cf8	cmp	w8, #0x72
0000000100006cfc	b.eq	0x100006dcc
0000000100006d00	b	0x100006e88
0000000100006d04	str	w21, [x19, #0x2a0]
0000000100006d08	b	0x100006eac
0000000100006d0c	ldrb	w8, [x20]
0000000100006d10	cmp	w8, #0x5f
0000000100006d14	b.ne	0x100006d40
0000000100006d18	adr	x1, #186967 ; literal pool for: "_AdditionalServices"
0000000100006d1c	nop
0000000100006d20	mov	x0, x20
0000000100006d24	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006d28	cbz	w0, 0x100006ec0
0000000100006d2c	adr	x1, #186967 ; literal pool for: "_AllowedClients"
0000000100006d30	nop
0000000100006d34	mov	x0, x20
0000000100006d38	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006d3c	cbz	w0, 0x100006eac
0000000100006d40	str	x20, [sp]
0000000100006d44	adr	x2, #185405 ; literal pool for: "Unknown key for array: %s"
0000000100006d48	nop
0000000100006d4c	b	0x100006e94
0000000100006d50	ldr	x8, [x19, #0x458]
0000000100006d54	bfi	x8, x21, #8, #1
0000000100006d58	b	0x100006ea8
0000000100006d5c	str	w21, [x19, #0x2a4]
0000000100006d60	b	0x100006eac
0000000100006d64	cmp	w8, #0x52
0000000100006d68	b.eq	0x100006dcc
0000000100006d6c	cmp	w8, #0x53
0000000100006d70	b.ne	0x100006e88
0000000100006d74	adr	x1, #186834 ; literal pool for: "ServiceType"
0000000100006d78	nop
0000000100006d7c	mov	x0, x20
0000000100006d80	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006d84	cbnz	w0, 0x100006e88
0000000100006d88	b	0x100006eac
0000000100006d8c	ldrsb	w8, [x20]
0000000100006d90	cmp	w8, #0x65
0000000100006d94	b.eq	0x100006da8
0000000100006d98	cmp	w8, #0x5f
0000000100006d9c	b.eq	0x100006f04
0000000100006da0	cmp	w8, #0x45
0000000100006da4	b.ne	0x100006dbc
0000000100006da8	adr	x1, #180868 ; literal pool for: "EnvironmentVariables"
0000000100006dac	nop
0000000100006db0	mov	x0, x20
0000000100006db4	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006db8	cbz	w0, 0x100006f7c
0000000100006dbc	str	x20, [sp]
0000000100006dc0	adr	x2, #185744 ; literal pool for: "Unknown key for dictionary: %s"
0000000100006dc4	nop
0000000100006dc8	b	0x100006e94
0000000100006dcc	adr	x1, #186670 ; literal pool for: "RunLoopType"
0000000100006dd0	nop
0000000100006dd4	mov	x0, x20
0000000100006dd8	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006ddc	cbnz	w0, 0x100006e88
0000000100006de0	adr	x1, #186662 ; literal pool for: "_UIApplicationMain"
0000000100006de4	nop
0000000100006de8	mov	x0, x21
0000000100006dec	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006df0	cbnz	w0, 0x100006e00
0000000100006df4	ldr	x8, [x19, #0x458]
0000000100006df8	orr	x8, x8, #0x4000000
0000000100006dfc	str	x8, [x19, #0x458]
0000000100006e00	adr	x1, #186649 ; literal pool for: "_WatchKitHackUIApplicationMain"
0000000100006e04	nop
0000000100006e08	mov	x0, x21
0000000100006e0c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006e10	cbz	w0, 0x100006e28
0000000100006e14	adr	x1, #186660 ; literal pool for: "_WatchKitHack"
0000000100006e18	nop
0000000100006e1c	mov	x0, x21
0000000100006e20	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006e24	cbnz	w0, 0x100006eac
0000000100006e28	ldr	x8, [x19, #0x458]
0000000100006e2c	orr	x8, x8, #0x4000000
0000000100006e30	b	0x100006ea8
0000000100006e34	tbnz	x21, #0x3f, 0x100006ee8
0000000100006e38	orr	x8, xzr, #0x100000000
0000000100006e3c	cmp	x21, x8
0000000100006e40	b.lt	0x100006f70
0000000100006e44	str	x20, [sp]
0000000100006e48	adr	x2, #183556 ; literal pool for: "%s is too large. Ignoring."
0000000100006e4c	nop
0000000100006e50	b	0x100006ef4
0000000100006e54	ldr	x8, [x19, #0x458]
0000000100006e58	bfi	x8, x21, #33, #1
0000000100006e5c	b	0x100006ea8
0000000100006e60	adr	x1, #186610 ; literal pool for: "_RoleAccount"
0000000100006e64	nop
0000000100006e68	mov	x0, x20
0000000100006e6c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006e70	cbz	w0, 0x100006f94
0000000100006e74	adr	x1, #186603 ; literal pool for: "_SandboxProfile"
0000000100006e78	nop
0000000100006e7c	mov	x0, x20
0000000100006e80	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100006e84	cbz	w0, 0x100006fb0
0000000100006e88	str	x20, [sp]
0000000100006e8c	adr	x2, #184628 ; literal pool for: "Unknown key for string: %s"
0000000100006e90	nop
0000000100006e94	orr	w1, wzr, #0x4
0000000100006e98	mov	x0, x19
0000000100006e9c	bl	0x1000118ec
0000000100006ea0	ldr	x8, [x19, #0x458]
0000000100006ea4	orr	x8, x8, #0x1
0000000100006ea8	str	x8, [x19, #0x458]
0000000100006eac	ldp	x29, x30, [sp, #0x60]
0000000100006eb0	ldp	x20, x19, [sp, #0x50]
0000000100006eb4	ldp	x22, x21, [sp, #0x40]
0000000100006eb8	add	sp, sp, #0x70
0000000100006ebc	ret
0000000100006ec0	nop
0000000100006ec4	ldr	x2, #0x391cc ; literal pool symbol address: __xpc_bool_true
0000000100006ec8	mov	x0, x19
0000000100006ecc	mov	x1, x20
0000000100006ed0	mov	x3, x22
0000000100006ed4	ldp	x29, x30, [sp, #0x60]
0000000100006ed8	ldp	x20, x19, [sp, #0x50]
0000000100006edc	ldp	x22, x21, [sp, #0x40]
0000000100006ee0	add	sp, sp, #0x70
0000000100006ee4	b	0x100003d10
0000000100006ee8	str	x20, [sp]
0000000100006eec	adr	x2, #183363 ; literal pool for: "%s less than zero. Ignoring."
0000000100006ef0	nop
0000000100006ef4	orr	w1, wzr, #0x4
0000000100006ef8	mov	x0, x19
0000000100006efc	bl	0x1000118ec
0000000100006f00	b	0x100006eac
0000000100006f04	adr	x1, #186511 ; literal pool for: "_LaunchEvents"
0000000100006f08	nop
0000000100006f0c	mov	x0, x20
0000000100006f10	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006f14	cbz	w0, 0x100006ff0
0000000100006f18	adr	x1, #186455 ; literal pool for: "_AdditionalServices"
0000000100006f1c	nop
0000000100006f20	mov	x0, x20
0000000100006f24	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006f28	cbz	w0, 0x100007034
0000000100006f2c	adr	x1, #186528 ; literal pool for: "_AdditionalSubServices"
0000000100006f30	nop
0000000100006f34	mov	x0, x20
0000000100006f38	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006f3c	cbnz	w0, 0x100006dbc
0000000100006f40	nop
0000000100006f44	ldr	x8, #0x390cc ; literal pool symbol address: __NSConcreteStackBlock
0000000100006f48	str	x8, [sp, #0x10]
0000000100006f4c	nop
0000000100006f50	ldr	d0, 0x10003de90
0000000100006f54	str	d0, [sp, #0x18]
0000000100006f58	adr	x8, #5044
0000000100006f5c	nop
0000000100006f60	str	x8, [sp, #0x20]
0000000100006f64	adr	x8, #237452
0000000100006f68	nop
0000000100006f6c	b	0x100007080
0000000100006f70	cbz	x21, 0x100007008
0000000100006f74	str	w21, [x19, #0x28c]
0000000100006f78	b	0x100006eac
0000000100006f7c	adr	x2, #3640
0000000100006f80	nop
0000000100006f84	mov	x0, x21
0000000100006f88	mov	x1, x19
0000000100006f8c	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100006f90	b	0x100006eac
0000000100006f94	adr	x1, #184220 ; literal pool for: "root"
0000000100006f98	nop
0000000100006f9c	mov	x0, x21
0000000100006fa0	bl	0x100031700 ; symbol stub for: _strcmp
0000000100006fa4	cbz	w0, 0x100007028
0000000100006fa8	add	x22, x19, #0x268
0000000100006fac	b	0x100006fb4
0000000100006fb0	add	x22, x19, #0x1a8
0000000100006fb4	mov	x0, x21
0000000100006fb8	bl	0x10003173c ; symbol stub for: _strlen
0000000100006fbc	ldr	x8, [x19, #0x218]
0000000100006fc0	add	x8, x0, x8
0000000100006fc4	add	x8, x8, #0x1
0000000100006fc8	str	x8, [x19, #0x218]
0000000100006fcc	mov	x0, x21
0000000100006fd0	bl	0x10000d578
0000000100006fd4	str	x0, [x22]
0000000100006fd8	cbnz	x0, 0x100006eac
0000000100006fdc	str	x20, [sp]
0000000100006fe0	adr	x2, #184246 ; literal pool for: "Could not set string argument for key: %s"
0000000100006fe4	nop
0000000100006fe8	orr	w1, wzr, #0x3
0000000100006fec	b	0x100006e98
0000000100006ff0	adr	x8, #182796 ; literal pool for: "If you rely on this key, please file a bug."
0000000100006ff4	nop
0000000100006ff8	stp	x20, x8, [sp]
0000000100006ffc	adr	x2, #182746 ; literal pool for: "The %s key is not yet implemented. %s"
0000000100007000	nop
0000000100007004	b	0x100006b70
0000000100007008	adr	x2, #186030 ; literal pool for: "_ThrottleInterval set to zero. You're not that important. Ignoring."
000000010000700c	nop
0000000100007010	orr	w1, wzr, #0x3
0000000100007014	mov	x0, x19
0000000100007018	bl	0x1000118ec
000000010000701c	orr	w8, wzr, #0x1
0000000100007020	str	w8, [x19, #0x28c]
0000000100007024	b	0x100006eac
0000000100007028	ldr	x8, [x19, #0x458]
000000010000702c	orr	x8, x8, #0x800000
0000000100007030	b	0x100006ea8
0000000100007034	adr	x8, #186221 ; literal pool for: "Please use _AdditionalSubServices instead."
0000000100007038	nop
000000010000703c	stp	x20, x8, [sp]
0000000100007040	adr	x2, #182149 ; literal pool for: "The %s key is no longer respected. %s"
0000000100007044	nop
0000000100007048	orr	w1, wzr, #0x3
000000010000704c	mov	x0, x19
0000000100007050	bl	0x1000118ec
0000000100007054	nop
0000000100007058	ldr	x8, #0x38fb8 ; literal pool symbol address: __NSConcreteStackBlock
000000010000705c	str	x8, [sp, #0x10]
0000000100007060	nop
0000000100007064	ldr	d0, 0x10003de90
0000000100007068	str	d0, [sp, #0x18]
000000010000706c	adr	x8, #4736
0000000100007070	nop
0000000100007074	str	x8, [sp, #0x20]
0000000100007078	adr	x8, #237144
000000010000707c	nop
0000000100007080	stp	x8, x19, [sp, #0x28]
0000000100007084	str	x22, [sp, #0x38]
0000000100007088	add	x1, sp, #0x10
000000010000708c	mov	x0, x21
0000000100007090	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
0000000100007094	b	0x100006eac
0000000100007098	stp	x26, x25, [sp, #-0x50]!
000000010000709c	stp	x24, x23, [sp, #0x10]
00000001000070a0	stp	x22, x21, [sp, #0x20]
00000001000070a4	stp	x20, x19, [sp, #0x30]
00000001000070a8	stp	x29, x30, [sp, #0x40]
00000001000070ac	add	x29, sp, #0x40
00000001000070b0	mov	x22, x3
00000001000070b4	mov	x20, x2
00000001000070b8	mov	x19, x1
00000001000070bc	mov	x23, x0
00000001000070c0	adr	x1, #182763 ; literal pool for: "EnablePressuredExit"
00000001000070c4	nop
00000001000070c8	mov	x0, x19
00000001000070cc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000070d0	mov	x24, x0
00000001000070d4	adr	x1, #182662 ; literal pool for: "EnableTransactions"
00000001000070d8	nop
00000001000070dc	mov	x0, x19
00000001000070e0	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000070e4	mov	x21, x0
00000001000070e8	adr	x1, #181971 ; literal pool for: "KeepAlive"
00000001000070ec	nop
00000001000070f0	mov	x0, x23
00000001000070f4	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
00000001000070f8	cbz	w0, 0x100007108
00000001000070fc	cbnz	w22, 0x100007240
0000000100007100	orr	w26, wzr, #0x1
0000000100007104	b	0x10000712c
0000000100007108	cbz	x24, 0x10000720c
000000010000710c	mov	x0, x24
0000000100007110	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100007114	mov	w26, #0x0
0000000100007118	tbz	w0, #0x0, 0x10000712c
000000010000711c	orr	w25, wzr, #0x3
0000000100007120	orr	w22, wzr, #0x1
0000000100007124	orr	w23, wzr, #0x1
0000000100007128	b	0x10000715c
000000010000712c	cbz	x21, 0x100007144
0000000100007130	mov	x0, x21
0000000100007134	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100007138	mov	x22, x0
000000010000713c	mov	w25, #0x0
0000000100007140	b	0x100007154
0000000100007144	cmp	w22, #0x0
0000000100007148	orr	w8, wzr, #0x4
000000010000714c	cinc	w25, w8, ne
0000000100007150	orr	w22, wzr, #0x1
0000000100007154	mov	w23, #0x0
0000000100007158	cbz	x24, 0x100007184
000000010000715c	mov	x0, x24
0000000100007160	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100007164	cmp	w26, #0x1
0000000100007168	b.ne	0x100007184
000000010000716c	eor	w8, w23, w0
0000000100007170	cbz	w8, 0x100007184
0000000100007174	adr	x2, #186061 ; literal pool for: "EnablePressuredExit is not compatible with KeepAlive=true. Ignoring EnablePressuredExit."
0000000100007178	nop
000000010000717c	orr	w1, wzr, #0x3
0000000100007180	b	0x100007198
0000000100007184	cmp	w26, #0x2
0000000100007188	b.ne	0x1000071a0
000000010000718c	adr	x2, #186126 ; literal pool for: "Assuming EnablePressuredExit=false given EnableTransactions=false."
0000000100007190	nop
0000000100007194	orr	w1, wzr, #0x4
0000000100007198	mov	x0, x20
000000010000719c	bl	0x10000ce7c
00000001000071a0	cbz	x21, 0x1000071d0
00000001000071a4	mov	x0, x21
00000001000071a8	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
00000001000071ac	cmp	w25, #0x3
00000001000071b0	b.ne	0x1000071d0
00000001000071b4	eor	w8, w22, w0
00000001000071b8	cbz	w8, 0x1000071d0
00000001000071bc	adr	x2, #186145 ; literal pool for: "Service sets EnableTransactions=false and EnablePressuredExit=true, which makes no sense. Enabling Transactions."
00000001000071c0	nop
00000001000071c4	orr	w1, wzr, #0x3
00000001000071c8	mov	x0, x20
00000001000071cc	bl	0x10000ce7c
00000001000071d0	adr	x1, #182491 ; literal pool for: "EnablePressuredExit"
00000001000071d4	nop
00000001000071d8	mov	x2, x23
00000001000071dc	mov	x0, x19
00000001000071e0	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000071e4	adr	x1, #182390 ; literal pool for: "EnableTransactions"
00000001000071e8	nop
00000001000071ec	mov	x2, x22
00000001000071f0	mov	x0, x19
00000001000071f4	ldp	x29, x30, [sp, #0x40]
00000001000071f8	ldp	x20, x19, [sp, #0x30]
00000001000071fc	ldp	x22, x21, [sp, #0x20]
0000000100007200	ldp	x24, x23, [sp, #0x10]
0000000100007204	ldp	x26, x25, [sp], #0x50
0000000100007208	b	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010000720c	cbz	x21, 0x10000722c
0000000100007210	mov	x0, x21
0000000100007214	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100007218	tbz	w0, #0x0, 0x100007238
000000010000721c	orr	w25, wzr, #0x3
0000000100007220	orr	w23, wzr, #0x1
0000000100007224	orr	w22, wzr, #0x1
0000000100007228	b	0x1000071a4
000000010000722c	orr	w23, wzr, #0x1
0000000100007230	orr	w22, wzr, #0x1
0000000100007234	b	0x1000071d0
0000000100007238	orr	w26, wzr, #0x2
000000010000723c	b	0x100007130
0000000100007240	adr	x0, #185763 ; literal pool for: "XPC bundles can't have KeepAlive, they can't even set it as a plist key, how did we get here?"
0000000100007244	nop
0000000100007248	bl	0x100028f84
000000010000724c	sub	sp, sp, #0x40
0000000100007250	stp	x22, x21, [sp, #0x10]
0000000100007254	stp	x20, x19, [sp, #0x20]
0000000100007258	stp	x29, x30, [sp, #0x30]
000000010000725c	add	x29, sp, #0x30
0000000100007260	mov	x21, x2
0000000100007264	mov	x20, x1
0000000100007268	mov	x19, x0
000000010000726c	ldrsb	w9, [x20]
0000000100007270	sub	w8, w9, #0x41
0000000100007274	cmp	w8, #0x14
0000000100007278	b.ls	0x10000729c
000000010000727c	sub	w8, w9, #0x61
0000000100007280	cmp	w8, #0x14
0000000100007284	b.hi	0x100007444
0000000100007288	adr	x9, #864
000000010000728c	nop
0000000100007290	ldrsw	x8, [x9, x8, lsl #2]
0000000100007294	add	x8, x8, x9
0000000100007298	br	x8
000000010000729c	adr	x9, #760
00000001000072a0	nop
00000001000072a4	ldrsw	x8, [x9, x8, lsl #2]
00000001000072a8	add	x8, x8, x9
00000001000072ac	br	x8
00000001000072b0	adr	x1, #183001 ; literal pool for: "ActiveHardMemoryLimit"
00000001000072b4	nop
00000001000072b8	mov	x0, x20
00000001000072bc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000072c0	cbz	w0, 0x100007554
00000001000072c4	adr	x1, #183003 ; literal pool for: "ActiveSoftMemoryLimit"
00000001000072c8	nop
00000001000072cc	b	0x1000073a4
00000001000072d0	adr	x1, #182558 ; literal pool for: "CPUMonitorPercentage"
00000001000072d4	nop
00000001000072d8	mov	x0, x20
00000001000072dc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000072e0	cbz	w0, 0x100007554
00000001000072e4	adr	x1, #182559 ; literal pool for: "CPUMonitorInterval"
00000001000072e8	nop
00000001000072ec	b	0x1000073a4
00000001000072f0	adr	x22, #182323 ; literal pool for: "ExitTimeOut"
00000001000072f4	nop
00000001000072f8	mov	x0, x20
00000001000072fc	mov	x1, x22
0000000100007300	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007304	cbz	w0, 0x10000746c
0000000100007308	adr	x1, #182475 ; literal pool for: "EmbeddedMainThreadPriority"
000000010000730c	nop
0000000100007310	mov	x0, x20
0000000100007314	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007318	cbnz	w0, 0x100007444
000000010000731c	str	w21, [x19, #0x2b4]
0000000100007320	b	0x100007554
0000000100007324	adr	x1, #182929 ; literal pool for: "InactiveHardMemoryLimit"
0000000100007328	nop
000000010000732c	mov	x0, x20
0000000100007330	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007334	cbz	w0, 0x100007554
0000000100007338	adr	x1, #182933 ; literal pool for: "InactiveSoftMemoryLimit"
000000010000733c	nop
0000000100007340	mov	x0, x20
0000000100007344	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007348	cbz	w0, 0x100007554
000000010000734c	adr	x1, #182937 ; literal pool for: "InitialTaskRole"
0000000100007350	nop
0000000100007354	mov	x0, x20
0000000100007358	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000735c	cbnz	w0, 0x100007444
0000000100007360	str	w21, [x19, #0x2c4]
0000000100007364	b	0x100007554
0000000100007368	adr	x1, #182446 ; literal pool for: "JetsamPriority"
000000010000736c	nop
0000000100007370	mov	x0, x20
0000000100007374	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007378	cbz	w0, 0x100007484
000000010000737c	adr	x1, #182478 ; literal pool for: "JetsamMemoryLimit"
0000000100007380	nop
0000000100007384	mov	x0, x20
0000000100007388	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000738c	cbnz	w0, 0x100007444
0000000100007390	adr	x8, #182476 ; literal pool for: "The key is ignored, please switch to (Active|Inactive)(Soft|Hard)MemoryLimit"
0000000100007394	nop
0000000100007398	b	0x1000074a0
000000010000739c	adr	x1, #182541 ; literal pool for: "Nice"
00000001000073a0	nop
00000001000073a4	mov	x0, x20
00000001000073a8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000073ac	cbnz	w0, 0x100007444
00000001000073b0	b	0x100007554
00000001000073b4	adr	x1, #182714 ; literal pool for: "StartInterval"
00000001000073b8	nop
00000001000073bc	mov	x0, x20
00000001000073c0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000073c4	cbz	w0, 0x100007490
00000001000073c8	adr	x1, #182708 ; literal pool for: "SandboxFlags"
00000001000073cc	nop
00000001000073d0	mov	x0, x20
00000001000073d4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000073d8	cbnz	w0, 0x100007444
00000001000073dc	adr	x8, #181263 ; literal pool for: "Please remove it."
00000001000073e0	nop
00000001000073e4	b	0x1000074a0
00000001000073e8	adr	x1, #182470 ; literal pool for: "TimeOut"
00000001000073ec	nop
00000001000073f0	mov	x0, x20
00000001000073f4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000073f8	cbz	w0, 0x100007498
00000001000073fc	adr	x1, #182488 ; literal pool for: "ThrottleInterval"
0000000100007400	nop
0000000100007404	mov	x0, x20
0000000100007408	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000740c	cbz	w0, 0x1000074c8
0000000100007410	adr	x1, #182552 ; literal pool for: "TransactionTimeLimitMaxTimeout"
0000000100007414	nop
0000000100007418	mov	x0, x20
000000010000741c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007420	cbz	w0, 0x100007554
0000000100007424	adr	x1, #182563 ; literal pool for: "TransactionTimeLimitTimeoutDelta"
0000000100007428	nop
000000010000742c	b	0x1000073a4
0000000100007430	adr	x1, #182584 ; literal pool for: "Umask"
0000000100007434	nop
0000000100007438	mov	x0, x20
000000010000743c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007440	cbz	w0, 0x1000074b4
0000000100007444	str	x20, [sp]
0000000100007448	adr	x2, #182701 ; literal pool for: "Unknown key for integer: %s"
000000010000744c	nop
0000000100007450	orr	w1, wzr, #0x4
0000000100007454	mov	x0, x19
0000000100007458	bl	0x1000118ec
000000010000745c	ldr	x8, [x19, #0x458]
0000000100007460	orr	x8, x8, #0x1
0000000100007464	str	x8, [x19, #0x458]
0000000100007468	b	0x100007554
000000010000746c	tbnz	x21, #0x3f, 0x1000074e8
0000000100007470	orr	w8, wzr, #0x80000000
0000000100007474	cmp	x21, x8
0000000100007478	b.lt	0x1000074f0
000000010000747c	str	x22, [sp]
0000000100007480	b	0x1000074dc
0000000100007484	adr	x8, #182177 ; literal pool for: "Please use JetsamProperties instead."
0000000100007488	nop
000000010000748c	b	0x1000074a0
0000000100007490	str	w21, [x19, #0x2b0]
0000000100007494	b	0x100007554
0000000100007498	adr	x8, #182302 ; literal pool for: "It never did anything anyway."
000000010000749c	nop
00000001000074a0	stp	x20, x8, [sp]
00000001000074a4	adr	x2, #181025 ; literal pool for: "The %s key is no longer respected. %s"
00000001000074a8	nop
00000001000074ac	orr	w1, wzr, #0x3
00000001000074b0	b	0x10000754c
00000001000074b4	ldr	x8, [x19, #0x458]
00000001000074b8	orr	x8, x8, #0x800000000
00000001000074bc	str	x8, [x19, #0x458]
00000001000074c0	strh	w21, [x19, #0x278]
00000001000074c4	b	0x100007554
00000001000074c8	tbnz	x21, #0x3f, 0x10000753c
00000001000074cc	orr	x8, xzr, #0x100000000
00000001000074d0	cmp	x21, x8
00000001000074d4	b.lt	0x100007568
00000001000074d8	str	x20, [sp]
00000001000074dc	adr	x2, #181872 ; literal pool for: "%s is too large. Ignoring."
00000001000074e0	nop
00000001000074e4	b	0x100007548
00000001000074e8	str	x22, [sp]
00000001000074ec	b	0x100007540
00000001000074f0	nop
00000001000074f4	nop
00000001000074f8	ldr	w8, 0x100043504
00000001000074fc	add	w8, w21, w8
0000000100007500	add	w20, w8, #0x2
0000000100007504	adr	x22, #245768
0000000100007508	nop
000000010000750c	ldr	w8, [x22]
0000000100007510	cmp	w20, w8
0000000100007514	b.le	0x100007534
0000000100007518	str	x20, [sp]
000000010000751c	adr	x2, #181835 ; literal pool for: "Service has increased maximum shutdown time to %d seconds. This will create a poor experience for the user."
0000000100007520	nop
0000000100007524	orr	w1, wzr, #0x4
0000000100007528	mov	x0, x19
000000010000752c	bl	0x1000118ec
0000000100007530	str	w20, [x22]
0000000100007534	str	w21, [x19, #0x288]
0000000100007538	b	0x100007554
000000010000753c	str	x20, [sp]
0000000100007540	adr	x2, #181743 ; literal pool for: "%s less than zero. Ignoring."
0000000100007544	nop
0000000100007548	orr	w1, wzr, #0x4
000000010000754c	mov	x0, x19
0000000100007550	bl	0x1000118ec
0000000100007554	ldp	x29, x30, [sp, #0x30]
0000000100007558	ldp	x20, x19, [sp, #0x20]
000000010000755c	ldp	x22, x21, [sp, #0x10]
0000000100007560	add	sp, sp, #0x40
0000000100007564	ret
0000000100007568	cbz	x21, 0x100007574
000000010000756c	str	w21, [x19, #0x28c]
0000000100007570	b	0x100007554
0000000100007574	adr	x2, #182129 ; literal pool for: "ThrottleInterval set to zero. You're not that important. Ignoring."
0000000100007578	nop
000000010000757c	orr	w1, wzr, #0x3
0000000100007580	mov	x0, x19
0000000100007584	bl	0x1000118ec
0000000100007588	orr	w8, wzr, #0x1
000000010000758c	str	w8, [x19, #0x28c]
0000000100007590	b	0x100007554
0000000100007594	.long	0xfffffd1c
0000000100007598	.long	0xfffffeb0
000000010000759c	.long	0xfffffd3c
00000001000075a0	.long	0xfffffeb0
00000001000075a4	.long	0xfffffd5c
00000001000075a8	.long	0xfffffeb0
00000001000075ac	.long	0xfffffeb0
00000001000075b0	.long	0xfffffeb0
00000001000075b4	.long	0xfffffd90
00000001000075b8	.long	0xfffffdd4
00000001000075bc	.long	0xfffffeb0
00000001000075c0	.long	0xfffffeb0
00000001000075c4	.long	0xfffffeb0
00000001000075c8	.long	0xfffffe08
00000001000075cc	.long	0xfffffeb0
00000001000075d0	.long	0xfffffeb0
00000001000075d4	.long	0xfffffeb0
00000001000075d8	.long	0xfffffeb0
00000001000075dc	.long	0xfffffe20
00000001000075e0	.long	0xfffffe54
00000001000075e4	.long	0xfffffe9c
00000001000075e8	.long	0xfffffcc8
00000001000075ec	.long	0xfffffe5c
00000001000075f0	.long	0xfffffce8
00000001000075f4	.long	0xfffffe5c
00000001000075f8	.long	0xfffffd08
00000001000075fc	.long	0xfffffe5c
0000000100007600	.long	0xfffffe5c
0000000100007604	.long	0xfffffe5c
0000000100007608	.long	0xfffffd3c
000000010000760c	.long	0xfffffd80
0000000100007610	.long	0xfffffe5c
0000000100007614	.long	0xfffffe5c
0000000100007618	.long	0xfffffe5c
000000010000761c	.long	0xfffffdb4
0000000100007620	.long	0xfffffe5c
0000000100007624	.long	0xfffffe5c
0000000100007628	.long	0xfffffe5c
000000010000762c	.long	0xfffffe5c
0000000100007630	.long	0xfffffdcc
0000000100007634	.long	0xfffffe00
0000000100007638	.long	0xfffffe48
000000010000763c	sub	sp, sp, #0x70
0000000100007640	stp	x22, x21, [sp, #0x40]
0000000100007644	stp	x20, x19, [sp, #0x50]
0000000100007648	stp	x29, x30, [sp, #0x60]
000000010000764c	add	x29, sp, #0x60
0000000100007650	mov	x22, x3
0000000100007654	mov	x20, x2
0000000100007658	mov	x19, x1
000000010000765c	mov	x21, x0
0000000100007660	ldr	x8, [x21, #0x1b8]
0000000100007664	cbnz	x8, 0x10000767c
0000000100007668	mov	x0, #0x0
000000010000766c	mov	x1, #0x0
0000000100007670	mov	x2, #0x0
0000000100007674	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100007678	str	x0, [x21, #0x1b8]
000000010000767c	mov	x0, x20
0000000100007680	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007684	nop
0000000100007688	ldr	x8, #0x38a18 ; literal pool symbol address: __xpc_type_bool
000000010000768c	cmp	x0, x8
0000000100007690	b.eq	0x1000076f0
0000000100007694	mov	x0, x20
0000000100007698	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000769c	nop
00000001000076a0	ldr	x8, #0x38a20 ; literal pool symbol address: __xpc_type_dictionary
00000001000076a4	cmp	x0, x8
00000001000076a8	b.ne	0x10000771c
00000001000076ac	nop
00000001000076b0	ldr	x8, #0x38960 ; literal pool symbol address: __NSConcreteStackBlock
00000001000076b4	str	x8, [sp, #0x8]
00000001000076b8	nop
00000001000076bc	ldr	d0, 0x10003de90
00000001000076c0	str	d0, [sp, #0x10]
00000001000076c4	adr	x8, #108
00000001000076c8	nop
00000001000076cc	str	x8, [sp, #0x18]
00000001000076d0	adr	x8, #235088
00000001000076d4	nop
00000001000076d8	stp	x8, x21, [sp, #0x20]
00000001000076dc	stp	x19, x22, [sp, #0x30]
00000001000076e0	add	x1, sp, #0x8
00000001000076e4	mov	x0, x20
00000001000076e8	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
00000001000076ec	b	0x10000771c
00000001000076f0	mov	x0, x20
00000001000076f4	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
00000001000076f8	cbz	w0, 0x10000771c
00000001000076fc	ldr	x0, [x21, #0x1b8]
0000000100007700	mov	x1, x19
0000000100007704	mov	x2, #0x0
0000000100007708	ldp	x29, x30, [sp, #0x60]
000000010000770c	ldp	x20, x19, [sp, #0x50]
0000000100007710	ldp	x22, x21, [sp, #0x40]
0000000100007714	add	sp, sp, #0x70
0000000100007718	b	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010000771c	ldp	x29, x30, [sp, #0x60]
0000000100007720	ldp	x20, x19, [sp, #0x50]
0000000100007724	ldp	x22, x21, [sp, #0x40]
0000000100007728	add	sp, sp, #0x70
000000010000772c	ret
0000000100007730	sub	sp, sp, #0x40
0000000100007734	stp	x22, x21, [sp, #0x10]
0000000100007738	stp	x20, x19, [sp, #0x20]
000000010000773c	stp	x29, x30, [sp, #0x30]
0000000100007740	add	x29, sp, #0x30
0000000100007744	mov	x21, x2
0000000100007748	mov	x20, x1
000000010000774c	mov	x19, x0
0000000100007750	mov	x0, x21
0000000100007754	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007758	nop
000000010000775c	ldr	x8, #0x38944 ; literal pool symbol address: __xpc_type_bool
0000000100007760	cmp	x0, x8
0000000100007764	b.eq	0x10000777c
0000000100007768	ldr	x0, [x19, #0x30]
000000010000776c	str	x20, [sp]
0000000100007770	adr	x2, #182434 ; literal pool for: "Invalid type for PublishesEvents property %s, expected bool"
0000000100007774	nop
0000000100007778	b	0x1000077a0
000000010000777c	adr	x1, #182367 ; literal pool for: "DomainInternal"
0000000100007780	nop
0000000100007784	mov	x0, x20
0000000100007788	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000778c	cbz	w0, 0x1000077d0
0000000100007790	ldr	x0, [x19, #0x30]
0000000100007794	str	x20, [sp]
0000000100007798	adr	x2, #182354 ; literal pool for: "Unknown property %s for PublishesEvents"
000000010000779c	nop
00000001000077a0	orr	w1, wzr, #0x3
00000001000077a4	bl	0x10000ce7c
00000001000077a8	ldr	x8, [x19, #0x20]
00000001000077ac	ldr	x9, [x8, #0x458]
00000001000077b0	orr	x9, x9, #0x1
00000001000077b4	str	x9, [x8, #0x458]
00000001000077b8	orr	w0, wzr, #0x1
00000001000077bc	ldp	x29, x30, [sp, #0x30]
00000001000077c0	ldp	x20, x19, [sp, #0x20]
00000001000077c4	ldp	x22, x21, [sp, #0x10]
00000001000077c8	add	sp, sp, #0x40
00000001000077cc	ret
00000001000077d0	mov	x0, x21
00000001000077d4	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
00000001000077d8	mov	x2, x0
00000001000077dc	ldp	x8, x1, [x19, #0x20]
00000001000077e0	ldr	x0, [x8, #0x1b8]
00000001000077e4	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
00000001000077e8	b	0x1000077b8
00000001000077ec	sub	sp, sp, #0x40
00000001000077f0	stp	x22, x21, [sp, #0x10]
00000001000077f4	stp	x20, x19, [sp, #0x20]
00000001000077f8	stp	x29, x30, [sp, #0x30]
00000001000077fc	add	x29, sp, #0x30
0000000100007800	mov	x20, x2
0000000100007804	mov	x19, x0
0000000100007808	mov	x0, x20
000000010000780c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007810	nop
0000000100007814	ldr	x8, #0x388cc ; literal pool symbol address: __xpc_type_string
0000000100007818	cmp	x0, x8
000000010000781c	b.eq	0x10000785c
0000000100007820	ldr	x21, [x19, #0x28]
0000000100007824	mov	x0, x20
0000000100007828	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000782c	ldr	x8, [x0, #0x30]
0000000100007830	str	x8, [sp]
0000000100007834	adr	x2, #182351 ; literal pool for: "Invalid item type %s in PublishesEvents, expected string"
0000000100007838	nop
000000010000783c	orr	w1, wzr, #0x3
0000000100007840	mov	x0, x21
0000000100007844	bl	0x10000ce7c
0000000100007848	ldr	x8, [x19, #0x20]
000000010000784c	ldr	x9, [x8, #0x458]
0000000100007850	orr	x9, x9, #0x1
0000000100007854	str	x9, [x8, #0x458]
0000000100007858	b	0x100007888
000000010000785c	ldr	x21, [x19, #0x20]
0000000100007860	mov	x0, x20
0000000100007864	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100007868	mov	x20, x0
000000010000786c	orr	w0, wzr, #0x1
0000000100007870	bl	0x100031934 ; symbol stub for: _xpc_bool_create
0000000100007874	mov	x2, x0
0000000100007878	ldr	x3, [x19, #0x28]
000000010000787c	mov	x0, x21
0000000100007880	mov	x1, x20
0000000100007884	bl	0x10000763c
0000000100007888	orr	w0, wzr, #0x1
000000010000788c	ldp	x29, x30, [sp, #0x30]
0000000100007890	ldp	x20, x19, [sp, #0x20]
0000000100007894	ldp	x22, x21, [sp, #0x10]
0000000100007898	add	sp, sp, #0x40
000000010000789c	ret
00000001000078a0	stp	x28, x27, [sp, #-0x30]!
00000001000078a4	stp	x20, x19, [sp, #0x10]
00000001000078a8	stp	x29, x30, [sp, #0x20]
00000001000078ac	add	x29, sp, #0x20
00000001000078b0	sub	sp, sp, #0x420
00000001000078b4	mov	x19, x1
00000001000078b8	mov	x20, x0
00000001000078bc	nop
00000001000078c0	ldr	x8, #0x38758 ; literal pool symbol address: ___stack_chk_guard
00000001000078c4	ldr	x8, [x8]
00000001000078c8	stur	x8, [x29, #-0x28]
00000001000078cc	add	x8, x20, #0x460
00000001000078d0	adrp	x9, 59 ; 0x100042000
00000001000078d4	ldr	x10, [x9, #0xef8]
00000001000078d8	add	x11, x10, #0x1
00000001000078dc	str	x11, [x9, #0xef8]
00000001000078e0	adr	x4, #182459 ; literal pool for: "%s.%llu"
00000001000078e4	nop
00000001000078e8	stp	x8, x10, [sp]
00000001000078ec	add	x0, sp, #0x18
00000001000078f0	orr	w1, wzr, #0x400
00000001000078f4	orr	w3, wzr, #0x400
00000001000078f8	mov	w2, #0x0
00000001000078fc	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100007900	adr	x1, #182435 ; literal pool for: "com.apple.launchd.calendarinterval"
0000000100007904	nop
0000000100007908	add	x2, sp, #0x18
000000010000790c	mov	x0, x20
0000000100007910	mov	x3, x19
0000000100007914	bl	0x100007948
0000000100007918	ldur	x8, [x29, #-0x28]
000000010000791c	nop
0000000100007920	ldr	x9, #0x386f8 ; literal pool symbol address: ___stack_chk_guard
0000000100007924	ldr	x9, [x9]
0000000100007928	cmp	x9, x8
000000010000792c	b.ne	0x100007944
0000000100007930	add	sp, sp, #0x420
0000000100007934	ldp	x29, x30, [sp, #0x20]
0000000100007938	ldp	x20, x19, [sp, #0x10]
000000010000793c	ldp	x28, x27, [sp], #0x30
0000000100007940	ret
0000000100007944	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100007948	stp	x24, x23, [sp, #-0x40]!
000000010000794c	stp	x22, x21, [sp, #0x10]
0000000100007950	stp	x20, x19, [sp, #0x20]
0000000100007954	stp	x29, x30, [sp, #0x30]
0000000100007958	add	x29, sp, #0x30
000000010000795c	mov	x19, x3
0000000100007960	mov	x20, x2
0000000100007964	mov	x21, x1
0000000100007968	mov	x22, x0
000000010000796c	ldr	x0, [x22, #0x1b0]
0000000100007970	cbnz	x0, 0x100007984
0000000100007974	mov	x1, #0x0
0000000100007978	mov	x2, #0x0
000000010000797c	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100007980	str	x0, [x22, #0x1b0]
0000000100007984	mov	x1, x21
0000000100007988	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000798c	mov	x23, x0
0000000100007990	cbnz	x23, 0x1000079bc
0000000100007994	mov	x1, #0x0
0000000100007998	mov	x2, #0x0
000000010000799c	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
00000001000079a0	mov	x23, x0
00000001000079a4	ldr	x0, [x22, #0x1b0]
00000001000079a8	mov	x1, x21
00000001000079ac	mov	x2, x23
00000001000079b0	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000079b4	mov	x0, x23
00000001000079b8	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000079bc	mov	x0, x23
00000001000079c0	mov	x1, x20
00000001000079c4	mov	x2, x19
00000001000079c8	ldp	x29, x30, [sp, #0x30]
00000001000079cc	ldp	x20, x19, [sp, #0x20]
00000001000079d0	ldp	x22, x21, [sp, #0x10]
00000001000079d4	ldp	x24, x23, [sp], #0x40
00000001000079d8	b	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000079dc	sub	sp, sp, #0x40
00000001000079e0	stp	x22, x21, [sp, #0x10]
00000001000079e4	stp	x20, x19, [sp, #0x20]
00000001000079e8	stp	x29, x30, [sp, #0x30]
00000001000079ec	add	x29, sp, #0x30
00000001000079f0	mov	x21, x2
00000001000079f4	mov	x20, x1
00000001000079f8	mov	x19, x0
00000001000079fc	mov	x0, x21
0000000100007a00	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007a04	nop
0000000100007a08	ldr	x8, #0x386b8 ; literal pool symbol address: __xpc_type_dictionary
0000000100007a0c	cmp	x0, x8
0000000100007a10	b.eq	0x100007a58
0000000100007a14	mov	x0, x21
0000000100007a18	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007a1c	nop
0000000100007a20	ldr	x8, #0x38680 ; literal pool symbol address: __xpc_type_bool
0000000100007a24	cmp	x0, x8
0000000100007a28	b.eq	0x100007a58
0000000100007a2c	ldr	x0, [x19, #0x28]
0000000100007a30	str	x20, [sp]
0000000100007a34	adr	x2, #182171 ; literal pool for: "Invalid item %s in PublishesEvents, expected dictionary or bool"
0000000100007a38	nop
0000000100007a3c	orr	w1, wzr, #0x3
0000000100007a40	bl	0x10000ce7c
0000000100007a44	ldr	x8, [x19, #0x20]
0000000100007a48	ldr	x9, [x8, #0x458]
0000000100007a4c	orr	x9, x9, #0x1
0000000100007a50	str	x9, [x8, #0x458]
0000000100007a54	b	0x100007a68
0000000100007a58	ldp	x0, x3, [x19, #0x20]
0000000100007a5c	mov	x1, x20
0000000100007a60	mov	x2, x21
0000000100007a64	bl	0x10000763c
0000000100007a68	orr	w0, wzr, #0x1
0000000100007a6c	ldp	x29, x30, [sp, #0x30]
0000000100007a70	ldp	x20, x19, [sp, #0x20]
0000000100007a74	ldp	x22, x21, [sp, #0x10]
0000000100007a78	add	sp, sp, #0x40
0000000100007a7c	ret
0000000100007a80	sub	sp, sp, #0x50
0000000100007a84	stp	x24, x23, [sp, #0x10]
0000000100007a88	stp	x22, x21, [sp, #0x20]
0000000100007a8c	stp	x20, x19, [sp, #0x30]
0000000100007a90	stp	x29, x30, [sp, #0x40]
0000000100007a94	add	x29, sp, #0x40
0000000100007a98	mov	x22, x2
0000000100007a9c	mov	x21, x1
0000000100007aa0	ldp	x19, x20, [x0, #0x20]
0000000100007aa4	ldrsb	w0, [x21]
0000000100007aa8	bl	0x100030b18 ; symbol stub for: ___tolower
0000000100007aac	sub	w8, w0, #0x6e
0000000100007ab0	cmp	w8, #0x5
0000000100007ab4	b.hi	0x100007adc
0000000100007ab8	mov	w23, #0x0
0000000100007abc	adr	x9, #620
0000000100007ac0	nop
0000000100007ac4	ldrsw	x8, [x9, x8, lsl #2]
0000000100007ac8	add	x8, x8, x9
0000000100007acc	br	x8
0000000100007ad0	adr	x1, #182506 ; literal pool for: "NetworkState"
0000000100007ad4	nop
0000000100007ad8	b	0x100007b4c
0000000100007adc	cmp	w0, #0x63
0000000100007ae0	b.eq	0x100007bb0
0000000100007ae4	cmp	w0, #0x61
0000000100007ae8	b.ne	0x100007bc4
0000000100007aec	adr	x1, #182403 ; literal pool for: "AfterInitialDemand"
0000000100007af0	nop
0000000100007af4	mov	x0, x21
0000000100007af8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007afc	cbnz	w0, 0x100007bc4
0000000100007b00	mov	x0, x22
0000000100007b04	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007b08	nop
0000000100007b0c	ldr	x8, #0x38594 ; literal pool symbol address: __xpc_type_bool
0000000100007b10	cmp	x0, x8
0000000100007b14	b.ne	0x100007c98
0000000100007b18	cmp	x22, #0x0
0000000100007b1c	cset	w8, ne
0000000100007b20	ldr	x9, [x19, #0x458]
0000000100007b24	bfi	x9, x8, #27, #1
0000000100007b28	str	x9, [x19, #0x458]
0000000100007b2c	b	0x100007cbc
0000000100007b30	adr	x1, #182423 ; literal pool for: "OtherJobActive"
0000000100007b34	nop
0000000100007b38	mov	x0, x21
0000000100007b3c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007b40	cbz	w0, 0x100007b58
0000000100007b44	adr	x1, #182418 ; literal pool for: "OtherJobEnabled"
0000000100007b48	nop
0000000100007b4c	mov	x0, x21
0000000100007b50	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007b54	cbnz	w0, 0x100007bc4
0000000100007b58	adr	x8, #179347 ; literal pool for: "Please remove it."
0000000100007b5c	nop
0000000100007b60	stp	x21, x8, [sp]
0000000100007b64	adr	x2, #179297 ; literal pool for: "The %s key is no longer respected. %s"
0000000100007b68	nop
0000000100007b6c	orr	w1, wzr, #0x3
0000000100007b70	mov	x0, x19
0000000100007b74	bl	0x1000118ec
0000000100007b78	b	0x100007cbc
0000000100007b7c	adr	x1, #182378 ; literal pool for: "PathState"
0000000100007b80	nop
0000000100007b84	mov	x0, x21
0000000100007b88	bl	0x100031700 ; symbol stub for: _strcmp
0000000100007b8c	cbz	w0, 0x100007c18
0000000100007b90	mov	w23, #0x0
0000000100007b94	adr	x1, #182392 ; literal pool for: "SuccessfulExit"
0000000100007b98	nop
0000000100007b9c	mov	x0, x21
0000000100007ba0	bl	0x100031700 ; symbol stub for: _strcmp
0000000100007ba4	cbz	w0, 0x100007bd4
0000000100007ba8	tbz	w23, #0x0, 0x100007bc4
0000000100007bac	b	0x100007cbc
0000000100007bb0	adr	x1, #182262 ; literal pool for: "Crashed"
0000000100007bb4	nop
0000000100007bb8	mov	x0, x21
0000000100007bbc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007bc0	cbz	w0, 0x100007c80
0000000100007bc4	str	x21, [sp]
0000000100007bc8	adr	x2, #182371 ; literal pool for: "Unknown key for KeepAlive: %s"
0000000100007bcc	nop
0000000100007bd0	b	0x100007ca4
0000000100007bd4	mov	x0, x22
0000000100007bd8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007bdc	nop
0000000100007be0	ldr	x8, #0x384c0 ; literal pool symbol address: __xpc_type_bool
0000000100007be4	cmp	x0, x8
0000000100007be8	b.ne	0x100007c98
0000000100007bec	mov	w0, #0x28
0000000100007bf0	bl	0x10000d464
0000000100007bf4	adr	x8, #36540
0000000100007bf8	nop
0000000100007bfc	nop
0000000100007c00	ldr	x9, #0x38490 ; literal pool symbol address: __xpc_bool_true
0000000100007c04	cmp	x22, x9
0000000100007c08	cset	w9, eq
0000000100007c0c	adr	x10, #182287 ; literal pool for: "successful exit"
0000000100007c10	nop
0000000100007c14	b	0x100007d00
0000000100007c18	mov	x0, x22
0000000100007c1c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007c20	nop
0000000100007c24	ldr	x8, #0x3849c ; literal pool symbol address: __xpc_type_dictionary
0000000100007c28	cmp	x0, x8
0000000100007c2c	b.ne	0x100007c98
0000000100007c30	mov	x0, #0x0
0000000100007c34	mov	x1, #0x0
0000000100007c38	mov	x2, #0x0
0000000100007c3c	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100007c40	mov	x23, x0
0000000100007c44	adr	x1, #182178 ; literal pool for: "PathState"
0000000100007c48	nop
0000000100007c4c	mov	x2, x22
0000000100007c50	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100007c54	adr	x1, #181446 ; literal pool for: "com.apple.fsevents.matching"
0000000100007c58	nop
0000000100007c5c	adr	x2, #182164 ; literal pool for: "com.apple.launchd.PathState"
0000000100007c60	nop
0000000100007c64	mov	x0, x19
0000000100007c68	mov	x3, x23
0000000100007c6c	bl	0x100007948
0000000100007c70	mov	x0, x23
0000000100007c74	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100007c78	orr	w23, wzr, #0x1
0000000100007c7c	b	0x100007b94
0000000100007c80	mov	x0, x22
0000000100007c84	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007c88	nop
0000000100007c8c	ldr	x8, #0x38414 ; literal pool symbol address: __xpc_type_bool
0000000100007c90	cmp	x0, x8
0000000100007c94	b.eq	0x100007cd8
0000000100007c98	str	x21, [sp]
0000000100007c9c	adr	x2, #181990 ; literal pool for: "Improper type for KeepAlive key: %s"
0000000100007ca0	nop
0000000100007ca4	orr	w1, wzr, #0x3
0000000100007ca8	mov	x0, x20
0000000100007cac	bl	0x10000ce7c
0000000100007cb0	ldr	x8, [x19, #0x458]
0000000100007cb4	orr	x8, x8, #0x1
0000000100007cb8	str	x8, [x19, #0x458]
0000000100007cbc	orr	w0, wzr, #0x1
0000000100007cc0	ldp	x29, x30, [sp, #0x40]
0000000100007cc4	ldp	x20, x19, [sp, #0x30]
0000000100007cc8	ldp	x22, x21, [sp, #0x20]
0000000100007ccc	ldp	x24, x23, [sp, #0x10]
0000000100007cd0	add	sp, sp, #0x50
0000000100007cd4	ret
0000000100007cd8	mov	w0, #0x28
0000000100007cdc	bl	0x10000d464
0000000100007ce0	adr	x8, #36220
0000000100007ce4	nop
0000000100007ce8	nop
0000000100007cec	ldr	x9, #0x383a4 ; literal pool symbol address: __xpc_bool_true
0000000100007cf0	cmp	x22, x9
0000000100007cf4	cset	w9, eq
0000000100007cf8	adr	x10, #181942 ; literal pool for: "after crash"
0000000100007cfc	nop
0000000100007d00	strb	w9, [x0, #0x20]
0000000100007d04	stp	x8, x10, [x0, #0x10]
0000000100007d08	add	x8, x19, #0x238
0000000100007d0c	ldr	x9, [x19, #0x238]
0000000100007d10	str	x9, [x0]
0000000100007d14	cbz	x9, 0x100007d1c
0000000100007d18	str	x0, [x9, #0x8]
0000000100007d1c	str	x0, [x8]
0000000100007d20	str	x8, [x0, #0x8]
0000000100007d24	b	0x100007cbc
0000000100007d28	.long	0xfffffda8
0000000100007d2c	.long	0xfffffe08
0000000100007d30	.long	0xfffffe54
0000000100007d34	.long	0xfffffe9c
0000000100007d38	.long	0xfffffe9c
0000000100007d3c	.long	0xfffffe6c
0000000100007d40	stp	x22, x21, [sp, #-0x30]!
0000000100007d44	stp	x20, x19, [sp, #0x10]
0000000100007d48	stp	x29, x30, [sp, #0x20]
0000000100007d4c	add	x29, sp, #0x20
0000000100007d50	mov	x19, x2
0000000100007d54	mov	x20, x1
0000000100007d58	mov	x21, x0
0000000100007d5c	adr	x1, #181997 ; literal pool for: "Wait"
0000000100007d60	nop
0000000100007d64	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007d68	cbz	w0, 0x100007d90
0000000100007d6c	adr	x1, #181986 ; literal pool for: "Instances"
0000000100007d70	nop
0000000100007d74	mov	x0, x21
0000000100007d78	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100007d7c	cbnz	w0, 0x100007da4
0000000100007d80	mov	x0, x20
0000000100007d84	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100007d88	str	w0, [x19, #0xf4]
0000000100007d8c	b	0x100007da4
0000000100007d90	mov	x0, x20
0000000100007d94	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100007d98	ldr	x8, [x19, #0x458]
0000000100007d9c	bfi	x8, x0, #16, #1
0000000100007da0	str	x8, [x19, #0x458]
0000000100007da4	ldp	x29, x30, [sp, #0x20]
0000000100007da8	ldp	x20, x19, [sp, #0x10]
0000000100007dac	ldp	x22, x21, [sp], #0x30
0000000100007db0	ret
0000000100007db4	sub	sp, sp, #0x40
0000000100007db8	stp	x22, x21, [sp, #0x10]
0000000100007dbc	stp	x20, x19, [sp, #0x20]
0000000100007dc0	stp	x29, x30, [sp, #0x30]
0000000100007dc4	add	x29, sp, #0x30
0000000100007dc8	mov	x19, x2
0000000100007dcc	mov	x21, x1
0000000100007dd0	mov	x20, x0
0000000100007dd4	mov	x0, x21
0000000100007dd8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007ddc	nop
0000000100007de0	ldr	x8, #0x38300 ; literal pool symbol address: __xpc_type_string
0000000100007de4	cmp	x0, x8
0000000100007de8	b.eq	0x100007e24
0000000100007dec	mov	x0, x21
0000000100007df0	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007df4	ldr	x8, [x0, #0x30]
0000000100007df8	stp	x20, x8, [sp]
0000000100007dfc	adr	x2, #181852 ; literal pool for: "Invalid type for environment variable value (env/type): %s/%s"
0000000100007e00	nop
0000000100007e04	orr	w1, wzr, #0x3
0000000100007e08	mov	x0, x19
0000000100007e0c	bl	0x1000118ec
0000000100007e10	ldp	x29, x30, [sp, #0x30]
0000000100007e14	ldp	x20, x19, [sp, #0x20]
0000000100007e18	ldp	x22, x21, [sp, #0x10]
0000000100007e1c	add	sp, sp, #0x40
0000000100007e20	ret
0000000100007e24	ldrb	w8, [x19, #0x45d]
0000000100007e28	tbnz	w8, #0x2, 0x100007e48
0000000100007e2c	mov	x0, x20
0000000100007e30	bl	0x10000e708
0000000100007e34	cbz	w0, 0x100007e48
0000000100007e38	str	x20, [sp]
0000000100007e3c	adr	x2, #181850 ; literal pool for: "Disallowing environment variable: %s"
0000000100007e40	nop
0000000100007e44	b	0x100007e04
0000000100007e48	mov	x0, x21
0000000100007e4c	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100007e50	mov	x2, x0
0000000100007e54	mov	w3, #0x0
0000000100007e58	mov	x0, x19
0000000100007e5c	mov	x1, x20
0000000100007e60	ldp	x29, x30, [sp, #0x30]
0000000100007e64	ldp	x20, x19, [sp, #0x20]
0000000100007e68	ldp	x22, x21, [sp, #0x10]
0000000100007e6c	add	sp, sp, #0x40
0000000100007e70	b	0x100003a98
0000000100007e74	sub	sp, sp, #0x60
0000000100007e78	stp	x26, x25, [sp, #0x10]
0000000100007e7c	stp	x24, x23, [sp, #0x20]
0000000100007e80	stp	x22, x21, [sp, #0x30]
0000000100007e84	stp	x20, x19, [sp, #0x40]
0000000100007e88	stp	x29, x30, [sp, #0x50]
0000000100007e8c	add	x29, sp, #0x50
0000000100007e90	mov	x21, x2
0000000100007e94	mov	x20, x1
0000000100007e98	ldp	x19, x22, [x0, #0x20]
0000000100007e9c	mov	x0, x21
0000000100007ea0	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007ea4	nop
0000000100007ea8	ldr	x26, #0x38218 ; literal pool symbol address: __xpc_type_dictionary
0000000100007eac	cmp	x0, x26
0000000100007eb0	b.eq	0x100007ee8
0000000100007eb4	mov	x0, x21
0000000100007eb8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007ebc	nop
0000000100007ec0	ldr	x8, #0x381d8 ; literal pool symbol address: __xpc_type_array
0000000100007ec4	cmp	x0, x8
0000000100007ec8	b.eq	0x100007f18
0000000100007ecc	str	x20, [sp]
0000000100007ed0	adr	x2, #181786 ; literal pool for: "Socket entry is not a dictionary or array. Skipping: %s"
0000000100007ed4	nop
0000000100007ed8	orr	w1, wzr, #0x3
0000000100007edc	mov	x0, x19
0000000100007ee0	bl	0x1000118ec
0000000100007ee4	b	0x100007f08
0000000100007ee8	ldr	x8, [x19, #0x1e8]
0000000100007eec	ldr	x4, [x19, #0x200]
0000000100007ef0	mov	x0, x19
0000000100007ef4	mov	x1, x20
0000000100007ef8	mov	x2, x21
0000000100007efc	mov	x3, x22
0000000100007f00	blr	x8
0000000100007f04	cbnz	x0, 0x100007fa4
0000000100007f08	ldr	x8, [x19, #0x458]
0000000100007f0c	orr	x8, x8, #0x1
0000000100007f10	str	x8, [x19, #0x458]
0000000100007f14	b	0x100007fa4
0000000100007f18	mov	x0, x21
0000000100007f1c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100007f20	cbz	x0, 0x100007fa4
0000000100007f24	mov	x23, #0x0
0000000100007f28	adr	x24, #181651 ; literal pool for: "Socket entry is not a dictionary. Skipping: %s"
0000000100007f2c	nop
0000000100007f30	mov	x0, x21
0000000100007f34	mov	x1, x23
0000000100007f38	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100007f3c	mov	x25, x0
0000000100007f40	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007f44	cmp	x0, x26
0000000100007f48	b.eq	0x100007f70
0000000100007f4c	str	x20, [sp]
0000000100007f50	orr	w1, wzr, #0x3
0000000100007f54	mov	x0, x19
0000000100007f58	mov	x2, x24
0000000100007f5c	bl	0x1000118ec
0000000100007f60	ldr	x8, [x19, #0x458]
0000000100007f64	orr	x8, x8, #0x1
0000000100007f68	str	x8, [x19, #0x458]
0000000100007f6c	b	0x100007f90
0000000100007f70	ldr	x8, [x19, #0x1e8]
0000000100007f74	ldr	x4, [x19, #0x200]
0000000100007f78	mov	x0, x19
0000000100007f7c	mov	x1, x20
0000000100007f80	mov	x2, x25
0000000100007f84	mov	x3, x22
0000000100007f88	blr	x8
0000000100007f8c	cbz	x0, 0x100007f60
0000000100007f90	add	x23, x23, #0x1
0000000100007f94	mov	x0, x21
0000000100007f98	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100007f9c	cmp	x23, x0
0000000100007fa0	b.lo	0x100007f30
0000000100007fa4	orr	w0, wzr, #0x1
0000000100007fa8	ldp	x29, x30, [sp, #0x50]
0000000100007fac	ldp	x20, x19, [sp, #0x40]
0000000100007fb0	ldp	x22, x21, [sp, #0x30]
0000000100007fb4	ldp	x24, x23, [sp, #0x20]
0000000100007fb8	ldp	x26, x25, [sp, #0x10]
0000000100007fbc	add	sp, sp, #0x60
0000000100007fc0	ret
0000000100007fc4	stp	x24, x23, [sp, #-0x40]!
0000000100007fc8	stp	x22, x21, [sp, #0x10]
0000000100007fcc	stp	x20, x19, [sp, #0x20]
0000000100007fd0	stp	x29, x30, [sp, #0x30]
0000000100007fd4	add	x29, sp, #0x30
0000000100007fd8	mov	x20, x2
0000000100007fdc	mov	x19, x1
0000000100007fe0	mov	x21, x0
0000000100007fe4	mov	x0, x19
0000000100007fe8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100007fec	nop
0000000100007ff0	ldr	x8, #0x380e0 ; literal pool symbol address: __xpc_type_int64
0000000100007ff4	cmp	x0, x8
0000000100007ff8	b.ne	0x1000080a8
0000000100007ffc	adr	x8, #232996
0000000100008000	nop
0000000100008004	add	x22, x8, #0x8
0000000100008008	mov	x0, x19
000000010000800c	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100008010	mov	x19, x0
0000000100008014	mov	x23, #0x0
0000000100008018	ldur	x0, [x22, #-0x8]
000000010000801c	mov	x1, x21
0000000100008020	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008024	cbz	w0, 0x10000803c
0000000100008028	add	x23, x23, #0x1
000000010000802c	add	x22, x22, #0x10
0000000100008030	cmp	x23, #0x9
0000000100008034	b.lo	0x100008018
0000000100008038	b	0x1000080a8
000000010000803c	ldr	w22, [x22]
0000000100008040	ldr	x21, [x20, #0x458]
0000000100008044	ldr	x0, [x20, #0x240]
0000000100008048	cbz	x0, 0x100008060
000000010000804c	ldr	w8, [x0, #0x20]
0000000100008050	cmp	w8, w22
0000000100008054	b.eq	0x100008088
0000000100008058	ldr	x0, [x0]
000000010000805c	cbnz	x0, 0x10000804c
0000000100008060	add	x20, x20, #0x240
0000000100008064	mov	w0, #0x28
0000000100008068	bl	0x10000d464
000000010000806c	str	w22, [x0, #0x20]
0000000100008070	ldr	x8, [x20]
0000000100008074	str	x8, [x0]
0000000100008078	cbz	x8, 0x100008080
000000010000807c	str	x0, [x8, #0x8]
0000000100008080	str	x0, [x20]
0000000100008084	str	x20, [x0, #0x8]
0000000100008088	tbnz	x21, #0x26, 0x10000809c
000000010000808c	orr	w8, wzr, #0x1
0000000100008090	strb	w8, [x0, #0x25]
0000000100008094	str	x19, [x0, #0x10]
0000000100008098	b	0x1000080a8
000000010000809c	orr	w8, wzr, #0x1
00000001000080a0	strb	w8, [x0, #0x24]
00000001000080a4	str	x19, [x0, #0x18]
00000001000080a8	ldp	x29, x30, [sp, #0x30]
00000001000080ac	ldp	x20, x19, [sp, #0x20]
00000001000080b0	ldp	x22, x21, [sp, #0x10]
00000001000080b4	ldp	x24, x23, [sp], #0x40
00000001000080b8	ret
00000001000080bc	stp	x29, x30, [sp, #-0x10]!
00000001000080c0	mov	x29, sp
00000001000080c4	ldp	x8, x3, [x0, #0x20]
00000001000080c8	mov	x0, x8
00000001000080cc	bl	0x100003d10
00000001000080d0	orr	w0, wzr, #0x1
00000001000080d4	ldp	x29, x30, [sp], #0x10
00000001000080d8	ret
00000001000080dc	sub	sp, sp, #0x80
00000001000080e0	stp	x22, x21, [sp, #0x50]
00000001000080e4	stp	x20, x19, [sp, #0x60]
00000001000080e8	stp	x29, x30, [sp, #0x70]
00000001000080ec	add	x29, sp, #0x70
00000001000080f0	mov	x21, x2
00000001000080f4	mov	x19, x1
00000001000080f8	ldp	x22, x20, [x0, #0x20]
00000001000080fc	mov	x0, x21
0000000100008100	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100008104	nop
0000000100008108	ldr	x8, #0x37fb8 ; literal pool symbol address: __xpc_type_dictionary
000000010000810c	cmp	x0, x8
0000000100008110	b.eq	0x100008148
0000000100008114	mov	x0, x21
0000000100008118	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000811c	ldr	x8, [x0, #0x30]
0000000100008120	stp	x19, x8, [sp]
0000000100008124	adr	x2, #181334 ; literal pool for: "Invalid type for a LaunchEvent stream, should be a dictionary (stream/type): %s/%s"
0000000100008128	nop
000000010000812c	orr	w1, wzr, #0x3
0000000100008130	mov	x0, x20
0000000100008134	bl	0x10000ce7c
0000000100008138	ldr	x8, [x22, #0x458]
000000010000813c	orr	x8, x8, #0x1
0000000100008140	str	x8, [x22, #0x458]
0000000100008144	b	0x100008188
0000000100008148	nop
000000010000814c	ldr	x8, #0x37ec4 ; literal pool symbol address: __NSConcreteStackBlock
0000000100008150	str	x8, [sp, #0x10]
0000000100008154	nop
0000000100008158	ldr	d0, 0x10003de90
000000010000815c	str	d0, [sp, #0x18]
0000000100008160	adr	x8, #228
0000000100008164	nop
0000000100008168	adr	x9, #232776
000000010000816c	nop
0000000100008170	stp	x8, x9, [sp, #0x20]
0000000100008174	stp	x21, x20, [sp, #0x30]
0000000100008178	stp	x19, x22, [sp, #0x40]
000000010000817c	add	x1, sp, #0x10
0000000100008180	mov	x0, x21
0000000100008184	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
0000000100008188	orr	w0, wzr, #0x1
000000010000818c	ldp	x29, x30, [sp, #0x70]
0000000100008190	ldp	x20, x19, [sp, #0x60]
0000000100008194	ldp	x22, x21, [sp, #0x50]
0000000100008198	add	sp, sp, #0x80
000000010000819c	ret
00000001000081a0	sub	sp, sp, #0x40
00000001000081a4	stp	x22, x21, [sp, #0x10]
00000001000081a8	stp	x20, x19, [sp, #0x20]
00000001000081ac	stp	x29, x30, [sp, #0x30]
00000001000081b0	add	x29, sp, #0x30
00000001000081b4	mov	x21, x2
00000001000081b8	mov	x20, x1
00000001000081bc	mov	x19, x0
00000001000081c0	mov	x0, x21
00000001000081c4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000081c8	nop
00000001000081cc	ldr	x8, #0x37ef4 ; literal pool symbol address: __xpc_type_dictionary
00000001000081d0	cmp	x0, x8
00000001000081d4	b.eq	0x100008214
00000001000081d8	ldr	x22, [x19, #0x20]
00000001000081dc	mov	x0, x21
00000001000081e0	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000081e4	ldr	x8, [x0, #0x30]
00000001000081e8	stp	x20, x8, [sp]
00000001000081ec	adr	x2, #180472 ; literal pool for: "Invalid type for a RemoteServices entry, should be a dictionary (key/type): %s/%s"
00000001000081f0	nop
00000001000081f4	orr	w1, wzr, #0x3
00000001000081f8	mov	x0, x22
00000001000081fc	bl	0x10000ce7c
0000000100008200	ldr	x8, [x19, #0x28]
0000000100008204	ldr	x9, [x8, #0x458]
0000000100008208	orr	x9, x9, #0x1
000000010000820c	str	x9, [x8, #0x458]
0000000100008210	b	0x10000822c
0000000100008214	ldr	x0, [x19, #0x28]
0000000100008218	adr	x1, #180510 ; literal pool for: "com.apple.remoted.service"
000000010000821c	nop
0000000100008220	mov	x2, x20
0000000100008224	mov	x3, x21
0000000100008228	bl	0x100007948
000000010000822c	orr	w0, wzr, #0x1
0000000100008230	ldp	x29, x30, [sp, #0x30]
0000000100008234	ldp	x20, x19, [sp, #0x20]
0000000100008238	ldp	x22, x21, [sp, #0x10]
000000010000823c	add	sp, sp, #0x40
0000000100008240	ret
0000000100008244	sub	sp, sp, #0x60
0000000100008248	stp	x24, x23, [sp, #0x20]
000000010000824c	stp	x22, x21, [sp, #0x30]
0000000100008250	stp	x20, x19, [sp, #0x40]
0000000100008254	stp	x29, x30, [sp, #0x50]
0000000100008258	add	x29, sp, #0x50
000000010000825c	mov	x21, x2
0000000100008260	mov	x20, x1
0000000100008264	mov	x19, x0
0000000100008268	ldr	x0, [x19, #0x20]
000000010000826c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100008270	nop
0000000100008274	ldr	x8, #0x37e4c ; literal pool symbol address: __xpc_type_dictionary
0000000100008278	cmp	x0, x8
000000010000827c	b.eq	0x1000082c0
0000000100008280	ldp	x22, x23, [x19, #0x28]
0000000100008284	mov	x0, x21
0000000100008288	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000828c	ldr	x8, [x0, #0x30]
0000000100008290	stp	x20, x8, [sp, #0x8]
0000000100008294	str	x23, [sp]
0000000100008298	adr	x2, #181045 ; literal pool for: "Invalid type for a LaunchEvent (stream/name/type): %s/%s/%s"
000000010000829c	nop
00000001000082a0	orr	w1, wzr, #0x3
00000001000082a4	mov	x0, x22
00000001000082a8	bl	0x10000ce7c
00000001000082ac	ldr	x8, [x19, #0x38]
00000001000082b0	ldr	x9, [x8, #0x458]
00000001000082b4	orr	x9, x9, #0x1
00000001000082b8	str	x9, [x8, #0x458]
00000001000082bc	b	0x1000082d0
00000001000082c0	ldp	x1, x0, [x19, #0x30]
00000001000082c4	mov	x2, x20
00000001000082c8	mov	x3, x21
00000001000082cc	bl	0x100007948
00000001000082d0	orr	w0, wzr, #0x1
00000001000082d4	ldp	x29, x30, [sp, #0x50]
00000001000082d8	ldp	x20, x19, [sp, #0x40]
00000001000082dc	ldp	x22, x21, [sp, #0x30]
00000001000082e0	ldp	x24, x23, [sp, #0x20]
00000001000082e4	add	sp, sp, #0x60
00000001000082e8	ret
00000001000082ec	stp	x29, x30, [sp, #-0x10]!
00000001000082f0	mov	x29, sp
00000001000082f4	ldp	x8, x3, [x0, #0x20]
00000001000082f8	mov	x0, x8
00000001000082fc	bl	0x100003d10
0000000100008300	orr	w0, wzr, #0x1
0000000100008304	ldp	x29, x30, [sp], #0x10
0000000100008308	ret
000000010000830c	stp	x28, x27, [sp, #-0x30]!
0000000100008310	stp	x20, x19, [sp, #0x10]
0000000100008314	stp	x29, x30, [sp, #0x20]
0000000100008318	add	x29, sp, #0x20
000000010000831c	sub	sp, sp, #0x220
0000000100008320	mov	x19, x2
0000000100008324	mov	x20, x0
0000000100008328	nop
000000010000832c	ldr	x8, #0x37cec ; literal pool symbol address: ___stack_chk_guard
0000000100008330	ldr	x8, [x8]
0000000100008334	stur	x8, [x29, #-0x28]
0000000100008338	ldr	x8, [x20, #0x20]
000000010000833c	add	x8, x8, #0x460
0000000100008340	adr	x4, #175510 ; literal pool for: "%s.%s"
0000000100008344	nop
0000000100008348	stp	x8, x1, [sp]
000000010000834c	add	x0, sp, #0x18
0000000100008350	orr	w1, wzr, #0x200
0000000100008354	orr	w3, wzr, #0x200
0000000100008358	mov	w2, #0x0
000000010000835c	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100008360	ldp	x0, x3, [x20, #0x20]
0000000100008364	add	x1, sp, #0x18
0000000100008368	mov	x2, x19
000000010000836c	bl	0x100003d10
0000000100008370	ldur	x8, [x29, #-0x28]
0000000100008374	nop
0000000100008378	ldr	x9, #0x37ca0 ; literal pool symbol address: ___stack_chk_guard
000000010000837c	ldr	x9, [x9]
0000000100008380	cmp	x9, x8
0000000100008384	b.ne	0x1000083a0
0000000100008388	orr	w0, wzr, #0x1
000000010000838c	add	sp, sp, #0x220
0000000100008390	ldp	x29, x30, [sp, #0x20]
0000000100008394	ldp	x20, x19, [sp, #0x10]
0000000100008398	ldp	x28, x27, [sp], #0x30
000000010000839c	ret
00000001000083a0	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
00000001000083a4	sub	sp, sp, #0x160
00000001000083a8	stp	x28, x27, [sp, #0x120]
00000001000083ac	stp	x22, x21, [sp, #0x130]
00000001000083b0	stp	x20, x19, [sp, #0x140]
00000001000083b4	stp	x29, x30, [sp, #0x150]
00000001000083b8	add	x29, sp, #0x150
00000001000083bc	mov	x19, x2
00000001000083c0	mov	x20, x1
00000001000083c4	mov	x21, x0
00000001000083c8	nop
00000001000083cc	ldr	x8, #0x37c4c ; literal pool symbol address: ___stack_chk_guard
00000001000083d0	ldr	x8, [x8]
00000001000083d4	stur	x8, [x29, #-0x38]
00000001000083d8	ldrb	w8, [x19]
00000001000083dc	cbz	w8, 0x100008410
00000001000083e0	ldur	x8, [x29, #-0x38]
00000001000083e4	nop
00000001000083e8	ldr	x9, #0x37c30 ; literal pool symbol address: ___stack_chk_guard
00000001000083ec	ldr	x9, [x9]
00000001000083f0	cmp	x9, x8
00000001000083f4	b.ne	0x10000854c
00000001000083f8	ldp	x29, x30, [sp, #0x150]
00000001000083fc	ldp	x20, x19, [sp, #0x140]
0000000100008400	ldp	x22, x21, [sp, #0x130]
0000000100008404	ldp	x28, x27, [sp, #0x120]
0000000100008408	add	sp, sp, #0x160
000000010000840c	ret
0000000100008410	mov	x0, x20
0000000100008414	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100008418	nop
000000010000841c	ldr	x8, #0x37c7c ; literal pool symbol address: __xpc_type_array
0000000100008420	cmp	x0, x8
0000000100008424	b.eq	0x100008440
0000000100008428	mov	x0, x20
000000010000842c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100008430	nop
0000000100008434	ldr	x8, #0x37c6c ; literal pool symbol address: __xpc_type_bool
0000000100008438	cmp	x0, x8
000000010000843c	b.ne	0x1000083e0
0000000100008440	str	x21, [sp]
0000000100008444	adr	x4, #181529 ; literal pool for: "hw.%s"
0000000100008448	nop
000000010000844c	orr	w21, wzr, #0x80
0000000100008450	add	x0, sp, #0x98
0000000100008454	orr	w1, wzr, #0x80
0000000100008458	orr	w3, wzr, #0x80
000000010000845c	mov	w2, #0x0
0000000100008460	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100008464	str	x21, [sp, #0x10]
0000000100008468	add	x0, sp, #0x98
000000010000846c	add	x1, sp, #0x18
0000000100008470	add	x2, sp, #0x10
0000000100008474	mov	x3, #0x0
0000000100008478	mov	x4, #0x0
000000010000847c	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
0000000100008480	cmn	w0, #0x1
0000000100008484	b.eq	0x1000083e0
0000000100008488	ldr	x8, [sp, #0x10]
000000010000848c	cbz	x8, 0x1000083e0
0000000100008490	mov	x0, x20
0000000100008494	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100008498	nop
000000010000849c	ldr	x8, #0x37c04 ; literal pool symbol address: __xpc_type_bool
00000001000084a0	cmp	x0, x8
00000001000084a4	b.eq	0x1000084f4
00000001000084a8	mov	x0, x20
00000001000084ac	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
00000001000084b0	mov	x21, x0
00000001000084b4	cbz	x21, 0x1000083e0
00000001000084b8	mov	x22, #0x0
00000001000084bc	mov	x0, x20
00000001000084c0	mov	x1, x22
00000001000084c4	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
00000001000084c8	mov	x8, x0
00000001000084cc	cbz	x8, 0x1000084e4
00000001000084d0	ldr	x2, [sp, #0x10]
00000001000084d4	add	x0, sp, #0x18
00000001000084d8	mov	x1, x8
00000001000084dc	bl	0x100031748 ; symbol stub for: _strncmp
00000001000084e0	cbz	w0, 0x100008540
00000001000084e4	add	x22, x22, #0x1
00000001000084e8	cmp	x22, x21
00000001000084ec	b.lo	0x1000084bc
00000001000084f0	b	0x1000083e0
00000001000084f4	mov	x0, x20
00000001000084f8	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
00000001000084fc	mov	x20, x0
0000000100008500	ldr	x2, [sp, #0x10]
0000000100008504	cmp	x2, #0x9
0000000100008508	b.hs	0x10000853c
000000010000850c	str	xzr, [sp, #0x8]
0000000100008510	add	x0, sp, #0x8
0000000100008514	add	x1, sp, #0x18
0000000100008518	orr	w3, wzr, #0x8
000000010000851c	bl	0x100030ae8 ; symbol stub for: ___memcpy_chk
0000000100008520	ldr	x8, [sp, #0x8]
0000000100008524	cmp	x8, #0x0
0000000100008528	cset	w8, eq
000000010000852c	eor	w8, w20, w8
0000000100008530	cmp	w8, #0x1
0000000100008534	b.ne	0x1000083e0
0000000100008538	b	0x100008540
000000010000853c	tbz	w20, #0x0, 0x1000083e0
0000000100008540	orr	w8, wzr, #0x1
0000000100008544	strb	w8, [x19]
0000000100008548	b	0x1000083e0
000000010000854c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100008550	sub	sp, sp, #0xe0
0000000100008554	stp	x24, x23, [sp, #0xa0]
0000000100008558	stp	x22, x21, [sp, #0xb0]
000000010000855c	stp	x20, x19, [sp, #0xc0]
0000000100008560	stp	x29, x30, [sp, #0xd0]
0000000100008564	add	x29, sp, #0xd0
0000000100008568	mov	x20, x1
000000010000856c	mov	x19, x0
0000000100008570	nop
0000000100008574	ldr	x8, #0x37aa4 ; literal pool symbol address: ___stack_chk_guard
0000000100008578	ldr	x8, [x8]
000000010000857c	stur	x8, [x29, #-0x38]
0000000100008580	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100008584	nop
0000000100008588	ldr	x24, #0x37b58 ; literal pool symbol address: __xpc_type_string
000000010000858c	cmp	x0, x24
0000000100008590	b.eq	0x1000085c4
0000000100008594	mov	x0, x19
0000000100008598	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000859c	nop
00000001000085a0	ldr	x8, #0x37af8 ; literal pool symbol address: __xpc_type_array
00000001000085a4	cmp	x0, x8
00000001000085a8	b.eq	0x1000085f0
00000001000085ac	adr	x2, #181232 ; literal pool for: "Unsupported type for _LimitLoadToDeviceTree"
00000001000085b0	nop
00000001000085b4	orr	w1, wzr, #0x4
00000001000085b8	mov	x0, x20
00000001000085bc	bl	0x10000ce7c
00000001000085c0	b	0x100008674
00000001000085c4	str	wzr, [sp, #0x14]
00000001000085c8	bl	0x100031220 ; symbol stub for: _mach_host_self
00000001000085cc	mov	w1, #-0x1
00000001000085d0	orr	w2, wzr, #0x3
00000001000085d4	add	x3, sp, #0x14
00000001000085d8	bl	0x100031154 ; symbol stub for: _host_get_special_port
00000001000085dc	cbz	w0, 0x1000086a8
00000001000085e0	sxtw	x0, w0
00000001000085e4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000085e8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000085ec	b	0x100008674
00000001000085f0	mov	x0, x19
00000001000085f4	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
00000001000085f8	cbz	x0, 0x100008678
00000001000085fc	mov	x21, #0x0
0000000100008600	adr	x22, #181091 ; literal pool for: "Unsupported type for index %lu of _LimitLoadToDeviceTree"
0000000100008604	nop
0000000100008608	mov	x0, x19
000000010000860c	mov	x1, x21
0000000100008610	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100008614	mov	x23, x0
0000000100008618	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000861c	cmp	x0, x24
0000000100008620	b.eq	0x100008640
0000000100008624	str	x21, [sp]
0000000100008628	orr	w23, wzr, #0x4
000000010000862c	orr	w1, wzr, #0x4
0000000100008630	mov	x0, x20
0000000100008634	mov	x2, x22
0000000100008638	bl	0x10000ce7c
000000010000863c	b	0x100008650
0000000100008640	mov	x0, x23
0000000100008644	mov	x1, x20
0000000100008648	bl	0x100008550
000000010000864c	mov	x23, x0
0000000100008650	orr	w8, w23, #0x4
0000000100008654	and	w8, w8, #0x7
0000000100008658	cmp	w8, #0x4
000000010000865c	b.ne	0x100008724
0000000100008660	add	x21, x21, #0x1
0000000100008664	mov	x0, x19
0000000100008668	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000866c	cmp	x21, x0
0000000100008670	b.lo	0x100008608
0000000100008674	mov	w0, #0x0
0000000100008678	ldur	x8, [x29, #-0x38]
000000010000867c	nop
0000000100008680	ldr	x9, #0x37998 ; literal pool symbol address: ___stack_chk_guard
0000000100008684	ldr	x9, [x9]
0000000100008688	cmp	x9, x8
000000010000868c	b.ne	0x10000872c
0000000100008690	ldp	x29, x30, [sp, #0xd0]
0000000100008694	ldp	x20, x19, [sp, #0xc0]
0000000100008698	ldp	x22, x21, [sp, #0xb0]
000000010000869c	ldp	x24, x23, [sp, #0xa0]
00000001000086a0	add	sp, sp, #0xe0
00000001000086a4	ret
00000001000086a8	mov	x0, x19
00000001000086ac	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
00000001000086b0	mov	x8, x0
00000001000086b4	cbz	x8, 0x100008678
00000001000086b8	add	x0, sp, #0x18
00000001000086bc	orr	w2, wzr, #0x80
00000001000086c0	orr	w3, wzr, #0x80
00000001000086c4	mov	x1, x8
00000001000086c8	bl	0x100030b0c ; symbol stub for: ___strlcpy_chk
00000001000086cc	str	wzr, [sp, #0x10]
00000001000086d0	ldr	w0, [sp, #0x14]
00000001000086d4	add	x1, sp, #0x18
00000001000086d8	add	x2, sp, #0x10
00000001000086dc	bl	0x10000e1f8
00000001000086e0	cbz	w0, 0x1000086f0
00000001000086e4	sxtw	x0, w0
00000001000086e8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000086ec	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000086f0	nop
00000001000086f4	ldr	x8, #0x37a2c ; literal pool symbol address: _mach_task_self_
00000001000086f8	ldr	w0, [x8]
00000001000086fc	ldr	w1, [sp, #0x14]
0000000100008700	bl	0x100031268 ; symbol stub for: _mach_port_deallocate
0000000100008704	cbz	w0, 0x100008714
0000000100008708	sxtw	x0, w0
000000010000870c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100008710	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100008714	ldr	w8, [sp, #0x10]
0000000100008718	cmp	w8, #0x0
000000010000871c	cset	w0, ne
0000000100008720	b	0x100008678
0000000100008724	orr	w0, wzr, #0x1
0000000100008728	b	0x100008678
000000010000872c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100008730	stp	x20, x19, [sp, #-0x20]!
0000000100008734	stp	x29, x30, [sp, #0x10]
0000000100008738	add	x29, sp, #0x10
000000010000873c	mov	x19, x0
0000000100008740	bl	0x100031214 ; symbol stub for: _mach_absolute_time
0000000100008744	sub	x0, x0, x19
0000000100008748	ldp	x29, x30, [sp, #0x10]
000000010000874c	ldp	x20, x19, [sp], #0x20
0000000100008750	b	0x100008754
0000000100008754	stp	x20, x19, [sp, #-0x20]!
0000000100008758	stp	x29, x30, [sp, #0x10]
000000010000875c	add	x29, sp, #0x10
0000000100008760	mov	x19, x0
0000000100008764	nop
0000000100008768	ldr	x8, #0x3ae00
000000010000876c	cmn	x8, #0x1
0000000100008770	b.ne	0x1000087b4
0000000100008774	adr	x8, #241148
0000000100008778	nop
000000010000877c	ldp	w9, w8, [x8]
0000000100008780	cmp	w9, w8
0000000100008784	b.eq	0x1000087a4
0000000100008788	mov	w9, w9
000000010000878c	mul	x0, x9, x19
0000000100008790	umulh	x1, x9, x19
0000000100008794	mov	w2, w8
0000000100008798	mov	x3, #0x0
000000010000879c	bl	0x100030b24 ; symbol stub for: ___udivti3
00000001000087a0	mov	x19, x0
00000001000087a4	mov	x0, x19
00000001000087a8	ldp	x29, x30, [sp, #0x10]
00000001000087ac	ldp	x20, x19, [sp], #0x20
00000001000087b0	ret
00000001000087b4	adr	x0, #241076
00000001000087b8	nop
00000001000087bc	adr	x2, #976
00000001000087c0	nop
00000001000087c4	mov	x1, #0x0
00000001000087c8	bl	0x100030e30 ; symbol stub for: _dispatch_once_f
00000001000087cc	b	0x100008774
00000001000087d0	b	0x100008754
00000001000087d4	sub	sp, sp, #0x40
00000001000087d8	stp	x20, x19, [sp, #0x20]
00000001000087dc	stp	x29, x30, [sp, #0x30]
00000001000087e0	add	x29, sp, #0x30
00000001000087e4	mov	x19, x2
00000001000087e8	stur	wzr, [x29, #-0x14]
00000001000087ec	stp	w0, w1, [sp]
00000001000087f0	stp	xzr, xzr, [sp, #0x8]
00000001000087f4	nop
00000001000087f8	ldr	x20, #0x37928 ; literal pool symbol address: _mach_task_self_
00000001000087fc	ldr	w0, [x20]
0000000100008800	mov	x1, sp
0000000100008804	sub	x3, x29, #0x14
0000000100008808	mov	x2, x19
000000010000880c	bl	0x10003125c ; symbol stub for: _mach_port_construct
0000000100008810	cbz	w0, 0x100008828
0000000100008814	cmp	w0, #0x3
0000000100008818	ccmp	w0, #0x6, #0x4, ne
000000010000881c	b.ne	0x10000883c
0000000100008820	bl	0x10000d3ec
0000000100008824	cbnz	w0, 0x1000087fc
0000000100008828	ldur	w0, [x29, #-0x14]
000000010000882c	ldp	x29, x30, [sp, #0x30]
0000000100008830	ldp	x20, x19, [sp, #0x20]
0000000100008834	add	sp, sp, #0x40
0000000100008838	ret
000000010000883c	sxtw	x0, w0
0000000100008840	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100008844	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100008848	brk	#0x1
000000010000884c	mov	x8, x0
0000000100008850	nop
0000000100008854	ldr	x9, #0x378cc ; literal pool symbol address: _mach_task_self_
0000000100008858	ldr	w0, [x9]
000000010000885c	mov	w3, #0x14
0000000100008860	mov	x1, x8
0000000100008864	mov	x2, x8
0000000100008868	b	0x100031280 ; symbol stub for: _mach_port_insert_right
000000010000886c	mov	x8, x0
0000000100008870	nop
0000000100008874	ldr	x9, #0x378ac ; literal pool symbol address: _mach_task_self_
0000000100008878	ldr	w0, [x9]
000000010000887c	orr	w3, wzr, #0x1
0000000100008880	mov	x1, x8
0000000100008884	mov	w2, #0x0
0000000100008888	b	0x10003128c ; symbol stub for: _mach_port_mod_refs
000000010000888c	mov	x8, x0
0000000100008890	nop
0000000100008894	ldr	x9, #0x3788c ; literal pool symbol address: _mach_task_self_
0000000100008898	ldr	w0, [x9]
000000010000889c	mov	x1, x8
00000001000088a0	b	0x100031268 ; symbol stub for: _mach_port_deallocate
00000001000088a4	mov	x8, x2
00000001000088a8	mov	x9, x1
00000001000088ac	mov	x10, x0
00000001000088b0	nop
00000001000088b4	ldr	x11, #0x3786c ; literal pool symbol address: _mach_task_self_
00000001000088b8	ldr	w0, [x11]
00000001000088bc	mov	x1, x10
00000001000088c0	mov	x2, x9
00000001000088c4	mov	x3, x8
00000001000088c8	b	0x100031274 ; symbol stub for: _mach_port_destruct
00000001000088cc	stp	x29, x30, [sp, #-0x10]!
00000001000088d0	mov	x29, sp
00000001000088d4	mov	x8, x1
00000001000088d8	mov	x9, x0
00000001000088dc	nop
00000001000088e0	ldr	x10, #0x37840 ; literal pool symbol address: _mach_task_self_
00000001000088e4	ldr	w0, [x10]
00000001000088e8	mov	x1, x9
00000001000088ec	mov	x2, x8
00000001000088f0	bl	0x1000312bc ; symbol stub for: _mach_port_set_context
00000001000088f4	cbnz	w0, 0x100008900
00000001000088f8	ldp	x29, x30, [sp], #0x10
00000001000088fc	ret
0000000100008900	sxtw	x0, w0
0000000100008904	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100008908	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000890c	brk	#0x1
0000000100008910	mov	x8, x0
0000000100008914	nop
0000000100008918	ldr	x9, #0x37808 ; literal pool symbol address: _mach_task_self_
000000010000891c	ldr	w0, [x9]
0000000100008920	orr	w2, wzr, #0x4
0000000100008924	mov	x1, x8
0000000100008928	mov	w4, #0x0
000000010000892c	mov	x3, #0x0
0000000100008930	b	0x1000312b0 ; symbol stub for: _mach_port_set_attributes
0000000100008934	mov	x8, x2
0000000100008938	mov	x9, x1
000000010000893c	mov	x10, x0
0000000100008940	cmp	w9, #0x0
0000000100008944	mov	w11, #0x15
0000000100008948	mov	w12, #0x12
000000010000894c	csel	w5, w12, w11, eq
0000000100008950	nop
0000000100008954	ldr	x11, #0x377cc ; literal pool symbol address: _mach_task_self_
0000000100008958	ldr	w0, [x11]
000000010000895c	mov	w2, #0x45
0000000100008960	mov	x1, x10
0000000100008964	mov	w3, #0x0
0000000100008968	mov	x4, x9
000000010000896c	mov	x6, x8
0000000100008970	b	0x1000312a4 ; symbol stub for: _mach_port_request_notification
0000000100008974	mov	x8, x2
0000000100008978	mov	x9, x1
000000010000897c	mov	x10, x0
0000000100008980	cmp	w9, #0x0
0000000100008984	mov	w11, #0x15
0000000100008988	mov	w12, #0x12
000000010000898c	csel	w5, w12, w11, eq
0000000100008990	nop
0000000100008994	ldr	x11, #0x3778c ; literal pool symbol address: _mach_task_self_
0000000100008998	ldr	w0, [x11]
000000010000899c	mov	w2, #0x46
00000001000089a0	mov	x1, x10
00000001000089a4	mov	w3, #0x0
00000001000089a8	mov	x4, x9
00000001000089ac	mov	x6, x8
00000001000089b0	b	0x1000312a4 ; symbol stub for: _mach_port_request_notification
00000001000089b4	ldr	w8, [x0, #0x4]
00000001000089b8	add	x8, x8, #0x3
00000001000089bc	and	x8, x8, #0x1fffffffc
00000001000089c0	add	x8, x0, x8
00000001000089c4	add	x0, x8, #0x14
00000001000089c8	ret
00000001000089cc	stp	x20, x19, [sp, #-0x20]!
00000001000089d0	stp	x29, x30, [sp, #0x10]
00000001000089d4	add	x29, sp, #0x10
00000001000089d8	mov	x19, x1
00000001000089dc	mov	x20, x0
00000001000089e0	nop
00000001000089e4	ldr	x8, #0x37694 ; literal pool symbol address: __os_alloc_once_table
00000001000089e8	ldr	x9, [x8, #0x10]
00000001000089ec	cmn	x9, #0x1
00000001000089f0	b.ne	0x100008a58
00000001000089f4	ldr	x0, [x8, #0x18]
00000001000089f8	ldrb	w8, [x0, #0x2b]
00000001000089fc	cmp	w8, #0x0
0000000100008a00	orr	w8, wzr, #0x1c00
0000000100008a04	orr	w9, wzr, #0x3800
0000000100008a08	csel	w1, w9, w8, eq
0000000100008a0c	cbz	x20, 0x100008a34
0000000100008a10	mov	w3, #-0x7ffffffd
0000000100008a14	orr	w4, wzr, #0x1
0000000100008a18	mov	x2, x19
0000000100008a1c	mov	x0, x20
0000000100008a20	bl	0x1000314fc ; symbol stub for: _posix_spawnattr_setexceptionports_np
0000000100008a24	cbnz	w0, 0x100008a6c
0000000100008a28	ldp	x29, x30, [sp, #0x10]
0000000100008a2c	ldp	x20, x19, [sp], #0x20
0000000100008a30	ret
0000000100008a34	nop
0000000100008a38	ldr	x8, #0x376e8 ; literal pool symbol address: _mach_task_self_
0000000100008a3c	ldr	w0, [x8]
0000000100008a40	mov	w3, #-0x7ffffffd
0000000100008a44	orr	w4, wzr, #0x1
0000000100008a48	mov	x2, x19
0000000100008a4c	ldp	x29, x30, [sp, #0x10]
0000000100008a50	ldp	x20, x19, [sp], #0x20
0000000100008a54	b	0x100031814 ; symbol stub for: _task_set_exception_ports
0000000100008a58	add	x0, x8, #0x10
0000000100008a5c	mov	w1, #0x1d8
0000000100008a60	mov	x2, #0x0
0000000100008a64	bl	0x100030b3c ; symbol stub for: __os_alloc_once
0000000100008a68	b	0x1000089f8
0000000100008a6c	sxtw	x0, w0
0000000100008a70	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100008a74	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100008a78	brk	#0x1
0000000100008a7c	sub	sp, sp, #0x130
0000000100008a80	stp	x22, x21, [sp, #0x100]
0000000100008a84	stp	x20, x19, [sp, #0x110]
0000000100008a88	stp	x29, x30, [sp, #0x120]
0000000100008a8c	add	x29, sp, #0x120
0000000100008a90	mov	x19, x0
0000000100008a94	add	x21, sp, #0x8
0000000100008a98	nop
0000000100008a9c	ldr	x8, #0x3757c ; literal pool symbol address: ___stack_chk_guard
0000000100008aa0	ldr	x8, [x8]
0000000100008aa4	str	x8, [x21]
0000000100008aa8	nop
0000000100008aac	ldr	x8, #0x375cc ; literal pool symbol address: __os_alloc_once_table
0000000100008ab0	ldr	x9, [x8, #0x10]
0000000100008ab4	cmn	x9, #0x1
0000000100008ab8	b.ne	0x100008b64
0000000100008abc	ldr	x0, [x8, #0x18]
0000000100008ac0	str	wzr, [sp, #0x14]
0000000100008ac4	ldrb	w8, [x0, #0x2b]
0000000100008ac8	cmp	w8, #0x0
0000000100008acc	orr	w8, wzr, #0x400
0000000100008ad0	orr	w9, wzr, #0x2000
0000000100008ad4	csel	w20, w9, w8, eq
0000000100008ad8	nop
0000000100008adc	ldr	x8, #0x37644 ; literal pool symbol address: _mach_task_self_
0000000100008ae0	ldr	w8, [x8]
0000000100008ae4	cmp	w8, w19
0000000100008ae8	b.ne	0x100008b10
0000000100008aec	sub	x2, x29, #0x60
0000000100008af0	add	x3, sp, #0x14
0000000100008af4	add	x4, sp, #0x88
0000000100008af8	add	x5, sp, #0x50
0000000100008afc	add	x6, sp, #0x18
0000000100008b00	mov	x0, x19
0000000100008b04	mov	x1, x20
0000000100008b08	bl	0x1000317fc ; symbol stub for: _task_get_exception_ports
0000000100008b0c	b	0x100008b30
0000000100008b10	bl	0x100031220 ; symbol stub for: _mach_host_self
0000000100008b14	sub	x2, x29, #0x60
0000000100008b18	add	x3, sp, #0x14
0000000100008b1c	add	x4, sp, #0x88
0000000100008b20	add	x5, sp, #0x50
0000000100008b24	add	x6, sp, #0x18
0000000100008b28	mov	x1, x20
0000000100008b2c	bl	0x10003113c ; symbol stub for: _host_get_exception_ports
0000000100008b30	cbnz	w0, 0x100008b7c
0000000100008b34	ldr	w0, [sp, #0x88]
0000000100008b38	ldr	x8, [x21]
0000000100008b3c	nop
0000000100008b40	ldr	x9, #0x374d8 ; literal pool symbol address: ___stack_chk_guard
0000000100008b44	ldr	x9, [x9]
0000000100008b48	cmp	x9, x8
0000000100008b4c	b.ne	0x100008b78
0000000100008b50	ldp	x29, x30, [sp, #0x120]
0000000100008b54	ldp	x20, x19, [sp, #0x110]
0000000100008b58	ldp	x22, x21, [sp, #0x100]
0000000100008b5c	add	sp, sp, #0x130
0000000100008b60	ret
0000000100008b64	add	x0, x8, #0x10
0000000100008b68	mov	w1, #0x1d8
0000000100008b6c	mov	x2, #0x0
0000000100008b70	bl	0x100030b3c ; symbol stub for: __os_alloc_once
0000000100008b74	b	0x100008ac0
0000000100008b78	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100008b7c	sxtw	x0, w0
0000000100008b80	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100008b84	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100008b88	brk	#0x1
0000000100008b8c	stp	x29, x30, [sp, #-0x10]!
0000000100008b90	mov	x29, sp
0000000100008b94	adr	x0, #240092
0000000100008b98	nop
0000000100008b9c	bl	0x1000312f8 ; symbol stub for: _mach_timebase_info
0000000100008ba0	cbnz	w0, 0x100008bac
0000000100008ba4	ldp	x29, x30, [sp], #0x10
0000000100008ba8	ret
0000000100008bac	sxtw	x0, w0
0000000100008bb0	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100008bb4	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100008bb8	brk	#0x1
0000000100008bbc	stp	x22, x21, [sp, #-0x30]!
0000000100008bc0	stp	x20, x19, [sp, #0x10]
0000000100008bc4	stp	x29, x30, [sp, #0x20]
0000000100008bc8	add	x29, sp, #0x20
0000000100008bcc	mov	x20, x1
0000000100008bd0	mov	x19, x0
0000000100008bd4	adr	x1, #176587 ; literal pool for: "ActiveSoftMemoryLimit"
0000000100008bd8	nop
0000000100008bdc	adr	x2, #176557 ; literal pool for: "ActiveHardMemoryLimit"
0000000100008be0	nop
0000000100008be4	mov	x3, x20
0000000100008be8	bl	0x1000099bc
0000000100008bec	adr	x1, #176609 ; literal pool for: "InactiveSoftMemoryLimit"
0000000100008bf0	nop
0000000100008bf4	adr	x2, #176577 ; literal pool for: "InactiveHardMemoryLimit"
0000000100008bf8	nop
0000000100008bfc	mov	x0, x19
0000000100008c00	mov	x3, x20
0000000100008c04	bl	0x1000099bc
0000000100008c08	adr	x1, #175799 ; literal pool for: "TransactionTimeLimitEnabled"
0000000100008c0c	nop
0000000100008c10	mov	x0, x19
0000000100008c14	mov	x2, #0x0
0000000100008c18	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100008c1c	adr	x1, #176427 ; literal pool for: "TransactionTimeLimitTimeoutDelta"
0000000100008c20	nop
0000000100008c24	mov	x0, x19
0000000100008c28	mov	x2, #0x0
0000000100008c2c	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100008c30	adr	x1, #176376 ; literal pool for: "TransactionTimeLimitMaxTimeout"
0000000100008c34	nop
0000000100008c38	mov	x0, x19
0000000100008c3c	mov	x2, #0x0
0000000100008c40	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100008c44	adr	x1, #175767 ; literal pool for: "TransactionTimeLimitIsFatal"
0000000100008c48	nop
0000000100008c4c	mov	x0, x19
0000000100008c50	mov	x2, #0x0
0000000100008c54	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100008c58	adr	x1, #176043 ; literal pool for: "CPUMonitorInterval"
0000000100008c5c	nop
0000000100008c60	mov	x0, x19
0000000100008c64	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
0000000100008c68	mov	x21, x0
0000000100008c6c	adr	x1, #176002 ; literal pool for: "CPUMonitorPercentage"
0000000100008c70	nop
0000000100008c74	mov	x0, x19
0000000100008c78	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
0000000100008c7c	mov	x22, x0
0000000100008c80	cmp	x21, #0x100
0000000100008c84	b.lo	0x100008cb4
0000000100008c88	adr	x2, #179967 ; literal pool for: "CPUMonitorInterval is out of range, ignoring"
0000000100008c8c	nop
0000000100008c90	orr	w1, wzr, #0x3
0000000100008c94	mov	x0, x20
0000000100008c98	bl	0x10000ce7c
0000000100008c9c	adr	x1, #175975 ; literal pool for: "CPUMonitorInterval"
0000000100008ca0	nop
0000000100008ca4	mov	x0, x19
0000000100008ca8	mov	x2, #0x0
0000000100008cac	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100008cb0	mov	x21, #0x0
0000000100008cb4	cmp	x22, #0x65
0000000100008cb8	b.lo	0x100008ce8
0000000100008cbc	adr	x2, #179960 ; literal pool for: "CPUMonitorPercentage is out of range, ignoring"
0000000100008cc0	nop
0000000100008cc4	orr	w1, wzr, #0x3
0000000100008cc8	mov	x0, x20
0000000100008ccc	bl	0x10000ce7c
0000000100008cd0	adr	x1, #175902 ; literal pool for: "CPUMonitorPercentage"
0000000100008cd4	nop
0000000100008cd8	mov	x0, x19
0000000100008cdc	mov	x2, #0x0
0000000100008ce0	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100008ce4	mov	x22, #0x0
0000000100008ce8	cmp	x22, #0x64
0000000100008cec	cset	w8, eq
0000000100008cf0	cmp	x21, #0x0
0000000100008cf4	cset	w9, eq
0000000100008cf8	cmp	x22, #0x0
0000000100008cfc	cset	w10, eq
0000000100008d00	orr	w10, w9, w10
0000000100008d04	cmp	w10, #0x1
0000000100008d08	b.ne	0x100008d64
0000000100008d0c	and	w8, w9, w8
0000000100008d10	cbnz	w8, 0x100008d64
0000000100008d14	orr	x8, x22, x21
0000000100008d18	cbz	x8, 0x100008d64
0000000100008d1c	adr	x2, #179911 ; literal pool for: "incomplete CPUMonitor, ignoring"
0000000100008d20	nop
0000000100008d24	orr	w1, wzr, #0x3
0000000100008d28	mov	x0, x20
0000000100008d2c	bl	0x10000ce7c
0000000100008d30	adr	x1, #175827 ; literal pool for: "CPUMonitorInterval"
0000000100008d34	nop
0000000100008d38	mov	x0, x19
0000000100008d3c	mov	x2, #0x0
0000000100008d40	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100008d44	adr	x1, #175786 ; literal pool for: "CPUMonitorPercentage"
0000000100008d48	nop
0000000100008d4c	mov	x0, x19
0000000100008d50	mov	x2, #0x0
0000000100008d54	ldp	x29, x30, [sp, #0x20]
0000000100008d58	ldp	x20, x19, [sp, #0x10]
0000000100008d5c	ldp	x22, x21, [sp], #0x30
0000000100008d60	b	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100008d64	ldp	x29, x30, [sp, #0x20]
0000000100008d68	ldp	x20, x19, [sp, #0x10]
0000000100008d6c	ldp	x22, x21, [sp], #0x30
0000000100008d70	ret
0000000100008d74	sub	sp, sp, #0x40
0000000100008d78	stp	x29, x30, [sp, #0x30]
0000000100008d7c	add	x29, sp, #0x30
0000000100008d80	mov	x8, x1
0000000100008d84	nop
0000000100008d88	ldr	x9, #0x37288 ; literal pool symbol address: __NSConcreteStackBlock
0000000100008d8c	str	x9, [sp]
0000000100008d90	nop
0000000100008d94	ldr	d0, 0x10003de90
0000000100008d98	str	d0, [sp, #0x8]
0000000100008d9c	adr	x9, #52
0000000100008da0	nop
0000000100008da4	str	x9, [sp, #0x10]
0000000100008da8	adr	x9, #229736
0000000100008dac	nop
0000000100008db0	stp	x9, x0, [sp, #0x18]
0000000100008db4	str	x2, [sp, #0x28]
0000000100008db8	mov	x1, sp
0000000100008dbc	mov	x0, x8
0000000100008dc0	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
0000000100008dc4	ldp	x29, x30, [sp, #0x30]
0000000100008dc8	add	sp, sp, #0x40
0000000100008dcc	ret
0000000100008dd0	sub	sp, sp, #0x60
0000000100008dd4	stp	x22, x21, [sp, #0x30]
0000000100008dd8	stp	x20, x19, [sp, #0x40]
0000000100008ddc	stp	x29, x30, [sp, #0x50]
0000000100008de0	add	x29, sp, #0x50
0000000100008de4	mov	x22, x2
0000000100008de8	mov	x20, x1
0000000100008dec	nop
0000000100008df0	ldr	x8, #0x37228 ; literal pool symbol address: ___stack_chk_guard
0000000100008df4	ldr	x8, [x8]
0000000100008df8	str	x8, [sp, #0x28]
0000000100008dfc	ldp	x19, x21, [x0, #0x20]
0000000100008e00	mov	x0, x22
0000000100008e04	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100008e08	nop
0000000100008e0c	ldr	x8, #0x37294 ; literal pool symbol address: __xpc_type_bool
0000000100008e10	cmp	x0, x8
0000000100008e14	b.eq	0x100008e4c
0000000100008e18	nop
0000000100008e1c	ldr	x8, #0x372b4 ; literal pool symbol address: __xpc_type_int64
0000000100008e20	cmp	x0, x8
0000000100008e24	b.eq	0x100008eec
0000000100008e28	nop
0000000100008e2c	ldr	x8, #0x372b4 ; literal pool symbol address: __xpc_type_string
0000000100008e30	cmp	x0, x8
0000000100008e34	b.eq	0x100008f24
0000000100008e38	ldr	x8, [x0, #0x30]
0000000100008e3c	stp	x20, x8, [sp]
0000000100008e40	adr	x2, #179651 ; literal pool for: "Invalid type for JetsamProperties dictionary (key/type): %s/%s"
0000000100008e44	nop
0000000100008e48	b	0x100009190
0000000100008e4c	mov	x0, x22
0000000100008e50	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
0000000100008e54	mov	x21, x0
0000000100008e58	ldrsb	w8, [x20]
0000000100008e5c	sub	w8, w8, #0x41
0000000100008e60	cmp	w8, #0x33
0000000100008e64	b.hi	0x100008fdc
0000000100008e68	orr	w9, wzr, #0x1
0000000100008e6c	lsl	x9, x9, x8
0000000100008e70	tst	x9, #0x100000001
0000000100008e74	b.ne	0x100008fc8
0000000100008e78	orr	w9, wzr, #0x1
0000000100008e7c	lsl	x9, x9, x8
0000000100008e80	tst	x9, #0x1000000010
0000000100008e84	b.ne	0x100008fec
0000000100008e88	orr	w9, wzr, #0x1
0000000100008e8c	lsl	x8, x9, x8
0000000100008e90	tst	x8, #0x8000000080000
0000000100008e94	b.eq	0x100008fdc
0000000100008e98	adr	x1, #175143 ; literal pool for: "TransactionTimeLimitEnabled"
0000000100008e9c	nop
0000000100008ea0	mov	x0, x20
0000000100008ea4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008ea8	cbz	w0, 0x1000090cc
0000000100008eac	adr	x1, #175151 ; literal pool for: "TransactionTimeLimitIsFatal"
0000000100008eb0	nop
0000000100008eb4	mov	x0, x20
0000000100008eb8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008ebc	cbnz	w0, 0x100008fdc
0000000100008ec0	adr	x4, #179607 ; literal pool for: "%d"
0000000100008ec4	nop
0000000100008ec8	str	x21, [sp]
0000000100008ecc	add	x0, sp, #0x12
0000000100008ed0	orr	w1, wzr, #0x2
0000000100008ed4	orr	w3, wzr, #0x2
0000000100008ed8	mov	w2, #0x0
0000000100008edc	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100008ee0	adr	x1, #179578 ; literal pool for: "XPC_TRANSACTION_TIMELIMITS_IS_FATAL"
0000000100008ee4	nop
0000000100008ee8	b	0x100009268
0000000100008eec	mov	x0, x22
0000000100008ef0	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100008ef4	mov	x21, x0
0000000100008ef8	ldrsb	w8, [x20]
0000000100008efc	cmp	w8, #0x60
0000000100008f00	b.gt	0x100008f64
0000000100008f04	sub	w9, w8, #0x41
0000000100008f08	cmp	w9, #0x9
0000000100008f0c	b.hi	0x100009134
0000000100008f10	adr	x8, #888
0000000100008f14	nop
0000000100008f18	ldrsw	x9, [x8, x9, lsl #2]
0000000100008f1c	add	x8, x9, x8
0000000100008f20	br	x8
0000000100008f24	mov	x0, x22
0000000100008f28	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100008f2c	mov	x22, x0
0000000100008f30	ldrsb	w0, [x20]
0000000100008f34	bl	0x100030b18 ; symbol stub for: ___tolower
0000000100008f38	cmp	w0, #0x65
0000000100008f3c	b.ne	0x100008f54
0000000100008f40	adr	x1, #179713 ; literal pool for: "EnergyEfficiencyMode"
0000000100008f44	nop
0000000100008f48	mov	x0, x20
0000000100008f4c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008f50	cbz	w0, 0x1000090f0
0000000100008f54	str	x20, [sp]
0000000100008f58	adr	x2, #179781 ; literal pool for: "Unknown JetsamProperties key for string: %s"
0000000100008f5c	nop
0000000100008f60	b	0x100009190
0000000100008f64	sub	w9, w8, #0x61
0000000100008f68	cmp	w9, #0x9
0000000100008f6c	b.hi	0x100009140
0000000100008f70	adr	x8, #832
0000000100008f74	nop
0000000100008f78	ldrsw	x9, [x8, x9, lsl #2]
0000000100008f7c	add	x8, x9, x8
0000000100008f80	br	x8
0000000100008f84	adr	x1, #175643 ; literal pool for: "ActiveSoftMemoryLimit"
0000000100008f88	nop
0000000100008f8c	mov	x0, x20
0000000100008f90	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008f94	cbz	w0, 0x1000091dc
0000000100008f98	adr	x1, #175601 ; literal pool for: "ActiveHardMemoryLimit"
0000000100008f9c	nop
0000000100008fa0	mov	x0, x20
0000000100008fa4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008fa8	cbz	w0, 0x100009220
0000000100008fac	adr	x1, #179452 ; literal pool for: "AddressLimit"
0000000100008fb0	nop
0000000100008fb4	mov	x0, x20
0000000100008fb8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008fbc	cbnz	w0, 0x100009184
0000000100008fc0	str	x21, [x19, #0x2f0]
0000000100008fc4	b	0x10000919c
0000000100008fc8	adr	x1, #174033 ; literal pool for: "AlwaysSIGTERMOnShutdown"
0000000100008fcc	nop
0000000100008fd0	mov	x0, x20
0000000100008fd4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008fd8	cbz	w0, 0x1000090d8
0000000100008fdc	str	x20, [sp]
0000000100008fe0	adr	x2, #179358 ; literal pool for: "Unknown JetsamProperties key for bool: %s"
0000000100008fe4	nop
0000000100008fe8	b	0x100009190
0000000100008fec	adr	x1, #174702 ; literal pool for: "EnableTransactions"
0000000100008ff0	nop
0000000100008ff4	mov	x0, x20
0000000100008ff8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100008ffc	cbz	w0, 0x1000090e4
0000000100009000	adr	x1, #174763 ; literal pool for: "EnablePressuredExit"
0000000100009004	nop
0000000100009008	mov	x0, x20
000000010000900c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009010	cbz	w0, 0x1000091cc
0000000100009014	adr	x1, #173779 ; literal pool for: "ExecuteAllowed"
0000000100009018	nop
000000010000901c	mov	x0, x20
0000000100009020	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009024	cbz	w0, 0x10000919c
0000000100009028	adr	x1, #179226 ; literal pool for: "EnableIdleHysteresis"
000000010000902c	nop
0000000100009030	mov	x0, x20
0000000100009034	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009038	cbnz	w0, 0x100008fdc
000000010000903c	ldr	x8, [x19, #0x458]
0000000100009040	bfi	x8, x21, #49, #1
0000000100009044	b	0x1000091d4
0000000100009048	adr	x1, #175035 ; literal pool for: "CPUMonitorInterval"
000000010000904c	nop
0000000100009050	mov	x0, x20
0000000100009054	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009058	cbz	w0, 0x1000091e4
000000010000905c	adr	x1, #174994 ; literal pool for: "CPUMonitorPercentage"
0000000100009060	nop
0000000100009064	mov	x0, x20
0000000100009068	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000906c	cbnz	w0, 0x100009184
0000000100009070	strb	w21, [x19, #0x30a]
0000000100009074	b	0x10000919c
0000000100009078	adr	x1, #175445 ; literal pool for: "InactiveSoftMemoryLimit"
000000010000907c	nop
0000000100009080	mov	x0, x20
0000000100009084	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009088	cbz	w0, 0x1000091ec
000000010000908c	adr	x1, #175401 ; literal pool for: "InactiveHardMemoryLimit"
0000000100009090	nop
0000000100009094	mov	x0, x20
0000000100009098	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000909c	cbnz	w0, 0x100009184
00000001000090a0	str	w21, [x19, #0x2e8]
00000001000090a4	ldr	w8, [x19, #0x2dc]
00000001000090a8	orr	w8, w8, #0x8
00000001000090ac	b	0x10000922c
00000001000090b0	adr	x1, #174950 ; literal pool for: "JetsamPriority"
00000001000090b4	nop
00000001000090b8	mov	x0, x20
00000001000090bc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
00000001000090c0	cbnz	w0, 0x100009184
00000001000090c4	str	w21, [x19, #0x2e0]
00000001000090c8	b	0x10000919c
00000001000090cc	ldr	x8, [x19, #0x458]
00000001000090d0	bfi	x8, x21, #46, #1
00000001000090d4	b	0x1000091d4
00000001000090d8	ldr	x8, [x19, #0x458]
00000001000090dc	bfi	x8, x21, #48, #1
00000001000090e0	b	0x1000091d4
00000001000090e4	ldr	x8, [x19, #0x458]
00000001000090e8	bfi	x8, x21, #9, #1
00000001000090ec	b	0x1000091d4
00000001000090f0	adr	x1, #179302 ; literal pool for: "Efficient"
00000001000090f4	nop
00000001000090f8	mov	x0, x22
00000001000090fc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009100	cbz	w0, 0x100009234
0000000100009104	adr	x1, #179292 ; literal pool for: "UserInterface"
0000000100009108	nop
000000010000910c	mov	x0, x22
0000000100009110	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009114	cbz	w0, 0x10000919c
0000000100009118	str	x22, [sp]
000000010000911c	adr	x2, #179282 ; literal pool for: "Unsupported value for EnergyEfficiencyMode: %s"
0000000100009120	nop
0000000100009124	orr	w1, wzr, #0x3
0000000100009128	mov	x0, x21
000000010000912c	bl	0x10000ce7c
0000000100009130	b	0x10000919c
0000000100009134	cmp	w8, #0x54
0000000100009138	b.eq	0x100009148
000000010000913c	b	0x100009184
0000000100009140	cmp	w8, #0x74
0000000100009144	b.ne	0x100009184
0000000100009148	adr	x1, #175072 ; literal pool for: "TransactionTimeLimitMaxTimeout"
000000010000914c	nop
0000000100009150	mov	x0, x20
0000000100009154	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009158	cbz	w0, 0x1000091f4
000000010000915c	adr	x1, #175083 ; literal pool for: "TransactionTimeLimitTimeoutDelta"
0000000100009160	nop
0000000100009164	mov	x0, x20
0000000100009168	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000916c	cbz	w0, 0x100009240
0000000100009170	adr	x1, #179096 ; literal pool for: "ThreadLimit"
0000000100009174	nop
0000000100009178	mov	x0, x20
000000010000917c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009180	cbz	w0, 0x10000927c
0000000100009184	str	x20, [sp]
0000000100009188	adr	x2, #179084 ; literal pool for: "Unknown JetsamProperties key for integer: %s"
000000010000918c	nop
0000000100009190	orr	w1, wzr, #0x3
0000000100009194	mov	x0, x19
0000000100009198	bl	0x1000118ec
000000010000919c	ldr	x8, [sp, #0x28]
00000001000091a0	nop
00000001000091a4	ldr	x9, #0x36e74 ; literal pool symbol address: ___stack_chk_guard
00000001000091a8	ldr	x9, [x9]
00000001000091ac	cmp	x9, x8
00000001000091b0	b.ne	0x100009284
00000001000091b4	orr	w0, wzr, #0x1
00000001000091b8	ldp	x29, x30, [sp, #0x50]
00000001000091bc	ldp	x20, x19, [sp, #0x40]
00000001000091c0	ldp	x22, x21, [sp, #0x30]
00000001000091c4	add	sp, sp, #0x60
00000001000091c8	ret
00000001000091cc	ldr	x8, [x19, #0x458]
00000001000091d0	bfi	x8, x21, #10, #1
00000001000091d4	str	x8, [x19, #0x458]
00000001000091d8	b	0x10000919c
00000001000091dc	str	w21, [x19, #0x2e4]
00000001000091e0	b	0x10000919c
00000001000091e4	str	w21, [x19, #0x30c]
00000001000091e8	b	0x10000919c
00000001000091ec	str	w21, [x19, #0x2e8]
00000001000091f0	b	0x10000919c
00000001000091f4	adr	x4, #178881 ; literal pool for: "%lld"
00000001000091f8	nop
00000001000091fc	str	x21, [sp]
0000000100009200	add	x0, sp, #0x12
0000000100009204	mov	w1, #0x16
0000000100009208	mov	w3, #0x16
000000010000920c	mov	w2, #0x0
0000000100009210	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100009214	adr	x1, #178854 ; literal pool for: "XPC_TRANSACTION_TIMELIMITS_MAXTIMEOUT"
0000000100009218	nop
000000010000921c	b	0x100009268
0000000100009220	str	w21, [x19, #0x2e4]
0000000100009224	ldr	w8, [x19, #0x2dc]
0000000100009228	orr	w8, w8, #0x4
000000010000922c	str	w8, [x19, #0x2dc]
0000000100009230	b	0x10000919c
0000000100009234	orr	w8, wzr, #0x1
0000000100009238	str	x8, [x19, #0x2f8]
000000010000923c	b	0x10000919c
0000000100009240	adr	x4, #178805 ; literal pool for: "%lld"
0000000100009244	nop
0000000100009248	str	x21, [sp]
000000010000924c	add	x0, sp, #0x12
0000000100009250	mov	w1, #0x16
0000000100009254	mov	w3, #0x16
0000000100009258	mov	w2, #0x0
000000010000925c	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100009260	adr	x1, #178816 ; literal pool for: "XPC_TRANSACTION_TIMELIMITS_TIMEOUTDELTA"
0000000100009264	nop
0000000100009268	add	x2, sp, #0x12
000000010000926c	mov	w3, #0x0
0000000100009270	mov	x0, x19
0000000100009274	bl	0x100003a98
0000000100009278	b	0x10000919c
000000010000927c	str	w21, [x19, #0x2ec]
0000000100009280	b	0x10000919c
0000000100009284	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100009288	.long	0xfffffcfc
000000010000928c	.long	0xfffffefc
0000000100009290	.long	0xfffffdc0
0000000100009294	.long	0xfffffefc
0000000100009298	.long	0xfffffefc
000000010000929c	.long	0xfffffefc
00000001000092a0	.long	0xfffffefc
00000001000092a4	.long	0xfffffefc
00000001000092a8	.long	0xfffffdf0
00000001000092ac	.long	0xfffffe28
00000001000092b0	.long	0xfffffcd4
00000001000092b4	.long	0xfffffed4
00000001000092b8	.long	0xfffffd98
00000001000092bc	.long	0xfffffed4
00000001000092c0	.long	0xfffffed4
00000001000092c4	.long	0xfffffed4
00000001000092c8	.long	0xfffffed4
00000001000092cc	.long	0xfffffed4
00000001000092d0	.long	0xfffffdc8
00000001000092d4	.long	0xfffffe00
00000001000092d8	sub	sp, sp, #0x50
00000001000092dc	stp	x24, x23, [sp, #0x10]
00000001000092e0	stp	x22, x21, [sp, #0x20]
00000001000092e4	stp	x20, x19, [sp, #0x30]
00000001000092e8	stp	x29, x30, [sp, #0x40]
00000001000092ec	add	x29, sp, #0x40
00000001000092f0	nop
00000001000092f4	nop
00000001000092f8	ldr	x8, #0x3b178
00000001000092fc	cbz	x8, 0x1000094b0
0000000100009300	adr	x9, #178934 ; literal pool for: "/System/Library/LaunchDaemons/com.apple.jetsamproperties"
0000000100009304	nop
0000000100009308	stp	x9, x8, [sp]
000000010000930c	adr	x0, #178910 ; literal pool for: "%s.%s.plist"
0000000100009310	nop
0000000100009314	bl	0x10000d72c
0000000100009318	mov	x20, x0
000000010000931c	bl	0x100028a68
0000000100009320	mov	x22, x0
0000000100009324	adr	x21, #178955 ; literal pool for: "/System/Library/LaunchDaemons/com.apple.jetsamproperties.NonUI.plist"
0000000100009328	nop
000000010000932c	mov	x0, x21
0000000100009330	bl	0x100028a68
0000000100009334	mov	x19, x0
0000000100009338	cbz	x22, 0x100009340
000000010000933c	cbnz	x19, 0x1000094bc
0000000100009340	cbz	x22, 0x100009354
0000000100009344	adrp	x8, 59 ; 0x100044000
0000000100009348	str	x20, [x8, #0x400]
000000010000934c	mov	x19, x22
0000000100009350	b	0x100009368
0000000100009354	mov	x0, x20
0000000100009358	bl	0x100031010 ; symbol stub for: _free
000000010000935c	adrp	x8, 59 ; 0x100044000
0000000100009360	str	x21, [x8, #0x400]
0000000100009364	cbz	x19, 0x10000948c
0000000100009368	mov	x0, x19
000000010000936c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100009370	nop
0000000100009374	ldr	x8, #0x36d4c ; literal pool symbol address: __xpc_type_dictionary
0000000100009378	cmp	x0, x8
000000010000937c	b.ne	0x1000094c8
0000000100009380	adrp	x23, 58 ; 0x100043000
0000000100009384	ldr	x8, [x23, #0x578]
0000000100009388	cbnz	x8, 0x1000094a4
000000010000938c	adrp	x22, 58 ; 0x100043000
0000000100009390	ldr	x8, [x22, #0x580]
0000000100009394	cbnz	x8, 0x1000094a4
0000000100009398	adrp	x21, 58 ; 0x100043000
000000010000939c	ldr	x8, [x21, #0x590]
00000001000093a0	cbnz	x8, 0x1000094a4
00000001000093a4	adr	x1, #179040 ; literal pool for: "Version4"
00000001000093a8	nop
00000001000093ac	mov	x0, x19
00000001000093b0	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
00000001000093b4	mov	x20, x0
00000001000093b8	cbz	x20, 0x1000094d4
00000001000093bc	adr	x1, #179091 ; literal pool for: "Daemon"
00000001000093c0	nop
00000001000093c4	mov	x0, x20
00000001000093c8	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
00000001000093cc	str	x0, [x23, #0x578]
00000001000093d0	cbz	x0, 0x1000093d8
00000001000093d4	bl	0x100031b74 ; symbol stub for: _xpc_retain
00000001000093d8	adr	x1, #170938 ; literal pool for: "App"
00000001000093dc	nop
00000001000093e0	mov	x0, x20
00000001000093e4	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
00000001000093e8	str	x0, [x22, #0x580]
00000001000093ec	cbz	x0, 0x1000093f4
00000001000093f0	bl	0x100031b74 ; symbol stub for: _xpc_retain
00000001000093f4	adr	x1, #179042 ; literal pool for: "Extension"
00000001000093f8	nop
00000001000093fc	mov	x0, x20
0000000100009400	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
0000000100009404	str	x0, [x21, #0x590]
0000000100009408	cbz	x0, 0x100009410
000000010000940c	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100009410	adr	x1, #172538 ; literal pool for: "XPCService"
0000000100009414	nop
0000000100009418	mov	x0, x20
000000010000941c	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
0000000100009420	adrp	x8, 58 ; 0x100043000
0000000100009424	str	x0, [x8, #0x5a0]
0000000100009428	cbz	x0, 0x100009430
000000010000942c	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100009430	adr	x1, #178992 ; literal pool for: "SystemXPCService"
0000000100009434	nop
0000000100009438	mov	x0, x20
000000010000943c	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
0000000100009440	adrp	x8, 58 ; 0x100043000
0000000100009444	str	x0, [x8, #0x598]
0000000100009448	cbz	x0, 0x100009450
000000010000944c	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100009450	adr	x1, #170808 ; literal pool for: "SystemApp"
0000000100009454	nop
0000000100009458	mov	x0, x20
000000010000945c	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
0000000100009460	adrp	x8, 58 ; 0x100043000
0000000100009464	str	x0, [x8, #0x588]
0000000100009468	cbz	x0, 0x100009470
000000010000946c	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100009470	mov	x0, x19
0000000100009474	ldp	x29, x30, [sp, #0x40]
0000000100009478	ldp	x20, x19, [sp, #0x30]
000000010000947c	ldp	x22, x21, [sp, #0x20]
0000000100009480	ldp	x24, x23, [sp, #0x10]
0000000100009484	add	sp, sp, #0x50
0000000100009488	b	0x100031b68 ; symbol stub for: _xpc_release
000000010000948c	ldp	x29, x30, [sp, #0x40]
0000000100009490	ldp	x20, x19, [sp, #0x30]
0000000100009494	ldp	x22, x21, [sp, #0x20]
0000000100009498	ldp	x24, x23, [sp, #0x10]
000000010000949c	add	sp, sp, #0x50
00000001000094a0	ret
00000001000094a4	adr	x0, #178743 ; literal pool for: "found multiple jetsam properties plists!"
00000001000094a8	nop
00000001000094ac	bl	0x100028f84
00000001000094b0	adr	x0, #178457 ; literal pool for: "sysctl hw.targettype was not set"
00000001000094b4	nop
00000001000094b8	bl	0x100028f84
00000001000094bc	adr	x0, #178616 ; literal pool for: "both NonUI & target-specific JetsamProperties plists are present. This is an error in build mastering."
00000001000094c0	nop
00000001000094c4	bl	0x100028f84
00000001000094c8	adr	x0, #177671 ; literal pool for: "JetsamProperties plist is malformed"
00000001000094cc	nop
00000001000094d0	bl	0x100028f84
00000001000094d4	adr	x0, #178745 ; literal pool for: "JetsamProperties plist is malformed - missing Version4 dictionary"
00000001000094d8	nop
00000001000094dc	bl	0x100028f84
00000001000094e0	sub	sp, sp, #0x160
00000001000094e4	stp	x28, x27, [sp, #0x110]
00000001000094e8	stp	x24, x23, [sp, #0x120]
00000001000094ec	stp	x22, x21, [sp, #0x130]
00000001000094f0	stp	x20, x19, [sp, #0x140]
00000001000094f4	stp	x29, x30, [sp, #0x150]
00000001000094f8	add	x29, sp, #0x150
00000001000094fc	mov	x19, x0
0000000100009500	nop
0000000100009504	ldr	x8, #0x36b14 ; literal pool symbol address: ___stack_chk_guard
0000000100009508	ldr	x8, [x8]
000000010000950c	stur	x8, [x29, #-0x48]
0000000100009510	adr	x1, #170868 ; literal pool for: "Label"
0000000100009514	nop
0000000100009518	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010000951c	mov	x20, x0
0000000100009520	adrp	x24, 58 ; 0x100043000
0000000100009524	ldr	x22, [x24, #0x578]
0000000100009528	adr	x1, #174443 ; literal pool for: "POSIXSpawnType"
000000010000952c	nop
0000000100009530	mov	x0, x19
0000000100009534	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100009538	mov	x23, x0
000000010000953c	cbnz	x23, 0x100009554
0000000100009540	adr	x1, #170808 ; literal pool for: "ProcessType"
0000000100009544	nop
0000000100009548	mov	x0, x19
000000010000954c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100009550	mov	x23, x0
0000000100009554	adr	x1, #177567 ; literal pool for: "UIKitApplication:"
0000000100009558	nop
000000010000955c	mov	x0, x20
0000000100009560	bl	0x10000d7a4
0000000100009564	tbnz	w0, #0x0, 0x10000957c
0000000100009568	adr	x1, #177565 ; literal pool for: "AlternateSystemApplication:"
000000010000956c	nop
0000000100009570	mov	x0, x20
0000000100009574	bl	0x10000d7a4
0000000100009578	cbz	w0, 0x1000095e8
000000010000957c	mov	x0, x20
0000000100009580	bl	0x10000d520
0000000100009584	mov	x21, x0
0000000100009588	mov	w1, #0x3a
000000010000958c	bl	0x1000316f4 ; symbol stub for: _strchr
0000000100009590	mov	x20, x0
0000000100009594	mov	w1, #0x5b
0000000100009598	mov	x0, x21
000000010000959c	bl	0x100031784 ; symbol stub for: _strrchr
00000001000095a0	cbz	x0, 0x1000095d0
00000001000095a4	strb	wzr, [x0]
00000001000095a8	mov	w1, #0x5b
00000001000095ac	mov	x0, x21
00000001000095b0	bl	0x100031784 ; symbol stub for: _strrchr
00000001000095b4	cbz	x0, 0x1000095d0
00000001000095b8	add	x1, x20, #0x1
00000001000095bc	sub	x8, x0, #0x1
00000001000095c0	sub	x8, x8, x1
00000001000095c4	add	x9, x8, #0x1
00000001000095c8	cmp	x9, #0x100
00000001000095cc	b.lo	0x100009654
00000001000095d0	mov	x0, x21
00000001000095d4	bl	0x100031010 ; symbol stub for: _free
00000001000095d8	mov	x0, x19
00000001000095dc	bl	0x100031b74 ; symbol stub for: _xpc_retain
00000001000095e0	mov	x19, x0
00000001000095e4	b	0x1000096bc
00000001000095e8	adr	x1, #177465 ; literal pool for: "lockdown."
00000001000095ec	nop
00000001000095f0	mov	x0, x20
00000001000095f4	bl	0x10000d7a4
00000001000095f8	cbz	w0, 0x10000969c
00000001000095fc	add	x0, x20, #0x9
0000000100009600	mov	w1, #0x2e
0000000100009604	bl	0x1000316f4 ; symbol stub for: _strchr
0000000100009608	mov	x21, x0
000000010000960c	mov	x0, x20
0000000100009610	bl	0x10003173c ; symbol stub for: _strlen
0000000100009614	adds	x8, x20, x0
0000000100009618	b.eq	0x1000095d8
000000010000961c	add	x1, x21, #0x1
0000000100009620	sub	x8, x8, #0x1
0000000100009624	sub	x8, x8, x1
0000000100009628	add	x9, x8, #0x1
000000010000962c	cmp	x9, #0x100
0000000100009630	b.hs	0x1000095d8
0000000100009634	add	x20, sp, #0x8
0000000100009638	add	x2, x8, #0x2
000000010000963c	add	x0, sp, #0x8
0000000100009640	orr	w3, wzr, #0x100
0000000100009644	bl	0x100030b0c ; symbol stub for: ___strlcpy_chk
0000000100009648	mov	x21, #0x0
000000010000964c	ldr	x22, [x24, #0x578]
0000000100009650	b	0x1000096a0
0000000100009654	add	x20, sp, #0x8
0000000100009658	add	x2, x8, #0x2
000000010000965c	add	x0, sp, #0x8
0000000100009660	orr	w3, wzr, #0x100
0000000100009664	bl	0x100030b0c ; symbol stub for: ___strlcpy_chk
0000000100009668	nop
000000010000966c	ldr	x22, #0x39f14
0000000100009670	cbz	x23, 0x1000096a0
0000000100009674	add	x20, sp, #0x8
0000000100009678	adr	x1, #170256 ; literal pool for: "SystemApp"
000000010000967c	nop
0000000100009680	mov	x0, x23
0000000100009684	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009688	nop
000000010000968c	ldr	x8, #0x39efc
0000000100009690	cmp	w0, #0x0
0000000100009694	csel	x22, x8, x22, eq
0000000100009698	b	0x1000096a0
000000010000969c	mov	x21, #0x0
00000001000096a0	mov	x0, x20
00000001000096a4	mov	x1, x19
00000001000096a8	mov	x2, x22
00000001000096ac	bl	0x1000096f8
00000001000096b0	mov	x19, x0
00000001000096b4	mov	x0, x21
00000001000096b8	bl	0x100031010 ; symbol stub for: _free
00000001000096bc	ldur	x8, [x29, #-0x48]
00000001000096c0	nop
00000001000096c4	ldr	x9, #0x36954 ; literal pool symbol address: ___stack_chk_guard
00000001000096c8	ldr	x9, [x9]
00000001000096cc	cmp	x9, x8
00000001000096d0	b.ne	0x1000096f4
00000001000096d4	mov	x0, x19
00000001000096d8	ldp	x29, x30, [sp, #0x150]
00000001000096dc	ldp	x20, x19, [sp, #0x140]
00000001000096e0	ldp	x22, x21, [sp, #0x130]
00000001000096e4	ldp	x24, x23, [sp, #0x120]
00000001000096e8	ldp	x28, x27, [sp, #0x110]
00000001000096ec	add	sp, sp, #0x160
00000001000096f0	ret
00000001000096f4	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
00000001000096f8	stp	x28, x27, [sp, #-0x60]!
00000001000096fc	stp	x26, x25, [sp, #0x10]
0000000100009700	stp	x24, x23, [sp, #0x20]
0000000100009704	stp	x22, x21, [sp, #0x30]
0000000100009708	stp	x20, x19, [sp, #0x40]
000000010000970c	stp	x29, x30, [sp, #0x50]
0000000100009710	add	x29, sp, #0x50
0000000100009714	mov	x22, x2
0000000100009718	mov	x20, x1
000000010000971c	mov	x23, x0
0000000100009720	mov	x0, #0x0
0000000100009724	mov	x1, #0x0
0000000100009728	mov	x2, #0x0
000000010000972c	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100009730	mov	x19, x0
0000000100009734	adr	x2, #1076
0000000100009738	nop
000000010000973c	mov	x0, x20
0000000100009740	mov	x1, x19
0000000100009744	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100009748	cbz	x22, 0x10000978c
000000010000974c	adr	x1, #178213 ; literal pool for: "Default"
0000000100009750	nop
0000000100009754	mov	x0, x22
0000000100009758	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
000000010000975c	mov	x21, x0
0000000100009760	cbz	x21, 0x10000979c
0000000100009764	adr	x1, #178197 ; literal pool for: "Global"
0000000100009768	nop
000000010000976c	mov	x0, x21
0000000100009770	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
0000000100009774	mov	x20, x0
0000000100009778	mov	x0, x21
000000010000977c	mov	x1, x23
0000000100009780	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
0000000100009784	mov	x21, x0
0000000100009788	b	0x1000097a0
000000010000978c	mov	x23, #0x0
0000000100009790	mov	x21, #0x0
0000000100009794	mov	x20, #0x0
0000000100009798	b	0x1000097e8
000000010000979c	mov	x20, #0x0
00000001000097a0	adr	x1, #178144 ; literal pool for: "Override"
00000001000097a4	nop
00000001000097a8	mov	x0, x22
00000001000097ac	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
00000001000097b0	mov	x24, x0
00000001000097b4	cbz	x24, 0x1000097e0
00000001000097b8	adr	x1, #178113 ; literal pool for: "Global"
00000001000097bc	nop
00000001000097c0	mov	x0, x24
00000001000097c4	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
00000001000097c8	mov	x22, x0
00000001000097cc	mov	x0, x24
00000001000097d0	mov	x1, x23
00000001000097d4	bl	0x100031a84 ; symbol stub for: _xpc_dictionary_get_dictionary
00000001000097d8	mov	x23, x0
00000001000097dc	b	0x1000097e8
00000001000097e0	mov	x23, #0x0
00000001000097e4	mov	x22, #0x0
00000001000097e8	mov	x0, #0x0
00000001000097ec	mov	x1, #0x0
00000001000097f0	mov	x2, #0x0
00000001000097f4	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
00000001000097f8	mov	x24, x0
00000001000097fc	mov	x26, #0x0
0000000100009800	adr	x27, #227120
0000000100009804	nop
0000000100009808	b	0x100009818
000000010000980c	mov	x8, #0x0
0000000100009810	cbnz	x22, 0x100009834
0000000100009814	b	0x100009848
0000000100009818	ldr	x25, [x27, x26]
000000010000981c	cbz	x23, 0x10000980c
0000000100009820	mov	x0, x23
0000000100009824	mov	x1, x25
0000000100009828	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000982c	mov	x8, x0
0000000100009830	cbz	x22, 0x100009848
0000000100009834	cbnz	x8, 0x100009848
0000000100009838	mov	x0, x22
000000010000983c	mov	x1, x25
0000000100009840	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100009844	mov	x8, x0
0000000100009848	cbnz	x8, 0x10000988c
000000010000984c	mov	x0, x19
0000000100009850	mov	x1, x25
0000000100009854	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100009858	mov	x8, x0
000000010000985c	cbz	x21, 0x100009874
0000000100009860	cbnz	x8, 0x100009874
0000000100009864	mov	x0, x21
0000000100009868	mov	x1, x25
000000010000986c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100009870	mov	x8, x0
0000000100009874	cbz	x20, 0x10000988c
0000000100009878	cbnz	x8, 0x10000988c
000000010000987c	mov	x0, x20
0000000100009880	mov	x1, x25
0000000100009884	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100009888	mov	x8, x0
000000010000988c	mov	x0, x24
0000000100009890	mov	x1, x25
0000000100009894	mov	x2, x8
0000000100009898	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010000989c	add	x26, x26, #0x8
00000001000098a0	cmp	x26, #0x98
00000001000098a4	b.ne	0x100009818
00000001000098a8	mov	x0, x19
00000001000098ac	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000098b0	mov	x0, x24
00000001000098b4	ldp	x29, x30, [sp, #0x50]
00000001000098b8	ldp	x20, x19, [sp, #0x40]
00000001000098bc	ldp	x22, x21, [sp, #0x30]
00000001000098c0	ldp	x24, x23, [sp, #0x20]
00000001000098c4	ldp	x26, x25, [sp, #0x10]
00000001000098c8	ldp	x28, x27, [sp], #0x60
00000001000098cc	ret
00000001000098d0	stp	x20, x19, [sp, #-0x20]!
00000001000098d4	stp	x29, x30, [sp, #0x10]
00000001000098d8	add	x29, sp, #0x10
00000001000098dc	mov	x19, x0
00000001000098e0	mov	x0, #0x0
00000001000098e4	mov	x1, #0x0
00000001000098e8	mov	x2, #0x0
00000001000098ec	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
00000001000098f0	mov	x20, x0
00000001000098f4	nop
00000001000098f8	ldr	x2, #0x39c98
00000001000098fc	mov	x0, x19
0000000100009900	mov	x1, x20
0000000100009904	bl	0x1000096f8
0000000100009908	mov	x19, x0
000000010000990c	mov	x0, x20
0000000100009910	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100009914	mov	x0, x19
0000000100009918	ldp	x29, x30, [sp, #0x10]
000000010000991c	ldp	x20, x19, [sp], #0x20
0000000100009920	ret
0000000100009924	stp	x22, x21, [sp, #-0x30]!
0000000100009928	stp	x20, x19, [sp, #0x10]
000000010000992c	stp	x29, x30, [sp, #0x20]
0000000100009930	add	x29, sp, #0x20
0000000100009934	mov	x19, x0
0000000100009938	adr	x8, #175630 ; literal pool for: "ServiceType"
000000010000993c	nop
0000000100009940	mov	x0, x1
0000000100009944	mov	x1, x8
0000000100009948	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010000994c	cbz	x0, 0x100009960
0000000100009950	adr	x1, #176603 ; literal pool for: "System"
0000000100009954	nop
0000000100009958	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000995c	cbz	w0, 0x10000996c
0000000100009960	adr	x8, #236608
0000000100009964	nop
0000000100009968	b	0x100009974
000000010000996c	adr	x8, #236588
0000000100009970	nop
0000000100009974	ldr	x20, [x8]
0000000100009978	mov	x0, #0x0
000000010000997c	mov	x1, #0x0
0000000100009980	mov	x2, #0x0
0000000100009984	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100009988	mov	x21, x0
000000010000998c	mov	x0, x19
0000000100009990	mov	x1, x21
0000000100009994	mov	x2, x20
0000000100009998	bl	0x1000096f8
000000010000999c	mov	x19, x0
00000001000099a0	mov	x0, x21
00000001000099a4	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000099a8	mov	x0, x19
00000001000099ac	ldp	x29, x30, [sp, #0x20]
00000001000099b0	ldp	x20, x19, [sp, #0x10]
00000001000099b4	ldp	x22, x21, [sp], #0x30
00000001000099b8	ret
00000001000099bc	sub	sp, sp, #0x50
00000001000099c0	stp	x24, x23, [sp, #0x10]
00000001000099c4	stp	x22, x21, [sp, #0x20]
00000001000099c8	stp	x20, x19, [sp, #0x30]
00000001000099cc	stp	x29, x30, [sp, #0x40]
00000001000099d0	add	x29, sp, #0x40
00000001000099d4	mov	x22, x3
00000001000099d8	mov	x20, x2
00000001000099dc	mov	x21, x1
00000001000099e0	mov	x19, x0
00000001000099e4	mov	x2, x22
00000001000099e8	bl	0x100009ab8
00000001000099ec	mov	x24, x0
00000001000099f0	mov	x0, x19
00000001000099f4	mov	x1, x20
00000001000099f8	mov	x2, x22
00000001000099fc	bl	0x100009ab8
0000000100009a00	mov	x23, x0
0000000100009a04	cmp	w24, #0x1
0000000100009a08	b.lt	0x100009a40
0000000100009a0c	cmp	w23, #0x1
0000000100009a10	b.lt	0x100009a40
0000000100009a14	cmp	w23, w24
0000000100009a18	b.ge	0x100009a4c
0000000100009a1c	stp	x21, x20, [sp]
0000000100009a20	adr	x2, #176402 ; literal pool for: "%s is ignored in favor of %s"
0000000100009a24	nop
0000000100009a28	orr	w1, wzr, #0x6
0000000100009a2c	mov	x0, x22
0000000100009a30	bl	0x10000ce7c
0000000100009a34	mov	x0, x19
0000000100009a38	mov	x1, x21
0000000100009a3c	b	0x100009a9c
0000000100009a40	tbnz	w24, #0x1f, 0x100009a68
0000000100009a44	tbz	w23, #0x1f, 0x100009a7c
0000000100009a48	b	0x100009a94
0000000100009a4c	stp	x20, x21, [sp]
0000000100009a50	adr	x2, #176354 ; literal pool for: "%s is ignored in favor of %s"
0000000100009a54	nop
0000000100009a58	orr	w1, wzr, #0x6
0000000100009a5c	mov	x0, x22
0000000100009a60	bl	0x10000ce7c
0000000100009a64	b	0x100009a94
0000000100009a68	mov	x0, x19
0000000100009a6c	mov	x1, x21
0000000100009a70	mov	x2, #0x0
0000000100009a74	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100009a78	tbnz	w23, #0x1f, 0x100009a94
0000000100009a7c	ldp	x29, x30, [sp, #0x40]
0000000100009a80	ldp	x20, x19, [sp, #0x30]
0000000100009a84	ldp	x22, x21, [sp, #0x20]
0000000100009a88	ldp	x24, x23, [sp, #0x10]
0000000100009a8c	add	sp, sp, #0x50
0000000100009a90	ret
0000000100009a94	mov	x0, x19
0000000100009a98	mov	x1, x20
0000000100009a9c	mov	x2, #0x0
0000000100009aa0	ldp	x29, x30, [sp, #0x40]
0000000100009aa4	ldp	x20, x19, [sp, #0x30]
0000000100009aa8	ldp	x22, x21, [sp, #0x20]
0000000100009aac	ldp	x24, x23, [sp, #0x10]
0000000100009ab0	add	sp, sp, #0x50
0000000100009ab4	b	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100009ab8	sub	sp, sp, #0x40
0000000100009abc	stp	x22, x21, [sp, #0x10]
0000000100009ac0	stp	x20, x19, [sp, #0x20]
0000000100009ac4	stp	x29, x30, [sp, #0x30]
0000000100009ac8	add	x29, sp, #0x30
0000000100009acc	mov	x21, x2
0000000100009ad0	mov	x19, x1
0000000100009ad4	mov	x20, x0
0000000100009ad8	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100009adc	mov	x22, x0
0000000100009ae0	cbz	x22, 0x100009b50
0000000100009ae4	mov	x0, x22
0000000100009ae8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100009aec	nop
0000000100009af0	ldr	x8, #0x365e0 ; literal pool symbol address: __xpc_type_int64
0000000100009af4	cmp	x0, x8
0000000100009af8	b.eq	0x100009b0c
0000000100009afc	str	x19, [sp]
0000000100009b00	adr	x2, #176207 ; literal pool for: "%s is not an int, ignoring"
0000000100009b04	nop
0000000100009b08	b	0x100009b34
0000000100009b0c	mov	x0, x22
0000000100009b10	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100009b14	orr	w8, wzr, #0x7fffffff
0000000100009b18	add	x8, x0, x8
0000000100009b1c	orr	w9, wzr, #0xfffffffe
0000000100009b20	cmp	x8, x9
0000000100009b24	b.lo	0x100009b54
0000000100009b28	str	x19, [sp]
0000000100009b2c	adr	x2, #176190 ; literal pool for: "%s is out of range, ignoring"
0000000100009b30	nop
0000000100009b34	orr	w1, wzr, #0x3
0000000100009b38	mov	x0, x21
0000000100009b3c	bl	0x10000ce7c
0000000100009b40	mov	x0, x20
0000000100009b44	mov	x1, x19
0000000100009b48	mov	x2, #0x0
0000000100009b4c	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100009b50	mov	w0, #-0x1
0000000100009b54	ldp	x29, x30, [sp, #0x30]
0000000100009b58	ldp	x20, x19, [sp, #0x20]
0000000100009b5c	ldp	x22, x21, [sp, #0x10]
0000000100009b60	add	sp, sp, #0x40
0000000100009b64	ret
0000000100009b68	stp	x24, x23, [sp, #-0x40]!
0000000100009b6c	stp	x22, x21, [sp, #0x10]
0000000100009b70	stp	x20, x19, [sp, #0x20]
0000000100009b74	stp	x29, x30, [sp, #0x30]
0000000100009b78	add	x29, sp, #0x30
0000000100009b7c	mov	x20, x2
0000000100009b80	mov	x19, x1
0000000100009b84	mov	x21, x0
0000000100009b88	mov	x23, #0x0
0000000100009b8c	adr	x24, #226212
0000000100009b90	nop
0000000100009b94	ldr	x22, [x24, x23, lsl #3]
0000000100009b98	mov	x0, x21
0000000100009b9c	mov	x1, x22
0000000100009ba0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
0000000100009ba4	cbz	w0, 0x100009bc8
0000000100009ba8	add	x23, x23, #0x1
0000000100009bac	cmp	x23, #0x12
0000000100009bb0	b.ls	0x100009b94
0000000100009bb4	ldp	x29, x30, [sp, #0x30]
0000000100009bb8	ldp	x20, x19, [sp, #0x20]
0000000100009bbc	ldp	x22, x21, [sp, #0x10]
0000000100009bc0	ldp	x24, x23, [sp], #0x40
0000000100009bc4	ret
0000000100009bc8	mov	x0, x20
0000000100009bcc	mov	x1, x22
0000000100009bd0	mov	x2, x19
0000000100009bd4	ldp	x29, x30, [sp, #0x30]
0000000100009bd8	ldp	x20, x19, [sp, #0x20]
0000000100009bdc	ldp	x22, x21, [sp, #0x10]
0000000100009be0	ldp	x24, x23, [sp], #0x40
0000000100009be4	b	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100009be8	stp	x26, x25, [sp, #-0x50]!
0000000100009bec	stp	x24, x23, [sp, #0x10]
0000000100009bf0	stp	x22, x21, [sp, #0x20]
0000000100009bf4	stp	x20, x19, [sp, #0x30]
0000000100009bf8	stp	x29, x30, [sp, #0x40]
0000000100009bfc	add	x29, sp, #0x40
0000000100009c00	mov	x20, x1
0000000100009c04	mov	x19, x0
0000000100009c08	cbz	x19, 0x100009d38
0000000100009c0c	cmp	x20, #0x7
0000000100009c10	b.ne	0x100009c54
0000000100009c14	adr	x8, #234220
0000000100009c18	nop
0000000100009c1c	cmp	x19, x8
0000000100009c20	b.eq	0x100009d34
0000000100009c24	adr	x20, #234204
0000000100009c28	nop
0000000100009c2c	orr	w2, wzr, #0x20
0000000100009c30	mov	x0, x19
0000000100009c34	mov	x1, x20
0000000100009c38	bl	0x10003131c ; symbol stub for: _memcmp
0000000100009c3c	cbz	w0, 0x100009d34
0000000100009c40	mov	x0, x19
0000000100009c44	bl	0x100009d50
0000000100009c48	tbnz	w0, #0x7, 0x100009d24
0000000100009c4c	mov	w0, #0x0
0000000100009c50	b	0x100009d38
0000000100009c54	mov	x23, #0x0
0000000100009c58	adrp	x21, 58 ; 0x100043000
0000000100009c5c	ldr	x24, [x21, #0x668]
0000000100009c60	orr	w25, wzr, #0x30
0000000100009c64	adr	x22, #235844
0000000100009c68	nop
0000000100009c6c	add	w8, w24, w23
0000000100009c70	and	x26, x8, #0x3
0000000100009c74	madd	x8, x26, x25, x22
0000000100009c78	ldrb	w8, [x8, #0x28]
0000000100009c7c	cbz	w8, 0x100009ca0
0000000100009c80	madd	x8, x26, x25, x22
0000000100009c84	add	x1, x8, #0x8
0000000100009c88	cmp	x1, x19
0000000100009c8c	b.eq	0x100009cfc
0000000100009c90	orr	w2, wzr, #0x20
0000000100009c94	mov	x0, x19
0000000100009c98	bl	0x10003131c ; symbol stub for: _memcmp
0000000100009c9c	cbz	w0, 0x100009cfc
0000000100009ca0	add	x23, x23, #0x1
0000000100009ca4	cmp	x23, #0x4
0000000100009ca8	b.lo	0x100009c6c
0000000100009cac	mov	x0, x19
0000000100009cb0	bl	0x100009d50
0000000100009cb4	ldr	w8, [x21, #0x668]
0000000100009cb8	add	w8, w8, #0x3
0000000100009cbc	and	x8, x8, #0x3
0000000100009cc0	str	x8, [x21, #0x668]
0000000100009cc4	orr	w9, wzr, #0x30
0000000100009cc8	madd	x8, x8, x9, x22
0000000100009ccc	ldr	q0, [x19, #0x10]
0000000100009cd0	stur	q0, [x8, #0x18]
0000000100009cd4	ldr	q0, [x19]
0000000100009cd8	stur	q0, [x8, #0x8]
0000000100009cdc	str	x0, [x8]
0000000100009ce0	orr	w9, wzr, #0x1
0000000100009ce4	strb	w9, [x8, #0x28]
0000000100009ce8	and	x8, x20, #0xffffffff
0000000100009cec	lsl	w8, w9, w8
0000000100009cf0	sxtw	x8, w8
0000000100009cf4	tst	x0, x8
0000000100009cf8	b	0x100009d1c
0000000100009cfc	orr	w8, wzr, #0x30
0000000100009d00	mul	x8, x26, x8
0000000100009d04	ldr	x8, [x22, x8]
0000000100009d08	and	x9, x20, #0xffffffff
0000000100009d0c	orr	w10, wzr, #0x1
0000000100009d10	lsl	w9, w10, w9
0000000100009d14	sxtw	x9, w9
0000000100009d18	tst	x8, x9
0000000100009d1c	cset	w0, ne
0000000100009d20	b	0x100009d38
0000000100009d24	ldr	q0, [x19, #0x10]
0000000100009d28	str	q0, [x20, #0x10]
0000000100009d2c	ldr	q0, [x19]
0000000100009d30	str	q0, [x20]
0000000100009d34	orr	w0, wzr, #0x1
0000000100009d38	ldp	x29, x30, [sp, #0x40]
0000000100009d3c	ldp	x20, x19, [sp, #0x30]
0000000100009d40	ldp	x22, x21, [sp, #0x20]
0000000100009d44	ldp	x24, x23, [sp, #0x10]
0000000100009d48	ldp	x26, x25, [sp], #0x50
0000000100009d4c	ret
0000000100009d50	stp	x24, x23, [sp, #-0x40]!
0000000100009d54	stp	x22, x21, [sp, #0x10]
0000000100009d58	stp	x20, x19, [sp, #0x20]
0000000100009d5c	stp	x29, x30, [sp, #0x30]
0000000100009d60	add	x29, sp, #0x30
0000000100009d64	mov	x8, x0
0000000100009d68	ldr	w0, [x8, #0x14]
0000000100009d6c	mov	x1, x8
0000000100009d70	bl	0x1000292ec
0000000100009d74	mov	x20, x0
0000000100009d78	cbz	x20, 0x100009dcc
0000000100009d7c	mov	x21, #0x0
0000000100009d80	mov	x19, #0x0
0000000100009d84	orr	w22, wzr, #0x1
0000000100009d88	adr	x23, #225856
0000000100009d8c	nop
0000000100009d90	ldr	x1, [x23, x21, lsl #3]
0000000100009d94	mov	x0, x20
0000000100009d98	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100009d9c	and	x8, x21, #0xffffffff
0000000100009da0	lsl	w8, w22, w8
0000000100009da4	sxtw	x8, w8
0000000100009da8	orr	x8, x19, x8
0000000100009dac	cmp	w0, #0x0
0000000100009db0	csel	x19, x19, x8, eq
0000000100009db4	add	x21, x21, #0x1
0000000100009db8	cmp	x21, #0x16
0000000100009dbc	b.ne	0x100009d90
0000000100009dc0	mov	x0, x20
0000000100009dc4	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100009dc8	b	0x100009dd0
0000000100009dcc	mov	x19, #0x0
0000000100009dd0	mov	x0, x19
0000000100009dd4	ldp	x29, x30, [sp, #0x30]
0000000100009dd8	ldp	x20, x19, [sp, #0x20]
0000000100009ddc	ldp	x22, x21, [sp, #0x10]
0000000100009de0	ldp	x24, x23, [sp], #0x40
0000000100009de4	ret
0000000100009de8	stp	x20, x19, [sp, #-0x20]!
0000000100009dec	stp	x29, x30, [sp, #0x10]
0000000100009df0	add	x29, sp, #0x10
0000000100009df4	mov	x19, x0
0000000100009df8	ldr	x0, [x19, #0x68]
0000000100009dfc	bl	0x100031010 ; symbol stub for: _free
0000000100009e00	ldr	x0, [x19, #0x70]
0000000100009e04	cbz	x0, 0x100009e0c
0000000100009e08	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100009e0c	ldr	x0, [x19, #0x128]
0000000100009e10	cbz	x0, 0x100009e18
0000000100009e14	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100009e18	ldr	x0, [x19, #0x78]
0000000100009e1c	cbz	x0, 0x100009e24
0000000100009e20	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100009e24	ldr	x0, [x19, #0x80]
0000000100009e28	cbz	x0, 0x100009e30
0000000100009e2c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100009e30	ldr	x0, [x19, #0x120]
0000000100009e34	cbz	x0, 0x100009e44
0000000100009e38	ldp	x29, x30, [sp, #0x10]
0000000100009e3c	ldp	x20, x19, [sp], #0x20
0000000100009e40	b	0x100031b68 ; symbol stub for: _xpc_release
0000000100009e44	ldp	x29, x30, [sp, #0x10]
0000000100009e48	ldp	x20, x19, [sp], #0x20
0000000100009e4c	ret
0000000100009e50	nop
0000000100009e54	ldr	x0, #0x3981c
0000000100009e58	ret
0000000100009e5c	nop
0000000100009e60	ldr	x0, #0x39818
0000000100009e64	ret
0000000100009e68	nop
0000000100009e6c	ldr	x0, #0x39814
0000000100009e70	ret
0000000100009e74	nop
0000000100009e78	ldr	x0, #0x39810
0000000100009e7c	ret
0000000100009e80	adr	x8, #239097
0000000100009e84	nop
0000000100009e88	ldrb	w8, [x8]
0000000100009e8c	cmp	w8, #0x0
0000000100009e90	cset	w0, eq
0000000100009e94	ret
0000000100009e98	sub	sp, sp, #0x50
0000000100009e9c	stp	x20, x19, [sp, #0x30]
0000000100009ea0	stp	x29, x30, [sp, #0x40]
0000000100009ea4	add	x29, sp, #0x40
0000000100009ea8	adr	x0, #177317 ; literal pool for: "com.apple.xpc.launchd.ioq"
0000000100009eac	nop
0000000100009eb0	mov	x1, #0x0
0000000100009eb4	bl	0x100030e48 ; symbol stub for: _dispatch_queue_create
0000000100009eb8	adrp	x8, 58 ; 0x100043000
0000000100009ebc	str	x0, [x8, #0x690]
0000000100009ec0	orr	w0, wzr, #0x10
0000000100009ec4	bl	0x100030e84 ; symbol stub for: _dispatch_semaphore_create
0000000100009ec8	adrp	x8, 58 ; 0x100043000
0000000100009ecc	str	x0, [x8, #0x698]
0000000100009ed0	adr	x0, #177303 ; literal pool for: "com.apple.xpc.launchd.throttle-queue"
0000000100009ed4	nop
0000000100009ed8	mov	x1, #0x0
0000000100009edc	bl	0x100030e48 ; symbol stub for: _dispatch_queue_create
0000000100009ee0	adrp	x8, 58 ; 0x100043000
0000000100009ee4	str	x0, [x8, #0x6a0]
0000000100009ee8	mov	w1, #0x5
0000000100009eec	mov	w2, #0x0
0000000100009ef0	mov	x0, #0x0
0000000100009ef4	bl	0x100030e3c ; symbol stub for: _dispatch_queue_attr_make_with_qos_class
0000000100009ef8	mov	x1, x0
0000000100009efc	adr	x0, #177296 ; literal pool for: "com.apple.xpc.launchd.bgioq"
0000000100009f00	nop
0000000100009f04	bl	0x100030e48 ; symbol stub for: _dispatch_queue_create
0000000100009f08	mov	x8, x0
0000000100009f0c	adrp	x9, 58 ; 0x100043000
0000000100009f10	str	x8, [x9, #0x6a8]
0000000100009f14	nop
0000000100009f18	ldr	x0, #0x36150 ; literal pool symbol address: __dispatch_source_type_timer
0000000100009f1c	mov	x1, #0x0
0000000100009f20	mov	x2, #0x0
0000000100009f24	mov	x3, x8
0000000100009f28	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100009f2c	adrp	x19, 58 ; 0x100043000
0000000100009f30	str	x0, [x19, #0x6b0]
0000000100009f34	nop
0000000100009f38	nop
0000000100009f3c	ldrsw	x8, 0x100043510
0000000100009f40	mov	w9, #0xca00
0000000100009f44	movk	w9, #0x3b9a, lsl #16
0000000100009f48	mul	x2, x8, x9
0000000100009f4c	mov	x1, #0x0
0000000100009f50	mov	x3, #0x0
0000000100009f54	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100009f58	ldr	x0, [x19, #0x6b0]
0000000100009f5c	adr	x1, #752
0000000100009f60	nop
0000000100009f64	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100009f68	ldr	x0, [x19, #0x6b0]
0000000100009f6c	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100009f70	stur	xzr, [x29, #-0x18]
0000000100009f74	adr	x0, #177224 ; literal pool for: "/System/Library/Caches/com.apple.xpcd/xpcd_cache.dylib"
0000000100009f78	nop
0000000100009f7c	orr	w1, wzr, #0x2
0000000100009f80	bl	0x100030f5c ; symbol stub for: _dlopen
0000000100009f84	cbz	x0, 0x100009ff8
0000000100009f88	adr	x1, #177184 ; literal pool for: "__xpcd_cache"
0000000100009f8c	nop
0000000100009f90	bl	0x100030f68 ; symbol stub for: _dlsym
0000000100009f94	mov	x19, x0
0000000100009f98	cbz	x19, 0x100009ff8
0000000100009f9c	blr	x19
0000000100009fa0	cmp	w0, #0x1
0000000100009fa4	b.ne	0x10000a23c
0000000100009fa8	add	x1, sp, #0x8
0000000100009fac	mov	x0, x19
0000000100009fb0	bl	0x100030f50 ; symbol stub for: _dladdr
0000000100009fb4	cbz	w0, 0x100009ff8
0000000100009fb8	ldr	x0, [sp, #0x10]
0000000100009fbc	adr	x1, #177145 ; literal pool for: "__TEXT"
0000000100009fc0	nop
0000000100009fc4	adr	x2, #177124 ; literal pool for: "__xpcd_cache"
0000000100009fc8	nop
0000000100009fcc	sub	x3, x29, #0x18
0000000100009fd0	bl	0x100031100 ; symbol stub for: _getsectiondata
0000000100009fd4	cbz	x0, 0x100009fe4
0000000100009fd8	ldur	x1, [x29, #-0x18]
0000000100009fdc	bl	0x1000319b8 ; symbol stub for: _xpc_create_from_plist
0000000100009fe0	b	0x100009ff0
0000000100009fe4	mov	x1, #0x0
0000000100009fe8	mov	x2, #0x0
0000000100009fec	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100009ff0	adrp	x8, 58 ; 0x100043000
0000000100009ff4	str	x0, [x8, #0x6b8]
0000000100009ff8	adrp	x19, 58 ; 0x100043000
0000000100009ffc	ldr	x0, [x19, #0x6b8]
000000010000a000	cbz	x0, 0x10000a018
000000010000a004	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a008	nop
000000010000a00c	ldr	x8, #0x360b4 ; literal pool symbol address: __xpc_type_dictionary
000000010000a010	cmp	x0, x8
000000010000a014	b.eq	0x10000a040
000000010000a018	adr	x8, #238689
000000010000a01c	nop
000000010000a020	ldrb	w8, [x8]
000000010000a024	cbz	w8, 0x10000a20c
000000010000a028	mov	x0, #0x0
000000010000a02c	mov	x1, #0x0
000000010000a030	mov	x2, #0x0
000000010000a034	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010000a038	str	x0, [x19, #0x6b8]
000000010000a03c	b	0x10000a044
000000010000a040	ldr	x0, [x19, #0x6b8]
000000010000a044	adr	x1, #177088 ; literal pool for: "LaunchDaemons"
000000010000a048	nop
000000010000a04c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a050	adrp	x20, 57 ; 0x100043000
000000010000a054	str	x0, [x20, #0x670]
000000010000a058	cbz	x0, 0x10000a070
000000010000a05c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a060	nop
000000010000a064	ldr	x8, #0x3605c ; literal pool symbol address: __xpc_type_dictionary
000000010000a068	cmp	x0, x8
000000010000a06c	b.eq	0x10000a094
000000010000a070	adr	x8, #238601
000000010000a074	nop
000000010000a078	ldrb	w8, [x8]
000000010000a07c	cbz	w8, 0x10000a218
000000010000a080	mov	x0, #0x0
000000010000a084	mov	x1, #0x0
000000010000a088	mov	x2, #0x0
000000010000a08c	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010000a090	b	0x10000a09c
000000010000a094	ldr	x0, [x20, #0x670]
000000010000a098	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000a09c	str	x0, [x20, #0x670]
000000010000a0a0	ldr	x0, [x19, #0x6b8]
000000010000a0a4	adr	x1, #177026 ; literal pool for: "SystemLibraryTreeState"
000000010000a0a8	nop
000000010000a0ac	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a0b0	adrp	x20, 57 ; 0x100043000
000000010000a0b4	str	x0, [x20, #0x6c0]
000000010000a0b8	cbz	x0, 0x10000a0d0
000000010000a0bc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a0c0	nop
000000010000a0c4	ldr	x8, #0x35ffc ; literal pool symbol address: __xpc_type_dictionary
000000010000a0c8	cmp	x0, x8
000000010000a0cc	b.eq	0x10000a0f4
000000010000a0d0	adr	x8, #238505
000000010000a0d4	nop
000000010000a0d8	ldrb	w8, [x8]
000000010000a0dc	cbz	w8, 0x10000a224
000000010000a0e0	mov	x0, #0x0
000000010000a0e4	mov	x1, #0x0
000000010000a0e8	mov	x2, #0x0
000000010000a0ec	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010000a0f0	b	0x10000a0fc
000000010000a0f4	ldr	x0, [x20, #0x6c0]
000000010000a0f8	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000a0fc	str	x0, [x20, #0x6c0]
000000010000a100	adr	x1, #176986 ; literal pool for: "_imagePathToInfo"
000000010000a104	nop
000000010000a108	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a10c	adrp	x20, 57 ; 0x100043000
000000010000a110	str	x0, [x20, #0x678]
000000010000a114	cbz	x0, 0x10000a12c
000000010000a118	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a11c	nop
000000010000a120	ldr	x8, #0x35fa0 ; literal pool symbol address: __xpc_type_dictionary
000000010000a124	cmp	x0, x8
000000010000a128	b.eq	0x10000a150
000000010000a12c	adr	x8, #238413
000000010000a130	nop
000000010000a134	ldrb	w8, [x8]
000000010000a138	cbz	w8, 0x10000a230
000000010000a13c	mov	x0, #0x0
000000010000a140	mov	x1, #0x0
000000010000a144	mov	x2, #0x0
000000010000a148	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010000a14c	b	0x10000a158
000000010000a150	ldr	x0, [x20, #0x678]
000000010000a154	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000a158	str	x0, [x20, #0x678]
000000010000a15c	ldr	x0, [x19, #0x6b8]
000000010000a160	adr	x1, #176930 ; literal pool for: "AppRemovalServices"
000000010000a164	nop
000000010000a168	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a16c	adrp	x20, 57 ; 0x100043000
000000010000a170	str	x0, [x20, #0x6c8]
000000010000a174	cbz	x0, 0x10000a18c
000000010000a178	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a17c	nop
000000010000a180	ldr	x8, #0x35f40 ; literal pool symbol address: __xpc_type_dictionary
000000010000a184	cmp	x0, x8
000000010000a188	b.eq	0x10000a1a0
000000010000a18c	mov	x0, #0x0
000000010000a190	mov	x1, #0x0
000000010000a194	mov	x2, #0x0
000000010000a198	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010000a19c	str	x0, [x20, #0x6c8]
000000010000a1a0	ldr	x0, [x19, #0x6b8]
000000010000a1a4	adr	x1, #176881 ; literal pool for: "AppExtensions"
000000010000a1a8	nop
000000010000a1ac	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a1b0	adrp	x19, 57 ; 0x100043000
000000010000a1b4	str	x0, [x19, #0x688]
000000010000a1b8	cbz	x0, 0x10000a1d0
000000010000a1bc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a1c0	nop
000000010000a1c4	ldr	x8, #0x35efc ; literal pool symbol address: __xpc_type_dictionary
000000010000a1c8	cmp	x0, x8
000000010000a1cc	b.eq	0x10000a1e4
000000010000a1d0	mov	x0, #0x0
000000010000a1d4	mov	x1, #0x0
000000010000a1d8	mov	x2, #0x0
000000010000a1dc	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010000a1e0	str	x0, [x19, #0x688]
000000010000a1e4	mov	x0, #0x0
000000010000a1e8	mov	x1, #0x0
000000010000a1ec	mov	x2, #0x0
000000010000a1f0	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010000a1f4	adrp	x8, 57 ; 0x100043000
000000010000a1f8	str	x0, [x8, #0x680]
000000010000a1fc	ldp	x29, x30, [sp, #0x40]
000000010000a200	ldp	x20, x19, [sp, #0x30]
000000010000a204	add	sp, sp, #0x50
000000010000a208	ret
000000010000a20c	adr	x0, #176615 ; literal pool for: "No service cache"
000000010000a210	nop
000000010000a214	bl	0x100028f84
000000010000a218	adr	x0, #176634 ; literal pool for: "No daemons in cache"
000000010000a21c	nop
000000010000a220	bl	0x100028f84
000000010000a224	adr	x0, #176665 ; literal pool for: "No tree state entry in cache"
000000010000a228	nop
000000010000a22c	bl	0x100028f84
000000010000a230	adr	x0, #176699 ; literal pool for: "No frameworks in cache"
000000010000a234	nop
000000010000a238	bl	0x100028f84
000000010000a23c	mov	x0, #0x0
000000010000a240	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000a244	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000a248	brk	#0x1
000000010000a24c	b	0x1000317d8 ; symbol stub for: _sync
000000010000a250	stp	x22, x21, [sp, #-0x30]!
000000010000a254	stp	x20, x19, [sp, #0x10]
000000010000a258	stp	x29, x30, [sp, #0x20]
000000010000a25c	add	x29, sp, #0x20
000000010000a260	adrp	x20, 57 ; 0x100043000
000000010000a264	ldr	x0, [x20, #0x690]
000000010000a268	adr	x19, #68
000000010000a26c	nop
000000010000a270	mov	x1, #0x0
000000010000a274	mov	x2, x19
000000010000a278	bl	0x100030f2c ; symbol stub for: _dispatch_sync_f
000000010000a27c	adrp	x21, 57 ; 0x100043000
000000010000a280	ldr	x0, [x21, #0x6a8]
000000010000a284	mov	x1, #0x0
000000010000a288	mov	x2, x19
000000010000a28c	bl	0x100030f2c ; symbol stub for: _dispatch_sync_f
000000010000a290	ldr	x0, [x20, #0x690]
000000010000a294	bl	0x100030f20 ; symbol stub for: _dispatch_suspend
000000010000a298	ldr	x0, [x21, #0x6a8]
000000010000a29c	ldp	x29, x30, [sp, #0x20]
000000010000a2a0	ldp	x20, x19, [sp, #0x10]
000000010000a2a4	ldp	x22, x21, [sp], #0x30
000000010000a2a8	b	0x100030f20 ; symbol stub for: _dispatch_suspend
000000010000a2ac	ret
000000010000a2b0	nop
000000010000a2b4	ldr	x0, #0x393dc
000000010000a2b8	ret
000000010000a2bc	nop
000000010000a2c0	ldr	x0, #0x393e8
000000010000a2c4	ret
000000010000a2c8	stp	x24, x23, [sp, #-0x40]!
000000010000a2cc	stp	x22, x21, [sp, #0x10]
000000010000a2d0	stp	x20, x19, [sp, #0x20]
000000010000a2d4	stp	x29, x30, [sp, #0x30]
000000010000a2d8	add	x29, sp, #0x30
000000010000a2dc	mov	x21, x3
000000010000a2e0	mov	x19, x2
000000010000a2e4	mov	x23, x1
000000010000a2e8	mov	x22, x0
000000010000a2ec	mov	x0, #0x0
000000010000a2f0	bl	0x10000ebb4
000000010000a2f4	mov	x20, x0
000000010000a2f8	str	w22, [x20, #0x60]
000000010000a2fc	cbz	x23, 0x10000a30c
000000010000a300	mov	x0, x23
000000010000a304	bl	0x10000d520
000000010000a308	str	x0, [x20, #0x68]
000000010000a30c	cmp	w22, #0x4
000000010000a310	b.ne	0x10000a318
000000010000a314	str	w21, [x20, #0x11c]
000000010000a318	cbz	x19, 0x10000a328
000000010000a31c	mov	x0, x19
000000010000a320	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000a324	str	x0, [x20, #0x120]
000000010000a328	mov	x0, x20
000000010000a32c	ldp	x29, x30, [sp, #0x30]
000000010000a330	ldp	x20, x19, [sp, #0x20]
000000010000a334	ldp	x22, x21, [sp, #0x10]
000000010000a338	ldp	x24, x23, [sp], #0x40
000000010000a33c	ret
000000010000a340	stp	x20, x19, [sp, #-0x20]!
000000010000a344	stp	x29, x30, [sp, #0x10]
000000010000a348	add	x29, sp, #0x10
000000010000a34c	mov	x19, x0
000000010000a350	mov	x0, #0x0
000000010000a354	bl	0x10000ebb4
000000010000a358	mov	x20, x0
000000010000a35c	mov	w1, #0x0
000000010000a360	mov	x0, x19
000000010000a364	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
000000010000a368	str	w0, [x20, #0x60]
000000010000a36c	cmp	w0, #0x2
000000010000a370	orr	w8, wzr, #0x2
000000010000a374	cinc	w1, w8, eq
000000010000a378	mov	x0, x19
000000010000a37c	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
000000010000a380	bl	0x10000d520
000000010000a384	str	x0, [x20, #0x68]
000000010000a388	mov	x0, x19
000000010000a38c	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000a390	str	x0, [x20, #0x78]
000000010000a394	add	x0, x20, #0x88
000000010000a398	adr	x1, #232328
000000010000a39c	nop
000000010000a3a0	mov	w2, #0x90
000000010000a3a4	bl	0x100031328 ; symbol stub for: _memcpy
000000010000a3a8	ldrb	w8, [x20, #0x140]
000000010000a3ac	orr	w8, w8, #0x1
000000010000a3b0	strb	w8, [x20, #0x140]
000000010000a3b4	mov	x0, x20
000000010000a3b8	ldp	x29, x30, [sp, #0x10]
000000010000a3bc	ldp	x20, x19, [sp], #0x20
000000010000a3c0	ret
000000010000a3c4	str	w1, [x0, #0x60]
000000010000a3c8	ret
000000010000a3cc	stp	x26, x25, [sp, #-0x50]!
000000010000a3d0	stp	x24, x23, [sp, #0x10]
000000010000a3d4	stp	x22, x21, [sp, #0x20]
000000010000a3d8	stp	x20, x19, [sp, #0x30]
000000010000a3dc	stp	x29, x30, [sp, #0x40]
000000010000a3e0	add	x29, sp, #0x40
000000010000a3e4	sub	sp, sp, #0x410
000000010000a3e8	mov	x20, x3
000000010000a3ec	mov	x21, x2
000000010000a3f0	mov	x22, x1
000000010000a3f4	mov	x19, x0
000000010000a3f8	nop
000000010000a3fc	ldr	x8, #0x35c1c ; literal pool symbol address: ___stack_chk_guard
000000010000a400	ldr	x8, [x8]
000000010000a404	stur	x8, [x29, #-0x48]
000000010000a408	mov	x0, x22
000000010000a40c	bl	0x100030e78 ; symbol stub for: _dispatch_retain
000000010000a410	stp	x22, x20, [x19, #0x128]
000000010000a414	str	x21, [x19, #0x138]
000000010000a418	mov	w1, #0x0
000000010000a41c	mov	x0, x19
000000010000a420	bl	0x10000e3f4
000000010000a424	ldrb	w8, [x19, #0x140]
000000010000a428	tbnz	w8, #0x0, 0x10000a47c
000000010000a42c	ldr	x0, [x19, #0x68]
000000010000a430	bl	0x10000aa30
000000010000a434	adr	x8, #237637
000000010000a438	nop
000000010000a43c	ldrb	w8, [x8]
000000010000a440	cmp	w8, #0x0
000000010000a444	ccmp	w0, #0x0, #0x0, eq
000000010000a448	b.ne	0x10000a730
000000010000a44c	mov	x21, #0x0
000000010000a450	adr	x20, #224296
000000010000a454	nop
000000010000a458	ldr	x1, [x20, x21, lsl #3]
000000010000a45c	ldr	x0, [x19, #0x68]
000000010000a460	bl	0x10000d7a4
000000010000a464	cbnz	w0, 0x10000a4c0
000000010000a468	add	x8, x21, #0x1
000000010000a46c	orr	w21, wzr, #0x1
000000010000a470	cmp	x8, #0x1
000000010000a474	b.ls	0x10000a458
000000010000a478	b	0x10000a730
000000010000a47c	ldr	x0, [x19, #0x128]
000000010000a480	ldur	x8, [x29, #-0x48]
000000010000a484	nop
000000010000a488	ldr	x9, #0x35b90 ; literal pool symbol address: ___stack_chk_guard
000000010000a48c	ldr	x9, [x9]
000000010000a490	cmp	x9, x8
000000010000a494	b.ne	0x10000a874
000000010000a498	adr	x2, #1056
000000010000a49c	nop
000000010000a4a0	mov	x1, x19
000000010000a4a4	add	sp, sp, #0x410
000000010000a4a8	ldp	x29, x30, [sp, #0x40]
000000010000a4ac	ldp	x20, x19, [sp, #0x30]
000000010000a4b0	ldp	x22, x21, [sp, #0x20]
000000010000a4b4	ldp	x24, x23, [sp, #0x10]
000000010000a4b8	ldp	x26, x25, [sp], #0x50
000000010000a4bc	b	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000a4c0	ldr	w8, [x19, #0x60]
000000010000a4c4	cmp	w8, #0x2
000000010000a4c8	b.eq	0x10000a514
000000010000a4cc	cmp	w8, #0x1
000000010000a4d0	b.ne	0x10000a56c
000000010000a4d4	ldr	x0, [x19, #0x68]
000000010000a4d8	adr	x1, #176075 ; literal pool for: ".appex"
000000010000a4dc	nop
000000010000a4e0	bl	0x10000d7e4
000000010000a4e4	cbz	w0, 0x10000a58c
000000010000a4e8	add	x21, sp, #0x8
000000010000a4ec	ldr	x8, [x19, #0x68]
000000010000a4f0	adr	x4, #176058 ; literal pool for: "%s"
000000010000a4f4	nop
000000010000a4f8	str	x8, [sp]
000000010000a4fc	add	x0, sp, #0x8
000000010000a500	orr	w1, wzr, #0x400
000000010000a504	orr	w3, wzr, #0x400
000000010000a508	mov	w2, #0x0
000000010000a50c	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010000a510	b	0x10000a590
000000010000a514	ldr	x8, [x19, #0x68]
000000010000a518	str	x8, [sp]
000000010000a51c	adr	x4, #176014 ; literal pool for: "%s"
000000010000a520	nop
000000010000a524	add	x20, sp, #0x8
000000010000a528	add	x0, sp, #0x8
000000010000a52c	orr	w1, wzr, #0x400
000000010000a530	orr	w3, wzr, #0x400
000000010000a534	mov	w2, #0x0
000000010000a538	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010000a53c	mov	w1, #0x2f
000000010000a540	add	x0, sp, #0x8
000000010000a544	bl	0x100031784 ; symbol stub for: _strrchr
000000010000a548	cbz	x0, 0x10000a550
000000010000a54c	strb	wzr, [x0]
000000010000a550	adr	x1, #175955 ; literal pool for: ".appex"
000000010000a554	nop
000000010000a558	add	x0, sp, #0x8
000000010000a55c	bl	0x10000d7e4
000000010000a560	cmp	w0, #0x0
000000010000a564	csel	x21, x20, xzr, ne
000000010000a568	b	0x10000a590
000000010000a56c	mov	x21, #0x0
000000010000a570	cbnz	w8, 0x10000a598
000000010000a574	nop
000000010000a578	ldr	x0, #0x390f8
000000010000a57c	ldr	x1, [x19, #0x68]
000000010000a580	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a584	cbnz	x0, 0x10000a638
000000010000a588	b	0x10000a720
000000010000a58c	mov	x21, #0x0
000000010000a590	ldr	w8, [x19, #0x60]
000000010000a594	cbz	w8, 0x10000a574
000000010000a598	cbz	x21, 0x10000a618
000000010000a59c	adrp	x22, 57 ; 0x100043000
000000010000a5a0	ldr	x0, [x22, #0x680]
000000010000a5a4	mov	x1, x21
000000010000a5a8	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a5ac	cbnz	x0, 0x10000a638
000000010000a5b0	nop
000000010000a5b4	ldr	x0, #0x390d4
000000010000a5b8	mov	x1, x21
000000010000a5bc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a5c0	mov	x20, x0
000000010000a5c4	cbz	x20, 0x10000a720
000000010000a5c8	mov	x0, x20
000000010000a5cc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a5d0	nop
000000010000a5d4	ldr	x8, #0x35aec ; literal pool symbol address: __xpc_type_dictionary
000000010000a5d8	cmp	x0, x8
000000010000a5dc	b.ne	0x10000a720
000000010000a5e0	mov	x0, x20
000000010000a5e4	bl	0x10000aaf4
000000010000a5e8	mov	x20, x0
000000010000a5ec	cbz	x20, 0x10000a720
000000010000a5f0	ldr	x1, [x19, #0x120]
000000010000a5f4	cbz	x1, 0x10000a600
000000010000a5f8	mov	x0, x20
000000010000a5fc	bl	0x10000ab7c
000000010000a600	ldr	x0, [x22, #0x680]
000000010000a604	mov	x1, x21
000000010000a608	mov	x2, x20
000000010000a60c	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010000a610	cbnz	x20, 0x10000a644
000000010000a614	b	0x10000a720
000000010000a618	sub	w8, w8, #0x1
000000010000a61c	cmp	w8, #0x1
000000010000a620	b.hi	0x10000a720
000000010000a624	adrp	x24, 57 ; 0x100043000
000000010000a628	ldr	x0, [x24, #0x680]
000000010000a62c	ldr	x1, [x19, #0x68]
000000010000a630	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a634	cbz	x0, 0x10000a6a0
000000010000a638	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000a63c	mov	x20, x0
000000010000a640	cbz	x20, 0x10000a720
000000010000a644	ldr	w8, [x19, #0x60]
000000010000a648	sub	w9, w8, #0x1
000000010000a64c	cmp	w9, #0x2
000000010000a650	b.hs	0x10000a65c
000000010000a654	add	x8, x19, #0x78
000000010000a658	b	0x10000a664
000000010000a65c	cbnz	w8, 0x10000a668
000000010000a660	add	x8, x19, #0x80
000000010000a664	str	x20, [x8]
000000010000a668	ldrb	w8, [x19, #0x140]
000000010000a66c	orr	w8, w8, #0x1
000000010000a670	strb	w8, [x19, #0x140]
000000010000a674	mov	w8, #0x8f
000000010000a678	str	w8, [x19, #0x11c]
000000010000a67c	add	x0, x19, #0x88
000000010000a680	adr	x1, #231584
000000010000a684	nop
000000010000a688	mov	w2, #0x90
000000010000a68c	bl	0x100031328 ; symbol stub for: _memcpy
000000010000a690	ldr	x0, [x19, #0x128]
000000010000a694	adr	x2, #548
000000010000a698	nop
000000010000a69c	b	0x10000a740
000000010000a6a0	nop
000000010000a6a4	ldr	x0, #0x38fd4
000000010000a6a8	ldr	x1, [x19, #0x68]
000000010000a6ac	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a6b0	mov	x20, x0
000000010000a6b4	cbz	x20, 0x10000a6dc
000000010000a6b8	mov	x0, x20
000000010000a6bc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a6c0	nop
000000010000a6c4	ldr	x25, #0x359fc ; literal pool symbol address: __xpc_type_dictionary
000000010000a6c8	cmp	x0, x25
000000010000a6cc	b.eq	0x10000a77c
000000010000a6d0	mov	x0, x19
000000010000a6d4	bl	0x10000abd8
000000010000a6d8	b	0x10000a63c
000000010000a6dc	ldr	x0, [x19, #0x68]
000000010000a6e0	adr	x1, #175565 ; literal pool for: "/System/Library/AppRemoval"
000000010000a6e4	nop
000000010000a6e8	bl	0x10000d7a4
000000010000a6ec	cbz	w0, 0x10000a720
000000010000a6f0	nop
000000010000a6f4	ldr	x0, #0x38fd4
000000010000a6f8	ldr	x1, [x19, #0x68]
000000010000a6fc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a700	mov	x20, x0
000000010000a704	cbz	x20, 0x10000a720
000000010000a708	mov	x0, x20
000000010000a70c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a710	nop
000000010000a714	ldr	x8, #0x359ac ; literal pool symbol address: __xpc_type_dictionary
000000010000a718	cmp	x0, x8
000000010000a71c	b.eq	0x10000a858
000000010000a720	mov	w8, #0x94
000000010000a724	str	w8, [x19, #0x11c]
000000010000a728	orr	w8, wzr, #0x4
000000010000a72c	str	w8, [x19, #0x60]
000000010000a730	nop
000000010000a734	ldr	x0, #0x38f6c
000000010000a738	adr	x2, #436
000000010000a73c	nop
000000010000a740	mov	x1, x19
000000010000a744	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000a748	ldur	x8, [x29, #-0x48]
000000010000a74c	nop
000000010000a750	ldr	x9, #0x358c8 ; literal pool symbol address: ___stack_chk_guard
000000010000a754	ldr	x9, [x9]
000000010000a758	cmp	x9, x8
000000010000a75c	b.ne	0x10000a874
000000010000a760	add	sp, sp, #0x410
000000010000a764	ldp	x29, x30, [sp, #0x40]
000000010000a768	ldp	x20, x19, [sp, #0x30]
000000010000a76c	ldp	x22, x21, [sp, #0x20]
000000010000a770	ldp	x24, x23, [sp, #0x10]
000000010000a774	ldp	x26, x25, [sp], #0x50
000000010000a778	ret
000000010000a77c	adr	x1, #175502 ; literal pool for: "_serviceBundles"
000000010000a780	nop
000000010000a784	mov	x0, x20
000000010000a788	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000a78c	mov	x20, x0
000000010000a790	cbz	x20, 0x10000a6d0
000000010000a794	mov	x0, x20
000000010000a798	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a79c	nop
000000010000a7a0	ldr	x8, #0x358f8 ; literal pool symbol address: __xpc_type_array
000000010000a7a4	cmp	x0, x8
000000010000a7a8	b.ne	0x10000a6d0
000000010000a7ac	mov	x0, #0x0
000000010000a7b0	mov	x1, #0x0
000000010000a7b4	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
000000010000a7b8	mov	x21, x0
000000010000a7bc	mov	x0, x20
000000010000a7c0	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000a7c4	cbz	x0, 0x10000a828
000000010000a7c8	mov	x22, #0x0
000000010000a7cc	mov	x0, x20
000000010000a7d0	mov	x1, x22
000000010000a7d4	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
000000010000a7d8	mov	x23, x0
000000010000a7dc	cbz	x23, 0x10000a814
000000010000a7e0	mov	x0, x23
000000010000a7e4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000a7e8	cmp	x0, x25
000000010000a7ec	b.ne	0x10000a814
000000010000a7f0	mov	x0, x23
000000010000a7f4	bl	0x10000aaf4
000000010000a7f8	mov	x23, x0
000000010000a7fc	cbz	x23, 0x10000a814
000000010000a800	mov	x0, x21
000000010000a804	mov	x1, x23
000000010000a808	bl	0x1000318b0 ; symbol stub for: _xpc_array_append_value
000000010000a80c	mov	x0, x23
000000010000a810	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010000a814	add	x22, x22, #0x1
000000010000a818	mov	x0, x20
000000010000a81c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000a820	cmp	x22, x0
000000010000a824	b.lo	0x10000a7cc
000000010000a828	ldr	w8, [x19, #0x60]
000000010000a82c	cmp	w8, #0x2
000000010000a830	cset	w0, eq
000000010000a834	ldr	x1, [x19, #0x68]
000000010000a838	bl	0x100031958 ; symbol stub for: _xpc_bundle_create_from_origin
000000010000a83c	mov	x20, x0
000000010000a840	mov	x1, #0x0
000000010000a844	mov	x2, x21
000000010000a848	bl	0x100031994 ; symbol stub for: _xpc_bundle_populate
000000010000a84c	mov	x0, x21
000000010000a850	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010000a854	b	0x10000a868
000000010000a858	mov	x0, x20
000000010000a85c	bl	0x10000aaf4
000000010000a860	mov	x20, x0
000000010000a864	cbz	x20, 0x10000a720
000000010000a868	ldr	x0, [x24, #0x680]
000000010000a86c	ldr	x1, [x19, #0x68]
000000010000a870	b	0x10000a608
000000010000a874	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010000a878	ldr	w0, [x0, #0x60]
000000010000a87c	ret
000000010000a880	ldr	x0, [x0, #0x70]
000000010000a884	ret
000000010000a888	ldr	w0, [x0, #0x11c]
000000010000a88c	ret
000000010000a890	ldr	x0, [x0, #0x80]
000000010000a894	cbz	x0, 0x10000a89c
000000010000a898	b	0x100031b74 ; symbol stub for: _xpc_retain
000000010000a89c	ret
000000010000a8a0	add	x0, x0, #0x88
000000010000a8a4	ret
000000010000a8a8	ldr	x0, [x0, #0x68]
000000010000a8ac	ret
000000010000a8b0	ldr	x0, [x0, #0x78]
000000010000a8b4	ret
000000010000a8b8	stp	x20, x19, [sp, #-0x20]!
000000010000a8bc	stp	x29, x30, [sp, #0x10]
000000010000a8c0	add	x29, sp, #0x10
000000010000a8c4	mov	x19, x0
000000010000a8c8	ldr	w2, [x19, #0x11c]
000000010000a8cc	ldp	x8, x3, [x19, #0x130]
000000010000a8d0	mov	x1, #0x0
000000010000a8d4	blr	x8
000000010000a8d8	mov	w1, #0x0
000000010000a8dc	mov	x0, x19
000000010000a8e0	ldp	x29, x30, [sp, #0x10]
000000010000a8e4	ldp	x20, x19, [sp], #0x20
000000010000a8e8	b	0x10000e4a4
000000010000a8ec	stp	x20, x19, [sp, #-0x20]!
000000010000a8f0	stp	x29, x30, [sp, #0x10]
000000010000a8f4	add	x29, sp, #0x10
000000010000a8f8	mov	x19, x0
000000010000a8fc	ldr	w8, [x19, #0x60]
000000010000a900	cmp	w8, #0x4
000000010000a904	b.hi	0x10000aa08
000000010000a908	adr	x9, #276
000000010000a90c	nop
000000010000a910	ldrsw	x8, [x9, x8, lsl #2]
000000010000a914	add	x8, x8, x9
000000010000a918	br	x8
000000010000a91c	nop
000000010000a920	ldr	x0, #0x38d78
000000010000a924	mov	x1, #-0x1
000000010000a928	bl	0x100030e9c ; symbol stub for: _dispatch_semaphore_wait
000000010000a92c	ldr	w8, [x19, #0x60]
000000010000a930	cmp	w8, #0x2
000000010000a934	cset	w0, eq
000000010000a938	ldr	x1, [x19, #0x68]
000000010000a93c	bl	0x100031958 ; symbol stub for: _xpc_bundle_create_from_origin
000000010000a940	str	x0, [x19, #0x78]
000000010000a944	mov	w1, #0x0
000000010000a948	mov	x0, x19
000000010000a94c	bl	0x10000e3f4
000000010000a950	ldr	x0, [x19, #0x78]
000000010000a954	ldr	x1, [x19, #0x128]
000000010000a958	adr	x3, #956
000000010000a95c	nop
000000010000a960	mov	x2, x19
000000010000a964	bl	0x1000319a0 ; symbol stub for: _xpc_bundle_resolve
000000010000a968	b	0x10000aa08
000000010000a96c	nop
000000010000a970	ldr	x0, #0x38d28
000000010000a974	mov	x1, #-0x1
000000010000a978	bl	0x100030e9c ; symbol stub for: _dispatch_semaphore_wait
000000010000a97c	mov	w1, #0x0
000000010000a980	mov	x0, x19
000000010000a984	bl	0x10000e3f4
000000010000a988	ldr	x0, [x19, #0x68]
000000010000a98c	ldr	x1, [x19, #0x128]
000000010000a990	adr	x3, #708
000000010000a994	nop
000000010000a998	b	0x10000a9cc
000000010000a99c	nop
000000010000a9a0	ldr	x0, #0x38cf8
000000010000a9a4	mov	x1, #-0x1
000000010000a9a8	bl	0x100030e9c ; symbol stub for: _dispatch_semaphore_wait
000000010000a9ac	mov	w1, #0x0
000000010000a9b0	mov	x0, x19
000000010000a9b4	bl	0x10000e3f4
000000010000a9b8	ldr	x0, [x19, #0x68]
000000010000a9bc	nop
000000010000a9c0	ldr	x1, #0x38cd0
000000010000a9c4	adr	x3, #1084
000000010000a9c8	nop
000000010000a9cc	mov	x2, x19
000000010000a9d0	bl	0x100028b08
000000010000a9d4	b	0x10000aa08
000000010000a9d8	nop
000000010000a9dc	ldr	x0, #0x38cbc
000000010000a9e0	mov	x1, #-0x1
000000010000a9e4	bl	0x100030e9c ; symbol stub for: _dispatch_semaphore_wait
000000010000a9e8	mov	w1, #0x0
000000010000a9ec	mov	x0, x19
000000010000a9f0	bl	0x10000e3f4
000000010000a9f4	ldr	x0, [x19, #0x128]
000000010000a9f8	adr	x2, #2284
000000010000a9fc	nop
000000010000aa00	mov	x1, x19
000000010000aa04	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000aa08	mov	w1, #0x0
000000010000aa0c	mov	x0, x19
000000010000aa10	ldp	x29, x30, [sp, #0x10]
000000010000aa14	ldp	x20, x19, [sp], #0x20
000000010000aa18	b	0x10000e4a4
000000010000aa1c	.long	0xffffff50
000000010000aa20	.long	0xffffff00
000000010000aa24	.long	0xffffff00
000000010000aa28	.long	0xffffff80
000000010000aa2c	.long	0xffffffbc
000000010000aa30	stp	x22, x21, [sp, #-0x30]!
000000010000aa34	stp	x20, x19, [sp, #0x10]
000000010000aa38	stp	x29, x30, [sp, #0x20]
000000010000aa3c	add	x29, sp, #0x20
000000010000aa40	mov	x19, x0
000000010000aa44	adr	x21, #236052
000000010000aa48	nop
000000010000aa4c	ldr	x0, [x21]
000000010000aa50	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000aa54	cbz	x0, 0x10000aa8c
000000010000aa58	mov	x20, #0x0
000000010000aa5c	ldr	x0, [x21]
000000010000aa60	mov	x1, x20
000000010000aa64	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010000aa68	cbz	x0, 0x10000aa78
000000010000aa6c	mov	x1, x19
000000010000aa70	bl	0x100031700 ; symbol stub for: _strcmp
000000010000aa74	cbz	w0, 0x10000aae0
000000010000aa78	add	x20, x20, #0x1
000000010000aa7c	ldr	x0, [x21]
000000010000aa80	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000aa84	cmp	x20, x0
000000010000aa88	b.lo	0x10000aa5c
000000010000aa8c	adr	x21, #235988
000000010000aa90	nop
000000010000aa94	ldr	x0, [x21]
000000010000aa98	cbz	x0, 0x10000aae4
000000010000aa9c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000aaa0	cbz	x0, 0x10000aae4
000000010000aaa4	mov	x20, #0x0
000000010000aaa8	ldr	x0, [x21]
000000010000aaac	mov	x1, x20
000000010000aab0	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010000aab4	cbz	x0, 0x10000aac4
000000010000aab8	mov	x1, x19
000000010000aabc	bl	0x100031700 ; symbol stub for: _strcmp
000000010000aac0	cbz	w0, 0x10000aae0
000000010000aac4	add	x20, x20, #0x1
000000010000aac8	ldr	x0, [x21]
000000010000aacc	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000aad0	cmp	x20, x0
000000010000aad4	b.lo	0x10000aaa8
000000010000aad8	mov	w0, #0x0
000000010000aadc	b	0x10000aae4
000000010000aae0	orr	w0, wzr, #0x1
000000010000aae4	ldp	x29, x30, [sp, #0x20]
000000010000aae8	ldp	x20, x19, [sp, #0x10]
000000010000aaec	ldp	x22, x21, [sp], #0x30
000000010000aaf0	ret
000000010000aaf4	stp	x20, x19, [sp, #-0x20]!
000000010000aaf8	stp	x29, x30, [sp, #0x10]
000000010000aafc	add	x29, sp, #0x10
000000010000ab00	mov	x20, x0
000000010000ab04	adr	x1, #174571 ; literal pool for: "_infoPlist"
000000010000ab08	nop
000000010000ab0c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010000ab10	mov	x19, x0
000000010000ab14	cbz	x19, 0x10000ab30
000000010000ab18	mov	x0, x19
000000010000ab1c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000ab20	nop
000000010000ab24	ldr	x8, #0x3559c ; literal pool symbol address: __xpc_type_dictionary
000000010000ab28	cmp	x0, x8
000000010000ab2c	b.eq	0x10000ab44
000000010000ab30	mov	x20, #0x0
000000010000ab34	mov	x0, x20
000000010000ab38	ldp	x29, x30, [sp, #0x10]
000000010000ab3c	ldp	x20, x19, [sp], #0x20
000000010000ab40	ret
000000010000ab44	adr	x1, #174518 ; literal pool for: "_executablePath"
000000010000ab48	nop
000000010000ab4c	mov	x0, x20
000000010000ab50	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010000ab54	mov	x8, x0
000000010000ab58	cbz	x8, 0x10000ab30
000000010000ab5c	orr	w0, wzr, #0x1
000000010000ab60	mov	x1, x8
000000010000ab64	bl	0x100031958 ; symbol stub for: _xpc_bundle_create_from_origin
000000010000ab68	mov	x20, x0
000000010000ab6c	mov	x1, x19
000000010000ab70	mov	x2, #0x0
000000010000ab74	bl	0x100031994 ; symbol stub for: _xpc_bundle_populate
000000010000ab78	b	0x10000ab34
000000010000ab7c	stp	x20, x19, [sp, #-0x20]!
000000010000ab80	stp	x29, x30, [sp, #0x10]
000000010000ab84	add	x29, sp, #0x10
000000010000ab88	mov	x19, x1
000000010000ab8c	bl	0x100031970 ; symbol stub for: _xpc_bundle_get_info_dictionary
000000010000ab90	mov	x8, x0
000000010000ab94	cbz	x8, 0x10000abb4
000000010000ab98	adr	x2, #40
000000010000ab9c	nop
000000010000aba0	mov	x0, x19
000000010000aba4	mov	x1, x8
000000010000aba8	ldp	x29, x30, [sp, #0x10]
000000010000abac	ldp	x20, x19, [sp], #0x20
000000010000abb0	b	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010000abb4	ldp	x29, x30, [sp, #0x10]
000000010000abb8	ldp	x20, x19, [sp], #0x20
000000010000abbc	ret
000000010000abc0	mov	x8, x1
000000010000abc4	mov	x9, x0
000000010000abc8	mov	x0, x2
000000010000abcc	mov	x1, x9
000000010000abd0	mov	x2, x8
000000010000abd4	b	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010000abd8	stp	x22, x21, [sp, #-0x30]!
000000010000abdc	stp	x20, x19, [sp, #0x10]
000000010000abe0	stp	x29, x30, [sp, #0x20]
000000010000abe4	add	x29, sp, #0x20
000000010000abe8	mov	x19, x0
000000010000abec	ldr	w8, [x19, #0x60]
000000010000abf0	cmp	w8, #0x2
000000010000abf4	cset	w0, eq
000000010000abf8	ldr	x1, [x19, #0x68]
000000010000abfc	bl	0x100031958 ; symbol stub for: _xpc_bundle_create_from_origin
000000010000ac00	mov	x20, x0
000000010000ac04	mov	x0, #0x0
000000010000ac08	mov	x1, #0x0
000000010000ac0c	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
000000010000ac10	mov	x21, x0
000000010000ac14	mov	x0, x20
000000010000ac18	mov	x1, #0x0
000000010000ac1c	mov	x2, x21
000000010000ac20	bl	0x100031994 ; symbol stub for: _xpc_bundle_populate
000000010000ac24	mov	x0, x21
000000010000ac28	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010000ac2c	nop
000000010000ac30	ldr	x0, #0x38a50
000000010000ac34	ldr	x1, [x19, #0x68]
000000010000ac38	mov	x2, x20
000000010000ac3c	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010000ac40	mov	x0, x20
000000010000ac44	ldp	x29, x30, [sp, #0x20]
000000010000ac48	ldp	x20, x19, [sp, #0x10]
000000010000ac4c	ldp	x22, x21, [sp], #0x30
000000010000ac50	ret
000000010000ac54	stp	x24, x23, [sp, #-0x40]!
000000010000ac58	stp	x22, x21, [sp, #0x10]
000000010000ac5c	stp	x20, x19, [sp, #0x20]
000000010000ac60	stp	x29, x30, [sp, #0x30]
000000010000ac64	add	x29, sp, #0x30
000000010000ac68	mov	x19, x4
000000010000ac6c	mov	x21, x3
000000010000ac70	mov	x20, x2
000000010000ac74	mov	x22, x1
000000010000ac78	mov	x23, x0
000000010000ac7c	cmp	w21, #0x1d
000000010000ac80	b.eq	0x10000acb4
000000010000ac84	cmp	w21, #0x15
000000010000ac88	b.eq	0x10000acb4
000000010000ac8c	cbnz	w21, 0x10000acd8
000000010000ac90	mov	x0, x22
000000010000ac94	bl	0x10000aa30
000000010000ac98	tbz	w0, #0x0, 0x10000aca4
000000010000ac9c	orr	w21, wzr, #0x7f
000000010000aca0	b	0x10000acb4
000000010000aca4	mov	x0, x23
000000010000aca8	bl	0x100030e78 ; symbol stub for: _dispatch_retain
000000010000acac	mov	w21, #0x0
000000010000acb0	str	x23, [x19, #0x70]
000000010000acb4	ldr	x0, [x19, #0x68]
000000010000acb8	bl	0x100031010 ; symbol stub for: _free
000000010000acbc	mov	x0, x22
000000010000acc0	bl	0x10000d520
000000010000acc4	str	x0, [x19, #0x68]
000000010000acc8	add	x0, x19, #0x88
000000010000accc	mov	w2, #0x90
000000010000acd0	mov	x1, x20
000000010000acd4	bl	0x100031328 ; symbol stub for: _memcpy
000000010000acd8	ldp	x8, x3, [x19, #0x130]
000000010000acdc	mov	x2, x21
000000010000ace0	mov	x0, x19
000000010000ace4	mov	x1, #0x0
000000010000ace8	blr	x8
000000010000acec	nop
000000010000acf0	ldr	x0, #0x389a8
000000010000acf4	bl	0x100030e90 ; symbol stub for: _dispatch_semaphore_signal
000000010000acf8	mov	w1, #0x0
000000010000acfc	mov	x0, x19
000000010000ad00	ldp	x29, x30, [sp, #0x30]
000000010000ad04	ldp	x20, x19, [sp, #0x20]
000000010000ad08	ldp	x22, x21, [sp, #0x10]
000000010000ad0c	ldp	x24, x23, [sp], #0x40
000000010000ad10	b	0x10000e4a4
000000010000ad14	stp	x22, x21, [sp, #-0x30]!
000000010000ad18	stp	x20, x19, [sp, #0x10]
000000010000ad1c	stp	x29, x30, [sp, #0x20]
000000010000ad20	add	x29, sp, #0x20
000000010000ad24	mov	x19, x2
000000010000ad28	mov	x20, x1
000000010000ad2c	mov	x21, x0
000000010000ad30	cbnz	w20, 0x10000adc8
000000010000ad34	ldr	x0, [x19, #0x68]
000000010000ad38	bl	0x100031010 ; symbol stub for: _free
000000010000ad3c	ldr	x0, [x19, #0x78]
000000010000ad40	bl	0x10003197c ; symbol stub for: _xpc_bundle_get_path
000000010000ad44	bl	0x10000d520
000000010000ad48	str	x0, [x19, #0x68]
000000010000ad4c	orr	w1, wzr, #0x4
000000010000ad50	mov	x0, x21
000000010000ad54	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
000000010000ad58	mov	x1, x0
000000010000ad5c	add	x0, x19, #0x88
000000010000ad60	mov	w2, #0x90
000000010000ad64	bl	0x100031328 ; symbol stub for: _memcpy
000000010000ad68	orr	w1, wzr, #0x2
000000010000ad6c	mov	x0, x21
000000010000ad70	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
000000010000ad74	mov	x22, x0
000000010000ad78	mov	x0, x21
000000010000ad7c	bl	0x10003194c ; symbol stub for: _xpc_bundle_copy_services
000000010000ad80	mov	x21, x0
000000010000ad84	adr	x1, #173974 ; literal pool for: ".framework"
000000010000ad88	nop
000000010000ad8c	mov	x0, x22
000000010000ad90	bl	0x10000d7e4
000000010000ad94	cbz	w0, 0x10000adb0
000000010000ad98	mov	x0, x21
000000010000ad9c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000ada0	cbnz	x0, 0x10000adb0
000000010000ada4	mov	x0, x19
000000010000ada8	bl	0x10000abd8
000000010000adac	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010000adb0	ldr	x1, [x19, #0x120]
000000010000adb4	cbz	x1, 0x10000adc0
000000010000adb8	ldr	x0, [x19, #0x78]
000000010000adbc	bl	0x10000ab7c
000000010000adc0	mov	x0, x21
000000010000adc4	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010000adc8	ldp	x8, x3, [x19, #0x130]
000000010000adcc	mov	x2, x20
000000010000add0	mov	x0, x19
000000010000add4	mov	x1, #0x0
000000010000add8	blr	x8
000000010000addc	nop
000000010000ade0	ldr	x0, #0x388b8
000000010000ade4	bl	0x100030e90 ; symbol stub for: _dispatch_semaphore_signal
000000010000ade8	mov	w1, #0x0
000000010000adec	mov	x0, x19
000000010000adf0	ldp	x29, x30, [sp, #0x20]
000000010000adf4	ldp	x20, x19, [sp, #0x10]
000000010000adf8	ldp	x22, x21, [sp], #0x30
000000010000adfc	b	0x10000e4a4
000000010000ae00	sub	sp, sp, #0xa0
000000010000ae04	stp	x28, x27, [sp, #0x40]
000000010000ae08	stp	x26, x25, [sp, #0x50]
000000010000ae0c	stp	x24, x23, [sp, #0x60]
000000010000ae10	stp	x22, x21, [sp, #0x70]
000000010000ae14	stp	x20, x19, [sp, #0x80]
000000010000ae18	stp	x29, x30, [sp, #0x90]
000000010000ae1c	add	x29, sp, #0x90
000000010000ae20	mov	x19, x4
000000010000ae24	mov	x21, x3
000000010000ae28	mov	x22, x2
000000010000ae2c	mov	x20, x1
000000010000ae30	nop
000000010000ae34	ldr	x8, #0x351e4 ; literal pool symbol address: ___stack_chk_guard
000000010000ae38	ldr	x8, [x8]
000000010000ae3c	str	x8, [sp, #0x38]
000000010000ae40	cbz	x20, 0x10000ae58
000000010000ae44	ldr	x0, [x19, #0x68]
000000010000ae48	bl	0x100031010 ; symbol stub for: _free
000000010000ae4c	mov	x0, x20
000000010000ae50	bl	0x10000d520
000000010000ae54	str	x0, [x19, #0x68]
000000010000ae58	add	x0, x19, #0x88
000000010000ae5c	mov	w2, #0x90
000000010000ae60	mov	x1, x22
000000010000ae64	bl	0x100031328 ; symbol stub for: _memcpy
000000010000ae68	cmp	w21, #0x15
000000010000ae6c	b.ne	0x10000b020
000000010000ae70	mov	w1, #0x24
000000010000ae74	mov	x0, x19
000000010000ae78	mov	x2, #0x0
000000010000ae7c	mov	x3, #0x0
000000010000ae80	bl	0x10000e39c
000000010000ae84	mov	x1, x0
000000010000ae88	ldr	x0, [x19, #0x128]
000000010000ae8c	adr	x2, #800
000000010000ae90	nop
000000010000ae94	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000ae98	adr	x8, #234977
000000010000ae9c	nop
000000010000aea0	ldrb	w8, [x8]
000000010000aea4	cbz	w8, 0x10000b0c0
000000010000aea8	stp	x20, xzr, [sp, #0x8]
000000010000aeac	mov	w1, #0x5c
000000010000aeb0	add	x0, sp, #0x8
000000010000aeb4	mov	x2, #0x0
000000010000aeb8	bl	0x100031064 ; symbol stub for: _fts_open
000000010000aebc	mov	x20, x0
000000010000aec0	bl	0x100031070 ; symbol stub for: _fts_read
000000010000aec4	mov	x21, x0
000000010000aec8	cbz	x21, 0x10000aff0
000000010000aecc	mov	x23, #0x0
000000010000aed0	orr	w24, wzr, #0x4
000000010000aed4	orr	w25, wzr, #0x3
000000010000aed8	mov	w26, #0x6c
000000010000aedc	b	0x10000aee8
000000010000aee0	orr	w23, wzr, #0x1
000000010000aee4	b	0x10000afe0
000000010000aee8	ldrh	w8, [x21, #0x58]
000000010000aeec	cmp	w8, #0xb
000000010000aef0	b.eq	0x10000af3c
000000010000aef4	cmp	w8, #0x6
000000010000aef8	b.eq	0x10000af64
000000010000aefc	cmp	w8, #0x1
000000010000af00	b.ne	0x10000af6c
000000010000af04	cbz	x23, 0x10000aee0
000000010000af08	add	x23, x23, #0x1
000000010000af0c	orr	w2, wzr, #0x4
000000010000af10	mov	x0, x20
000000010000af14	mov	x1, x21
000000010000af18	bl	0x10003107c ; symbol stub for: _fts_set
000000010000af1c	ldr	x22, [x21, #0x30]
000000010000af20	mov	x0, #0x0
000000010000af24	bl	0x10000ebb4
000000010000af28	mov	x21, x0
000000010000af2c	str	w25, [x21, #0x60]
000000010000af30	cbnz	x22, 0x10000af54
000000010000af34	cbnz	x21, 0x10000afc8
000000010000af38	b	0x10000afe0
000000010000af3c	ldr	x22, [x21, #0x30]
000000010000af40	mov	x0, #0x0
000000010000af44	bl	0x10000ebb4
000000010000af48	mov	x21, x0
000000010000af4c	str	wzr, [x21, #0x60]
000000010000af50	cbz	x22, 0x10000af34
000000010000af54	mov	x0, x22
000000010000af58	bl	0x10000d520
000000010000af5c	str	x0, [x21, #0x68]
000000010000af60	b	0x10000afc8
000000010000af64	sub	x23, x23, #0x1
000000010000af68	b	0x10000afe0
000000010000af6c	ldr	x22, [x21, #0x30]
000000010000af70	cmp	w8, #0x7
000000010000af74	b.ne	0x10000afa4
000000010000af78	ldr	w27, [x21, #0x38]
000000010000af7c	mov	x0, #0x0
000000010000af80	bl	0x10000ebb4
000000010000af84	mov	x21, x0
000000010000af88	str	w24, [x21, #0x60]
000000010000af8c	cbz	x22, 0x10000af9c
000000010000af90	mov	x0, x22
000000010000af94	bl	0x10000d520
000000010000af98	str	x0, [x21, #0x68]
000000010000af9c	str	w27, [x21, #0x11c]
000000010000afa0	b	0x10000afc8
000000010000afa4	mov	x0, #0x0
000000010000afa8	bl	0x10000ebb4
000000010000afac	mov	x21, x0
000000010000afb0	str	w24, [x21, #0x60]
000000010000afb4	cbz	x22, 0x10000afc4
000000010000afb8	mov	x0, x22
000000010000afbc	bl	0x10000d520
000000010000afc0	str	x0, [x21, #0x68]
000000010000afc4	str	w26, [x21, #0x11c]
000000010000afc8	mov	x0, x19
000000010000afcc	mov	x1, x21
000000010000afd0	bl	0x10000b254
000000010000afd4	mov	w1, #0x0
000000010000afd8	mov	x0, x21
000000010000afdc	bl	0x10000e4a4
000000010000afe0	mov	x0, x20
000000010000afe4	bl	0x100031070 ; symbol stub for: _fts_read
000000010000afe8	mov	x21, x0
000000010000afec	cbnz	x21, 0x10000aee8
000000010000aff0	mov	x0, x20
000000010000aff4	bl	0x100031058 ; symbol stub for: _fts_close
000000010000aff8	mov	w1, #0x24
000000010000affc	mov	x3, #-0x1
000000010000b000	mov	x0, x19
000000010000b004	mov	x2, #0x0
000000010000b008	bl	0x10000e39c
000000010000b00c	mov	x1, x0
000000010000b010	ldr	x0, [x19, #0x128]
000000010000b014	adr	x2, #408
000000010000b018	nop
000000010000b01c	b	0x10000b06c
000000010000b020	sxtw	x3, w21
000000010000b024	mov	w1, #0x24
000000010000b028	mov	x0, x19
000000010000b02c	mov	x2, #0x0
000000010000b030	bl	0x10000e39c
000000010000b034	mov	x1, x0
000000010000b038	ldr	x0, [x19, #0x128]
000000010000b03c	adr	x20, #368
000000010000b040	nop
000000010000b044	mov	x2, x20
000000010000b048	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000b04c	mov	w1, #0x24
000000010000b050	mov	x3, #-0x1
000000010000b054	mov	x0, x19
000000010000b058	mov	x2, #0x0
000000010000b05c	bl	0x10000e39c
000000010000b060	mov	x1, x0
000000010000b064	ldr	x0, [x19, #0x128]
000000010000b068	mov	x2, x20
000000010000b06c	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000b070	nop
000000010000b074	ldr	x0, #0x38624
000000010000b078	bl	0x100030e90 ; symbol stub for: _dispatch_semaphore_signal
000000010000b07c	mov	w1, #0x0
000000010000b080	mov	x0, x19
000000010000b084	bl	0x10000e4a4
000000010000b088	ldr	x8, [sp, #0x38]
000000010000b08c	nop
000000010000b090	ldr	x9, #0x34f88 ; literal pool symbol address: ___stack_chk_guard
000000010000b094	ldr	x9, [x9]
000000010000b098	cmp	x9, x8
000000010000b09c	b.ne	0x10000b1a8
000000010000b0a0	ldp	x29, x30, [sp, #0x90]
000000010000b0a4	ldp	x20, x19, [sp, #0x80]
000000010000b0a8	ldp	x22, x21, [sp, #0x70]
000000010000b0ac	ldp	x24, x23, [sp, #0x60]
000000010000b0b0	ldp	x26, x25, [sp, #0x50]
000000010000b0b4	ldp	x28, x27, [sp, #0x40]
000000010000b0b8	add	sp, sp, #0xa0
000000010000b0bc	ret
000000010000b0c0	adr	x23, #234392
000000010000b0c4	nop
000000010000b0c8	ldr	x0, [x23]
000000010000b0cc	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000b0d0	mov	x21, x0
000000010000b0d4	cbz	x21, 0x10000aea8
000000010000b0d8	mov	x22, #0x0
000000010000b0dc	ldr	x0, [x23]
000000010000b0e0	mov	x1, x22
000000010000b0e4	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010000b0e8	mov	x8, x0
000000010000b0ec	cbz	x8, 0x10000b100
000000010000b0f0	mov	x0, x20
000000010000b0f4	mov	x1, x8
000000010000b0f8	bl	0x10000d7a4
000000010000b0fc	b	0x10000b104
000000010000b100	orr	w0, wzr, #0x4
000000010000b104	orr	w8, w0, #0x4
000000010000b108	and	w8, w8, #0x7
000000010000b10c	cmp	w8, #0x4
000000010000b110	b.ne	0x10000b124
000000010000b114	add	x22, x22, #0x1
000000010000b118	cmp	x22, x21
000000010000b11c	b.lo	0x10000b0dc
000000010000b120	b	0x10000aea8
000000010000b124	mov	x0, x20
000000010000b128	bl	0x10003173c ; symbol stub for: _strlen
000000010000b12c	mov	x21, x0
000000010000b130	add	x22, x21, #0x2
000000010000b134	mov	x0, x22
000000010000b138	bl	0x100031304 ; symbol stub for: _malloc
000000010000b13c	mov	x23, x0
000000010000b140	mov	x3, #-0x1
000000010000b144	mov	x1, x20
000000010000b148	mov	x2, x22
000000010000b14c	bl	0x100030b0c ; symbol stub for: ___strlcpy_chk
000000010000b150	mov	w8, #0x2f
000000010000b154	strh	w8, [x23, x21]
000000010000b158	nop
000000010000b15c	ldr	x0, #0x38514
000000010000b160	nop
000000010000b164	ldr	x8, #0x34eac ; literal pool symbol address: __NSConcreteStackBlock
000000010000b168	str	x8, [sp, #0x8]
000000010000b16c	nop
000000010000b170	ldr	d0, 0x10003de90
000000010000b174	str	d0, [sp, #0x10]
000000010000b178	adr	x8, #104
000000010000b17c	nop
000000010000b180	str	x8, [sp, #0x18]
000000010000b184	adr	x8, #220940
000000010000b188	nop
000000010000b18c	stp	x8, x23, [sp, #0x20]
000000010000b190	str	x19, [sp, #0x30]
000000010000b194	add	x1, sp, #0x8
000000010000b198	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
000000010000b19c	mov	x0, x23
000000010000b1a0	bl	0x100031010 ; symbol stub for: _free
000000010000b1a4	b	0x10000aff8
000000010000b1a8	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010000b1ac	stp	x20, x19, [sp, #-0x20]!
000000010000b1b0	stp	x29, x30, [sp, #0x10]
000000010000b1b4	add	x29, sp, #0x10
000000010000b1b8	mov	x19, x0
000000010000b1bc	ldr	x0, [x19]
000000010000b1c0	ldr	w2, [x19, #0x10]
000000010000b1c4	ldp	x8, x3, [x0, #0x130]
000000010000b1c8	mov	x1, #0x0
000000010000b1cc	blr	x8
000000010000b1d0	mov	x0, x19
000000010000b1d4	ldp	x29, x30, [sp, #0x10]
000000010000b1d8	ldp	x20, x19, [sp], #0x20
000000010000b1dc	b	0x10000e470
000000010000b1e0	stp	x22, x21, [sp, #-0x30]!
000000010000b1e4	stp	x20, x19, [sp, #0x10]
000000010000b1e8	stp	x29, x30, [sp, #0x20]
000000010000b1ec	add	x29, sp, #0x20
000000010000b1f0	mov	x20, x1
000000010000b1f4	mov	x19, x0
000000010000b1f8	ldr	x1, [x19, #0x20]
000000010000b1fc	mov	x0, x20
000000010000b200	bl	0x10000d7a4
000000010000b204	cbz	w0, 0x10000b240
000000010000b208	mov	x0, #0x0
000000010000b20c	bl	0x10000ebb4
000000010000b210	mov	x21, x0
000000010000b214	str	wzr, [x21, #0x60]
000000010000b218	cbz	x20, 0x10000b228
000000010000b21c	mov	x0, x20
000000010000b220	bl	0x10000d520
000000010000b224	str	x0, [x21, #0x68]
000000010000b228	ldr	x0, [x19, #0x28]
000000010000b22c	mov	x1, x21
000000010000b230	bl	0x10000b254
000000010000b234	mov	w1, #0x0
000000010000b238	mov	x0, x21
000000010000b23c	bl	0x10000e4a4
000000010000b240	orr	w0, wzr, #0x1
000000010000b244	ldp	x29, x30, [sp, #0x20]
000000010000b248	ldp	x20, x19, [sp, #0x10]
000000010000b24c	ldp	x22, x21, [sp], #0x30
000000010000b250	ret
000000010000b254	stp	x20, x19, [sp, #-0x20]!
000000010000b258	stp	x29, x30, [sp, #0x10]
000000010000b25c	add	x29, sp, #0x10
000000010000b260	mov	x8, x1
000000010000b264	mov	x19, x0
000000010000b268	mov	w1, #0x26
000000010000b26c	mov	x0, x8
000000010000b270	bl	0x10000e3f4
000000010000b274	mov	x2, x0
000000010000b278	mov	w1, #0x25
000000010000b27c	mov	x0, x19
000000010000b280	mov	x3, #0x0
000000010000b284	bl	0x10000e39c
000000010000b288	mov	x1, x0
000000010000b28c	ldr	x0, [x19, #0x128]
000000010000b290	adr	x2, #20
000000010000b294	nop
000000010000b298	ldp	x29, x30, [sp, #0x10]
000000010000b29c	ldp	x20, x19, [sp], #0x20
000000010000b2a0	b	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000b2a4	stp	x20, x19, [sp, #-0x20]!
000000010000b2a8	stp	x29, x30, [sp, #0x10]
000000010000b2ac	add	x29, sp, #0x10
000000010000b2b0	mov	x19, x0
000000010000b2b4	ldp	x0, x20, [x19]
000000010000b2b8	ldp	x8, x3, [x0, #0x130]
000000010000b2bc	mov	w2, #0x0
000000010000b2c0	mov	x1, x20
000000010000b2c4	blr	x8
000000010000b2c8	mov	x0, x19
000000010000b2cc	bl	0x10000e470
000000010000b2d0	mov	w1, #0x26
000000010000b2d4	mov	x0, x20
000000010000b2d8	ldp	x29, x30, [sp, #0x10]
000000010000b2dc	ldp	x20, x19, [sp], #0x20
000000010000b2e0	b	0x10000e4a4
000000010000b2e4	stp	x20, x19, [sp, #-0x20]!
000000010000b2e8	stp	x29, x30, [sp, #0x10]
000000010000b2ec	add	x29, sp, #0x10
000000010000b2f0	mov	x19, x0
000000010000b2f4	ldr	w2, [x19, #0x11c]
000000010000b2f8	ldp	x8, x3, [x19, #0x130]
000000010000b2fc	mov	x1, #0x0
000000010000b300	blr	x8
000000010000b304	nop
000000010000b308	ldr	x0, #0x38390
000000010000b30c	bl	0x100030e90 ; symbol stub for: _dispatch_semaphore_signal
000000010000b310	mov	w1, #0x0
000000010000b314	mov	x0, x19
000000010000b318	ldp	x29, x30, [sp, #0x10]
000000010000b31c	ldp	x20, x19, [sp], #0x20
000000010000b320	b	0x10000e4a4
000000010000b324	ldr	w8, [x0, #0x14]
000000010000b328	sub	w8, w8, #0x40
000000010000b32c	cmp	w8, #0x8
000000010000b330	b.ls	0x10000b33c
000000010000b334	mov	x0, #0x0
000000010000b338	ret
000000010000b33c	adr	x9, #220532
000000010000b340	nop
000000010000b344	mov	w10, #0x28
000000010000b348	smaddl	x8, w8, w10, x9
000000010000b34c	ldr	x0, [x8, #0x28]
000000010000b350	ret
000000010000b354	stp	x20, x19, [sp, #-0x20]!
000000010000b358	stp	x29, x30, [sp, #0x10]
000000010000b35c	add	x29, sp, #0x10
000000010000b360	mov	x19, x1
000000010000b364	ldr	w8, [x0]
000000010000b368	tbnz	w8, #0x1f, 0x10000b390
000000010000b36c	ldr	w8, [x0, #0x4]
000000010000b370	cmp	w8, #0x24
000000010000b374	b.ne	0x10000b390
000000010000b378	ldr	w8, [x0, #0xc]
000000010000b37c	ldr	w1, [x0, #0x20]
000000010000b380	mov	x0, x8
000000010000b384	bl	0x10002cdfc
000000010000b388	str	w0, [x19, #0x20]
000000010000b38c	b	0x10000b3a8
000000010000b390	mov	w8, #-0x130
000000010000b394	str	w8, [x19, #0x20]
000000010000b398	nop
000000010000b39c	ldr	x8, #0x34c64 ; literal pool symbol address: _NDR_record
000000010000b3a0	ldr	x8, [x8]
000000010000b3a4	str	x8, [x19, #0x18]
000000010000b3a8	ldp	x29, x30, [sp, #0x10]
000000010000b3ac	ldp	x20, x19, [sp], #0x20
000000010000b3b0	ret
000000010000b3b4	stp	x20, x19, [sp, #-0x20]!
000000010000b3b8	stp	x29, x30, [sp, #0x10]
000000010000b3bc	add	x29, sp, #0x10
000000010000b3c0	mov	x19, x1
000000010000b3c4	ldr	w8, [x0]
000000010000b3c8	tbz	w8, #0x1f, 0x10000b40c
000000010000b3cc	ldr	w8, [x0, #0x18]
000000010000b3d0	cmp	w8, #0x1
000000010000b3d4	b.ne	0x10000b40c
000000010000b3d8	ldr	w8, [x0, #0x4]
000000010000b3dc	cmp	w8, #0x28
000000010000b3e0	b.ne	0x10000b40c
000000010000b3e4	ldr	w8, [x0, #0x24]
000000010000b3e8	and	w8, w8, #0xffff0000
000000010000b3ec	cmp	w8, #0x100, lsl #12
000000010000b3f0	b.ne	0x10000b430
000000010000b3f4	ldr	w8, [x0, #0xc]
000000010000b3f8	ldr	w1, [x0, #0x1c]
000000010000b3fc	mov	x0, x8
000000010000b400	bl	0x10002ce10
000000010000b404	str	w0, [x19, #0x20]
000000010000b408	b	0x10000b424
000000010000b40c	mov	w8, #-0x130
000000010000b410	str	w8, [x19, #0x20]
000000010000b414	nop
000000010000b418	ldr	x8, #0x34be8 ; literal pool symbol address: _NDR_record
000000010000b41c	ldr	x8, [x8]
000000010000b420	str	x8, [x19, #0x18]
000000010000b424	ldp	x29, x30, [sp, #0x10]
000000010000b428	ldp	x20, x19, [sp], #0x20
000000010000b42c	ret
000000010000b430	mov	w8, #-0x12c
000000010000b434	b	0x10000b410
000000010000b438	stp	x20, x19, [sp, #-0x20]!
000000010000b43c	stp	x29, x30, [sp, #0x10]
000000010000b440	add	x29, sp, #0x10
000000010000b444	mov	x19, x1
000000010000b448	ldr	w8, [x0]
000000010000b44c	tbnz	w8, #0x1f, 0x10000b474
000000010000b450	ldr	w8, [x0, #0x4]
000000010000b454	cmp	w8, #0x24
000000010000b458	b.ne	0x10000b474
000000010000b45c	ldr	w8, [x0, #0xc]
000000010000b460	ldr	w1, [x0, #0x20]
000000010000b464	mov	x0, x8
000000010000b468	bl	0x10002ceac
000000010000b46c	str	w0, [x19, #0x20]
000000010000b470	b	0x10000b48c
000000010000b474	mov	w8, #-0x130
000000010000b478	str	w8, [x19, #0x20]
000000010000b47c	nop
000000010000b480	ldr	x8, #0x34b80 ; literal pool symbol address: _NDR_record
000000010000b484	ldr	x8, [x8]
000000010000b488	str	x8, [x19, #0x18]
000000010000b48c	ldp	x29, x30, [sp, #0x10]
000000010000b490	ldp	x20, x19, [sp], #0x20
000000010000b494	ret
000000010000b498	stp	x20, x19, [sp, #-0x20]!
000000010000b49c	stp	x29, x30, [sp, #0x10]
000000010000b4a0	add	x29, sp, #0x10
000000010000b4a4	mov	x19, x1
000000010000b4a8	ldr	w8, [x0]
000000010000b4ac	tbnz	w8, #0x1f, 0x10000b4cc
000000010000b4b0	ldr	w8, [x0, #0x4]
000000010000b4b4	cmp	w8, #0x18
000000010000b4b8	b.ne	0x10000b4cc
000000010000b4bc	ldr	w0, [x0, #0xc]
000000010000b4c0	bl	0x10002cef4
000000010000b4c4	str	w0, [x19, #0x20]
000000010000b4c8	b	0x10000b4e4
000000010000b4cc	mov	w8, #-0x130
000000010000b4d0	str	w8, [x19, #0x20]
000000010000b4d4	nop
000000010000b4d8	ldr	x8, #0x34b28 ; literal pool symbol address: _NDR_record
000000010000b4dc	ldr	x8, [x8]
000000010000b4e0	str	x8, [x19, #0x18]
000000010000b4e4	ldp	x29, x30, [sp, #0x10]
000000010000b4e8	ldp	x20, x19, [sp], #0x20
000000010000b4ec	ret
000000010000b4f0	stp	x20, x19, [sp, #-0x20]!
000000010000b4f4	stp	x29, x30, [sp, #0x10]
000000010000b4f8	add	x29, sp, #0x10
000000010000b4fc	mov	x19, x1
000000010000b500	ldr	w8, [x0]
000000010000b504	tbnz	w8, #0x1f, 0x10000b52c
000000010000b508	ldr	w8, [x0, #0x4]
000000010000b50c	cmp	w8, #0x24
000000010000b510	b.ne	0x10000b52c
000000010000b514	ldr	w8, [x0, #0xc]
000000010000b518	ldr	w1, [x0, #0x20]
000000010000b51c	mov	x0, x8
000000010000b520	bl	0x10002cf08
000000010000b524	str	w0, [x19, #0x20]
000000010000b528	b	0x10000b544
000000010000b52c	mov	w8, #-0x130
000000010000b530	str	w8, [x19, #0x20]
000000010000b534	nop
000000010000b538	ldr	x8, #0x34ac8 ; literal pool symbol address: _NDR_record
000000010000b53c	ldr	x8, [x8]
000000010000b540	str	x8, [x19, #0x18]
000000010000b544	ldp	x29, x30, [sp, #0x10]
000000010000b548	ldp	x20, x19, [sp], #0x20
000000010000b54c	ret
000000010000b550	ldr	w8, [x0]
000000010000b554	and	w8, w8, #0x1f
000000010000b558	str	w8, [x1]
000000010000b55c	ldr	w8, [x0, #0x8]
000000010000b560	mov	w9, #0x24
000000010000b564	stp	w9, w8, [x1, #0x4]
000000010000b568	ldr	w8, [x0, #0x14]
000000010000b56c	add	w8, w8, #0x64
000000010000b570	stp	wzr, w8, [x1, #0x10]
000000010000b574	str	wzr, [x1, #0xc]
000000010000b578	ldr	w8, [x0, #0x14]
000000010000b57c	sub	w8, w8, #0x40
000000010000b580	cmp	w8, #0x8
000000010000b584	b.hi	0x10000b5b8
000000010000b588	adr	x9, #219944
000000010000b58c	nop
000000010000b590	mov	w10, #0x28
000000010000b594	smaddl	x8, w8, w10, x9
000000010000b598	ldr	x8, [x8, #0x28]
000000010000b59c	cbz	x8, 0x10000b5b8
000000010000b5a0	stp	x29, x30, [sp, #-0x10]!
000000010000b5a4	mov	x29, sp
000000010000b5a8	blr	x8
000000010000b5ac	orr	w0, wzr, #0x1
000000010000b5b0	ldp	x29, x30, [sp], #0x10
000000010000b5b4	ret
000000010000b5b8	mov	w0, #0x0
000000010000b5bc	nop
000000010000b5c0	ldr	x8, #0x34a40 ; literal pool symbol address: _NDR_record
000000010000b5c4	ldr	x8, [x8]
000000010000b5c8	str	x8, [x1, #0x18]
000000010000b5cc	mov	w8, #-0x12f
000000010000b5d0	str	w8, [x1, #0x20]
000000010000b5d4	ret
000000010000b5d8	ldr	w8, [x0, #0x14]
000000010000b5dc	sub	w8, w8, #0x190
000000010000b5e0	cmp	w8, #0x27
000000010000b5e4	b.ls	0x10000b5f0
000000010000b5e8	mov	x0, #0x0
000000010000b5ec	ret
000000010000b5f0	adr	x9, #220232
000000010000b5f4	nop
000000010000b5f8	mov	w10, #0x28
000000010000b5fc	smaddl	x8, w8, w10, x9
000000010000b600	ldr	x0, [x8, #0x28]
000000010000b604	ret
000000010000b608	stp	x22, x21, [sp, #-0x30]!
000000010000b60c	stp	x20, x19, [sp, #0x10]
000000010000b610	stp	x29, x30, [sp, #0x20]
000000010000b614	add	x29, sp, #0x20
000000010000b618	mov	x19, x1
000000010000b61c	mov	x20, x0
000000010000b620	ldr	w8, [x20]
000000010000b624	tbnz	w8, #0x1f, 0x10000b67c
000000010000b628	ldr	w8, [x20, #0x4]
000000010000b62c	cmp	w8, #0x228
000000010000b630	b.ne	0x10000b67c
000000010000b634	add	x21, x20, #0x20
000000010000b638	orr	w2, wzr, #0x200
000000010000b63c	mov	w1, #0x0
000000010000b640	mov	x0, x21
000000010000b644	bl	0x100031310 ; symbol stub for: _memchr
000000010000b648	cbz	x0, 0x10000b67c
000000010000b64c	add	x4, x19, #0x1c
000000010000b650	nop
000000010000b654	ldr	d0, 0x10003dea8
000000010000b658	str	d0, [x19, #0x20]
000000010000b65c	ldr	w0, [x20, #0xc]
000000010000b660	ldr	w2, [x20, #0x220]
000000010000b664	ldr	w3, [x20, #0x224]
000000010000b668	mov	x1, x21
000000010000b66c	bl	0x100019c64
000000010000b670	cbz	w0, 0x10000b6a4
000000010000b674	str	w0, [x19, #0x20]
000000010000b678	b	0x10000b684
000000010000b67c	mov	w8, #-0x130
000000010000b680	str	w8, [x19, #0x20]
000000010000b684	nop
000000010000b688	ldr	x8, #0x34978 ; literal pool symbol address: _NDR_record
000000010000b68c	ldr	x8, [x8]
000000010000b690	str	x8, [x19, #0x18]
000000010000b694	ldp	x29, x30, [sp, #0x20]
000000010000b698	ldp	x20, x19, [sp, #0x10]
000000010000b69c	ldp	x22, x21, [sp], #0x30
000000010000b6a0	ret
000000010000b6a4	ldr	w8, [x19]
000000010000b6a8	orr	w8, w8, #0x80000000
000000010000b6ac	str	w8, [x19]
000000010000b6b0	mov	w8, #0x28
000000010000b6b4	str	w8, [x19, #0x4]
000000010000b6b8	orr	w8, wzr, #0x1
000000010000b6bc	str	w8, [x19, #0x18]
000000010000b6c0	b	0x10000b694
000000010000b6c4	stp	x20, x19, [sp, #-0x20]!
000000010000b6c8	stp	x29, x30, [sp, #0x10]
000000010000b6cc	add	x29, sp, #0x10
000000010000b6d0	mov	x19, x1
000000010000b6d4	ldr	w8, [x0]
000000010000b6d8	tbnz	w8, #0x1f, 0x10000b6fc
000000010000b6dc	ldr	w8, [x0, #0x4]
000000010000b6e0	cmp	w8, #0x28
000000010000b6e4	b.ne	0x10000b6fc
000000010000b6e8	ldr	w8, [x0, #0xc]
000000010000b6ec	ldr	x1, [x0, #0x20]
000000010000b6f0	mov	x0, x8
000000010000b6f4	bl	0x100019c6c
000000010000b6f8	b	0x10000b700
000000010000b6fc	mov	w0, #-0x130
000000010000b700	str	w0, [x19, #0x20]
000000010000b704	nop
000000010000b708	ldr	x8, #0x348f8 ; literal pool symbol address: _NDR_record
000000010000b70c	ldr	x8, [x8]
000000010000b710	str	x8, [x19, #0x18]
000000010000b714	ldp	x29, x30, [sp, #0x10]
000000010000b718	ldp	x20, x19, [sp], #0x20
000000010000b71c	ret
000000010000b720	stp	x22, x21, [sp, #-0x30]!
000000010000b724	stp	x20, x19, [sp, #0x10]
000000010000b728	stp	x29, x30, [sp, #0x20]
000000010000b72c	add	x29, sp, #0x20
000000010000b730	mov	x19, x1
000000010000b734	mov	x20, x0
000000010000b738	ldr	w8, [x20]
000000010000b73c	tbnz	w8, #0x1f, 0x10000b794
000000010000b740	ldr	w8, [x20, #0x4]
000000010000b744	cmp	w8, #0xa8
000000010000b748	b.ne	0x10000b794
000000010000b74c	add	x21, x20, #0x20
000000010000b750	orr	w2, wzr, #0x80
000000010000b754	mov	w1, #0x0
000000010000b758	mov	x0, x21
000000010000b75c	bl	0x100031310 ; symbol stub for: _memchr
000000010000b760	cbz	x0, 0x10000b794
000000010000b764	add	x2, x19, #0x1c
000000010000b768	nop
000000010000b76c	ldr	d0, 0x10003dea0
000000010000b770	str	d0, [x19, #0x20]
000000010000b774	ldr	w0, [x20, #0xc]
000000010000b778	add	x3, x19, #0x30
000000010000b77c	ldr	x4, [x20, #0xa0]
000000010000b780	mov	x1, x21
000000010000b784	bl	0x100019c74
000000010000b788	cbz	w0, 0x10000b7bc
000000010000b78c	str	w0, [x19, #0x20]
000000010000b790	b	0x10000b79c
000000010000b794	mov	w8, #-0x130
000000010000b798	str	w8, [x19, #0x20]
000000010000b79c	nop
000000010000b7a0	ldr	x8, #0x34860 ; literal pool symbol address: _NDR_record
000000010000b7a4	ldr	x8, [x8]
000000010000b7a8	str	x8, [x19, #0x18]
000000010000b7ac	ldp	x29, x30, [sp, #0x20]
000000010000b7b0	ldp	x20, x19, [sp, #0x10]
000000010000b7b4	ldp	x22, x21, [sp], #0x30
000000010000b7b8	ret
000000010000b7bc	nop
000000010000b7c0	ldr	x8, #0x34840 ; literal pool symbol address: _NDR_record
000000010000b7c4	ldr	x8, [x8]
000000010000b7c8	str	x8, [x19, #0x28]
000000010000b7cc	ldr	w8, [x19]
000000010000b7d0	orr	w8, w8, #0x80000000
000000010000b7d4	str	w8, [x19]
000000010000b7d8	orr	w8, wzr, #0x40
000000010000b7dc	str	w8, [x19, #0x4]
000000010000b7e0	orr	w8, wzr, #0x1
000000010000b7e4	str	w8, [x19, #0x18]
000000010000b7e8	b	0x10000b7ac
000000010000b7ec	stp	x22, x21, [sp, #-0x30]!
000000010000b7f0	stp	x20, x19, [sp, #0x10]
000000010000b7f4	stp	x29, x30, [sp, #0x20]
000000010000b7f8	add	x29, sp, #0x20
000000010000b7fc	mov	x19, x1
000000010000b800	mov	x20, x0
000000010000b804	ldr	w8, [x20]
000000010000b808	tbz	w8, #0x1f, 0x10000b864
000000010000b80c	ldr	w8, [x20, #0x18]
000000010000b810	cmp	w8, #0x1
000000010000b814	b.ne	0x10000b864
000000010000b818	ldr	w8, [x20, #0x4]
000000010000b81c	cmp	w8, #0xb8
000000010000b820	b.ne	0x10000b864
000000010000b824	ldr	w8, [x20, #0x24]
000000010000b828	and	w8, w8, #0xffff0000
000000010000b82c	cmp	w8, #0x110, lsl #12
000000010000b830	b.ne	0x10000b88c
000000010000b834	add	x21, x20, #0x30
000000010000b838	orr	w2, wzr, #0x80
000000010000b83c	mov	w1, #0x0
000000010000b840	mov	x0, x21
000000010000b844	bl	0x100031310 ; symbol stub for: _memchr
000000010000b848	cbz	x0, 0x10000b864
000000010000b84c	ldr	w0, [x20, #0xc]
000000010000b850	ldr	w2, [x20, #0x1c]
000000010000b854	ldr	x3, [x20, #0xb0]
000000010000b858	mov	x1, x21
000000010000b85c	bl	0x100019c7c
000000010000b860	b	0x10000b868
000000010000b864	mov	w0, #-0x130
000000010000b868	str	w0, [x19, #0x20]
000000010000b86c	nop
000000010000b870	ldr	x8, #0x34790 ; literal pool symbol address: _NDR_record
000000010000b874	ldr	x8, [x8]
000000010000b878	str	x8, [x19, #0x18]
000000010000b87c	ldp	x29, x30, [sp, #0x20]
000000010000b880	ldp	x20, x19, [sp, #0x10]
000000010000b884	ldp	x22, x21, [sp], #0x30
000000010000b888	ret
000000010000b88c	mov	w0, #-0x12c
000000010000b890	b	0x10000b868
000000010000b894	stp	x22, x21, [sp, #-0x30]!
000000010000b898	stp	x20, x19, [sp, #0x10]
000000010000b89c	stp	x29, x30, [sp, #0x20]
000000010000b8a0	add	x29, sp, #0x20
000000010000b8a4	mov	x19, x1
000000010000b8a8	mov	x20, x0
000000010000b8ac	ldr	w8, [x20]
000000010000b8b0	tbnz	w8, #0x1f, 0x10000b90c
000000010000b8b4	ldr	w8, [x20, #0x4]
000000010000b8b8	cmp	w8, #0xbc
000000010000b8bc	b.ne	0x10000b90c
000000010000b8c0	add	x21, x20, #0x20
000000010000b8c4	orr	w2, wzr, #0x80
000000010000b8c8	mov	w1, #0x0
000000010000b8cc	mov	x0, x21
000000010000b8d0	bl	0x100031310 ; symbol stub for: _memchr
000000010000b8d4	cbz	x0, 0x10000b90c
000000010000b8d8	add	x3, x19, #0x1c
000000010000b8dc	nop
000000010000b8e0	ldr	d0, 0x10003de98
000000010000b8e4	str	d0, [x19, #0x20]
000000010000b8e8	ldp	w1, w0, [x20, #0x8]
000000010000b8ec	ldr	w4, [x20, #0xa0]
000000010000b8f0	add	x5, x20, #0xa4
000000010000b8f4	ldur	x6, [x20, #0xb4]
000000010000b8f8	mov	x2, x21
000000010000b8fc	bl	0x100019c8c
000000010000b900	cbz	w0, 0x10000b934
000000010000b904	str	w0, [x19, #0x20]
000000010000b908	b	0x10000b914
000000010000b90c	mov	w8, #-0x130
000000010000b910	str	w8, [x19, #0x20]
000000010000b914	nop
000000010000b918	ldr	x8, #0x346e8 ; literal pool symbol address: _NDR_record
000000010000b91c	ldr	x8, [x8]
000000010000b920	str	x8, [x19, #0x18]
000000010000b924	ldp	x29, x30, [sp, #0x20]
000000010000b928	ldp	x20, x19, [sp, #0x10]
000000010000b92c	ldp	x22, x21, [sp], #0x30
000000010000b930	ret
000000010000b934	ldr	w8, [x19]
000000010000b938	orr	w8, w8, #0x80000000
000000010000b93c	str	w8, [x19]
000000010000b940	mov	w8, #0x28
000000010000b944	str	w8, [x19, #0x4]
000000010000b948	orr	w8, wzr, #0x1
000000010000b94c	str	w8, [x19, #0x18]
000000010000b950	b	0x10000b924
000000010000b954	stp	x22, x21, [sp, #-0x30]!
000000010000b958	stp	x20, x19, [sp, #0x10]
000000010000b95c	stp	x29, x30, [sp, #0x20]
000000010000b960	add	x29, sp, #0x20
000000010000b964	mov	x19, x1
000000010000b968	mov	x20, x0
000000010000b96c	ldr	w8, [x20]
000000010000b970	tbnz	w8, #0x1f, 0x10000b9ac
000000010000b974	ldr	w8, [x20, #0x4]
000000010000b978	cmp	w8, #0xa4
000000010000b97c	b.ne	0x10000b9ac
000000010000b980	add	x21, x20, #0x20
000000010000b984	orr	w2, wzr, #0x80
000000010000b988	mov	w1, #0x0
000000010000b98c	mov	x0, x21
000000010000b990	bl	0x100031310 ; symbol stub for: _memchr
000000010000b994	cbz	x0, 0x10000b9ac
000000010000b998	ldp	w1, w0, [x20, #0x8]
000000010000b99c	ldr	w3, [x20, #0xa0]
000000010000b9a0	mov	x2, x21
000000010000b9a4	bl	0x100019c94
000000010000b9a8	b	0x10000b9b0
000000010000b9ac	mov	w0, #-0x130
000000010000b9b0	str	w0, [x19, #0x20]
000000010000b9b4	nop
000000010000b9b8	ldr	x8, #0x34648 ; literal pool symbol address: _NDR_record
000000010000b9bc	ldr	x8, [x8]
000000010000b9c0	str	x8, [x19, #0x18]
000000010000b9c4	ldp	x29, x30, [sp, #0x20]
000000010000b9c8	ldp	x20, x19, [sp, #0x10]
000000010000b9cc	ldp	x22, x21, [sp], #0x30
000000010000b9d0	ret
000000010000b9d4	stp	x20, x19, [sp, #-0x20]!
000000010000b9d8	stp	x29, x30, [sp, #0x10]
000000010000b9dc	add	x29, sp, #0x10
000000010000b9e0	mov	x19, x1
000000010000b9e4	ldr	w8, [x0]
000000010000b9e8	tbnz	w8, #0x1f, 0x10000ba1c
000000010000b9ec	ldr	w8, [x0, #0x4]
000000010000b9f0	cmp	w8, #0x18
000000010000b9f4	b.ne	0x10000ba1c
000000010000b9f8	add	x2, x19, #0x1c
000000010000b9fc	nop
000000010000ba00	ldr	d0, 0x10003dea8
000000010000ba04	str	d0, [x19, #0x20]
000000010000ba08	ldp	w1, w0, [x0, #0x8]
000000010000ba0c	bl	0x100019c9c
000000010000ba10	cbz	w0, 0x10000ba40
000000010000ba14	str	w0, [x19, #0x20]
000000010000ba18	b	0x10000ba24
000000010000ba1c	mov	w8, #-0x130
000000010000ba20	str	w8, [x19, #0x20]
000000010000ba24	nop
000000010000ba28	ldr	x8, #0x345d8 ; literal pool symbol address: _NDR_record
000000010000ba2c	ldr	x8, [x8]
000000010000ba30	str	x8, [x19, #0x18]
000000010000ba34	ldp	x29, x30, [sp, #0x10]
000000010000ba38	ldp	x20, x19, [sp], #0x20
000000010000ba3c	ret
000000010000ba40	ldr	w8, [x19]
000000010000ba44	orr	w8, w8, #0x80000000
000000010000ba48	str	w8, [x19]
000000010000ba4c	mov	w8, #0x28
000000010000ba50	str	w8, [x19, #0x4]
000000010000ba54	orr	w8, wzr, #0x1
000000010000ba58	str	w8, [x19, #0x18]
000000010000ba5c	b	0x10000ba34
000000010000ba60	stp	x20, x19, [sp, #-0x20]!
000000010000ba64	stp	x29, x30, [sp, #0x10]
000000010000ba68	add	x29, sp, #0x10
000000010000ba6c	mov	x19, x1
000000010000ba70	ldr	w8, [x0]
000000010000ba74	tbz	w8, #0x1f, 0x10000bacc
000000010000ba78	ldr	w8, [x0, #0x18]
000000010000ba7c	cmp	w8, #0x1
000000010000ba80	b.ne	0x10000bacc
000000010000ba84	ldr	w8, [x0, #0x4]
000000010000ba88	cmp	w8, #0x28
000000010000ba8c	b.ne	0x10000bacc
000000010000ba90	ldr	w8, [x0, #0x24]
000000010000ba94	and	w8, w8, #0xffff0000
000000010000ba98	cmp	w8, #0x110, lsl #12
000000010000ba9c	b.ne	0x10000baf0
000000010000baa0	add	x2, x19, #0x1c
000000010000baa4	nop
000000010000baa8	ldr	d0, 0x10003de98
000000010000baac	str	d0, [x19, #0x20]
000000010000bab0	ldr	w8, [x0, #0xc]
000000010000bab4	ldr	w1, [x0, #0x1c]
000000010000bab8	mov	x0, x8
000000010000babc	bl	0x100019ca4
000000010000bac0	cbz	w0, 0x10000baf8
000000010000bac4	str	w0, [x19, #0x20]
000000010000bac8	b	0x10000bad4
000000010000bacc	mov	w8, #-0x130
000000010000bad0	str	w8, [x19, #0x20]
000000010000bad4	nop
000000010000bad8	ldr	x8, #0x34528 ; literal pool symbol address: _NDR_record
000000010000badc	ldr	x8, [x8]
000000010000bae0	str	x8, [x19, #0x18]
000000010000bae4	ldp	x29, x30, [sp, #0x10]
000000010000bae8	ldp	x20, x19, [sp], #0x20
000000010000baec	ret
000000010000baf0	mov	w8, #-0x12c
000000010000baf4	b	0x10000bad0
000000010000baf8	ldr	w8, [x19]
000000010000bafc	orr	w8, w8, #0x80000000
000000010000bb00	str	w8, [x19]
000000010000bb04	mov	w8, #0x28
000000010000bb08	str	w8, [x19, #0x4]
000000010000bb0c	orr	w8, wzr, #0x1
000000010000bb10	str	w8, [x19, #0x18]
000000010000bb14	b	0x10000bae4
000000010000bb18	stp	x20, x19, [sp, #-0x20]!
000000010000bb1c	stp	x29, x30, [sp, #0x10]
000000010000bb20	add	x29, sp, #0x10
000000010000bb24	mov	x19, x1
000000010000bb28	ldr	w8, [x0]
000000010000bb2c	tbnz	w8, #0x1f, 0x10000bb84
000000010000bb30	ldr	w8, [x0, #0x4]
000000010000bb34	cmp	w8, #0x28
000000010000bb38	b.ne	0x10000bb84
000000010000bb3c	add	x1, x19, #0x1c
000000010000bb40	mov	w8, #0x101
000000010000bb44	movk	w8, #0x100, lsl #16
000000010000bb48	str	w8, [x19, #0x24]
000000010000bb4c	add	x3, x19, #0x2c
000000010000bb50	str	w8, [x19, #0x34]
000000010000bb54	add	x5, x19, #0x3c
000000010000bb58	str	w8, [x19, #0x44]
000000010000bb5c	ldr	w8, [x0, #0xc]
000000010000bb60	add	x2, x19, #0x54
000000010000bb64	add	x4, x19, #0x58
000000010000bb68	add	x6, x19, #0x5c
000000010000bb6c	ldr	x7, [x0, #0x20]
000000010000bb70	mov	x0, x8
000000010000bb74	bl	0x100019cac
000000010000bb78	cbz	w0, 0x10000bba8
000000010000bb7c	str	w0, [x19, #0x20]
000000010000bb80	b	0x10000bb8c
000000010000bb84	mov	w8, #-0x130
000000010000bb88	str	w8, [x19, #0x20]
000000010000bb8c	nop
000000010000bb90	ldr	x8, #0x34470 ; literal pool symbol address: _NDR_record
000000010000bb94	ldr	x8, [x8]
000000010000bb98	str	x8, [x19, #0x18]
000000010000bb9c	ldp	x29, x30, [sp, #0x10]
000000010000bba0	ldp	x20, x19, [sp], #0x20
000000010000bba4	ret
000000010000bba8	ldp	w8, w9, [x19, #0x54]
000000010000bbac	lsl	w8, w8, #7
000000010000bbb0	str	w8, [x19, #0x28]
000000010000bbb4	lsl	w8, w9, #7
000000010000bbb8	str	w8, [x19, #0x38]
000000010000bbbc	ldr	w8, [x19, #0x5c]
000000010000bbc0	lsl	w8, w8, #2
000000010000bbc4	str	w8, [x19, #0x48]
000000010000bbc8	nop
000000010000bbcc	ldr	x8, #0x34434 ; literal pool symbol address: _NDR_record
000000010000bbd0	ldr	x8, [x8]
000000010000bbd4	stur	x8, [x19, #0x4c]
000000010000bbd8	ldr	w8, [x19]
000000010000bbdc	orr	w8, w8, #0x80000000
000000010000bbe0	str	w8, [x19]
000000010000bbe4	orr	w8, wzr, #0x60
000000010000bbe8	str	w8, [x19, #0x4]
000000010000bbec	orr	w8, wzr, #0x3
000000010000bbf0	str	w8, [x19, #0x18]
000000010000bbf4	b	0x10000bb9c
000000010000bbf8	stp	x20, x19, [sp, #-0x20]!
000000010000bbfc	stp	x29, x30, [sp, #0x10]
000000010000bc00	add	x29, sp, #0x10
000000010000bc04	mov	x19, x1
000000010000bc08	ldr	w8, [x0]
000000010000bc0c	tbz	w8, #0x1f, 0x10000bc64
000000010000bc10	ldr	w8, [x0, #0x18]
000000010000bc14	cmp	w8, #0x1
000000010000bc18	b.ne	0x10000bc64
000000010000bc1c	ldr	w8, [x0, #0x4]
000000010000bc20	cmp	w8, #0x28
000000010000bc24	b.ne	0x10000bc64
000000010000bc28	ldr	w8, [x0, #0x24]
000000010000bc2c	and	w8, w8, #0xffff0000
000000010000bc30	cmp	w8, #0x110, lsl #12
000000010000bc34	b.ne	0x10000bc88
000000010000bc38	add	x2, x19, #0x1c
000000010000bc3c	nop
000000010000bc40	ldr	d0, 0x10003dea8
000000010000bc44	str	d0, [x19, #0x20]
000000010000bc48	ldr	w8, [x0, #0xc]
000000010000bc4c	ldr	w1, [x0, #0x1c]
000000010000bc50	mov	x0, x8
000000010000bc54	bl	0x100019cb4
000000010000bc58	cbz	w0, 0x10000bc90
000000010000bc5c	str	w0, [x19, #0x20]
000000010000bc60	b	0x10000bc6c
000000010000bc64	mov	w8, #-0x130
000000010000bc68	str	w8, [x19, #0x20]
000000010000bc6c	nop
000000010000bc70	ldr	x8, #0x34390 ; literal pool symbol address: _NDR_record
000000010000bc74	ldr	x8, [x8]
000000010000bc78	str	x8, [x19, #0x18]
000000010000bc7c	ldp	x29, x30, [sp, #0x10]
000000010000bc80	ldp	x20, x19, [sp], #0x20
000000010000bc84	ret
000000010000bc88	mov	w8, #-0x12c
000000010000bc8c	b	0x10000bc68
000000010000bc90	ldr	w8, [x19]
000000010000bc94	orr	w8, w8, #0x80000000
000000010000bc98	str	w8, [x19]
000000010000bc9c	mov	w8, #0x28
000000010000bca0	str	w8, [x19, #0x4]
000000010000bca4	orr	w8, wzr, #0x1
000000010000bca8	str	w8, [x19, #0x18]
000000010000bcac	b	0x10000bc7c
000000010000bcb0	stp	x20, x19, [sp, #-0x20]!
000000010000bcb4	stp	x29, x30, [sp, #0x10]
000000010000bcb8	add	x29, sp, #0x10
000000010000bcbc	mov	x19, x1
000000010000bcc0	ldr	w8, [x0]
000000010000bcc4	tbnz	w8, #0x1f, 0x10000bd40
000000010000bcc8	ldr	w8, [x0, #0x4]
000000010000bccc	cmp	w8, #0x18
000000010000bcd0	b.ne	0x10000bd40
000000010000bcd4	mov	x6, x19
000000010000bcd8	str	wzr, [x6, #0x60]!
000000010000bcdc	sub	x1, x6, #0x44
000000010000bce0	nop
000000010000bce4	ldr	d0, 0x10003deb0
000000010000bce8	stur	d0, [x6, #-0x40]
000000010000bcec	sub	x2, x6, #0x38
000000010000bcf0	nop
000000010000bcf4	ldr	d0, 0x10003dea0
000000010000bcf8	stur	d0, [x6, #-0x34]
000000010000bcfc	sub	x3, x6, #0x2c
000000010000bd00	mov	w8, #0x101
000000010000bd04	movk	w8, #0x100, lsl #16
000000010000bd08	stur	w8, [x6, #-0x24]
000000010000bd0c	sub	x5, x6, #0x1c
000000010000bd10	ldur	w8, [x6, #-0x14]
000000010000bd14	and	w8, w8, #0xff00
000000010000bd18	mov	w9, #0x1
000000010000bd1c	movk	w9, #0x211, lsl #16
000000010000bd20	orr	w8, w8, w9
000000010000bd24	stur	w8, [x6, #-0x14]
000000010000bd28	ldr	w0, [x0, #0xc]
000000010000bd2c	sub	x4, x6, #0x4
000000010000bd30	bl	0x100019cbc
000000010000bd34	cbz	w0, 0x10000bd64
000000010000bd38	str	w0, [x19, #0x20]
000000010000bd3c	b	0x10000bd48
000000010000bd40	mov	w8, #-0x130
000000010000bd44	str	w8, [x19, #0x20]
000000010000bd48	nop
000000010000bd4c	ldr	x8, #0x342b4 ; literal pool symbol address: _NDR_record
000000010000bd50	ldr	x8, [x8]
000000010000bd54	str	x8, [x19, #0x18]
000000010000bd58	ldp	x29, x30, [sp, #0x10]
000000010000bd5c	ldp	x20, x19, [sp], #0x20
000000010000bd60	ret
000000010000bd64	ldp	w8, w9, [x19, #0x5c]
000000010000bd68	str	w8, [x19, #0x40]
000000010000bd6c	str	w9, [x19, #0x50]
000000010000bd70	nop
000000010000bd74	ldr	x8, #0x3428c ; literal pool symbol address: _NDR_record
000000010000bd78	ldr	x8, [x8]
000000010000bd7c	stur	x8, [x19, #0x54]
000000010000bd80	ldr	w8, [x19]
000000010000bd84	orr	w8, w8, #0x80000000
000000010000bd88	str	w8, [x19]
000000010000bd8c	mov	w8, #0x64
000000010000bd90	str	w8, [x19, #0x4]
000000010000bd94	orr	w8, wzr, #0x4
000000010000bd98	str	w8, [x19, #0x18]
000000010000bd9c	b	0x10000bd58
000000010000bda0	stp	x20, x19, [sp, #-0x20]!
000000010000bda4	stp	x29, x30, [sp, #0x10]
000000010000bda8	add	x29, sp, #0x10
000000010000bdac	mov	x19, x1
000000010000bdb0	ldr	w8, [x0]
000000010000bdb4	tbnz	w8, #0x1f, 0x10000bde0
000000010000bdb8	ldr	w8, [x0, #0x4]
000000010000bdbc	cmp	w8, #0x18
000000010000bdc0	b.ne	0x10000bde0
000000010000bdc4	ldr	w0, [x0, #0xc]
000000010000bdc8	add	x1, x19, #0x24
000000010000bdcc	bl	0x100019cc4
000000010000bdd0	str	w0, [x19, #0x20]
000000010000bdd4	cbz	w0, 0x10000be04
000000010000bdd8	str	w0, [x19, #0x20]
000000010000bddc	b	0x10000bde8
000000010000bde0	mov	w8, #-0x130
000000010000bde4	str	w8, [x19, #0x20]
000000010000bde8	nop
000000010000bdec	ldr	x8, #0x34214 ; literal pool symbol address: _NDR_record
000000010000bdf0	ldr	x8, [x8]
000000010000bdf4	str	x8, [x19, #0x18]
000000010000bdf8	ldp	x29, x30, [sp, #0x10]
000000010000bdfc	ldp	x20, x19, [sp], #0x20
000000010000be00	ret
000000010000be04	nop
000000010000be08	ldr	x8, #0x341f8 ; literal pool symbol address: _NDR_record
000000010000be0c	ldr	x8, [x8]
000000010000be10	str	x8, [x19, #0x18]
000000010000be14	mov	w8, #0xa4
000000010000be18	str	w8, [x19, #0x4]
000000010000be1c	b	0x10000bdf8
000000010000be20	stp	x20, x19, [sp, #-0x20]!
000000010000be24	stp	x29, x30, [sp, #0x10]
000000010000be28	add	x29, sp, #0x10
000000010000be2c	mov	x19, x1
000000010000be30	ldr	w8, [x0]
000000010000be34	tbnz	w8, #0x1f, 0x10000be6c
000000010000be38	ldr	w8, [x0, #0x4]
000000010000be3c	cmp	w8, #0x30
000000010000be40	b.ne	0x10000be6c
000000010000be44	ldr	w8, [x0, #0xc]
000000010000be48	ldp	w1, w2, [x0, #0x20]
000000010000be4c	add	x4, x19, #0x24
000000010000be50	ldr	x3, [x0, #0x28]
000000010000be54	mov	x0, x8
000000010000be58	bl	0x100019ccc
000000010000be5c	str	w0, [x19, #0x20]
000000010000be60	cbz	w0, 0x10000be90
000000010000be64	str	w0, [x19, #0x20]
000000010000be68	b	0x10000be74
000000010000be6c	mov	w8, #-0x130
000000010000be70	str	w8, [x19, #0x20]
000000010000be74	nop
000000010000be78	ldr	x8, #0x34188 ; literal pool symbol address: _NDR_record
000000010000be7c	ldr	x8, [x8]
000000010000be80	str	x8, [x19, #0x18]
000000010000be84	ldp	x29, x30, [sp, #0x10]
000000010000be88	ldp	x20, x19, [sp], #0x20
000000010000be8c	ret
000000010000be90	nop
000000010000be94	ldr	x8, #0x3416c ; literal pool symbol address: _NDR_record
000000010000be98	ldr	x8, [x8]
000000010000be9c	str	x8, [x19, #0x18]
000000010000bea0	mov	w8, #0x2c
000000010000bea4	str	w8, [x19, #0x4]
000000010000bea8	b	0x10000be84
000000010000beac	stp	x22, x21, [sp, #-0x30]!
000000010000beb0	stp	x20, x19, [sp, #0x10]
000000010000beb4	stp	x29, x30, [sp, #0x20]
000000010000beb8	add	x29, sp, #0x20
000000010000bebc	mov	x19, x1
000000010000bec0	mov	x20, x0
000000010000bec4	ldr	w8, [x20, #0x4]
000000010000bec8	sub	w9, w8, #0x30
000000010000becc	mov	w0, #-0x130
000000010000bed0	cmp	w9, #0x800
000000010000bed4	b.hi	0x10000bf3c
000000010000bed8	ldr	w10, [x20]
000000010000bedc	tbnz	w10, #0x1f, 0x10000bf3c
000000010000bee0	ldr	w10, [x20, #0x2c]
000000010000bee4	cmp	w10, #0x800
000000010000bee8	ccmp	w9, w10, #0x0, ls
000000010000beec	b.lo	0x10000bf38
000000010000bef0	add	w9, w10, #0x33
000000010000bef4	and	w9, w9, #0xfffffffc
000000010000bef8	cmp	w8, w9
000000010000befc	b.ne	0x10000bf38
000000010000bf00	add	x21, x20, #0x30
000000010000bf04	sub	x9, x8, #0x30
000000010000bf08	cmp	w8, #0x830
000000010000bf0c	orr	w8, wzr, #0x800
000000010000bf10	csel	x2, x9, x8, lo
000000010000bf14	mov	w1, #0x0
000000010000bf18	mov	x0, x21
000000010000bf1c	bl	0x100031310 ; symbol stub for: _memchr
000000010000bf20	cbz	x0, 0x10000bf38
000000010000bf24	ldr	w0, [x20, #0xc]
000000010000bf28	ldp	w1, w2, [x20, #0x20]
000000010000bf2c	mov	x3, x21
000000010000bf30	bl	0x100019cd4
000000010000bf34	b	0x10000bf3c
000000010000bf38	mov	w0, #-0x130
000000010000bf3c	str	w0, [x19, #0x20]
000000010000bf40	nop
000000010000bf44	ldr	x8, #0x340bc ; literal pool symbol address: _NDR_record
000000010000bf48	ldr	x8, [x8]
000000010000bf4c	str	x8, [x19, #0x18]
000000010000bf50	ldp	x29, x30, [sp, #0x20]
000000010000bf54	ldp	x20, x19, [sp, #0x10]
000000010000bf58	ldp	x22, x21, [sp], #0x30
000000010000bf5c	ret
000000010000bf60	stp	x20, x19, [sp, #-0x20]!
000000010000bf64	stp	x29, x30, [sp, #0x10]
000000010000bf68	add	x29, sp, #0x10
000000010000bf6c	mov	x19, x1
000000010000bf70	ldr	w8, [x0]
000000010000bf74	tbnz	w8, #0x1f, 0x10000bfb0
000000010000bf78	ldr	w8, [x0, #0x4]
000000010000bf7c	cmp	w8, #0x24
000000010000bf80	b.ne	0x10000bfb0
000000010000bf84	add	x2, x19, #0x1c
000000010000bf88	nop
000000010000bf8c	ldr	d0, 0x10003de98
000000010000bf90	str	d0, [x19, #0x20]
000000010000bf94	ldr	w8, [x0, #0xc]
000000010000bf98	ldr	w1, [x0, #0x20]
000000010000bf9c	mov	x0, x8
000000010000bfa0	bl	0x100019cdc
000000010000bfa4	cbz	w0, 0x10000bfd4
000000010000bfa8	str	w0, [x19, #0x20]
000000010000bfac	b	0x10000bfb8
000000010000bfb0	mov	w8, #-0x130
000000010000bfb4	str	w8, [x19, #0x20]
000000010000bfb8	nop
000000010000bfbc	ldr	x8, #0x34044 ; literal pool symbol address: _NDR_record
000000010000bfc0	ldr	x8, [x8]
000000010000bfc4	str	x8, [x19, #0x18]
000000010000bfc8	ldp	x29, x30, [sp, #0x10]
000000010000bfcc	ldp	x20, x19, [sp], #0x20
000000010000bfd0	ret
000000010000bfd4	ldr	w8, [x19]
000000010000bfd8	orr	w8, w8, #0x80000000
000000010000bfdc	str	w8, [x19]
000000010000bfe0	mov	w8, #0x28
000000010000bfe4	str	w8, [x19, #0x4]
000000010000bfe8	orr	w8, wzr, #0x1
000000010000bfec	str	w8, [x19, #0x18]
000000010000bff0	b	0x10000bfc8
000000010000bff4	stp	x22, x21, [sp, #-0x30]!
000000010000bff8	stp	x20, x19, [sp, #0x10]
000000010000bffc	stp	x29, x30, [sp, #0x20]
000000010000c000	add	x29, sp, #0x20
000000010000c004	mov	x19, x1
000000010000c008	mov	x20, x0
000000010000c00c	ldr	w8, [x20]
000000010000c010	tbz	w8, #0x1f, 0x10000c080
000000010000c014	ldr	w8, [x20, #0x18]
000000010000c018	cmp	w8, #0x2
000000010000c01c	b.ne	0x10000c080
000000010000c020	ldr	w8, [x20, #0x4]
000000010000c024	cmp	w8, #0xc4
000000010000c028	b.ne	0x10000c080
000000010000c02c	ldr	w8, [x20, #0x24]
000000010000c030	and	w8, w8, #0xffff0000
000000010000c034	cmp	w8, #0x110, lsl #12
000000010000c038	b.ne	0x10000c0a8
000000010000c03c	ldr	w9, [x20, #0x30]
000000010000c040	and	w9, w9, #0xffff0000
000000010000c044	cmp	w9, w8
000000010000c048	b.ne	0x10000c0a8
000000010000c04c	add	x21, x20, #0x3c
000000010000c050	orr	w2, wzr, #0x80
000000010000c054	mov	w1, #0x0
000000010000c058	mov	x0, x21
000000010000c05c	bl	0x100031310 ; symbol stub for: _memchr
000000010000c060	cbz	x0, 0x10000c080
000000010000c064	ldr	w0, [x20, #0xc]
000000010000c068	ldr	w1, [x20, #0x1c]
000000010000c06c	ldr	w3, [x20, #0x28]
000000010000c070	ldur	x4, [x20, #0xbc]
000000010000c074	mov	x2, x21
000000010000c078	bl	0x100019ce4
000000010000c07c	b	0x10000c084
000000010000c080	mov	w0, #-0x130
000000010000c084	str	w0, [x19, #0x20]
000000010000c088	nop
000000010000c08c	ldr	x8, #0x33f74 ; literal pool symbol address: _NDR_record
000000010000c090	ldr	x8, [x8]
000000010000c094	str	x8, [x19, #0x18]
000000010000c098	ldp	x29, x30, [sp, #0x20]
000000010000c09c	ldp	x20, x19, [sp, #0x10]
000000010000c0a0	ldp	x22, x21, [sp], #0x30
000000010000c0a4	ret
000000010000c0a8	mov	w0, #-0x12c
000000010000c0ac	b	0x10000c084
000000010000c0b0	stp	x20, x19, [sp, #-0x20]!
000000010000c0b4	stp	x29, x30, [sp, #0x10]
000000010000c0b8	add	x29, sp, #0x10
000000010000c0bc	mov	x19, x1
000000010000c0c0	ldr	w8, [x0]
000000010000c0c4	tbz	w8, #0x1f, 0x10000c134
000000010000c0c8	ldr	w8, [x0, #0x18]
000000010000c0cc	cmp	w8, #0x1
000000010000c0d0	b.ne	0x10000c134
000000010000c0d4	ldr	w8, [x0, #0x4]
000000010000c0d8	cmp	w8, #0x40
000000010000c0dc	b.ne	0x10000c134
000000010000c0e0	ldrb	w8, [x0, #0x27]
000000010000c0e4	cmp	w8, #0x1
000000010000c0e8	b.ne	0x10000c158
000000010000c0ec	ldr	w8, [x0, #0x28]
000000010000c0f0	ldr	w9, [x0, #0x3c]
000000010000c0f4	cmp	w8, w9
000000010000c0f8	b.ne	0x10000c158
000000010000c0fc	add	x5, x19, #0x1c
000000010000c100	mov	w8, #0x101
000000010000c104	movk	w8, #0x100, lsl #16
000000010000c108	str	w8, [x19, #0x24]
000000010000c10c	ldr	w8, [x0, #0xc]
000000010000c110	ldp	w1, w2, [x0, #0x34]
000000010000c114	ldur	x3, [x0, #0x1c]
000000010000c118	ldr	w4, [x0, #0x28]
000000010000c11c	add	x6, x19, #0x34
000000010000c120	mov	x0, x8
000000010000c124	bl	0x100019cec
000000010000c128	cbz	w0, 0x10000c160
000000010000c12c	str	w0, [x19, #0x20]
000000010000c130	b	0x10000c13c
000000010000c134	mov	w8, #-0x130
000000010000c138	str	w8, [x19, #0x20]
000000010000c13c	nop
000000010000c140	ldr	x8, #0x33ec0 ; literal pool symbol address: _NDR_record
000000010000c144	ldr	x8, [x8]
000000010000c148	str	x8, [x19, #0x18]
000000010000c14c	ldp	x29, x30, [sp, #0x10]
000000010000c150	ldp	x20, x19, [sp], #0x20
000000010000c154	ret
000000010000c158	mov	w8, #-0x12c
000000010000c15c	b	0x10000c138
000000010000c160	ldr	w8, [x19, #0x34]
000000010000c164	str	w8, [x19, #0x28]
000000010000c168	nop
000000010000c16c	ldr	x8, #0x33e94 ; literal pool symbol address: _NDR_record
000000010000c170	ldr	x8, [x8]
000000010000c174	stur	x8, [x19, #0x2c]
000000010000c178	ldr	w8, [x19]
000000010000c17c	orr	w8, w8, #0x80000000
000000010000c180	str	w8, [x19]
000000010000c184	orr	w8, wzr, #0x38
000000010000c188	str	w8, [x19, #0x4]
000000010000c18c	orr	w8, wzr, #0x1
000000010000c190	str	w8, [x19, #0x18]
000000010000c194	b	0x10000c14c
000000010000c198	stp	x20, x19, [sp, #-0x20]!
000000010000c19c	stp	x29, x30, [sp, #0x10]
000000010000c1a0	add	x29, sp, #0x10
000000010000c1a4	mov	x19, x1
000000010000c1a8	ldr	w8, [x0]
000000010000c1ac	tbnz	w8, #0x1f, 0x10000c1e4
000000010000c1b0	ldr	w8, [x0, #0x4]
000000010000c1b4	cmp	w8, #0x18
000000010000c1b8	b.ne	0x10000c1e4
000000010000c1bc	add	x2, x19, #0x1c
000000010000c1c0	mov	w8, #0x101
000000010000c1c4	movk	w8, #0x100, lsl #16
000000010000c1c8	str	w8, [x19, #0x24]
000000010000c1cc	ldp	w1, w0, [x0, #0x8]
000000010000c1d0	add	x3, x19, #0x34
000000010000c1d4	bl	0x100019cf4
000000010000c1d8	cbz	w0, 0x10000c208
000000010000c1dc	str	w0, [x19, #0x20]
000000010000c1e0	b	0x10000c1ec
000000010000c1e4	mov	w8, #-0x130
000000010000c1e8	str	w8, [x19, #0x20]
000000010000c1ec	nop
000000010000c1f0	ldr	x8, #0x33e10 ; literal pool symbol address: _NDR_record
000000010000c1f4	ldr	x8, [x8]
000000010000c1f8	str	x8, [x19, #0x18]
000000010000c1fc	ldp	x29, x30, [sp, #0x10]
000000010000c200	ldp	x20, x19, [sp], #0x20
000000010000c204	ret
000000010000c208	ldr	w8, [x19, #0x34]
000000010000c20c	str	w8, [x19, #0x28]
000000010000c210	nop
000000010000c214	ldr	x8, #0x33dec ; literal pool symbol address: _NDR_record
000000010000c218	ldr	x8, [x8]
000000010000c21c	stur	x8, [x19, #0x2c]
000000010000c220	ldr	w8, [x19]
000000010000c224	orr	w8, w8, #0x80000000
000000010000c228	str	w8, [x19]
000000010000c22c	orr	w8, wzr, #0x38
000000010000c230	str	w8, [x19, #0x4]
000000010000c234	orr	w8, wzr, #0x1
000000010000c238	str	w8, [x19, #0x18]
000000010000c23c	b	0x10000c1fc
000000010000c240	stp	x20, x19, [sp, #-0x20]!
000000010000c244	stp	x29, x30, [sp, #0x10]
000000010000c248	add	x29, sp, #0x10
000000010000c24c	mov	x19, x1
000000010000c250	ldr	w8, [x0]
000000010000c254	tbz	w8, #0x1f, 0x10000c2a0
000000010000c258	ldr	w8, [x0, #0x18]
000000010000c25c	cmp	w8, #0x1
000000010000c260	b.ne	0x10000c2a0
000000010000c264	ldr	w8, [x0, #0x4]
000000010000c268	cmp	w8, #0x38
000000010000c26c	b.ne	0x10000c2a0
000000010000c270	ldrb	w8, [x0, #0x27]
000000010000c274	cmp	w8, #0x1
000000010000c278	b.ne	0x10000c2c4
000000010000c27c	ldr	w2, [x0, #0x28]
000000010000c280	ldr	w8, [x0, #0x34]
000000010000c284	cmp	w2, w8
000000010000c288	b.ne	0x10000c2c4
000000010000c28c	ldr	w8, [x0, #0xc]
000000010000c290	ldur	x1, [x0, #0x1c]
000000010000c294	mov	x0, x8
000000010000c298	bl	0x100019cfc
000000010000c29c	b	0x10000c2a4
000000010000c2a0	mov	w0, #-0x130
000000010000c2a4	str	w0, [x19, #0x20]
000000010000c2a8	nop
000000010000c2ac	ldr	x8, #0x33d54 ; literal pool symbol address: _NDR_record
000000010000c2b0	ldr	x8, [x8]
000000010000c2b4	str	x8, [x19, #0x18]
000000010000c2b8	ldp	x29, x30, [sp, #0x10]
000000010000c2bc	ldp	x20, x19, [sp], #0x20
000000010000c2c0	ret
000000010000c2c4	mov	w0, #-0x12c
000000010000c2c8	b	0x10000c2a4
000000010000c2cc	stp	x22, x21, [sp, #-0x30]!
000000010000c2d0	stp	x20, x19, [sp, #0x10]
000000010000c2d4	stp	x29, x30, [sp, #0x20]
000000010000c2d8	add	x29, sp, #0x20
000000010000c2dc	mov	x19, x1
000000010000c2e0	mov	x20, x0
000000010000c2e4	ldr	w8, [x20]
000000010000c2e8	tbnz	w8, #0x1f, 0x10000c334
000000010000c2ec	ldr	w8, [x20, #0x4]
000000010000c2f0	cmp	w8, #0xa4
000000010000c2f4	b.ne	0x10000c334
000000010000c2f8	add	x21, x20, #0x20
000000010000c2fc	orr	w2, wzr, #0x80
000000010000c300	mov	w1, #0x0
000000010000c304	mov	x0, x21
000000010000c308	bl	0x100031310 ; symbol stub for: _memchr
000000010000c30c	cbz	x0, 0x10000c334
000000010000c310	ldr	w0, [x20, #0xc]
000000010000c314	add	x2, x19, #0x24
000000010000c318	ldr	w3, [x20, #0xa0]
000000010000c31c	mov	x1, x21
000000010000c320	bl	0x100019d04
000000010000c324	str	w0, [x19, #0x20]
000000010000c328	cbz	w0, 0x10000c35c
000000010000c32c	str	w0, [x19, #0x20]
000000010000c330	b	0x10000c33c
000000010000c334	mov	w8, #-0x130
000000010000c338	str	w8, [x19, #0x20]
000000010000c33c	nop
000000010000c340	ldr	x8, #0x33cc0 ; literal pool symbol address: _NDR_record
000000010000c344	ldr	x8, [x8]
000000010000c348	str	x8, [x19, #0x18]
000000010000c34c	ldp	x29, x30, [sp, #0x20]
000000010000c350	ldp	x20, x19, [sp, #0x10]
000000010000c354	ldp	x22, x21, [sp], #0x30
000000010000c358	ret
000000010000c35c	nop
000000010000c360	ldr	x8, #0x33ca0 ; literal pool symbol address: _NDR_record
000000010000c364	ldr	x8, [x8]
000000010000c368	str	x8, [x19, #0x18]
000000010000c36c	mov	w8, #0x28
000000010000c370	str	w8, [x19, #0x4]
000000010000c374	b	0x10000c34c
000000010000c378	stp	x20, x19, [sp, #-0x20]!
000000010000c37c	stp	x29, x30, [sp, #0x10]
000000010000c380	add	x29, sp, #0x10
000000010000c384	mov	x19, x1
000000010000c388	ldr	w8, [x0]
000000010000c38c	tbnz	w8, #0x1f, 0x10000c3f4
000000010000c390	ldr	w8, [x0, #0x4]
000000010000c394	cmp	w8, #0x18
000000010000c398	b.ne	0x10000c3f4
000000010000c39c	mov	x2, x19
000000010000c3a0	str	wzr, [x2, #0x54]!
000000010000c3a4	sub	x1, x2, #0x38
000000010000c3a8	ldur	w8, [x2, #-0x30]
000000010000c3ac	and	w8, w8, #0xff00
000000010000c3b0	mov	w9, #0x1
000000010000c3b4	movk	w9, #0x211, lsl #16
000000010000c3b8	orr	w8, w8, w9
000000010000c3bc	stur	w8, [x2, #-0x30]
000000010000c3c0	sub	x3, x2, #0x28
000000010000c3c4	mov	w8, #0x101
000000010000c3c8	movk	w8, #0x100, lsl #16
000000010000c3cc	stur	w8, [x2, #-0x20]
000000010000c3d0	sub	x5, x2, #0x18
000000010000c3d4	stur	w8, [x2, #-0x10]
000000010000c3d8	ldr	w0, [x0, #0xc]
000000010000c3dc	add	x4, x2, #0x4
000000010000c3e0	add	x6, x2, #0x8
000000010000c3e4	bl	0x100019d0c
000000010000c3e8	cbz	w0, 0x10000c418
000000010000c3ec	str	w0, [x19, #0x20]
000000010000c3f0	b	0x10000c3fc
000000010000c3f4	mov	w8, #-0x130
000000010000c3f8	str	w8, [x19, #0x20]
000000010000c3fc	nop
000000010000c400	ldr	x8, #0x33c00 ; literal pool symbol address: _NDR_record
000000010000c404	ldr	x8, [x8]
000000010000c408	str	x8, [x19, #0x18]
000000010000c40c	ldp	x29, x30, [sp, #0x10]
000000010000c410	ldp	x20, x19, [sp], #0x20
000000010000c414	ret
000000010000c418	ldp	w8, w9, [x19, #0x54]
000000010000c41c	str	w8, [x19, #0x28]
000000010000c420	lsl	w8, w9, #7
000000010000c424	str	w8, [x19, #0x38]
000000010000c428	ldr	w8, [x19, #0x5c]
000000010000c42c	lsl	w8, w8, #2
000000010000c430	str	w8, [x19, #0x48]
000000010000c434	nop
000000010000c438	ldr	x8, #0x33bc8 ; literal pool symbol address: _NDR_record
000000010000c43c	ldr	x8, [x8]
000000010000c440	stur	x8, [x19, #0x4c]
000000010000c444	ldr	w8, [x19]
000000010000c448	orr	w8, w8, #0x80000000
000000010000c44c	str	w8, [x19]
000000010000c450	orr	w8, wzr, #0x60
000000010000c454	str	w8, [x19, #0x4]
000000010000c458	orr	w8, wzr, #0x3
000000010000c45c	str	w8, [x19, #0x18]
000000010000c460	b	0x10000c40c
000000010000c464	stp	x22, x21, [sp, #-0x30]!
000000010000c468	stp	x20, x19, [sp, #0x10]
000000010000c46c	stp	x29, x30, [sp, #0x20]
000000010000c470	add	x29, sp, #0x20
000000010000c474	mov	x19, x1
000000010000c478	mov	x20, x0
000000010000c47c	ldr	w8, [x20]
000000010000c480	tbz	w8, #0x1f, 0x10000c504
000000010000c484	ldr	w8, [x20, #0x18]
000000010000c488	cmp	w8, #0x2
000000010000c48c	b.ne	0x10000c504
000000010000c490	ldr	w8, [x20, #0x4]
000000010000c494	cmp	w8, #0xbc
000000010000c498	b.ne	0x10000c504
000000010000c49c	ldr	w8, [x20, #0x24]
000000010000c4a0	and	w8, w8, #0xffff0000
000000010000c4a4	cmp	w8, #0x110, lsl #12
000000010000c4a8	b.ne	0x10000c52c
000000010000c4ac	ldr	w9, [x20, #0x30]
000000010000c4b0	and	w9, w9, #0xffff0000
000000010000c4b4	cmp	w9, w8
000000010000c4b8	b.ne	0x10000c52c
000000010000c4bc	add	x21, x20, #0x3c
000000010000c4c0	orr	w2, wzr, #0x80
000000010000c4c4	mov	w1, #0x0
000000010000c4c8	mov	x0, x21
000000010000c4cc	bl	0x100031310 ; symbol stub for: _memchr
000000010000c4d0	cbz	x0, 0x10000c504
000000010000c4d4	add	x4, x19, #0x1c
000000010000c4d8	nop
000000010000c4dc	ldr	d0, 0x10003dea8
000000010000c4e0	str	d0, [x19, #0x20]
000000010000c4e4	ldr	w0, [x20, #0xc]
000000010000c4e8	ldr	w1, [x20, #0x1c]
000000010000c4ec	ldr	w3, [x20, #0x28]
000000010000c4f0	mov	x2, x21
000000010000c4f4	bl	0x100019d14
000000010000c4f8	cbz	w0, 0x10000c534
000000010000c4fc	str	w0, [x19, #0x20]
000000010000c500	b	0x10000c50c
000000010000c504	mov	w8, #-0x130
000000010000c508	str	w8, [x19, #0x20]
000000010000c50c	nop
000000010000c510	ldr	x8, #0x33af0 ; literal pool symbol address: _NDR_record
000000010000c514	ldr	x8, [x8]
000000010000c518	str	x8, [x19, #0x18]
000000010000c51c	ldp	x29, x30, [sp, #0x20]
000000010000c520	ldp	x20, x19, [sp, #0x10]
000000010000c524	ldp	x22, x21, [sp], #0x30
000000010000c528	ret
000000010000c52c	mov	w8, #-0x12c
000000010000c530	b	0x10000c508
000000010000c534	ldr	w8, [x19]
000000010000c538	orr	w8, w8, #0x80000000
000000010000c53c	str	w8, [x19]
000000010000c540	mov	w8, #0x28
000000010000c544	str	w8, [x19, #0x4]
000000010000c548	orr	w8, wzr, #0x1
000000010000c54c	str	w8, [x19, #0x18]
000000010000c550	b	0x10000c51c
000000010000c554	stp	x20, x19, [sp, #-0x20]!
000000010000c558	stp	x29, x30, [sp, #0x10]
000000010000c55c	add	x29, sp, #0x10
000000010000c560	mov	x19, x1
000000010000c564	ldr	w8, [x0]
000000010000c568	tbnz	w8, #0x1f, 0x10000c59c
000000010000c56c	ldr	w8, [x0, #0x4]
000000010000c570	cmp	w8, #0x24
000000010000c574	b.ne	0x10000c59c
000000010000c578	ldr	w8, [x0, #0xc]
000000010000c57c	ldr	w1, [x0, #0x20]
000000010000c580	add	x2, x19, #0x24
000000010000c584	mov	x0, x8
000000010000c588	bl	0x100019d1c
000000010000c58c	str	w0, [x19, #0x20]
000000010000c590	cbz	w0, 0x10000c5c0
000000010000c594	str	w0, [x19, #0x20]
000000010000c598	b	0x10000c5a4
000000010000c59c	mov	w8, #-0x130
000000010000c5a0	str	w8, [x19, #0x20]
000000010000c5a4	nop
000000010000c5a8	ldr	x8, #0x33a58 ; literal pool symbol address: _NDR_record
000000010000c5ac	ldr	x8, [x8]
000000010000c5b0	str	x8, [x19, #0x18]
000000010000c5b4	ldp	x29, x30, [sp, #0x10]
000000010000c5b8	ldp	x20, x19, [sp], #0x20
000000010000c5bc	ret
000000010000c5c0	nop
000000010000c5c4	ldr	x8, #0x33a3c ; literal pool symbol address: _NDR_record
000000010000c5c8	ldr	x8, [x8]
000000010000c5cc	str	x8, [x19, #0x18]
000000010000c5d0	mov	w8, #0x28
000000010000c5d4	str	w8, [x19, #0x4]
000000010000c5d8	b	0x10000c5b4
000000010000c5dc	stp	x22, x21, [sp, #-0x30]!
000000010000c5e0	stp	x20, x19, [sp, #0x10]
000000010000c5e4	stp	x29, x30, [sp, #0x20]
000000010000c5e8	add	x29, sp, #0x20
000000010000c5ec	mov	x19, x1
000000010000c5f0	mov	x20, x0
000000010000c5f4	ldr	w8, [x20]
000000010000c5f8	tbnz	w8, #0x1f, 0x10000c648
000000010000c5fc	ldr	w8, [x20, #0x4]
000000010000c600	cmp	w8, #0xa0
000000010000c604	b.ne	0x10000c648
000000010000c608	add	x21, x20, #0x20
000000010000c60c	orr	w2, wzr, #0x80
000000010000c610	mov	w1, #0x0
000000010000c614	mov	x0, x21
000000010000c618	bl	0x100031310 ; symbol stub for: _memchr
000000010000c61c	cbz	x0, 0x10000c648
000000010000c620	add	x2, x19, #0x1c
000000010000c624	nop
000000010000c628	ldr	d0, 0x10003dea8
000000010000c62c	str	d0, [x19, #0x20]
000000010000c630	ldr	w0, [x20, #0xc]
000000010000c634	mov	x1, x21
000000010000c638	bl	0x100019d24
000000010000c63c	cbz	w0, 0x10000c670
000000010000c640	str	w0, [x19, #0x20]
000000010000c644	b	0x10000c650
000000010000c648	mov	w8, #-0x130
000000010000c64c	str	w8, [x19, #0x20]
000000010000c650	nop
000000010000c654	ldr	x8, #0x339ac ; literal pool symbol address: _NDR_record
000000010000c658	ldr	x8, [x8]
000000010000c65c	str	x8, [x19, #0x18]
000000010000c660	ldp	x29, x30, [sp, #0x20]
000000010000c664	ldp	x20, x19, [sp, #0x10]
000000010000c668	ldp	x22, x21, [sp], #0x30
000000010000c66c	ret
000000010000c670	ldr	w8, [x19]
000000010000c674	orr	w8, w8, #0x80000000
000000010000c678	str	w8, [x19]
000000010000c67c	mov	w8, #0x28
000000010000c680	str	w8, [x19, #0x4]
000000010000c684	orr	w8, wzr, #0x1
000000010000c688	str	w8, [x19, #0x18]
000000010000c68c	b	0x10000c660
000000010000c690	stp	x22, x21, [sp, #-0x30]!
000000010000c694	stp	x20, x19, [sp, #0x10]
000000010000c698	stp	x29, x30, [sp, #0x20]
000000010000c69c	add	x29, sp, #0x20
000000010000c6a0	mov	x19, x1
000000010000c6a4	mov	x20, x0
000000010000c6a8	ldr	w8, [x20]
000000010000c6ac	tbz	w8, #0x1f, 0x10000c704
000000010000c6b0	ldr	w8, [x20, #0x18]
000000010000c6b4	cmp	w8, #0x1
000000010000c6b8	b.ne	0x10000c704
000000010000c6bc	ldr	w8, [x20, #0x4]
000000010000c6c0	cmp	w8, #0xb0
000000010000c6c4	b.ne	0x10000c704
000000010000c6c8	ldr	w8, [x20, #0x24]
000000010000c6cc	and	w8, w8, #0xffff0000
000000010000c6d0	cmp	w8, #0x110, lsl #12
000000010000c6d4	b.ne	0x10000c72c
000000010000c6d8	add	x21, x20, #0x30
000000010000c6dc	orr	w2, wzr, #0x80
000000010000c6e0	mov	w1, #0x0
000000010000c6e4	mov	x0, x21
000000010000c6e8	bl	0x100031310 ; symbol stub for: _memchr
000000010000c6ec	cbz	x0, 0x10000c704
000000010000c6f0	ldr	w0, [x20, #0xc]
000000010000c6f4	ldr	w2, [x20, #0x1c]
000000010000c6f8	mov	x1, x21
000000010000c6fc	bl	0x100019d2c
000000010000c700	b	0x10000c708
000000010000c704	mov	w0, #-0x130
000000010000c708	str	w0, [x19, #0x20]
000000010000c70c	nop
000000010000c710	ldr	x8, #0x338f0 ; literal pool symbol address: _NDR_record
000000010000c714	ldr	x8, [x8]
000000010000c718	str	x8, [x19, #0x18]
000000010000c71c	ldp	x29, x30, [sp, #0x20]
000000010000c720	ldp	x20, x19, [sp, #0x10]
000000010000c724	ldp	x22, x21, [sp], #0x30
000000010000c728	ret
000000010000c72c	mov	w0, #-0x12c
000000010000c730	b	0x10000c708
000000010000c734	stp	x20, x19, [sp, #-0x20]!
000000010000c738	stp	x29, x30, [sp, #0x10]
000000010000c73c	add	x29, sp, #0x10
000000010000c740	mov	x19, x1
000000010000c744	ldr	w8, [x0]
000000010000c748	tbz	w8, #0x1f, 0x10000c78c
000000010000c74c	ldr	w8, [x0, #0x18]
000000010000c750	cmp	w8, #0x1
000000010000c754	b.ne	0x10000c78c
000000010000c758	ldr	w8, [x0, #0x4]
000000010000c75c	cmp	w8, #0x40
000000010000c760	b.ne	0x10000c78c
000000010000c764	ldr	w8, [x0, #0x24]
000000010000c768	and	w8, w8, #0xffff0000
000000010000c76c	cmp	w8, #0x110, lsl #12
000000010000c770	b.ne	0x10000c7b0
000000010000c774	ldr	w8, [x0, #0xc]
000000010000c778	add	x1, x0, #0x30
000000010000c77c	ldr	w2, [x0, #0x1c]
000000010000c780	mov	x0, x8
000000010000c784	bl	0x100019d34
000000010000c788	b	0x10000c790
000000010000c78c	mov	w0, #-0x130
000000010000c790	str	w0, [x19, #0x20]
000000010000c794	nop
000000010000c798	ldr	x8, #0x33868 ; literal pool symbol address: _NDR_record
000000010000c79c	ldr	x8, [x8]
000000010000c7a0	str	x8, [x19, #0x18]
000000010000c7a4	ldp	x29, x30, [sp, #0x10]
000000010000c7a8	ldp	x20, x19, [sp], #0x20
000000010000c7ac	ret
000000010000c7b0	mov	w0, #-0x12c
000000010000c7b4	b	0x10000c790
000000010000c7b8	stp	x20, x19, [sp, #-0x20]!
000000010000c7bc	stp	x29, x30, [sp, #0x10]
000000010000c7c0	add	x29, sp, #0x10
000000010000c7c4	mov	x19, x1
000000010000c7c8	ldr	w8, [x0]
000000010000c7cc	tbz	w8, #0x1f, 0x10000c848
000000010000c7d0	ldr	w8, [x0, #0x18]
000000010000c7d4	cmp	w8, #0x2
000000010000c7d8	b.ne	0x10000c848
000000010000c7dc	ldr	w8, [x0, #0x4]
000000010000c7e0	cmp	w8, #0x44
000000010000c7e4	b.ne	0x10000c848
000000010000c7e8	ldrb	w8, [x0, #0x27]
000000010000c7ec	cmp	w8, #0x1
000000010000c7f0	b.ne	0x10000c86c
000000010000c7f4	ldr	w8, [x0, #0x34]
000000010000c7f8	and	w8, w8, #0xffff0000
000000010000c7fc	cmp	w8, #0x110, lsl #12
000000010000c800	b.ne	0x10000c86c
000000010000c804	ldr	w8, [x0, #0x28]
000000010000c808	ldr	w9, [x0, #0x40]
000000010000c80c	cmp	w8, w9
000000010000c810	b.ne	0x10000c86c
000000010000c814	add	x6, x19, #0x1c
000000010000c818	nop
000000010000c81c	ldr	d0, 0x10003dea0
000000010000c820	str	d0, [x19, #0x20]
000000010000c824	ldp	w1, w8, [x0, #0x8]
000000010000c828	ldur	x2, [x0, #0x1c]
000000010000c82c	ldp	w3, w4, [x0, #0x28]
000000010000c830	add	x5, x19, #0x30
000000010000c834	mov	x0, x8
000000010000c838	bl	0x100019d3c
000000010000c83c	cbz	w0, 0x10000c874
000000010000c840	str	w0, [x19, #0x20]
000000010000c844	b	0x10000c850
000000010000c848	mov	w8, #-0x130
000000010000c84c	str	w8, [x19, #0x20]
000000010000c850	nop
000000010000c854	ldr	x8, #0x337ac ; literal pool symbol address: _NDR_record
000000010000c858	ldr	x8, [x8]
000000010000c85c	str	x8, [x19, #0x18]
000000010000c860	ldp	x29, x30, [sp, #0x10]
000000010000c864	ldp	x20, x19, [sp], #0x20
000000010000c868	ret
000000010000c86c	mov	w8, #-0x12c
000000010000c870	b	0x10000c84c
000000010000c874	nop
000000010000c878	ldr	x8, #0x33788 ; literal pool symbol address: _NDR_record
000000010000c87c	ldr	x8, [x8]
000000010000c880	str	x8, [x19, #0x28]
000000010000c884	ldr	w8, [x19]
000000010000c888	orr	w8, w8, #0x80000000
000000010000c88c	str	w8, [x19]
000000010000c890	mov	w8, #0x34
000000010000c894	str	w8, [x19, #0x4]
000000010000c898	orr	w8, wzr, #0x1
000000010000c89c	str	w8, [x19, #0x18]
000000010000c8a0	b	0x10000c860
000000010000c8a4	stp	x20, x19, [sp, #-0x20]!
000000010000c8a8	stp	x29, x30, [sp, #0x10]
000000010000c8ac	add	x29, sp, #0x10
000000010000c8b0	mov	x19, x1
000000010000c8b4	ldr	w8, [x0]
000000010000c8b8	tbnz	w8, #0x1f, 0x10000c8ec
000000010000c8bc	ldr	w8, [x0, #0x4]
000000010000c8c0	cmp	w8, #0x18
000000010000c8c4	b.ne	0x10000c8ec
000000010000c8c8	add	x1, x19, #0x1c
000000010000c8cc	nop
000000010000c8d0	ldr	d0, 0x10003deb0
000000010000c8d4	str	d0, [x19, #0x20]
000000010000c8d8	ldr	w0, [x0, #0xc]
000000010000c8dc	bl	0x100019d44
000000010000c8e0	cbz	w0, 0x10000c910
000000010000c8e4	str	w0, [x19, #0x20]
000000010000c8e8	b	0x10000c8f4
000000010000c8ec	mov	w8, #-0x130
000000010000c8f0	str	w8, [x19, #0x20]
000000010000c8f4	nop
000000010000c8f8	ldr	x8, #0x33708 ; literal pool symbol address: _NDR_record
000000010000c8fc	ldr	x8, [x8]
000000010000c900	str	x8, [x19, #0x18]
000000010000c904	ldp	x29, x30, [sp, #0x10]
000000010000c908	ldp	x20, x19, [sp], #0x20
000000010000c90c	ret
000000010000c910	ldr	w8, [x19]
000000010000c914	orr	w8, w8, #0x80000000
000000010000c918	str	w8, [x19]
000000010000c91c	mov	w8, #0x28
000000010000c920	str	w8, [x19, #0x4]
000000010000c924	orr	w8, wzr, #0x1
000000010000c928	str	w8, [x19, #0x18]
000000010000c92c	b	0x10000c904
000000010000c930	sub	sp, sp, #0x40
000000010000c934	stp	x22, x21, [sp, #0x10]
000000010000c938	stp	x20, x19, [sp, #0x20]
000000010000c93c	stp	x29, x30, [sp, #0x30]
000000010000c940	add	x29, sp, #0x30
000000010000c944	mov	x19, x1
000000010000c948	mov	x20, x0
000000010000c94c	ldr	w8, [x20]
000000010000c950	tbz	w8, #0x1f, 0x10000ca24
000000010000c954	ldr	w8, [x20, #0x18]
000000010000c958	cmp	w8, #0x3
000000010000c95c	b.ne	0x10000ca24
000000010000c960	ldr	w8, [x20, #0x4]
000000010000c964	cmp	w8, #0x58
000000010000c968	b.ne	0x10000ca24
000000010000c96c	ldrb	w8, [x20, #0x27]
000000010000c970	cmp	w8, #0x1
000000010000c974	b.ne	0x10000ca50
000000010000c978	ldrh	w8, [x20, #0x36]
000000010000c97c	cmp	w8, #0x211
000000010000c980	b.ne	0x10000ca50
000000010000c984	ldr	w8, [x20, #0x44]
000000010000c988	and	w8, w8, #0xffff0000
000000010000c98c	cmp	w8, #0x110, lsl #12
000000010000c990	b.ne	0x10000ca50
000000010000c994	ldr	w8, [x20, #0x28]
000000010000c998	ldr	w9, [x20, #0x50]
000000010000c99c	cmp	w8, w9
000000010000c9a0	b.ne	0x10000ca50
000000010000c9a4	mov	w8, #0x2110000
000000010000c9a8	mov	x9, x19
000000010000c9ac	str	wzr, [x9, #0x48]!
000000010000c9b0	sub	x5, x9, #0x2c
000000010000c9b4	mov	w10, #0x101
000000010000c9b8	movk	w10, #0x100, lsl #16
000000010000c9bc	stur	w10, [x9, #-0x24]
000000010000c9c0	sub	x7, x9, #0x1c
000000010000c9c4	ldur	w10, [x9, #-0x14]
000000010000c9c8	and	w10, w10, #0xff00
000000010000c9cc	add	w8, w8, #0x1
000000010000c9d0	orr	w8, w10, w8
000000010000c9d4	stur	w8, [x9, #-0x14]
000000010000c9d8	ldr	w0, [x20, #0xc]
000000010000c9dc	ldur	x1, [x20, #0x1c]
000000010000c9e0	ldr	w2, [x20, #0x28]
000000010000c9e4	ldur	x3, [x20, #0x2c]
000000010000c9e8	sub	x6, x9, #0x4
000000010000c9ec	ldp	w4, w8, [x20, #0x38]
000000010000c9f0	str	w8, [sp, #0x8]
000000010000c9f4	str	x9, [sp]
000000010000c9f8	bl	0x100019d4c
000000010000c9fc	mov	x21, x0
000000010000ca00	ldur	x0, [x20, #0x2c]
000000010000ca04	ldr	w8, [x20, #0x38]
000000010000ca08	lsl	w1, w8, #2
000000010000ca0c	bl	0x100031358 ; symbol stub for: _mig_deallocate
000000010000ca10	stur	xzr, [x20, #0x2c]
000000010000ca14	str	wzr, [x20, #0x38]
000000010000ca18	cbz	w21, 0x10000ca58
000000010000ca1c	str	w21, [x19, #0x20]
000000010000ca20	b	0x10000ca2c
000000010000ca24	mov	w8, #-0x130
000000010000ca28	str	w8, [x19, #0x20]
000000010000ca2c	nop
000000010000ca30	ldr	x8, #0x335d0 ; literal pool symbol address: _NDR_record
000000010000ca34	ldr	x8, [x8]
000000010000ca38	str	x8, [x19, #0x18]
000000010000ca3c	ldp	x29, x30, [sp, #0x30]
000000010000ca40	ldp	x20, x19, [sp, #0x20]
000000010000ca44	ldp	x22, x21, [sp, #0x10]
000000010000ca48	add	sp, sp, #0x40
000000010000ca4c	ret
000000010000ca50	mov	w8, #-0x12c
000000010000ca54	b	0x10000ca28
000000010000ca58	ldp	w8, w9, [x19, #0x44]
000000010000ca5c	str	w8, [x19, #0x28]
000000010000ca60	str	w9, [x19, #0x38]
000000010000ca64	nop
000000010000ca68	ldr	x8, #0x33598 ; literal pool symbol address: _NDR_record
000000010000ca6c	ldr	x8, [x8]
000000010000ca70	stur	x8, [x19, #0x3c]
000000010000ca74	ldr	w8, [x19]
000000010000ca78	orr	w8, w8, #0x80000000
000000010000ca7c	str	w8, [x19]
000000010000ca80	mov	w8, #0x4c
000000010000ca84	str	w8, [x19, #0x4]
000000010000ca88	orr	w8, wzr, #0x2
000000010000ca8c	str	w8, [x19, #0x18]
000000010000ca90	b	0x10000ca3c
000000010000ca94	stp	x20, x19, [sp, #-0x20]!
000000010000ca98	stp	x29, x30, [sp, #0x10]
000000010000ca9c	add	x29, sp, #0x10
000000010000caa0	mov	x19, x1
000000010000caa4	ldr	w8, [x0]
000000010000caa8	tbnz	w8, #0x1f, 0x10000caf0
000000010000caac	ldr	w8, [x0, #0x4]
000000010000cab0	cmp	w8, #0x18
000000010000cab4	b.ne	0x10000caf0
000000010000cab8	mov	x2, x19
000000010000cabc	str	wzr, [x2, #0x34]!
000000010000cac0	sub	x1, x2, #0x18
000000010000cac4	ldur	w8, [x2, #-0x10]
000000010000cac8	and	w8, w8, #0xff00
000000010000cacc	mov	w9, #0x1
000000010000cad0	movk	w9, #0x214, lsl #16
000000010000cad4	orr	w8, w8, w9
000000010000cad8	stur	w8, [x2, #-0x10]
000000010000cadc	ldr	w0, [x0, #0xc]
000000010000cae0	bl	0x100019d54
000000010000cae4	cbz	w0, 0x10000cb14
000000010000cae8	str	w0, [x19, #0x20]
000000010000caec	b	0x10000caf8
000000010000caf0	mov	w8, #-0x130
000000010000caf4	str	w8, [x19, #0x20]
000000010000caf8	nop
000000010000cafc	ldr	x8, #0x33504 ; literal pool symbol address: _NDR_record
000000010000cb00	ldr	x8, [x8]
000000010000cb04	str	x8, [x19, #0x18]
000000010000cb08	ldp	x29, x30, [sp, #0x10]
000000010000cb0c	ldp	x20, x19, [sp], #0x20
000000010000cb10	ret
000000010000cb14	ldr	w8, [x19, #0x34]
000000010000cb18	str	w8, [x19, #0x28]
000000010000cb1c	nop
000000010000cb20	ldr	x8, #0x334e0 ; literal pool symbol address: _NDR_record
000000010000cb24	ldr	x8, [x8]
000000010000cb28	stur	x8, [x19, #0x2c]
000000010000cb2c	ldr	w8, [x19]
000000010000cb30	orr	w8, w8, #0x80000000
000000010000cb34	str	w8, [x19]
000000010000cb38	orr	w8, wzr, #0x38
000000010000cb3c	str	w8, [x19, #0x4]
000000010000cb40	orr	w8, wzr, #0x1
000000010000cb44	str	w8, [x19, #0x18]
000000010000cb48	b	0x10000cb08
000000010000cb4c	sub	sp, sp, #0x40
000000010000cb50	stp	x22, x21, [sp, #0x10]
000000010000cb54	stp	x20, x19, [sp, #0x20]
000000010000cb58	stp	x29, x30, [sp, #0x30]
000000010000cb5c	add	x29, sp, #0x30
000000010000cb60	mov	x19, x1
000000010000cb64	mov	x20, x0
000000010000cb68	ldr	w8, [x20]
000000010000cb6c	tbnz	w8, #0x1f, 0x10000cbd4
000000010000cb70	ldr	w8, [x20, #0x4]
000000010000cb74	cmp	w8, #0xbc
000000010000cb78	b.ne	0x10000cbd4
000000010000cb7c	add	x21, x20, #0x20
000000010000cb80	orr	w2, wzr, #0x80
000000010000cb84	mov	w1, #0x0
000000010000cb88	mov	x0, x21
000000010000cb8c	bl	0x100031310 ; symbol stub for: _memchr
000000010000cb90	cbz	x0, 0x10000cbd4
000000010000cb94	add	x3, x19, #0x1c
000000010000cb98	nop
000000010000cb9c	ldr	d0, 0x10003de98
000000010000cba0	str	d0, [x19, #0x20]
000000010000cba4	ldp	w1, w0, [x20, #0x8]
000000010000cba8	ldr	w4, [x20, #0xa0]
000000010000cbac	add	x5, x20, #0xa4
000000010000cbb0	ldur	x6, [x20, #0xb4]
000000010000cbb4	add	x7, x19, #0x30
000000010000cbb8	add	x8, x19, #0x34
000000010000cbbc	str	x8, [sp]
000000010000cbc0	mov	x2, x21
000000010000cbc4	bl	0x100019c84
000000010000cbc8	cbz	w0, 0x10000cc00
000000010000cbcc	str	w0, [x19, #0x20]
000000010000cbd0	b	0x10000cbdc
000000010000cbd4	mov	w8, #-0x130
000000010000cbd8	str	w8, [x19, #0x20]
000000010000cbdc	nop
000000010000cbe0	ldr	x8, #0x33420 ; literal pool symbol address: _NDR_record
000000010000cbe4	ldr	x8, [x8]
000000010000cbe8	str	x8, [x19, #0x18]
000000010000cbec	ldp	x29, x30, [sp, #0x30]
000000010000cbf0	ldp	x20, x19, [sp, #0x20]
000000010000cbf4	ldp	x22, x21, [sp, #0x10]
000000010000cbf8	add	sp, sp, #0x40
000000010000cbfc	ret
000000010000cc00	nop
000000010000cc04	ldr	x8, #0x333fc ; literal pool symbol address: _NDR_record
000000010000cc08	ldr	x8, [x8]
000000010000cc0c	str	x8, [x19, #0x28]
000000010000cc10	ldr	w8, [x19]
000000010000cc14	orr	w8, w8, #0x80000000
000000010000cc18	str	w8, [x19]
000000010000cc1c	orr	w8, wzr, #0x38
000000010000cc20	str	w8, [x19, #0x4]
000000010000cc24	orr	w8, wzr, #0x1
000000010000cc28	str	w8, [x19, #0x18]
000000010000cc2c	b	0x10000cbec
000000010000cc30	ldr	w8, [x0]
000000010000cc34	and	w8, w8, #0x1f
000000010000cc38	str	w8, [x1]
000000010000cc3c	ldr	w8, [x0, #0x8]
000000010000cc40	mov	w9, #0x24
000000010000cc44	stp	w9, w8, [x1, #0x4]
000000010000cc48	ldr	w8, [x0, #0x14]
000000010000cc4c	add	w8, w8, #0x64
000000010000cc50	stp	wzr, w8, [x1, #0x10]
000000010000cc54	str	wzr, [x1, #0xc]
000000010000cc58	ldr	w8, [x0, #0x14]
000000010000cc5c	sub	w8, w8, #0x190
000000010000cc60	cmp	w8, #0x27
000000010000cc64	b.hi	0x10000cc98
000000010000cc68	adr	x9, #214480
000000010000cc6c	nop
000000010000cc70	mov	w10, #0x28
000000010000cc74	smaddl	x8, w8, w10, x9
000000010000cc78	ldr	x8, [x8, #0x28]
000000010000cc7c	cbz	x8, 0x10000cc98
000000010000cc80	stp	x29, x30, [sp, #-0x10]!
000000010000cc84	mov	x29, sp
000000010000cc88	blr	x8
000000010000cc8c	orr	w0, wzr, #0x1
000000010000cc90	ldp	x29, x30, [sp], #0x10
000000010000cc94	ret
000000010000cc98	mov	w0, #0x0
000000010000cc9c	nop
000000010000cca0	ldr	x8, #0x33360 ; literal pool symbol address: _NDR_record
000000010000cca4	ldr	x8, [x8]
000000010000cca8	str	x8, [x1, #0x18]
000000010000ccac	mov	w8, #-0x12f
000000010000ccb0	str	w8, [x1, #0x20]
000000010000ccb4	ret
000000010000ccb8	b	0x10003119c ; symbol stub for: _kdebug_trace
000000010000ccbc	mov	x1, #0x0
000000010000ccc0	mov	x2, #0x0
000000010000ccc4	mov	x3, #0x0
000000010000ccc8	mov	x4, #0x0
000000010000cccc	b	0x10003119c ; symbol stub for: _kdebug_trace
000000010000ccd0	mov	x2, #0x0
000000010000ccd4	mov	x3, #0x0
000000010000ccd8	mov	x4, #0x0
000000010000ccdc	b	0x10003119c ; symbol stub for: _kdebug_trace
000000010000cce0	sub	sp, sp, #0x50
000000010000cce4	stp	x20, x19, [sp, #0x30]
000000010000cce8	stp	x29, x30, [sp, #0x40]
000000010000ccec	add	x29, sp, #0x40
000000010000ccf0	mov	x19, x0
000000010000ccf4	nop
000000010000ccf8	ldr	x8, #0x33320 ; literal pool symbol address: ___stack_chk_guard
000000010000ccfc	ldr	x8, [x8]
000000010000cd00	stur	x8, [x29, #-0x18]
000000010000cd04	add	x0, sp, #0x8
000000010000cd08	orr	w2, wzr, #0x20
000000010000cd0c	bl	0x100031754 ; symbol stub for: _strncpy
000000010000cd10	ldp	x1, x2, [sp, #0x8]
000000010000cd14	ldp	x3, x4, [sp, #0x18]
000000010000cd18	mov	x0, x19
000000010000cd1c	bl	0x10003119c ; symbol stub for: _kdebug_trace
000000010000cd20	ldur	x8, [x29, #-0x18]
000000010000cd24	nop
000000010000cd28	ldr	x9, #0x332f0 ; literal pool symbol address: ___stack_chk_guard
000000010000cd2c	ldr	x9, [x9]
000000010000cd30	cmp	x9, x8
000000010000cd34	b.ne	0x10000cd48
000000010000cd38	ldp	x29, x30, [sp, #0x40]
000000010000cd3c	ldp	x20, x19, [sp, #0x30]
000000010000cd40	add	sp, sp, #0x50
000000010000cd44	ret
000000010000cd48	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010000cd4c	stp	x20, x19, [sp, #-0x20]!
000000010000cd50	stp	x29, x30, [sp, #0x10]
000000010000cd54	add	x29, sp, #0x10
000000010000cd58	mov	x19, x1
000000010000cd5c	ldr	w8, [x0]
000000010000cd60	and	w8, w8, #0x1f
000000010000cd64	str	w8, [x19]
000000010000cd68	ldr	w8, [x0, #0x8]
000000010000cd6c	mov	w9, #0x24
000000010000cd70	stp	w9, w8, [x19, #0x4]
000000010000cd74	ldr	w8, [x0, #0x14]
000000010000cd78	add	w8, w8, #0x64
000000010000cd7c	stp	wzr, w8, [x19, #0x10]
000000010000cd80	str	wzr, [x19, #0xc]
000000010000cd84	ldr	w8, [x0, #0x14]
000000010000cd88	mov	w9, #0x14b4
000000010000cd8c	cmp	w8, w9
000000010000cd90	b.ne	0x10000cdc4
000000010000cd94	ldr	w8, [x0]
000000010000cd98	tbnz	w8, #0x1f, 0x10000cde4
000000010000cd9c	ldr	w8, [x0, #0x4]
000000010000cda0	cmp	w8, #0x2c
000000010000cda4	b.ne	0x10000cde4
000000010000cda8	ldr	w8, [x0, #0xc]
000000010000cdac	ldr	x1, [x0, #0x20]
000000010000cdb0	ldr	w2, [x0, #0x28]
000000010000cdb4	mov	x0, x8
000000010000cdb8	bl	0x100019d5c
000000010000cdbc	str	w0, [x19, #0x20]
000000010000cdc0	b	0x10000cdfc
000000010000cdc4	mov	w0, #0x0
000000010000cdc8	nop
000000010000cdcc	ldr	x8, #0x33234 ; literal pool symbol address: _NDR_record
000000010000cdd0	ldr	x8, [x8]
000000010000cdd4	str	x8, [x19, #0x18]
000000010000cdd8	mov	w8, #-0x12f
000000010000cddc	str	w8, [x19, #0x20]
000000010000cde0	b	0x10000ce00
000000010000cde4	mov	w8, #-0x130
000000010000cde8	str	w8, [x19, #0x20]
000000010000cdec	nop
000000010000cdf0	ldr	x8, #0x33210 ; literal pool symbol address: _NDR_record
000000010000cdf4	ldr	x8, [x8]
000000010000cdf8	str	x8, [x19, #0x18]
000000010000cdfc	orr	w0, wzr, #0x1
000000010000ce00	ldp	x29, x30, [sp, #0x10]
000000010000ce04	ldp	x20, x19, [sp], #0x20
000000010000ce08	ret
000000010000ce0c	stp	x22, x21, [sp, #-0x30]!
000000010000ce10	stp	x20, x19, [sp, #0x10]
000000010000ce14	stp	x29, x30, [sp, #0x20]
000000010000ce18	add	x29, sp, #0x20
000000010000ce1c	mov	x19, x1
000000010000ce20	mov	x20, x0
000000010000ce24	orr	w0, wzr, #0x18
000000010000ce28	bl	0x10000d464
000000010000ce2c	mov	x21, x0
000000010000ce30	str	x20, [x21]
000000010000ce34	mov	x0, x19
000000010000ce38	bl	0x10000d520
000000010000ce3c	str	x0, [x21, #0x8]
000000010000ce40	mov	x0, x21
000000010000ce44	ldp	x29, x30, [sp, #0x20]
000000010000ce48	ldp	x20, x19, [sp, #0x10]
000000010000ce4c	ldp	x22, x21, [sp], #0x30
000000010000ce50	ret
000000010000ce54	stp	x20, x19, [sp, #-0x20]!
000000010000ce58	stp	x29, x30, [sp, #0x10]
000000010000ce5c	add	x29, sp, #0x10
000000010000ce60	mov	x19, x0
000000010000ce64	ldr	x0, [x19, #0x8]
000000010000ce68	bl	0x100031010 ; symbol stub for: _free
000000010000ce6c	mov	x0, x19
000000010000ce70	ldp	x29, x30, [sp, #0x10]
000000010000ce74	ldp	x20, x19, [sp], #0x20
000000010000ce78	b	0x100031010 ; symbol stub for: _free
000000010000ce7c	sub	sp, sp, #0x40
000000010000ce80	stp	x20, x19, [sp, #0x20]
000000010000ce84	stp	x29, x30, [sp, #0x30]
000000010000ce88	add	x29, sp, #0x30
000000010000ce8c	mov	x19, x1
000000010000ce90	mov	x20, x0
000000010000ce94	add	x8, x29, #0x10
000000010000ce98	stp	xzr, x8, [sp, #0x10]
000000010000ce9c	add	x0, sp, #0x10
000000010000cea0	mov	x1, x2
000000010000cea4	mov	x2, x8
000000010000cea8	bl	0x100031880 ; symbol stub for: _vasprintf
000000010000ceac	cmn	w0, #0x1
000000010000ceb0	b.eq	0x10000cefc
000000010000ceb4	ldr	x0, [x20, #0x10]
000000010000ceb8	cbz	x0, 0x10000ced8
000000010000cebc	ldr	x8, [sp, #0x10]
000000010000cec0	str	x8, [sp]
000000010000cec4	adr	x2, #165473 ; literal pool for: "(lint): %s"
000000010000cec8	nop
000000010000cecc	mov	x1, x19
000000010000ced0	bl	0x1000118ec
000000010000ced4	b	0x10000cef4
000000010000ced8	ldp	x0, x8, [x20]
000000010000cedc	ldr	x9, [sp, #0x10]
000000010000cee0	stp	x8, x9, [sp]
000000010000cee4	adr	x2, #165452 ; literal pool for: "%s (lint): %s"
000000010000cee8	nop
000000010000ceec	mov	x1, x19
000000010000cef0	bl	0x100019bfc
000000010000cef4	ldr	x0, [sp, #0x10]
000000010000cef8	bl	0x100031010 ; symbol stub for: _free
000000010000cefc	ldp	x29, x30, [sp, #0x30]
000000010000cf00	ldp	x20, x19, [sp, #0x20]
000000010000cf04	add	sp, sp, #0x40
000000010000cf08	ret
000000010000cf0c	ldr	w8, [x0, #0x14]
000000010000cf10	sub	w8, w8, #0x965
000000010000cf14	cmp	w8, #0x2
000000010000cf18	b.ls	0x10000cf24
000000010000cf1c	mov	x0, #0x0
000000010000cf20	ret
000000010000cf24	adr	x9, #215412
000000010000cf28	nop
000000010000cf2c	mov	w10, #0x28
000000010000cf30	smaddl	x8, w8, w10, x9
000000010000cf34	ldr	x0, [x8, #0x28]
000000010000cf38	ret
000000010000cf3c	stp	x20, x19, [sp, #-0x20]!
000000010000cf40	stp	x29, x30, [sp, #0x10]
000000010000cf44	add	x29, sp, #0x10
000000010000cf48	mov	x19, x1
000000010000cf4c	ldr	w8, [x0]
000000010000cf50	tbz	w8, #0x1f, 0x10000cf6c
000000010000cf54	ldr	w9, [x0, #0x4]
000000010000cf58	ldr	w8, [x0, #0x18]
000000010000cf5c	sub	w10, w9, #0x44
000000010000cf60	cmp	w10, #0x10
000000010000cf64	ccmp	w8, #0x2, #0x0, ls
000000010000cf68	b.eq	0x10000cf90
000000010000cf6c	mov	w8, #-0x130
000000010000cf70	str	w8, [x19, #0x20]
000000010000cf74	nop
000000010000cf78	ldr	x8, #0x33088 ; literal pool symbol address: _NDR_record
000000010000cf7c	ldr	x8, [x8]
000000010000cf80	str	x8, [x19, #0x18]
000000010000cf84	ldp	x29, x30, [sp, #0x10]
000000010000cf88	ldp	x20, x19, [sp], #0x20
000000010000cf8c	ret
000000010000cf90	ldr	w8, [x0, #0x24]
000000010000cf94	and	w8, w8, #0xffff0000
000000010000cf98	cmp	w8, #0x110, lsl #12
000000010000cf9c	b.ne	0x10000d000
000000010000cfa0	ldr	w11, [x0, #0x30]
000000010000cfa4	and	w11, w11, #0xffff0000
000000010000cfa8	cmp	w11, w8
000000010000cfac	b.ne	0x10000d000
000000010000cfb0	ldr	w5, [x0, #0x40]
000000010000cfb4	mov	w8, #-0x130
000000010000cfb8	cmp	w5, #0x2
000000010000cfbc	b.hi	0x10000cf70
000000010000cfc0	lsr	w10, w10, #3
000000010000cfc4	cmp	w10, w5
000000010000cfc8	b.lo	0x10000cf70
000000010000cfcc	lsl	w8, w5, #3
000000010000cfd0	add	w8, w8, #0x44
000000010000cfd4	cmp	w9, w8
000000010000cfd8	b.ne	0x10000cf6c
000000010000cfdc	ldr	w8, [x0, #0xc]
000000010000cfe0	ldr	w1, [x0, #0x1c]
000000010000cfe4	ldr	w2, [x0, #0x28]
000000010000cfe8	add	x4, x0, #0x44
000000010000cfec	ldr	w3, [x0, #0x3c]
000000010000cff0	mov	x0, x8
000000010000cff4	bl	0x10002cf1c
000000010000cff8	mov	x8, x0
000000010000cffc	b	0x10000cf70
000000010000d000	mov	w8, #-0x12c
000000010000d004	b	0x10000cf70
000000010000d008	sub	sp, sp, #0x40
000000010000d00c	stp	x22, x21, [sp, #0x10]
000000010000d010	stp	x20, x19, [sp, #0x20]
000000010000d014	stp	x29, x30, [sp, #0x30]
000000010000d018	add	x29, sp, #0x30
000000010000d01c	mov	x19, x1
000000010000d020	ldr	w8, [x0, #0x4]
000000010000d024	sub	w9, w8, #0x30
000000010000d028	cmp	w9, #0x250
000000010000d02c	b.hi	0x10000d058
000000010000d030	ldr	w10, [x0]
000000010000d034	tbnz	w10, #0x1f, 0x10000d058
000000010000d038	ldr	w3, [x0, #0x24]
000000010000d03c	lsl	w10, w3, #3
000000010000d040	cmp	w3, #0x2
000000010000d044	lsr	w9, w9, #3
000000010000d048	add	w11, w10, #0x30
000000010000d04c	ccmp	w9, w3, #0x0, ls
000000010000d050	ccmp	w8, w11, #0x0, hs
000000010000d054	b.hs	0x10000d084
000000010000d058	mov	w8, #-0x130
000000010000d05c	str	w8, [x19, #0x20]
000000010000d060	nop
000000010000d064	ldr	x8, #0x32f9c ; literal pool symbol address: _NDR_record
000000010000d068	ldr	x8, [x8]
000000010000d06c	str	x8, [x19, #0x18]
000000010000d070	ldp	x29, x30, [sp, #0x30]
000000010000d074	ldp	x20, x19, [sp, #0x20]
000000010000d078	ldp	x22, x21, [sp, #0x10]
000000010000d07c	add	sp, sp, #0x40
000000010000d080	ret
000000010000d084	add	x9, x0, w10, uxtw
000000010000d088	ldr	w11, [x9, #0x2c]
000000010000d08c	cmp	w11, #0x90
000000010000d090	b.hi	0x10000d058
000000010000d094	sub	w8, w8, w10
000000010000d098	sub	w10, w8, #0x30
000000010000d09c	lsr	w10, w10, #2
000000010000d0a0	cmp	w10, w11
000000010000d0a4	lsl	w10, w11, #2
000000010000d0a8	add	w10, w10, #0x30
000000010000d0ac	ccmp	w8, w10, #0x0, hs
000000010000d0b0	b.ne	0x10000d058
000000010000d0b4	sub	x9, x9, #0x10
000000010000d0b8	mov	w8, #0x90
000000010000d0bc	mov	x21, x19
000000010000d0c0	str	w8, [x21, #0x28]!
000000010000d0c4	ldr	w8, [x0, #0xc]
000000010000d0c8	ldr	w1, [x0, #0x20]
000000010000d0cc	add	x2, x0, #0x28
000000010000d0d0	add	x20, x9, #0x38
000000010000d0d4	add	x5, x9, #0x40
000000010000d0d8	ldr	w6, [x9, #0x3c]
000000010000d0dc	add	x7, x21, #0x4
000000010000d0e0	str	x21, [sp]
000000010000d0e4	mov	x0, x8
000000010000d0e8	mov	x4, x20
000000010000d0ec	bl	0x10002d06c
000000010000d0f0	stur	w0, [x21, #-0x8]
000000010000d0f4	cbz	w0, 0x10000d100
000000010000d0f8	str	w0, [x19, #0x20]
000000010000d0fc	b	0x10000d060
000000010000d100	nop
000000010000d104	ldr	x8, #0x32efc ; literal pool symbol address: _NDR_record
000000010000d108	ldr	x8, [x8]
000000010000d10c	str	x8, [x19, #0x18]
000000010000d110	ldr	w8, [x20]
000000010000d114	str	w8, [x19, #0x24]
000000010000d118	ldr	w8, [x19, #0x28]
000000010000d11c	lsl	w8, w8, #2
000000010000d120	add	w8, w8, #0x2c
000000010000d124	str	w8, [x19, #0x4]
000000010000d128	b	0x10000d070
000000010000d12c	sub	sp, sp, #0x50
000000010000d130	stp	x22, x21, [sp, #0x20]
000000010000d134	stp	x20, x19, [sp, #0x30]
000000010000d138	stp	x29, x30, [sp, #0x40]
000000010000d13c	add	x29, sp, #0x40
000000010000d140	mov	x19, x1
000000010000d144	ldr	w8, [x0]
000000010000d148	tbz	w8, #0x1f, 0x10000d164
000000010000d14c	ldr	w9, [x0, #0x4]
000000010000d150	ldr	w10, [x0, #0x18]
000000010000d154	sub	w8, w9, #0x4c
000000010000d158	cmp	w8, #0x250
000000010000d15c	ccmp	w10, #0x2, #0x0, ls
000000010000d160	b.eq	0x10000d190
000000010000d164	mov	w8, #-0x130
000000010000d168	str	w8, [x19, #0x20]
000000010000d16c	nop
000000010000d170	ldr	x8, #0x32e90 ; literal pool symbol address: _NDR_record
000000010000d174	ldr	x8, [x8]
000000010000d178	str	x8, [x19, #0x18]
000000010000d17c	ldp	x29, x30, [sp, #0x40]
000000010000d180	ldp	x20, x19, [sp, #0x30]
000000010000d184	ldp	x22, x21, [sp, #0x20]
000000010000d188	add	sp, sp, #0x50
000000010000d18c	ret
000000010000d190	ldr	w10, [x0, #0x24]
000000010000d194	and	w10, w10, #0xffff0000
000000010000d198	cmp	w10, #0x110, lsl #12
000000010000d19c	b.ne	0x10000d268
000000010000d1a0	ldr	w11, [x0, #0x30]
000000010000d1a4	and	w11, w11, #0xffff0000
000000010000d1a8	cmp	w11, w10
000000010000d1ac	b.ne	0x10000d268
000000010000d1b0	ldr	w5, [x0, #0x40]
000000010000d1b4	cmp	w5, #0x2
000000010000d1b8	b.hi	0x10000d164
000000010000d1bc	lsr	w10, w8, #3
000000010000d1c0	mov	w8, #-0x130
000000010000d1c4	cmp	w10, w5
000000010000d1c8	b.lo	0x10000d168
000000010000d1cc	lsl	w10, w5, #3
000000010000d1d0	add	w11, w10, #0x4c
000000010000d1d4	cmp	w9, w11
000000010000d1d8	b.lo	0x10000d168
000000010000d1dc	add	x8, x0, w10, uxtw
000000010000d1e0	ldr	w11, [x8, #0x48]
000000010000d1e4	cmp	w11, #0x90
000000010000d1e8	b.hi	0x10000d164
000000010000d1ec	sub	w9, w9, w10
000000010000d1f0	sub	w10, w9, #0x4c
000000010000d1f4	lsr	w10, w10, #2
000000010000d1f8	cmp	w10, w11
000000010000d1fc	b.lo	0x10000d164
000000010000d200	lsl	w10, w11, #2
000000010000d204	add	w10, w10, #0x4c
000000010000d208	cmp	w9, w10
000000010000d20c	b.ne	0x10000d164
000000010000d210	sub	x9, x8, #0x10
000000010000d214	mov	w8, #0x90
000000010000d218	mov	x21, x19
000000010000d21c	str	w8, [x21, #0x28]!
000000010000d220	ldr	w8, [x0, #0xc]
000000010000d224	ldr	w1, [x0, #0x1c]
000000010000d228	ldr	w2, [x0, #0x28]
000000010000d22c	ldr	w3, [x0, #0x3c]
000000010000d230	add	x4, x0, #0x44
000000010000d234	add	x20, x9, #0x54
000000010000d238	add	x7, x9, #0x5c
000000010000d23c	ldr	w9, [x9, #0x58]
000000010000d240	add	x10, x21, #0x4
000000010000d244	stp	x10, x21, [sp, #0x8]
000000010000d248	str	w9, [sp]
000000010000d24c	mov	x0, x8
000000010000d250	mov	x6, x20
000000010000d254	bl	0x10002d1c4
000000010000d258	stur	w0, [x21, #-0x8]
000000010000d25c	cbz	w0, 0x10000d270
000000010000d260	str	w0, [x19, #0x20]
000000010000d264	b	0x10000d16c
000000010000d268	mov	w8, #-0x12c
000000010000d26c	b	0x10000d168
000000010000d270	nop
000000010000d274	ldr	x8, #0x32d8c ; literal pool symbol address: _NDR_record
000000010000d278	ldr	x8, [x8]
000000010000d27c	str	x8, [x19, #0x18]
000000010000d280	ldr	w8, [x20]
000000010000d284	str	w8, [x19, #0x24]
000000010000d288	ldr	w8, [x19, #0x28]
000000010000d28c	lsl	w8, w8, #2
000000010000d290	add	w8, w8, #0x2c
000000010000d294	str	w8, [x19, #0x4]
000000010000d298	b	0x10000d17c
000000010000d29c	ldr	w8, [x0]
000000010000d2a0	and	w8, w8, #0x1f
000000010000d2a4	str	w8, [x1]
000000010000d2a8	ldr	w8, [x0, #0x8]
000000010000d2ac	mov	w9, #0x24
000000010000d2b0	stp	w9, w8, [x1, #0x4]
000000010000d2b4	ldr	w8, [x0, #0x14]
000000010000d2b8	add	w8, w8, #0x64
000000010000d2bc	stp	wzr, w8, [x1, #0x10]
000000010000d2c0	str	wzr, [x1, #0xc]
000000010000d2c4	ldr	w8, [x0, #0x14]
000000010000d2c8	sub	w8, w8, #0x965
000000010000d2cc	cmp	w8, #0x2
000000010000d2d0	b.hi	0x10000d304
000000010000d2d4	adr	x9, #214468
000000010000d2d8	nop
000000010000d2dc	mov	w10, #0x28
000000010000d2e0	smaddl	x8, w8, w10, x9
000000010000d2e4	ldr	x8, [x8, #0x28]
000000010000d2e8	cbz	x8, 0x10000d304
000000010000d2ec	stp	x29, x30, [sp, #-0x10]!
000000010000d2f0	mov	x29, sp
000000010000d2f4	blr	x8
000000010000d2f8	orr	w0, wzr, #0x1
000000010000d2fc	ldp	x29, x30, [sp], #0x10
000000010000d300	ret
000000010000d304	mov	w0, #0x0
000000010000d308	nop
000000010000d30c	ldr	x8, #0x32cf4 ; literal pool symbol address: _NDR_record
000000010000d310	ldr	x8, [x8]
000000010000d314	str	x8, [x1, #0x18]
000000010000d318	mov	w8, #-0x12f
000000010000d31c	str	w8, [x1, #0x20]
000000010000d320	ret
000000010000d324	stp	x22, x21, [sp, #-0x30]!
000000010000d328	stp	x20, x19, [sp, #0x10]
000000010000d32c	stp	x29, x30, [sp, #0x20]
000000010000d330	add	x29, sp, #0x20
000000010000d334	mov	x19, x3
000000010000d338	mov	x20, x2
000000010000d33c	mov	x21, x1
000000010000d340	ldr	w8, [x21]
000000010000d344	add	x8, x0, x8
000000010000d348	add	x0, x8, #0x9d
000000010000d34c	mov	x1, x19
000000010000d350	bl	0x10003170c ; symbol stub for: _strcpy
000000010000d354	mov	x0, x19
000000010000d358	bl	0x10003173c ; symbol stub for: _strlen
000000010000d35c	ldr	w8, [x21]
000000010000d360	add	w8, w8, w0
000000010000d364	str	w8, [x21]
000000010000d368	ldr	x8, [x20]
000000010000d36c	sub	x8, x8, x0
000000010000d370	str	x8, [x20]
000000010000d374	ldp	x29, x30, [sp, #0x20]
000000010000d378	ldp	x20, x19, [sp, #0x10]
000000010000d37c	ldp	x22, x21, [sp], #0x30
000000010000d380	ret
000000010000d384	stp	x22, x21, [sp, #-0x30]!
000000010000d388	stp	x20, x19, [sp, #0x10]
000000010000d38c	stp	x29, x30, [sp, #0x20]
000000010000d390	add	x29, sp, #0x20
000000010000d394	mov	x19, x3
000000010000d398	mov	x20, x2
000000010000d39c	mov	x21, x1
000000010000d3a0	ldr	w8, [x21]
000000010000d3a4	add	x8, x0, x8
000000010000d3a8	add	x0, x8, #0x9d
000000010000d3ac	mov	x1, x19
000000010000d3b0	bl	0x10003170c ; symbol stub for: _strcpy
000000010000d3b4	mov	x0, x19
000000010000d3b8	bl	0x10003173c ; symbol stub for: _strlen
000000010000d3bc	add	x8, x0, #0x1
000000010000d3c0	ldr	w9, [x21]
000000010000d3c4	add	w9, w9, w8
000000010000d3c8	str	w9, [x21]
000000010000d3cc	ldr	x9, [x20]
000000010000d3d0	sub	x8, x9, x8
000000010000d3d4	str	x8, [x20]
000000010000d3d8	ldp	x29, x30, [sp, #0x20]
000000010000d3dc	ldp	x20, x19, [sp, #0x10]
000000010000d3e0	ldp	x22, x21, [sp], #0x30
000000010000d3e4	ret
000000010000d3e8	ret
000000010000d3ec	stp	x29, x30, [sp, #-0x10]!
000000010000d3f0	mov	x29, sp
000000010000d3f4	orr	w0, wzr, #0x1
000000010000d3f8	bl	0x1000316b8 ; symbol stub for: _sleep
000000010000d3fc	orr	w0, wzr, #0x1
000000010000d400	ldp	x29, x30, [sp], #0x10
000000010000d404	ret
000000010000d408	stp	x20, x19, [sp, #-0x20]!
000000010000d40c	stp	x29, x30, [sp, #0x10]
000000010000d410	add	x29, sp, #0x10
000000010000d414	mov	x19, x0
000000010000d418	b	0x10000d43c
000000010000d41c	bl	0x100030adc ; symbol stub for: ___error
000000010000d420	ldr	w8, [x0]
000000010000d424	cmp	w8, #0xc
000000010000d428	b.eq	0x10000d438
000000010000d42c	bl	0x100030adc ; symbol stub for: ___error
000000010000d430	ldrsw	x0, [x0]
000000010000d434	cbnz	w0, 0x10000d454
000000010000d438	bl	0x10000d3ec
000000010000d43c	mov	x0, x19
000000010000d440	bl	0x100031304 ; symbol stub for: _malloc
000000010000d444	cbz	x0, 0x10000d41c
000000010000d448	ldp	x29, x30, [sp, #0x10]
000000010000d44c	ldp	x20, x19, [sp], #0x20
000000010000d450	ret
000000010000d454	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000d458	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000d45c	brk	#0x1
000000010000d460	b	0x100031304 ; symbol stub for: _malloc
000000010000d464	stp	x20, x19, [sp, #-0x20]!
000000010000d468	stp	x29, x30, [sp, #0x10]
000000010000d46c	add	x29, sp, #0x10
000000010000d470	mov	x19, x0
000000010000d474	b	0x10000d498
000000010000d478	bl	0x100030adc ; symbol stub for: ___error
000000010000d47c	ldr	w8, [x0]
000000010000d480	cmp	w8, #0xc
000000010000d484	b.eq	0x10000d494
000000010000d488	bl	0x100030adc ; symbol stub for: ___error
000000010000d48c	ldrsw	x0, [x0]
000000010000d490	cbnz	w0, 0x10000d4b4
000000010000d494	bl	0x10000d3ec
000000010000d498	orr	w1, wzr, #0x1
000000010000d49c	mov	x0, x19
000000010000d4a0	bl	0x100030c38 ; symbol stub for: _calloc
000000010000d4a4	cbz	x0, 0x10000d478
000000010000d4a8	ldp	x29, x30, [sp, #0x10]
000000010000d4ac	ldp	x20, x19, [sp], #0x20
000000010000d4b0	ret
000000010000d4b4	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000d4b8	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000d4bc	brk	#0x1
000000010000d4c0	stp	x20, x19, [sp, #-0x20]!
000000010000d4c4	stp	x29, x30, [sp, #0x10]
000000010000d4c8	add	x29, sp, #0x10
000000010000d4cc	mov	x19, x2
000000010000d4d0	mov	x20, x0
000000010000d4d4	b	0x10000d4f8
000000010000d4d8	bl	0x100030adc ; symbol stub for: ___error
000000010000d4dc	ldr	w8, [x0]
000000010000d4e0	cmp	w8, #0xc
000000010000d4e4	b.eq	0x10000d4f4
000000010000d4e8	bl	0x100030adc ; symbol stub for: ___error
000000010000d4ec	ldrsw	x0, [x0]
000000010000d4f0	cbnz	w0, 0x10000d514
000000010000d4f4	bl	0x10000d3ec
000000010000d4f8	mov	x0, x20
000000010000d4fc	mov	x1, x19
000000010000d500	bl	0x10003161c ; symbol stub for: _realloc
000000010000d504	cbz	x0, 0x10000d4d8
000000010000d508	ldp	x29, x30, [sp, #0x10]
000000010000d50c	ldp	x20, x19, [sp], #0x20
000000010000d510	ret
000000010000d514	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000d518	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000d51c	brk	#0x1
000000010000d520	stp	x20, x19, [sp, #-0x20]!
000000010000d524	stp	x29, x30, [sp, #0x10]
000000010000d528	add	x29, sp, #0x10
000000010000d52c	mov	x19, x0
000000010000d530	b	0x10000d554
000000010000d534	bl	0x100030adc ; symbol stub for: ___error
000000010000d538	ldr	w8, [x0]
000000010000d53c	cmp	w8, #0xc
000000010000d540	b.eq	0x10000d550
000000010000d544	bl	0x100030adc ; symbol stub for: ___error
000000010000d548	ldrsw	x0, [x0]
000000010000d54c	cbnz	w0, 0x10000d56c
000000010000d550	bl	0x10000d3ec
000000010000d554	mov	x0, x19
000000010000d558	bl	0x100031718 ; symbol stub for: _strdup
000000010000d55c	cbz	x0, 0x10000d534
000000010000d560	ldp	x29, x30, [sp, #0x10]
000000010000d564	ldp	x20, x19, [sp], #0x20
000000010000d568	ret
000000010000d56c	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000d570	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000d574	brk	#0x1
000000010000d578	b	0x100031718 ; symbol stub for: _strdup
000000010000d57c	stp	x20, x19, [sp, #-0x20]!
000000010000d580	stp	x29, x30, [sp, #0x10]
000000010000d584	add	x29, sp, #0x10
000000010000d588	mov	x19, x1
000000010000d58c	mov	x20, x0
000000010000d590	b	0x10000d5b4
000000010000d594	bl	0x100030adc ; symbol stub for: ___error
000000010000d598	ldr	w8, [x0]
000000010000d59c	cmp	w8, #0xc
000000010000d5a0	b.eq	0x10000d5b0
000000010000d5a4	bl	0x100030adc ; symbol stub for: ___error
000000010000d5a8	ldrsw	x0, [x0]
000000010000d5ac	cbnz	w0, 0x10000d5d0
000000010000d5b0	bl	0x10000d3ec
000000010000d5b4	mov	x0, x20
000000010000d5b8	mov	x1, x19
000000010000d5bc	bl	0x100031760 ; symbol stub for: _strndup
000000010000d5c0	cbz	x0, 0x10000d594
000000010000d5c4	ldp	x29, x30, [sp, #0x10]
000000010000d5c8	ldp	x20, x19, [sp], #0x20
000000010000d5cc	ret
000000010000d5d0	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000d5d4	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000d5d8	brk	#0x1
000000010000d5dc	sub	sp, sp, #0x70
000000010000d5e0	stp	x22, x21, [sp, #0x40]
000000010000d5e4	stp	x20, x19, [sp, #0x50]
000000010000d5e8	stp	x29, x30, [sp, #0x60]
000000010000d5ec	add	x29, sp, #0x60
000000010000d5f0	mov	x19, x1
000000010000d5f4	nop
000000010000d5f8	ldr	x8, #0x32a20 ; literal pool symbol address: ___stack_chk_guard
000000010000d5fc	ldr	x8, [x8]
000000010000d600	stur	x8, [x29, #-0x28]
000000010000d604	stp	xzr, xzr, [sp, #0x20]
000000010000d608	str	xzr, [sp, #0x30]
000000010000d60c	add	x20, sp, #0x20
000000010000d610	add	x1, sp, #0x20
000000010000d614	bl	0x10000d69c
000000010000d618	stp	xzr, xzr, [sp, #0x8]
000000010000d61c	str	xzr, [sp, #0x18]
000000010000d620	add	x21, sp, #0x8
000000010000d624	add	x1, sp, #0x8
000000010000d628	mov	x0, x19
000000010000d62c	bl	0x10000d69c
000000010000d630	mov	x8, #0x0
000000010000d634	ldr	x9, [x20, x8, lsl #3]
000000010000d638	ldr	x10, [x21, x8, lsl #3]
000000010000d63c	cmp	x9, x10
000000010000d640	b.hi	0x10000d660
000000010000d644	cmp	x9, x10
000000010000d648	b.lo	0x10000d668
000000010000d64c	add	x8, x8, #0x1
000000010000d650	cmp	x8, #0x2
000000010000d654	b.ls	0x10000d634
000000010000d658	mov	w0, #0x0
000000010000d65c	b	0x10000d66c
000000010000d660	orr	w0, wzr, #0x1
000000010000d664	b	0x10000d66c
000000010000d668	mov	w0, #-0x1
000000010000d66c	ldur	x8, [x29, #-0x28]
000000010000d670	nop
000000010000d674	ldr	x9, #0x329a4 ; literal pool symbol address: ___stack_chk_guard
000000010000d678	ldr	x9, [x9]
000000010000d67c	cmp	x9, x8
000000010000d680	b.ne	0x10000d698
000000010000d684	ldp	x29, x30, [sp, #0x60]
000000010000d688	ldp	x20, x19, [sp, #0x50]
000000010000d68c	ldp	x22, x21, [sp, #0x40]
000000010000d690	add	sp, sp, #0x70
000000010000d694	ret
000000010000d698	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010000d69c	sub	sp, sp, #0x40
000000010000d6a0	stp	x22, x21, [sp, #0x10]
000000010000d6a4	stp	x20, x19, [sp, #0x20]
000000010000d6a8	stp	x29, x30, [sp, #0x30]
000000010000d6ac	add	x29, sp, #0x30
000000010000d6b0	mov	x19, x1
000000010000d6b4	bl	0x100031718 ; symbol stub for: _strdup
000000010000d6b8	mov	x20, x0
000000010000d6bc	str	x20, [sp, #0x8]
000000010000d6c0	adr	x1, #163454 ; literal pool for: "."
000000010000d6c4	nop
000000010000d6c8	add	x0, sp, #0x8
000000010000d6cc	bl	0x100031790 ; symbol stub for: _strsep
000000010000d6d0	cbz	x0, 0x10000d710
000000010000d6d4	mov	x22, #0x0
000000010000d6d8	adr	x21, #163430 ; literal pool for: "."
000000010000d6dc	nop
000000010000d6e0	str	xzr, [sp]
000000010000d6e4	mov	w2, #0xa
000000010000d6e8	mov	x1, sp
000000010000d6ec	bl	0x1000317c0 ; symbol stub for: _strtoull
000000010000d6f0	str	x0, [x19, x22]
000000010000d6f4	cmp	x22, #0x10
000000010000d6f8	b.eq	0x10000d710
000000010000d6fc	add	x0, sp, #0x8
000000010000d700	mov	x1, x21
000000010000d704	bl	0x100031790 ; symbol stub for: _strsep
000000010000d708	add	x22, x22, #0x8
000000010000d70c	cbnz	x0, 0x10000d6e0
000000010000d710	mov	x0, x20
000000010000d714	bl	0x100031010 ; symbol stub for: _free
000000010000d718	ldp	x29, x30, [sp, #0x30]
000000010000d71c	ldp	x20, x19, [sp, #0x20]
000000010000d720	ldp	x22, x21, [sp, #0x10]
000000010000d724	add	sp, sp, #0x40
000000010000d728	ret
000000010000d72c	sub	sp, sp, #0x30
000000010000d730	stp	x20, x19, [sp, #0x10]
000000010000d734	stp	x29, x30, [sp, #0x20]
000000010000d738	add	x29, sp, #0x20
000000010000d73c	mov	x19, x0
000000010000d740	str	xzr, [sp, #0x8]
000000010000d744	add	x20, x29, #0x10
000000010000d748	b	0x10000d76c
000000010000d74c	bl	0x100030adc ; symbol stub for: ___error
000000010000d750	ldr	w8, [x0]
000000010000d754	cmp	w8, #0xc
000000010000d758	b.eq	0x10000d768
000000010000d75c	bl	0x100030adc ; symbol stub for: ___error
000000010000d760	ldrsw	x0, [x0]
000000010000d764	cbnz	w0, 0x10000d798
000000010000d768	bl	0x10000d3ec
000000010000d76c	str	x20, [sp]
000000010000d770	add	x0, sp, #0x8
000000010000d774	add	x2, x29, #0x10
000000010000d778	mov	x1, x19
000000010000d77c	bl	0x100031880 ; symbol stub for: _vasprintf
000000010000d780	ldr	x0, [sp, #0x8]
000000010000d784	cbz	x0, 0x10000d74c
000000010000d788	ldp	x29, x30, [sp, #0x20]
000000010000d78c	ldp	x20, x19, [sp, #0x10]
000000010000d790	add	sp, sp, #0x30
000000010000d794	ret
000000010000d798	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000d79c	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000d7a0	brk	#0x1
000000010000d7a4	stp	x20, x19, [sp, #-0x20]!
000000010000d7a8	stp	x29, x30, [sp, #0x10]
000000010000d7ac	add	x29, sp, #0x10
000000010000d7b0	mov	x19, x1
000000010000d7b4	mov	x20, x0
000000010000d7b8	mov	x0, x19
000000010000d7bc	bl	0x10003173c ; symbol stub for: _strlen
000000010000d7c0	mov	x2, x0
000000010000d7c4	mov	x0, x20
000000010000d7c8	mov	x1, x19
000000010000d7cc	bl	0x100031748 ; symbol stub for: _strncmp
000000010000d7d0	cmp	w0, #0x0
000000010000d7d4	cset	w0, eq
000000010000d7d8	ldp	x29, x30, [sp, #0x10]
000000010000d7dc	ldp	x20, x19, [sp], #0x20
000000010000d7e0	ret
000000010000d7e4	stp	x22, x21, [sp, #-0x30]!
000000010000d7e8	stp	x20, x19, [sp, #0x10]
000000010000d7ec	stp	x29, x30, [sp, #0x20]
000000010000d7f0	add	x29, sp, #0x20
000000010000d7f4	mov	x19, x1
000000010000d7f8	mov	x20, x0
000000010000d7fc	bl	0x10003173c ; symbol stub for: _strlen
000000010000d800	mov	x21, x0
000000010000d804	mov	x0, x19
000000010000d808	bl	0x10003173c ; symbol stub for: _strlen
000000010000d80c	subs	x8, x21, x0
000000010000d810	b.mi	0x10000d82c
000000010000d814	add	x0, x20, x8
000000010000d818	mov	x1, x19
000000010000d81c	bl	0x100031700 ; symbol stub for: _strcmp
000000010000d820	cmp	w0, #0x0
000000010000d824	cset	w0, eq
000000010000d828	b	0x10000d830
000000010000d82c	mov	w0, #0x0
000000010000d830	ldp	x29, x30, [sp, #0x20]
000000010000d834	ldp	x20, x19, [sp, #0x10]
000000010000d838	ldp	x22, x21, [sp], #0x30
000000010000d83c	ret
000000010000d840	mov	x8, x0
000000010000d844	cbz	x1, 0x10000d870
000000010000d848	mov	x9, #0x0
000000010000d84c	mov	w0, #0x1505
000000010000d850	ldrb	w10, [x8, x9]
000000010000d854	cbz	x10, 0x10000d86c
000000010000d858	add	x11, x0, x0, lsl #5
000000010000d85c	add	x0, x11, x10
000000010000d860	add	x9, x9, #0x1
000000010000d864	cmp	x9, x1
000000010000d868	b.lo	0x10000d850
000000010000d86c	ret
000000010000d870	mov	w0, #0x1505
000000010000d874	ret
000000010000d878	mov	x8, x0
000000010000d87c	ldrb	w9, [x8]
000000010000d880	cbz	w9, 0x10000d8a0
000000010000d884	mov	x0, #0x0
000000010000d888	add	x8, x8, #0x1
000000010000d88c	add	x10, x0, x0, lsl #5
000000010000d890	add	x0, x10, w9, sxtb
000000010000d894	ldrb	w9, [x8], #0x1
000000010000d898	cbnz	w9, 0x10000d88c
000000010000d89c	ret
000000010000d8a0	mov	x0, #0x0
000000010000d8a4	ret
000000010000d8a8	cbz	x2, 0x10000d8d0
000000010000d8ac	mov	x9, #0x0
000000010000d8b0	add	x8, x1, #0x8
000000010000d8b4	ldur	w10, [x8, #-0x8]
000000010000d8b8	cmp	w10, w0
000000010000d8bc	b.eq	0x10000d8d8
000000010000d8c0	add	x9, x9, #0x1
000000010000d8c4	add	x8, x8, #0x10
000000010000d8c8	cmp	x9, x2
000000010000d8cc	b.lo	0x10000d8b4
000000010000d8d0	mov	x0, #0x0
000000010000d8d4	ret
000000010000d8d8	ldr	x0, [x8]
000000010000d8dc	ret
000000010000d8e0	nop
000000010000d8e4	ldr	x0, #0x35dec
000000010000d8e8	ret
000000010000d8ec	sub	sp, sp, #0xb0
000000010000d8f0	stp	x24, x23, [sp, #0x70]
000000010000d8f4	stp	x22, x21, [sp, #0x80]
000000010000d8f8	stp	x20, x19, [sp, #0x90]
000000010000d8fc	stp	x29, x30, [sp, #0xa0]
000000010000d900	add	x29, sp, #0xa0
000000010000d904	mov	x21, x3
000000010000d908	mov	x20, x1
000000010000d90c	mov	x19, x0
000000010000d910	nop
000000010000d914	ldr	x8, #0x32704 ; literal pool symbol address: ___stack_chk_guard
000000010000d918	ldr	x8, [x8]
000000010000d91c	stur	x8, [x29, #-0x38]
000000010000d920	cbz	w2, 0x10000d930
000000010000d924	mov	x0, x19
000000010000d928	mov	x1, x20
000000010000d92c	bl	0x10002a3bc
000000010000d930	mov	x0, x21
000000010000d934	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000d938	nop
000000010000d93c	ldr	x8, #0x327a4 ; literal pool symbol address: __xpc_type_string
000000010000d940	cmp	x0, x8
000000010000d944	b.eq	0x10000da54
000000010000d948	nop
000000010000d94c	ldr	x8, #0x32784 ; literal pool symbol address: __xpc_type_int64
000000010000d950	cmp	x0, x8
000000010000d954	b.eq	0x10000da6c
000000010000d958	nop
000000010000d95c	ldr	x8, #0x3278c ; literal pool symbol address: __xpc_type_uint64
000000010000d960	cmp	x0, x8
000000010000d964	b.eq	0x10000da84
000000010000d968	nop
000000010000d96c	ldr	x8, #0x3275c ; literal pool symbol address: __xpc_type_double
000000010000d970	cmp	x0, x8
000000010000d974	b.eq	0x10000da9c
000000010000d978	nop
000000010000d97c	ldr	x8, #0x32724 ; literal pool symbol address: __xpc_type_bool
000000010000d980	cmp	x0, x8
000000010000d984	b.eq	0x10000dab4
000000010000d988	nop
000000010000d98c	ldr	x8, #0x3272c ; literal pool symbol address: __xpc_type_date
000000010000d990	cmp	x0, x8
000000010000d994	b.eq	0x10000dae4
000000010000d998	nop
000000010000d99c	ldr	x8, #0x326fc ; literal pool symbol address: __xpc_type_array
000000010000d9a0	cmp	x0, x8
000000010000d9a4	b.eq	0x10000db78
000000010000d9a8	nop
000000010000d9ac	ldr	x8, #0x32714 ; literal pool symbol address: __xpc_type_dictionary
000000010000d9b0	cmp	x0, x8
000000010000d9b4	b.eq	0x10000dbfc
000000010000d9b8	nop
000000010000d9bc	ldr	x8, #0x326ec ; literal pool symbol address: __xpc_type_bundle
000000010000d9c0	cmp	x0, x8
000000010000d9c4	b.ne	0x10000db48
000000010000d9c8	adr	x2, #162749 ; literal pool for: "@bundle {"
000000010000d9cc	nop
000000010000d9d0	mov	x0, x19
000000010000d9d4	mov	x1, #0x0
000000010000d9d8	bl	0x10002a548
000000010000d9dc	mov	x0, x21
000000010000d9e0	bl	0x100031970 ; symbol stub for: _xpc_bundle_get_info_dictionary
000000010000d9e4	mov	x22, x0
000000010000d9e8	add	x23, x20, #0x1
000000010000d9ec	adr	x2, #162723 ; literal pool for: "info plist = "
000000010000d9f0	nop
000000010000d9f4	mov	x0, x19
000000010000d9f8	mov	x1, x23
000000010000d9fc	bl	0x10002a42c
000000010000da00	mov	w2, #0x0
000000010000da04	mov	x0, x19
000000010000da08	mov	x1, x23
000000010000da0c	mov	x3, x22
000000010000da10	bl	0x10000d8ec
000000010000da14	mov	x0, x21
000000010000da18	bl	0x10003194c ; symbol stub for: _xpc_bundle_copy_services
000000010000da1c	mov	x21, x0
000000010000da20	adr	x2, #162685 ; literal pool for: "service bundles => "
000000010000da24	nop
000000010000da28	mov	x0, x19
000000010000da2c	mov	x1, x23
000000010000da30	bl	0x10002a42c
000000010000da34	mov	w2, #0x0
000000010000da38	mov	x0, x19
000000010000da3c	mov	x1, x23
000000010000da40	mov	x3, x21
000000010000da44	bl	0x10000d8ec
000000010000da48	mov	x0, x21
000000010000da4c	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010000da50	b	0x10000dc30
000000010000da54	mov	x0, x21
000000010000da58	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000da5c	str	x0, [sp]
000000010000da60	adr	x2, #162528 ; literal pool for: "\"%s\""
000000010000da64	nop
000000010000da68	b	0x10000db3c
000000010000da6c	mov	x0, x21
000000010000da70	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010000da74	str	x0, [sp]
000000010000da78	adr	x2, #160317 ; literal pool for: "%lld"
000000010000da7c	nop
000000010000da80	b	0x10000db3c
000000010000da84	mov	x0, x21
000000010000da88	bl	0x100031bc8 ; symbol stub for: _xpc_uint64_get_value
000000010000da8c	str	x0, [sp]
000000010000da90	adr	x2, #162485 ; literal pool for: "%llu"
000000010000da94	nop
000000010000da98	b	0x10000db3c
000000010000da9c	mov	x0, x21
000000010000daa0	bl	0x100031b2c ; symbol stub for: _xpc_double_get_value
000000010000daa4	str	d0, [sp]
000000010000daa8	adr	x2, #162466 ; literal pool for: "%f"
000000010000daac	nop
000000010000dab0	b	0x10000db3c
000000010000dab4	nop
000000010000dab8	ldr	x8, #0x325d8 ; literal pool symbol address: __xpc_bool_true
000000010000dabc	adr	x9, #162454 ; literal pool for: "false"
000000010000dac0	nop
000000010000dac4	adr	x10, #162441 ; literal pool for: "true"
000000010000dac8	nop
000000010000dacc	cmp	x21, x8
000000010000dad0	csel	x8, x10, x9, eq
000000010000dad4	str	x8, [sp]
000000010000dad8	adr	x2, #162258 ; literal pool for: "%s"
000000010000dadc	nop
000000010000dae0	b	0x10000db3c
000000010000dae4	mov	x0, x21
000000010000dae8	bl	0x1000319f4 ; symbol stub for: _xpc_date_get_value_absolute
000000010000daec	fcvtzs	x8, d0
000000010000daf0	scvtf	d0, x8
000000010000daf4	nop
000000010000daf8	ldr	d1, 0x10003deb8
000000010000dafc	fadd	d0, d0, d1
000000010000db00	fcvtzs	x8, d0
000000010000db04	str	x8, [sp, #0x40]
000000010000db08	add	x0, sp, #0x40
000000010000db0c	add	x1, sp, #0x8
000000010000db10	bl	0x100031130 ; symbol stub for: _gmtime_r
000000010000db14	adr	x2, #162372 ; literal pool for: "%a %b %d %T %Y %Z"
000000010000db18	nop
000000010000db1c	add	x20, sp, #0x4a
000000010000db20	add	x0, sp, #0x4a
000000010000db24	orr	w1, wzr, #0x1e
000000010000db28	add	x3, sp, #0x8
000000010000db2c	bl	0x100031730 ; symbol stub for: _strftime
000000010000db30	str	x20, [sp]
000000010000db34	adr	x2, #162358 ; literal pool for: "%s (approx)"
000000010000db38	nop
000000010000db3c	mov	x0, x19
000000010000db40	mov	x1, #0x0
000000010000db44	bl	0x10002a548
000000010000db48	ldur	x8, [x29, #-0x38]
000000010000db4c	nop
000000010000db50	ldr	x9, #0x324c8 ; literal pool symbol address: ___stack_chk_guard
000000010000db54	ldr	x9, [x9]
000000010000db58	cmp	x9, x8
000000010000db5c	b.ne	0x10000dc44
000000010000db60	ldp	x29, x30, [sp, #0xa0]
000000010000db64	ldp	x20, x19, [sp, #0x90]
000000010000db68	ldp	x22, x21, [sp, #0x80]
000000010000db6c	ldp	x24, x23, [sp, #0x70]
000000010000db70	add	sp, sp, #0xb0
000000010000db74	ret
000000010000db78	adr	x2, #162302 ; literal pool for: "["
000000010000db7c	nop
000000010000db80	mov	x0, x19
000000010000db84	mov	x1, #0x0
000000010000db88	bl	0x10002a548
000000010000db8c	mov	x0, x21
000000010000db90	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000db94	cbz	x0, 0x10000dbf0
000000010000db98	mov	x22, #0x0
000000010000db9c	add	x23, x20, #0x1
000000010000dba0	adr	x24, #162264 ; literal pool for: "%lu = "
000000010000dba4	nop
000000010000dba8	str	x22, [sp]
000000010000dbac	mov	x0, x19
000000010000dbb0	mov	x1, x23
000000010000dbb4	mov	x2, x24
000000010000dbb8	bl	0x10002a42c
000000010000dbbc	mov	x0, x21
000000010000dbc0	mov	x1, x22
000000010000dbc4	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
000000010000dbc8	mov	x3, x0
000000010000dbcc	mov	w2, #0x0
000000010000dbd0	mov	x0, x19
000000010000dbd4	mov	x1, x23
000000010000dbd8	bl	0x10000d8ec
000000010000dbdc	add	x22, x22, #0x1
000000010000dbe0	mov	x0, x21
000000010000dbe4	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010000dbe8	cmp	x22, x0
000000010000dbec	b.lo	0x10000dba8
000000010000dbf0	adr	x2, #162191 ; literal pool for: "]"
000000010000dbf4	nop
000000010000dbf8	b	0x10000dc38
000000010000dbfc	adr	x2, #162181 ; literal pool for: "{"
000000010000dc00	nop
000000010000dc04	mov	x0, x19
000000010000dc08	mov	x1, #0x0
000000010000dc0c	bl	0x10002a548
000000010000dc10	add	x8, x20, #0x1
000000010000dc14	stp	xzr, x19, [sp, #0x8]
000000010000dc18	str	x8, [sp, #0x18]
000000010000dc1c	adr	x2, #44
000000010000dc20	nop
000000010000dc24	add	x1, sp, #0x8
000000010000dc28	mov	x0, x21
000000010000dc2c	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010000dc30	adr	x2, #162131 ; literal pool for: "}"
000000010000dc34	nop
000000010000dc38	mov	x0, x19
000000010000dc3c	mov	x1, x20
000000010000dc40	b	0x10000db44
000000010000dc44	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010000dc48	sub	sp, sp, #0x40
000000010000dc4c	stp	x22, x21, [sp, #0x10]
000000010000dc50	stp	x20, x19, [sp, #0x20]
000000010000dc54	stp	x29, x30, [sp, #0x30]
000000010000dc58	add	x29, sp, #0x30
000000010000dc5c	mov	x19, x1
000000010000dc60	ldp	x20, x21, [x2, #0x8]
000000010000dc64	str	x0, [sp]
000000010000dc68	adr	x2, #162362 ; literal pool for: "\"%s\" => "
000000010000dc6c	nop
000000010000dc70	mov	x0, x20
000000010000dc74	mov	x1, x21
000000010000dc78	bl	0x10002a42c
000000010000dc7c	mov	w2, #0x0
000000010000dc80	mov	x0, x20
000000010000dc84	mov	x1, x21
000000010000dc88	mov	x3, x19
000000010000dc8c	ldp	x29, x30, [sp, #0x30]
000000010000dc90	ldp	x20, x19, [sp, #0x20]
000000010000dc94	ldp	x22, x21, [sp, #0x10]
000000010000dc98	add	sp, sp, #0x40
000000010000dc9c	b	0x10000d8ec
000000010000dca0	stp	x29, x30, [sp, #-0x10]!
000000010000dca4	mov	x29, sp
000000010000dca8	bl	0x100028f84
000000010000dcac	sub	sp, sp, #0x120
000000010000dcb0	stp	x24, x23, [sp, #0xe0]
000000010000dcb4	stp	x22, x21, [sp, #0xf0]
000000010000dcb8	stp	x20, x19, [sp, #0x100]
000000010000dcbc	stp	x29, x30, [sp, #0x110]
000000010000dcc0	add	x29, sp, #0x110
000000010000dcc4	nop
000000010000dcc8	ldr	x8, #0x323b8 ; literal pool symbol address: __os_crash_callback
000000010000dccc	adr	x9, #-44
000000010000dcd0	nop
000000010000dcd4	str	x9, [x8]
000000010000dcd8	orr	w0, wzr, #0x1
000000010000dcdc	bl	0x100031190 ; symbol stub for: _isatty
000000010000dce0	adrp	x19, 55 ; 0x100044000
000000010000dce4	cbz	w0, 0x10000dcf0
000000010000dce8	ldrb	w8, [x19, #0x418]
000000010000dcec	cbz	w8, 0x10000e0ec
000000010000dcf0	bl	0x1000310d0 ; symbol stub for: _getpid
000000010000dcf4	cmp	w0, #0x1
000000010000dcf8	b.eq	0x10000dd04
000000010000dcfc	ldrb	w8, [x19, #0x418]
000000010000dd00	cbz	w8, 0x10000e0f8
000000010000dd04	bl	0x100031220 ; symbol stub for: _mach_host_self
000000010000dd08	bl	0x100031448 ; symbol stub for: _panic_init
000000010000dd0c	bl	0x1000315a4 ; symbol stub for: _qos_class_main
000000010000dd10	mov	x1, x0
000000010000dd14	mov	w2, #0x0
000000010000dd18	mov	x0, #0x0
000000010000dd1c	bl	0x100030e3c ; symbol stub for: _dispatch_queue_attr_make_with_qos_class
000000010000dd20	mov	x1, x0
000000010000dd24	adr	x0, #161961 ; literal pool for: "com.apple.xpc.launchd.eventq"
000000010000dd28	nop
000000010000dd2c	bl	0x100030e48 ; symbol stub for: _dispatch_queue_create
000000010000dd30	adrp	x20, 54 ; 0x100043000
000000010000dd34	str	x0, [x20, #0x6d0]
000000010000dd38	bl	0x100030f20 ; symbol stub for: _dispatch_suspend
000000010000dd3c	ldrb	w8, [x19, #0x418]
000000010000dd40	cbnz	w8, 0x10000dd68
000000010000dd44	mov	w0, #0x0
000000010000dd48	mov	w1, #0x0
000000010000dd4c	bl	0x10000e16c
000000010000dd50	orr	w0, wzr, #0x1
000000010000dd54	orr	w1, wzr, #0x1
000000010000dd58	bl	0x10000e16c
000000010000dd5c	orr	w0, wzr, #0x2
000000010000dd60	orr	w1, wzr, #0x2
000000010000dd64	bl	0x10000e16c
000000010000dd68	mov	w0, #0x40
000000010000dd6c	movk	w0, #0x2200, lsl #16
000000010000dd70	bl	0x10000ccbc
000000010000dd74	bl	0x10002f9f4
000000010000dd78	bl	0x100028f80
000000010000dd7c	adr	x8, #222981
000000010000dd80	nop
000000010000dd84	ldrb	w8, [x8]
000000010000dd88	cbz	w8, 0x10000dd9c
000000010000dd8c	adr	x8, #219016
000000010000dd90	nop
000000010000dd94	mov	w9, #-0x1
000000010000dd98	str	w9, [x8]
000000010000dd9c	mov	w21, #0x5
000000010000dda0	movk	w21, #0x1, lsl #16
000000010000dda4	bl	0x1000310d0 ; symbol stub for: _getpid
000000010000dda8	mov	x1, x0
000000010000ddac	adr	x22, #218984
000000010000ddb0	nop
000000010000ddb4	ldr	w2, [x22]
000000010000ddb8	orr	w0, wzr, #0x6
000000010000ddbc	mov	x3, #0x0
000000010000ddc0	mov	x4, #0x0
000000010000ddc4	bl	0x100031334 ; symbol stub for: _memorystatus_control
000000010000ddc8	cmn	w0, #0x1
000000010000ddcc	b.ne	0x10000de04
000000010000ddd0	ldr	w22, [x22]
000000010000ddd4	bl	0x100030adc ; symbol stub for: ___error
000000010000ddd8	ldr	w23, [x0]
000000010000dddc	bl	0x100030adc ; symbol stub for: ___error
000000010000dde0	ldr	w0, [x0]
000000010000dde4	bl	0x100031724 ; symbol stub for: _strerror
000000010000dde8	sub	w1, w21, #0x2
000000010000ddec	stp	x23, x0, [sp, #0x8]
000000010000ddf0	str	x22, [sp]
000000010000ddf4	adr	x2, #161792 ; literal pool for: "Could not opt into %d MB Jetsam high watermark: %d: %s"
000000010000ddf8	nop
000000010000ddfc	mov	x0, #0x0
000000010000de00	bl	0x100029dbc
000000010000de04	adr	x21, #218732
000000010000de08	nop
000000010000de0c	ldr	x0, [x21]
000000010000de10	nop
000000010000de14	ldr	x8, #0x350c4
000000010000de18	str	x8, [sp]
000000010000de1c	adr	x2, #161422 ; literal pool for: "%s"
000000010000de20	nop
000000010000de24	mov	x1, #0x0
000000010000de28	bl	0x10002a548
000000010000de2c	stur	xzr, [x29, #-0x38]
000000010000de30	adr	x0, #161787 ; literal pool for: "kern.bootargs"
000000010000de34	nop
000000010000de38	sub	x1, x29, #0x38
000000010000de3c	bl	0x100029448
000000010000de40	cbz	x0, 0x10000de60
000000010000de44	ldr	x0, [x21]
000000010000de48	ldur	x8, [x29, #-0x38]
000000010000de4c	str	x8, [sp]
000000010000de50	adr	x2, #161769 ; literal pool for: "boot-args = %s"
000000010000de54	nop
000000010000de58	mov	x1, #0x0
000000010000de5c	bl	0x10002a548
000000010000de60	ldur	x0, [x29, #-0x38]
000000010000de64	bl	0x100031010 ; symbol stub for: _free
000000010000de68	bl	0x1000310d0 ; symbol stub for: _getpid
000000010000de6c	bl	0x10003155c ; symbol stub for: _proc_disable_wakemon
000000010000de70	cmn	w0, #0x1
000000010000de74	b.eq	0x10000e124
000000010000de78	ldrb	w8, [x19, #0x418]
000000010000de7c	cbz	w8, 0x10000deb8
000000010000de80	adr	x8, #222730
000000010000de84	nop
000000010000de88	orr	w9, wzr, #0x1
000000010000de8c	strb	w9, [x8]
000000010000de90	adr	x2, #161720 ; literal pool for: "Lean Testing Environment starting."
000000010000de94	nop
000000010000de98	mov	w1, #0x5
000000010000de9c	movk	w1, #0x1, lsl #16
000000010000dea0	mov	x0, #0x0
000000010000dea4	bl	0x100029dbc
000000010000dea8	adr	x8, #222673
000000010000deac	nop
000000010000deb0	strb	wzr, [x8]
000000010000deb4	b	0x10000def0
000000010000deb8	adr	x8, #222657
000000010000debc	nop
000000010000dec0	ldrb	w8, [x8]
000000010000dec4	cbz	w8, 0x10000def0
000000010000dec8	adr	x8, #222658
000000010000decc	nop
000000010000ded0	orr	w9, wzr, #0x1
000000010000ded4	strb	w9, [x8]
000000010000ded8	adr	x2, #161683 ; literal pool for: "Restore environment starting."
000000010000dedc	nop
000000010000dee0	mov	w1, #0x5
000000010000dee4	movk	w1, #0x1, lsl #16
000000010000dee8	mov	x0, #0x0
000000010000deec	bl	0x100029dbc
000000010000def0	bl	0x100031688 ; symbol stub for: _setsid
000000010000def4	cmn	w0, #0x1
000000010000def8	b.ne	0x10000df30
000000010000defc	ldrb	w8, [x19, #0x418]
000000010000df00	cbnz	w8, 0x10000df30
000000010000df04	adr	x8, #222594
000000010000df08	nop
000000010000df0c	ldrb	w8, [x8]
000000010000df10	cbz	w8, 0x10000df24
000000010000df14	bl	0x100030adc ; symbol stub for: ___error
000000010000df18	ldr	w8, [x0]
000000010000df1c	cmp	w8, #0x1
000000010000df20	b.eq	0x10000df30
000000010000df24	bl	0x100030adc ; symbol stub for: ___error
000000010000df28	ldrsw	x0, [x0]
000000010000df2c	cbnz	w0, 0x10000e160
000000010000df30	adr	x0, #158611 ; literal pool for: "/"
000000010000df34	nop
000000010000df38	bl	0x100030c44 ; symbol stub for: _chdir
000000010000df3c	cmn	w0, #0x1
000000010000df40	b.eq	0x10000e138
000000010000df44	adr	x0, #155628 ; literal pool for: "root"
000000010000df48	nop
000000010000df4c	bl	0x100031670 ; symbol stub for: _setlogin
000000010000df50	cmn	w0, #0x1
000000010000df54	b.eq	0x10000e14c
000000010000df58	mov	x19, #0x0
000000010000df5c	orr	w21, wzr, #0x1
000000010000df60	adrp	x22, 54 ; 0x100043000
000000010000df64	adr	x23, #196444
000000010000df68	nop
000000010000df6c	ldr	w0, [x23, x19]
000000010000df70	sub	w8, w0, #0x1
000000010000df74	lsl	w8, w21, w8
000000010000df78	ldr	w9, [x22, #0x6d8]
000000010000df7c	orr	w8, w8, w9
000000010000df80	str	w8, [x22, #0x6d8]
000000010000df84	orr	w1, wzr, #0x1
000000010000df88	bl	0x1000316ac ; symbol stub for: _signal
000000010000df8c	cmn	x0, #0x1
000000010000df90	b.ne	0x10000dfa4
000000010000df94	bl	0x100030adc ; symbol stub for: ___error
000000010000df98	ldrsw	x0, [x0]
000000010000df9c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010000dfa0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000dfa4	add	x19, x19, #0x4
000000010000dfa8	cmp	x19, #0x54
000000010000dfac	b.ne	0x10000df6c
000000010000dfb0	nop
000000010000dfb4	ldr	x21, #0x3216c ; literal pool symbol address: _mach_task_self_
000000010000dfb8	ldr	w0, [x21]
000000010000dfbc	orr	w1, wzr, #0x4
000000010000dfc0	mov	w2, #0x0
000000010000dfc4	bl	0x100031820 ; symbol stub for: _task_set_special_port
000000010000dfc8	cbnz	w0, 0x10000e0b4
000000010000dfcc	nop
000000010000dfd0	ldr	x8, #0x32120 ; literal pool symbol address: _bootstrap_port
000000010000dfd4	str	wzr, [x8]
000000010000dfd8	mov	w0, #0x33
000000010000dfdc	orr	w1, wzr, #0x80
000000010000dfe0	mov	w2, #0x507
000000010000dfe4	movk	w2, #0x7, lsl #16
000000010000dfe8	bl	0x1000087d4
000000010000dfec	mov	x19, x0
000000010000dff0	str	w19, [sp, #0x18]
000000010000dff4	ldr	w0, [x21]
000000010000dff8	orr	w2, wzr, #0x1
000000010000dffc	add	x1, sp, #0x18
000000010000e000	bl	0x1000312d4 ; symbol stub for: _mach_ports_register
000000010000e004	cbnz	w0, 0x10000e0d4
000000010000e008	adr	x8, #222248
000000010000e00c	nop
000000010000e010	str	w19, [x8]
000000010000e014	bl	0x100031214 ; symbol stub for: _mach_absolute_time
000000010000e018	adrp	x8, 54 ; 0x100044000
000000010000e01c	str	x0, [x8, #0x408]
000000010000e020	adr	x0, #222336
000000010000e024	nop
000000010000e028	bl	0x100031868 ; symbol stub for: _uuid_generate
000000010000e02c	bl	0x100031124 ; symbol stub for: _getuid
000000010000e030	adr	x19, #222336
000000010000e034	nop
000000010000e038	str	w0, [x19]
000000010000e03c	bl	0x1000310c4 ; symbol stub for: _geteuid
000000010000e040	str	w0, [x19, #0x4]
000000010000e044	bl	0x1000310ac ; symbol stub for: _getegid
000000010000e048	str	w0, [x19, #0x8]
000000010000e04c	bl	0x1000310c4 ; symbol stub for: _geteuid
000000010000e050	str	w0, [x19, #0xc]
000000010000e054	bl	0x1000310ac ; symbol stub for: _getegid
000000010000e058	str	w0, [x19, #0x10]
000000010000e05c	bl	0x1000310d0 ; symbol stub for: _getpid
000000010000e060	str	w0, [x19, #0x14]
000000010000e064	bl	0x10002961c
000000010000e068	stp	w0, wzr, [x19, #0x18]
000000010000e06c	bl	0x1000310d0 ; symbol stub for: _getpid
000000010000e070	add	x1, sp, #0x18
000000010000e074	bl	0x100029380
000000010000e078	cbz	w0, 0x10000e084
000000010000e07c	cmp	w0, #0x2d
000000010000e080	b.ne	0x10000e0e0
000000010000e084	ldr	x8, [sp, #0xb0]
000000010000e088	adrp	x9, 54 ; 0x100044000
000000010000e08c	str	x8, [x9, #0x410]
000000010000e090	bl	0x10002d388
000000010000e094	bl	0x100009e98
000000010000e098	bl	0x100027798
000000010000e09c	bl	0x10001297c
000000010000e0a0	bl	0x100019fbc
000000010000e0a4	bl	0x10002aa04
000000010000e0a8	ldr	x0, [x20, #0x6d0]
000000010000e0ac	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010000e0b0	bl	0x100030e24 ; symbol stub for: _dispatch_main
000000010000e0b4	str	x0, [sp]
000000010000e0b8	adr	x2, #161267 ; literal pool for: "Could not neuter bootstrap port: 0x%x"
000000010000e0bc	nop
000000010000e0c0	orr	w1, wzr, #0x3
000000010000e0c4	mov	x0, #0x0
000000010000e0c8	bl	0x100029dbc
000000010000e0cc	orr	w0, wzr, #0x1
000000010000e0d0	bl	0x100030f8c ; symbol stub for: _exit
000000010000e0d4	adr	x0, #161277 ; literal pool for: "could not set up inheritance port"
000000010000e0d8	nop
000000010000e0dc	bl	0x100028f84
000000010000e0e0	adr	x0, #161193 ; literal pool for: "could not get unique pid"
000000010000e0e4	nop
000000010000e0e8	bl	0x100028f84
000000010000e0ec	nop
000000010000e0f0	ldr	x8, #0x31f38 ; literal pool symbol address: ___stdoutp
000000010000e0f4	b	0x10000e100
000000010000e0f8	nop
000000010000e0fc	ldr	x8, #0x31f24 ; literal pool symbol address: ___stderrp
000000010000e100	ldr	x19, [x8]
000000010000e104	bl	0x1000310dc ; symbol stub for: _getprogname
000000010000e108	str	x0, [sp]
000000010000e10c	adr	x1, #160933 ; literal pool for: "%s cannot be run directly.\n"
000000010000e110	nop
000000010000e114	mov	x0, x19
000000010000e118	bl	0x100030ff8 ; symbol stub for: _fprintf
000000010000e11c	mov	w0, #0x4e
000000010000e120	bl	0x100030f8c ; symbol stub for: _exit
000000010000e124	bl	0x100030adc ; symbol stub for: ___error
000000010000e128	ldrsw	x0, [x0]
000000010000e12c	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000e130	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000e134	brk	#0x1
000000010000e138	bl	0x100030adc ; symbol stub for: ___error
000000010000e13c	ldrsw	x0, [x0]
000000010000e140	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000e144	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000e148	brk	#0x1
000000010000e14c	bl	0x100030adc ; symbol stub for: ___error
000000010000e150	ldrsw	x0, [x0]
000000010000e154	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000e158	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000e15c	brk	#0x1
000000010000e160	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000e164	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000e168	brk	#0x1
000000010000e16c	sub	sp, sp, #0x30
000000010000e170	stp	x20, x19, [sp, #0x10]
000000010000e174	stp	x29, x30, [sp, #0x20]
000000010000e178	add	x29, sp, #0x20
000000010000e17c	mov	x19, x1
000000010000e180	orr	w1, w0, #0x20000
000000010000e184	mov	w8, #0x1b6
000000010000e188	str	x8, [sp]
000000010000e18c	adr	x0, #160862 ; literal pool for: "/dev/null"
000000010000e190	nop
000000010000e194	bl	0x1000313f4 ; symbol stub for: _open
000000010000e198	cmn	w0, #0x1
000000010000e19c	b.eq	0x10000e1cc
000000010000e1a0	mov	x1, x19
000000010000e1a4	bl	0x100030f80 ; symbol stub for: _dup2
000000010000e1a8	mov	x19, x0
000000010000e1ac	cmn	w19, #0x1
000000010000e1b0	b.ne	0x10000e1c0
000000010000e1b4	bl	0x100030adc ; symbol stub for: ___error
000000010000e1b8	ldrsw	x0, [x0]
000000010000e1bc	cbnz	w0, 0x10000e1ec
000000010000e1c0	mov	x0, x19
000000010000e1c4	bl	0x100030c74 ; symbol stub for: _close
000000010000e1c8	cbnz	w0, 0x10000e1dc
000000010000e1cc	ldp	x29, x30, [sp, #0x20]
000000010000e1d0	ldp	x20, x19, [sp, #0x10]
000000010000e1d4	add	sp, sp, #0x30
000000010000e1d8	ret
000000010000e1dc	sxtw	x0, w0
000000010000e1e0	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000e1e4	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000e1e8	brk	#0x1
000000010000e1ec	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010000e1f0	bl	0x100030b78 ; symbol stub for: __os_crash
000000010000e1f4	brk	#0x1
000000010000e1f8	sub	sp, sp, #0xe0
000000010000e1fc	stp	x22, x21, [sp, #0xb0]
000000010000e200	stp	x20, x19, [sp, #0xc0]
000000010000e204	stp	x29, x30, [sp, #0xd0]
000000010000e208	add	x29, sp, #0xd0
000000010000e20c	mov	x19, x2
000000010000e210	mov	x20, x0
000000010000e214	nop
000000010000e218	ldr	x8, #0x31e00 ; literal pool symbol address: ___stack_chk_guard
000000010000e21c	ldr	x8, [x8]
000000010000e220	stur	x8, [x29, #-0x28]
000000010000e224	nop
000000010000e228	ldr	x8, #0x31dd8 ; literal pool symbol address: _NDR_record
000000010000e22c	ldr	x8, [x8]
000000010000e230	str	x8, [sp, #0x18]
000000010000e234	mov	x8, sp
000000010000e238	add	x0, x8, #0x28
000000010000e23c	orr	w2, wzr, #0x80
000000010000e240	nop
000000010000e244	ldr	x8, #0x31ee4 ; literal pool symbol address: _mig_strncpy_zerofill
000000010000e248	cbz	x8, 0x10000e254
000000010000e24c	bl	0x100031388 ; symbol stub for: _mig_strncpy_zerofill
000000010000e250	b	0x10000e258
000000010000e254	bl	0x10003137c ; symbol stub for: _mig_strncpy
000000010000e258	str	w0, [sp, #0x24]
000000010000e25c	add	w8, w0, #0x2b
000000010000e260	and	w21, w8, #0xfffffffc
000000010000e264	mov	w8, #0x1513
000000010000e268	str	w8, [sp]
000000010000e26c	str	w20, [sp, #0x8]
000000010000e270	bl	0x100031364 ; symbol stub for: _mig_get_reply_port
000000010000e274	mov	x8, x0
000000010000e278	str	w8, [sp, #0xc]
000000010000e27c	nop
000000010000e280	ldr	d0, 0x10003df18
000000010000e284	str	d0, [sp, #0x10]
000000010000e288	nop
000000010000e28c	ldr	x9, #0x31eac ; literal pool symbol address: _voucher_mach_msg_set
000000010000e290	cbz	x9, 0x10000e2a0
000000010000e294	mov	x0, sp
000000010000e298	bl	0x10003188c ; symbol stub for: _voucher_mach_msg_set
000000010000e29c	ldr	w8, [sp, #0xc]
000000010000e2a0	orr	w1, wzr, #0x3
000000010000e2a4	orr	w3, wzr, #0x30
000000010000e2a8	mov	x0, sp
000000010000e2ac	mov	x2, x21
000000010000e2b0	mov	x4, x8
000000010000e2b4	mov	w5, #0x0
000000010000e2b8	mov	w6, #0x0
000000010000e2bc	bl	0x100031244 ; symbol stub for: _mach_msg
000000010000e2c0	mov	x20, x0
000000010000e2c4	mov	w8, #0xfffe
000000010000e2c8	movk	w8, #0xefff, lsl #16
000000010000e2cc	add	w8, w20, w8
000000010000e2d0	cmp	w8, #0xe
000000010000e2d4	orr	w9, wzr, #0x1
000000010000e2d8	lsl	w8, w9, w8
000000010000e2dc	mov	w9, #0x4003
000000010000e2e0	and	w8, w8, w9
000000010000e2e4	ccmp	w8, #0x0, #0x4, ls
000000010000e2e8	b.eq	0x10000e2f8
000000010000e2ec	ldr	w0, [sp, #0xc]
000000010000e2f0	bl	0x100031370 ; symbol stub for: _mig_put_reply_port
000000010000e2f4	b	0x10000e354
000000010000e2f8	cbnz	w20, 0x10000e33c
000000010000e2fc	ldr	w8, [sp, #0x14]
000000010000e300	cmp	w8, #0x47
000000010000e304	b.eq	0x10000e348
000000010000e308	cmp	w8, #0xbab
000000010000e30c	b.ne	0x10000e350
000000010000e310	ldr	w8, [sp]
000000010000e314	tbnz	w8, #0x1f, 0x10000e334
000000010000e318	ldr	w8, [sp, #0x4]
000000010000e31c	cmp	w8, #0x28
000000010000e320	b.eq	0x10000e384
000000010000e324	cmp	w8, #0x24
000000010000e328	b.ne	0x10000e334
000000010000e32c	ldr	w20, [sp, #0x20]
000000010000e330	cbnz	w20, 0x10000e354
000000010000e334	mov	w20, #-0x12c
000000010000e338	b	0x10000e354
000000010000e33c	ldr	w0, [sp, #0xc]
000000010000e340	bl	0x10003134c ; symbol stub for: _mig_dealloc_reply_port
000000010000e344	b	0x10000e354
000000010000e348	mov	w20, #-0x134
000000010000e34c	b	0x10000e354
000000010000e350	mov	w20, #-0x12d
000000010000e354	ldur	x8, [x29, #-0x28]
000000010000e358	nop
000000010000e35c	ldr	x9, #0x31cbc ; literal pool symbol address: ___stack_chk_guard
000000010000e360	ldr	x9, [x9]
000000010000e364	cmp	x9, x8
000000010000e368	b.ne	0x10000e398
000000010000e36c	mov	x0, x20
000000010000e370	ldp	x29, x30, [sp, #0xd0]
000000010000e374	ldp	x20, x19, [sp, #0xc0]
000000010000e378	ldp	x22, x21, [sp, #0xb0]
000000010000e37c	add	sp, sp, #0xe0
000000010000e380	ret
000000010000e384	ldr	w20, [sp, #0x20]
000000010000e388	cbnz	w20, 0x10000e354
000000010000e38c	ldr	w8, [sp, #0x24]
000000010000e390	str	w8, [x19]
000000010000e394	b	0x10000e354
000000010000e398	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010000e39c	stp	x22, x21, [sp, #-0x30]!
000000010000e3a0	stp	x20, x19, [sp, #0x10]
000000010000e3a4	stp	x29, x30, [sp, #0x20]
000000010000e3a8	add	x29, sp, #0x20
000000010000e3ac	mov	x21, x3
000000010000e3b0	mov	x22, x2
000000010000e3b4	mov	x19, x0
000000010000e3b8	orr	w0, wzr, #0x18
000000010000e3bc	bl	0x10000d464
000000010000e3c0	mov	x20, x0
000000010000e3c4	stp	x19, x22, [x20]
000000010000e3c8	str	x21, [x20, #0x10]
000000010000e3cc	cbz	x19, 0x10000e3e0
000000010000e3d0	nop
000000010000e3d4	ldr	x1, #0x34664 ; Objc selector ref: retain
000000010000e3d8	mov	x0, x19
000000010000e3dc	bl	0x1000313d0 ; Objc message: -[x0 retain]
000000010000e3e0	mov	x0, x20
000000010000e3e4	ldp	x29, x30, [sp, #0x20]
000000010000e3e8	ldp	x20, x19, [sp, #0x10]
000000010000e3ec	ldp	x22, x21, [sp], #0x30
000000010000e3f0	ret
000000010000e3f4	stp	x20, x19, [sp, #-0x20]!
000000010000e3f8	stp	x29, x30, [sp, #0x10]
000000010000e3fc	add	x29, sp, #0x10
000000010000e400	mov	x19, x0
000000010000e404	nop
000000010000e408	ldr	x1, #0x34630 ; Objc selector ref: retain
000000010000e40c	bl	0x1000313d0 ; Objc message: -[x0 retain]
000000010000e410	mov	x0, x19
000000010000e414	ldp	x29, x30, [sp, #0x10]
000000010000e418	ldp	x20, x19, [sp], #0x20
000000010000e41c	ret
000000010000e420	stp	x22, x21, [sp, #-0x30]!
000000010000e424	stp	x20, x19, [sp, #0x10]
000000010000e428	stp	x29, x30, [sp, #0x20]
000000010000e42c	add	x29, sp, #0x20
000000010000e430	mov	x21, x2
000000010000e434	mov	x22, x1
000000010000e438	mov	x19, x0
000000010000e43c	orr	w0, wzr, #0x18
000000010000e440	bl	0x10000d464
000000010000e444	mov	x20, x0
000000010000e448	stp	x19, x22, [x20]
000000010000e44c	str	x21, [x20, #0x10]
000000010000e450	cbz	x19, 0x10000e45c
000000010000e454	mov	x0, x19
000000010000e458	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000e45c	mov	x0, x20
000000010000e460	ldp	x29, x30, [sp, #0x20]
000000010000e464	ldp	x20, x19, [sp, #0x10]
000000010000e468	ldp	x22, x21, [sp], #0x30
000000010000e46c	ret
000000010000e470	stp	x20, x19, [sp, #-0x20]!
000000010000e474	stp	x29, x30, [sp, #0x10]
000000010000e478	add	x29, sp, #0x10
000000010000e47c	mov	x19, x0
000000010000e480	ldr	x0, [x19]
000000010000e484	cbz	x0, 0x10000e494
000000010000e488	nop
000000010000e48c	ldr	x1, #0x345b4 ; Objc selector ref: release
000000010000e490	bl	0x1000313d0 ; Objc message: -[x0 release]
000000010000e494	mov	x0, x19
000000010000e498	ldp	x29, x30, [sp, #0x10]
000000010000e49c	ldp	x20, x19, [sp], #0x20
000000010000e4a0	b	0x100031010 ; symbol stub for: _free
000000010000e4a4	nop
000000010000e4a8	ldr	x1, #0x34598 ; Objc selector ref: release
000000010000e4ac	b	0x1000313d0 ; Objc message: -[x0 release]
000000010000e4b0	stp	x20, x19, [sp, #-0x20]!
000000010000e4b4	stp	x29, x30, [sp, #0x10]
000000010000e4b8	add	x29, sp, #0x10
000000010000e4bc	mov	x19, x0
000000010000e4c0	ldr	x0, [x19]
000000010000e4c4	cbz	x0, 0x10000e4cc
000000010000e4c8	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010000e4cc	mov	x0, x19
000000010000e4d0	ldp	x29, x30, [sp, #0x10]
000000010000e4d4	ldp	x20, x19, [sp], #0x20
000000010000e4d8	b	0x100031010 ; symbol stub for: _free
000000010000e4dc	sub	sp, sp, #0x50
000000010000e4e0	stp	x24, x23, [sp, #0x10]
000000010000e4e4	stp	x22, x21, [sp, #0x20]
000000010000e4e8	stp	x20, x19, [sp, #0x30]
000000010000e4ec	stp	x29, x30, [sp, #0x40]
000000010000e4f0	add	x29, sp, #0x40
000000010000e4f4	mov	x19, x2
000000010000e4f8	mov	x20, x1
000000010000e4fc	mov	x21, x0
000000010000e500	tbnz	w3, #0x0, 0x10000e530
000000010000e504	mov	x23, #0x0
000000010000e508	adr	x22, #209960
000000010000e50c	nop
000000010000e510	ldr	x1, [x22, x23, lsl #3]
000000010000e514	mov	x0, x21
000000010000e518	bl	0x100031700 ; symbol stub for: _strcmp
000000010000e51c	cbz	w0, 0x10000e580
000000010000e520	add	x8, x23, #0x1
000000010000e524	orr	w23, wzr, #0x1
000000010000e528	cmp	x8, #0x1
000000010000e52c	b.ls	0x10000e510
000000010000e530	mov	x0, x21
000000010000e534	bl	0x10003173c ; symbol stub for: _strlen
000000010000e538	mov	x22, x0
000000010000e53c	mov	x0, x20
000000010000e540	bl	0x10003173c ; symbol stub for: _strlen
000000010000e544	add	x8, x22, x0
000000010000e548	add	x23, x8, #0x2
000000010000e54c	add	x0, x8, #0x1a
000000010000e550	bl	0x10000d408
000000010000e554	mov	x22, x0
000000010000e558	add	x0, x22, #0x18
000000010000e55c	adr	x4, #160151 ; literal pool for: "%s=%s"
000000010000e560	nop
000000010000e564	stp	x21, x20, [sp]
000000010000e568	mov	x3, #-0x1
000000010000e56c	mov	w2, #0x0
000000010000e570	mov	x1, x23
000000010000e574	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010000e578	str	x23, [x19]
000000010000e57c	b	0x10000e584
000000010000e580	mov	x22, #0x0
000000010000e584	mov	x0, x22
000000010000e588	ldp	x29, x30, [sp, #0x40]
000000010000e58c	ldp	x20, x19, [sp, #0x30]
000000010000e590	ldp	x22, x21, [sp, #0x20]
000000010000e594	ldp	x24, x23, [sp, #0x10]
000000010000e598	add	sp, sp, #0x50
000000010000e59c	ret
000000010000e5a0	sub	sp, sp, #0x40
000000010000e5a4	stp	x22, x21, [sp, #0x10]
000000010000e5a8	stp	x20, x19, [sp, #0x20]
000000010000e5ac	stp	x29, x30, [sp, #0x30]
000000010000e5b0	add	x29, sp, #0x30
000000010000e5b4	mov	x19, x1
000000010000e5b8	add	x20, x0, #0x18
000000010000e5bc	mov	x0, x20
000000010000e5c0	bl	0x10003173c ; symbol stub for: _strlen
000000010000e5c4	add	x21, x0, #0x1
000000010000e5c8	add	x0, x0, #0x19
000000010000e5cc	bl	0x10000d408
000000010000e5d0	mov	x22, x0
000000010000e5d4	add	x0, x22, #0x18
000000010000e5d8	adr	x4, #159442 ; literal pool for: "%s"
000000010000e5dc	nop
000000010000e5e0	str	x20, [sp]
000000010000e5e4	mov	x3, #-0x1
000000010000e5e8	mov	w2, #0x0
000000010000e5ec	mov	x1, x21
000000010000e5f0	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010000e5f4	str	x21, [x19]
000000010000e5f8	mov	x0, x22
000000010000e5fc	ldp	x29, x30, [sp, #0x30]
000000010000e600	ldp	x20, x19, [sp, #0x20]
000000010000e604	ldp	x22, x21, [sp, #0x10]
000000010000e608	add	sp, sp, #0x40
000000010000e60c	ret
000000010000e610	sub	sp, sp, #0x50
000000010000e614	stp	x24, x23, [sp, #0x10]
000000010000e618	stp	x22, x21, [sp, #0x20]
000000010000e61c	stp	x20, x19, [sp, #0x30]
000000010000e620	stp	x29, x30, [sp, #0x40]
000000010000e624	add	x29, sp, #0x40
000000010000e628	mov	x19, x2
000000010000e62c	mov	x20, x1
000000010000e630	add	x21, x0, #0x18
000000010000e634	mov	w23, #0x3d
000000010000e638	mov	w1, #0x3d
000000010000e63c	mov	x0, x21
000000010000e640	bl	0x100031784 ; symbol stub for: _strrchr
000000010000e644	mov	x22, x0
000000010000e648	mov	x8, x22
000000010000e64c	strb	wzr, [x8], #0x1
000000010000e650	stp	x21, x8, [sp]
000000010000e654	adr	x2, #159909 ; literal pool for: "%s => %s"
000000010000e658	nop
000000010000e65c	mov	x0, x19
000000010000e660	mov	x1, x20
000000010000e664	bl	0x10002a548
000000010000e668	strb	w23, [x22]
000000010000e66c	ldp	x29, x30, [sp, #0x40]
000000010000e670	ldp	x20, x19, [sp, #0x30]
000000010000e674	ldp	x22, x21, [sp, #0x20]
000000010000e678	ldp	x24, x23, [sp, #0x10]
000000010000e67c	add	sp, sp, #0x50
000000010000e680	ret
000000010000e684	stp	x22, x21, [sp, #-0x30]!
000000010000e688	stp	x20, x19, [sp, #0x10]
000000010000e68c	stp	x29, x30, [sp, #0x20]
000000010000e690	add	x29, sp, #0x20
000000010000e694	mov	x19, x1
000000010000e698	add	x21, x0, #0x18
000000010000e69c	mov	w22, #0x3d
000000010000e6a0	mov	w1, #0x3d
000000010000e6a4	mov	x0, x21
000000010000e6a8	bl	0x1000316f4 ; symbol stub for: _strchr
000000010000e6ac	mov	x20, x0
000000010000e6b0	cbz	x20, 0x10000e6d0
000000010000e6b4	strb	wzr, [x20]
000000010000e6b8	mov	x0, x21
000000010000e6bc	mov	x1, x19
000000010000e6c0	bl	0x100031700 ; symbol stub for: _strcmp
000000010000e6c4	cmp	w0, #0x0
000000010000e6c8	cset	w0, eq
000000010000e6cc	strb	w22, [x20]
000000010000e6d0	ldp	x29, x30, [sp, #0x20]
000000010000e6d4	ldp	x20, x19, [sp, #0x10]
000000010000e6d8	ldp	x22, x21, [sp], #0x30
000000010000e6dc	ret
000000010000e6e0	stp	x29, x30, [sp, #-0x10]!
000000010000e6e4	mov	x29, sp
000000010000e6e8	add	x0, x0, #0x18
000000010000e6ec	mov	w1, #0x3d
000000010000e6f0	bl	0x1000316f4 ; symbol stub for: _strchr
000000010000e6f4	cmp	x0, #0x0
000000010000e6f8	csinc	x0, xzr, x0, eq
000000010000e6fc	ldp	x29, x30, [sp], #0x10
000000010000e700	ret
000000010000e704	b	0x100031010 ; symbol stub for: _free
000000010000e708	stp	x22, x21, [sp, #-0x30]!
000000010000e70c	stp	x20, x19, [sp, #0x10]
000000010000e710	stp	x29, x30, [sp, #0x20]
000000010000e714	add	x29, sp, #0x20
000000010000e718	mov	x19, x0
000000010000e71c	adr	x1, #159718 ; literal pool for: "LD_LIBRARY_PATH"
000000010000e720	nop
000000010000e724	bl	0x100031700 ; symbol stub for: _strcmp
000000010000e728	cbz	w0, 0x10000e77c
000000010000e72c	adr	x1, #159718 ; literal pool for: "DYLD_"
000000010000e730	nop
000000010000e734	mov	x0, x19
000000010000e738	bl	0x10000d7a4
000000010000e73c	cbz	w0, 0x10000e780
000000010000e740	adr	x1, #159704 ; literal pool for: "DYLD_PRINT_"
000000010000e744	nop
000000010000e748	mov	x0, x19
000000010000e74c	bl	0x10000d7a4
000000010000e750	cbz	w0, 0x10000e77c
000000010000e754	mov	x20, #0x0
000000010000e758	adr	x21, #209392
000000010000e75c	nop
000000010000e760	ldr	x1, [x21, x20, lsl #3]
000000010000e764	mov	x0, x19
000000010000e768	bl	0x100031700 ; symbol stub for: _strcmp
000000010000e76c	cbz	w0, 0x10000e780
000000010000e770	add	x20, x20, #0x1
000000010000e774	cmp	x20, #0xa
000000010000e778	b.ls	0x10000e760
000000010000e77c	orr	w0, wzr, #0x1
000000010000e780	ldp	x29, x30, [sp, #0x20]
000000010000e784	ldp	x20, x19, [sp, #0x10]
000000010000e788	ldp	x22, x21, [sp], #0x30
000000010000e78c	ret
000000010000e790	stp	x22, x21, [sp, #-0x30]!
000000010000e794	stp	x20, x19, [sp, #0x10]
000000010000e798	stp	x29, x30, [sp, #0x20]
000000010000e79c	add	x29, sp, #0x20
000000010000e7a0	mov	x19, x1
000000010000e7a4	mov	x20, x0
000000010000e7a8	orr	w0, wzr, #0x18
000000010000e7ac	bl	0x10000d408
000000010000e7b0	mov	x21, x0
000000010000e7b4	mov	x0, x20
000000010000e7b8	bl	0x10000886c
000000010000e7bc	cbz	w0, 0x10000e7cc
000000010000e7c0	sxtw	x0, w0
000000010000e7c4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010000e7c8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000e7cc	stp	w20, w19, [x21, #0x10]
000000010000e7d0	mov	x0, x21
000000010000e7d4	ldp	x29, x30, [sp, #0x20]
000000010000e7d8	ldp	x20, x19, [sp, #0x10]
000000010000e7dc	ldp	x22, x21, [sp], #0x30
000000010000e7e0	ret
000000010000e7e4	stp	x20, x19, [sp, #-0x20]!
000000010000e7e8	stp	x29, x30, [sp, #0x10]
000000010000e7ec	add	x29, sp, #0x10
000000010000e7f0	mov	x19, x0
000000010000e7f4	ldr	w0, [x19, #0x10]
000000010000e7f8	bl	0x10000888c
000000010000e7fc	cbz	w0, 0x10000e80c
000000010000e800	sxtw	x0, w0
000000010000e804	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010000e808	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000e80c	mov	x0, x19
000000010000e810	ldp	x29, x30, [sp, #0x10]
000000010000e814	ldp	x20, x19, [sp], #0x20
000000010000e818	b	0x100031010 ; symbol stub for: _free
000000010000e81c	b	0x1000313e8 ; symbol stub for: _object_getClass
000000010000e820	ret
000000010000e824	ret
000000010000e828	sub	sp, sp, #0x30
000000010000e82c	stp	x20, x19, [sp, #0x10]
000000010000e830	stp	x29, x30, [sp, #0x20]
000000010000e834	add	x29, sp, #0x20
000000010000e838	mov	x19, x0
000000010000e83c	bl	0x1000199a4
000000010000e840	nop
000000010000e844	ldr	x8, #0x34274 ; Objc class ref: OS_launch_domain
000000010000e848	stp	x19, x8, [sp]
000000010000e84c	nop
000000010000e850	ldr	x1, #0x341f8 ; Objc selector ref: dealloc
000000010000e854	mov	x0, sp
000000010000e858	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000e85c	ldp	x29, x30, [sp, #0x20]
000000010000e860	ldp	x20, x19, [sp, #0x10]
000000010000e864	add	sp, sp, #0x30
000000010000e868	ret
000000010000e86c	stp	x20, x19, [sp, #-0x20]!
000000010000e870	stp	x29, x30, [sp, #0x10]
000000010000e874	add	x29, sp, #0x10
000000010000e878	add	x19, x0, #0x3a0
000000010000e87c	nop
000000010000e880	ldr	x0, #0x341d8 ; Objc class ref: OS_launch_domain
000000010000e884	nop
000000010000e888	ldr	x1, #0x341c8 ; Objc selector ref: class
000000010000e88c	bl	0x1000313d0 ; Objc message: +[OS_launch_domain class]
000000010000e890	mov	x1, x19
000000010000e894	ldp	x29, x30, [sp, #0x10]
000000010000e898	ldp	x20, x19, [sp], #0x20
000000010000e89c	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000e8a0	sub	sp, sp, #0x30
000000010000e8a4	stp	x20, x19, [sp, #0x10]
000000010000e8a8	stp	x29, x30, [sp, #0x20]
000000010000e8ac	add	x29, sp, #0x20
000000010000e8b0	mov	x19, x0
000000010000e8b4	bl	0x10002c404
000000010000e8b8	nop
000000010000e8bc	ldr	x8, #0x34204 ; Objc class ref: OS_launch_dictionary
000000010000e8c0	stp	x19, x8, [sp]
000000010000e8c4	nop
000000010000e8c8	ldr	x1, #0x34180 ; Objc selector ref: dealloc
000000010000e8cc	mov	x0, sp
000000010000e8d0	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000e8d4	ldp	x29, x30, [sp, #0x20]
000000010000e8d8	ldp	x20, x19, [sp, #0x10]
000000010000e8dc	add	sp, sp, #0x30
000000010000e8e0	ret
000000010000e8e4	stp	x20, x19, [sp, #-0x20]!
000000010000e8e8	stp	x29, x30, [sp, #0x10]
000000010000e8ec	add	x29, sp, #0x10
000000010000e8f0	add	x19, x0, #0x10
000000010000e8f4	nop
000000010000e8f8	ldr	x0, #0x34168 ; Objc class ref: OS_launch_dictionary
000000010000e8fc	nop
000000010000e900	ldr	x1, #0x34150 ; Objc selector ref: class
000000010000e904	bl	0x1000313d0 ; Objc message: +[OS_launch_dictionary class]
000000010000e908	mov	x1, x19
000000010000e90c	ldp	x29, x30, [sp, #0x10]
000000010000e910	ldp	x20, x19, [sp], #0x20
000000010000e914	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000e918	sub	sp, sp, #0x30
000000010000e91c	stp	x20, x19, [sp, #0x10]
000000010000e920	stp	x29, x30, [sp, #0x20]
000000010000e924	add	x29, sp, #0x20
000000010000e928	mov	x19, x0
000000010000e92c	bl	0x10002ea18
000000010000e930	nop
000000010000e934	ldr	x8, #0x34194 ; Objc class ref: OS_launch_endpoint
000000010000e938	stp	x19, x8, [sp]
000000010000e93c	nop
000000010000e940	ldr	x1, #0x34108 ; Objc selector ref: dealloc
000000010000e944	mov	x0, sp
000000010000e948	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000e94c	ldp	x29, x30, [sp, #0x20]
000000010000e950	ldp	x20, x19, [sp, #0x10]
000000010000e954	add	sp, sp, #0x30
000000010000e958	ret
000000010000e95c	stp	x20, x19, [sp, #-0x20]!
000000010000e960	stp	x29, x30, [sp, #0x10]
000000010000e964	add	x29, sp, #0x10
000000010000e968	add	x19, x0, #0x80
000000010000e96c	nop
000000010000e970	ldr	x0, #0x340f8 ; Objc class ref: OS_launch_endpoint
000000010000e974	nop
000000010000e978	ldr	x1, #0x340d8 ; Objc selector ref: class
000000010000e97c	bl	0x1000313d0 ; Objc message: +[OS_launch_endpoint class]
000000010000e980	mov	x1, x19
000000010000e984	ldp	x29, x30, [sp, #0x10]
000000010000e988	ldp	x20, x19, [sp], #0x20
000000010000e98c	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000e990	sub	sp, sp, #0x30
000000010000e994	stp	x20, x19, [sp, #0x10]
000000010000e998	stp	x29, x30, [sp, #0x20]
000000010000e99c	add	x29, sp, #0x20
000000010000e9a0	mov	x19, x0
000000010000e9a4	bl	0x100027610
000000010000e9a8	nop
000000010000e9ac	ldr	x8, #0x34124 ; Objc class ref: OS_launch_event_provider
000000010000e9b0	stp	x19, x8, [sp]
000000010000e9b4	nop
000000010000e9b8	ldr	x1, #0x34090 ; Objc selector ref: dealloc
000000010000e9bc	mov	x0, sp
000000010000e9c0	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000e9c4	ldp	x29, x30, [sp, #0x20]
000000010000e9c8	ldp	x20, x19, [sp, #0x10]
000000010000e9cc	add	sp, sp, #0x30
000000010000e9d0	ret
000000010000e9d4	stp	x20, x19, [sp, #-0x20]!
000000010000e9d8	stp	x29, x30, [sp, #0x10]
000000010000e9dc	add	x29, sp, #0x10
000000010000e9e0	add	x19, x0, #0x30
000000010000e9e4	nop
000000010000e9e8	ldr	x0, #0x34088 ; Objc class ref: OS_launch_event_provider
000000010000e9ec	nop
000000010000e9f0	ldr	x1, #0x34060 ; Objc selector ref: class
000000010000e9f4	bl	0x1000313d0 ; Objc message: +[OS_launch_event_provider class]
000000010000e9f8	mov	x1, x19
000000010000e9fc	ldp	x29, x30, [sp, #0x10]
000000010000ea00	ldp	x20, x19, [sp], #0x20
000000010000ea04	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000ea08	sub	sp, sp, #0x30
000000010000ea0c	stp	x20, x19, [sp, #0x10]
000000010000ea10	stp	x29, x30, [sp, #0x20]
000000010000ea14	add	x29, sp, #0x20
000000010000ea18	mov	x19, x0
000000010000ea1c	bl	0x100027668
000000010000ea20	nop
000000010000ea24	ldr	x8, #0x340b4 ; Objc class ref: OS_launch_event_realm
000000010000ea28	stp	x19, x8, [sp]
000000010000ea2c	nop
000000010000ea30	ldr	x1, #0x34018 ; Objc selector ref: dealloc
000000010000ea34	mov	x0, sp
000000010000ea38	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000ea3c	ldp	x29, x30, [sp, #0x20]
000000010000ea40	ldp	x20, x19, [sp, #0x10]
000000010000ea44	add	sp, sp, #0x30
000000010000ea48	ret
000000010000ea4c	stp	x20, x19, [sp, #-0x20]!
000000010000ea50	stp	x29, x30, [sp, #0x10]
000000010000ea54	add	x29, sp, #0x10
000000010000ea58	add	x19, x0, #0x48
000000010000ea5c	nop
000000010000ea60	ldr	x0, #0x34018 ; Objc class ref: OS_launch_event_realm
000000010000ea64	nop
000000010000ea68	ldr	x1, #0x33fe8 ; Objc selector ref: class
000000010000ea6c	bl	0x1000313d0 ; Objc message: +[OS_launch_event_realm class]
000000010000ea70	mov	x1, x19
000000010000ea74	ldp	x29, x30, [sp, #0x10]
000000010000ea78	ldp	x20, x19, [sp], #0x20
000000010000ea7c	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000ea80	sub	sp, sp, #0x30
000000010000ea84	stp	x20, x19, [sp, #0x10]
000000010000ea88	stp	x29, x30, [sp, #0x20]
000000010000ea8c	add	x29, sp, #0x20
000000010000ea90	mov	x19, x0
000000010000ea94	bl	0x100027710
000000010000ea98	nop
000000010000ea9c	ldr	x8, #0x34044 ; Objc class ref: OS_launch_event_stream
000000010000eaa0	stp	x19, x8, [sp]
000000010000eaa4	nop
000000010000eaa8	ldr	x1, #0x33fa0 ; Objc selector ref: dealloc
000000010000eaac	mov	x0, sp
000000010000eab0	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000eab4	ldp	x29, x30, [sp, #0x20]
000000010000eab8	ldp	x20, x19, [sp, #0x10]
000000010000eabc	add	sp, sp, #0x30
000000010000eac0	ret
000000010000eac4	stp	x20, x19, [sp, #-0x20]!
000000010000eac8	stp	x29, x30, [sp, #0x10]
000000010000eacc	add	x29, sp, #0x10
000000010000ead0	add	x19, x0, #0x10
000000010000ead4	nop
000000010000ead8	ldr	x0, #0x33fa8 ; Objc class ref: OS_launch_event_stream
000000010000eadc	nop
000000010000eae0	ldr	x1, #0x33f70 ; Objc selector ref: class
000000010000eae4	bl	0x1000313d0 ; Objc message: +[OS_launch_event_stream class]
000000010000eae8	mov	x1, x19
000000010000eaec	ldp	x29, x30, [sp, #0x10]
000000010000eaf0	ldp	x20, x19, [sp], #0x20
000000010000eaf4	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000eaf8	sub	sp, sp, #0x30
000000010000eafc	stp	x20, x19, [sp, #0x10]
000000010000eb00	stp	x29, x30, [sp, #0x20]
000000010000eb04	add	x29, sp, #0x20
000000010000eb08	mov	x19, x0
000000010000eb0c	bl	0x100027734
000000010000eb10	nop
000000010000eb14	ldr	x8, #0x33fd4 ; Objc class ref: OS_launch_event_subscription
000000010000eb18	stp	x19, x8, [sp]
000000010000eb1c	nop
000000010000eb20	ldr	x1, #0x33f28 ; Objc selector ref: dealloc
000000010000eb24	mov	x0, sp
000000010000eb28	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000eb2c	ldp	x29, x30, [sp, #0x20]
000000010000eb30	ldp	x20, x19, [sp, #0x10]
000000010000eb34	add	sp, sp, #0x30
000000010000eb38	ret
000000010000eb3c	stp	x20, x19, [sp, #-0x20]!
000000010000eb40	stp	x29, x30, [sp, #0x10]
000000010000eb44	add	x29, sp, #0x10
000000010000eb48	add	x19, x0, #0x48
000000010000eb4c	nop
000000010000eb50	ldr	x0, #0x33f38 ; Objc class ref: OS_launch_event_subscription
000000010000eb54	nop
000000010000eb58	ldr	x1, #0x33ef8 ; Objc selector ref: class
000000010000eb5c	bl	0x1000313d0 ; Objc message: +[OS_launch_event_subscription class]
000000010000eb60	mov	x1, x19
000000010000eb64	ldp	x29, x30, [sp, #0x10]
000000010000eb68	ldp	x20, x19, [sp], #0x20
000000010000eb6c	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000eb70	sub	sp, sp, #0x30
000000010000eb74	stp	x20, x19, [sp, #0x10]
000000010000eb78	stp	x29, x30, [sp, #0x20]
000000010000eb7c	add	x29, sp, #0x20
000000010000eb80	mov	x19, x0
000000010000eb84	bl	0x100009de8
000000010000eb88	nop
000000010000eb8c	ldr	x8, #0x33f64 ; Objc class ref: OS_launch_io
000000010000eb90	stp	x19, x8, [sp]
000000010000eb94	nop
000000010000eb98	ldr	x1, #0x33eb0 ; Objc selector ref: dealloc
000000010000eb9c	mov	x0, sp
000000010000eba0	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000eba4	ldp	x29, x30, [sp, #0x20]
000000010000eba8	ldp	x20, x19, [sp, #0x10]
000000010000ebac	add	sp, sp, #0x30
000000010000ebb0	ret
000000010000ebb4	stp	x20, x19, [sp, #-0x20]!
000000010000ebb8	stp	x29, x30, [sp, #0x10]
000000010000ebbc	add	x29, sp, #0x10
000000010000ebc0	add	x19, x0, #0x140
000000010000ebc4	nop
000000010000ebc8	ldr	x0, #0x33ec8 ; Objc class ref: OS_launch_io
000000010000ebcc	nop
000000010000ebd0	ldr	x1, #0x33e80 ; Objc selector ref: class
000000010000ebd4	bl	0x1000313d0 ; Objc message: +[OS_launch_io class]
000000010000ebd8	mov	x1, x19
000000010000ebdc	ldp	x29, x30, [sp, #0x10]
000000010000ebe0	ldp	x20, x19, [sp], #0x20
000000010000ebe4	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000ebe8	nop
000000010000ebec	ldr	x0, #0x33ea4 ; Objc class ref: OS_launch_io
000000010000ebf0	nop
000000010000ebf4	ldr	x1, #0x33e5c ; Objc selector ref: class
000000010000ebf8	b	0x1000313d0 ; Objc message: +[OS_launch_io class]
000000010000ebfc	sub	sp, sp, #0x30
000000010000ec00	stp	x20, x19, [sp, #0x10]
000000010000ec04	stp	x29, x30, [sp, #0x20]
000000010000ec08	add	x29, sp, #0x20
000000010000ec0c	mov	x19, x0
000000010000ec10	bl	0x100029960
000000010000ec14	nop
000000010000ec18	ldr	x8, #0x33ee0 ; Objc class ref: OS_launch_log
000000010000ec1c	stp	x19, x8, [sp]
000000010000ec20	nop
000000010000ec24	ldr	x1, #0x33e24 ; Objc selector ref: dealloc
000000010000ec28	mov	x0, sp
000000010000ec2c	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000ec30	ldp	x29, x30, [sp, #0x20]
000000010000ec34	ldp	x20, x19, [sp, #0x10]
000000010000ec38	add	sp, sp, #0x30
000000010000ec3c	ret
000000010000ec40	stp	x20, x19, [sp, #-0x20]!
000000010000ec44	stp	x29, x30, [sp, #0x10]
000000010000ec48	add	x29, sp, #0x10
000000010000ec4c	add	x19, x0, #0x30
000000010000ec50	nop
000000010000ec54	ldr	x0, #0x33e44 ; Objc class ref: OS_launch_log
000000010000ec58	nop
000000010000ec5c	ldr	x1, #0x33df4 ; Objc selector ref: class
000000010000ec60	bl	0x1000313d0 ; Objc message: +[OS_launch_log class]
000000010000ec64	mov	x1, x19
000000010000ec68	ldp	x29, x30, [sp, #0x10]
000000010000ec6c	ldp	x20, x19, [sp], #0x20
000000010000ec70	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000ec74	sub	sp, sp, #0x30
000000010000ec78	stp	x20, x19, [sp, #0x10]
000000010000ec7c	stp	x29, x30, [sp, #0x20]
000000010000ec80	add	x29, sp, #0x20
000000010000ec84	mov	x19, x0
000000010000ec88	bl	0x100026c00
000000010000ec8c	nop
000000010000ec90	ldr	x8, #0x33e70 ; Objc class ref: OS_launch_logfile
000000010000ec94	stp	x19, x8, [sp]
000000010000ec98	nop
000000010000ec9c	ldr	x1, #0x33dac ; Objc selector ref: dealloc
000000010000eca0	mov	x0, sp
000000010000eca4	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000eca8	ldp	x29, x30, [sp, #0x20]
000000010000ecac	ldp	x20, x19, [sp, #0x10]
000000010000ecb0	add	sp, sp, #0x30
000000010000ecb4	ret
000000010000ecb8	stp	x20, x19, [sp, #-0x20]!
000000010000ecbc	stp	x29, x30, [sp, #0x10]
000000010000ecc0	add	x29, sp, #0x10
000000010000ecc4	add	x19, x0, #0x30
000000010000ecc8	nop
000000010000eccc	ldr	x0, #0x33dd4 ; Objc class ref: OS_launch_logfile
000000010000ecd0	nop
000000010000ecd4	ldr	x1, #0x33d7c ; Objc selector ref: class
000000010000ecd8	bl	0x1000313d0 ; Objc message: +[OS_launch_logfile class]
000000010000ecdc	mov	x1, x19
000000010000ece0	ldp	x29, x30, [sp, #0x10]
000000010000ece4	ldp	x20, x19, [sp], #0x20
000000010000ece8	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000ecec	sub	sp, sp, #0x30
000000010000ecf0	stp	x20, x19, [sp, #0x10]
000000010000ecf4	stp	x29, x30, [sp, #0x20]
000000010000ecf8	add	x29, sp, #0x20
000000010000ecfc	mov	x19, x0
000000010000ed00	bl	0x10000eddc
000000010000ed04	nop
000000010000ed08	ldr	x8, #0x33e00 ; Objc class ref: OS_launch_socket
000000010000ed0c	stp	x19, x8, [sp]
000000010000ed10	nop
000000010000ed14	ldr	x1, #0x33d34 ; Objc selector ref: dealloc
000000010000ed18	mov	x0, sp
000000010000ed1c	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000ed20	ldp	x29, x30, [sp, #0x20]
000000010000ed24	ldp	x20, x19, [sp, #0x10]
000000010000ed28	add	sp, sp, #0x30
000000010000ed2c	ret
000000010000ed30	stp	x20, x19, [sp, #-0x20]!
000000010000ed34	stp	x29, x30, [sp, #0x10]
000000010000ed38	add	x29, sp, #0x10
000000010000ed3c	add	x19, x0, #0xb8
000000010000ed40	nop
000000010000ed44	ldr	x0, #0x33d64 ; Objc class ref: OS_launch_socket
000000010000ed48	nop
000000010000ed4c	ldr	x1, #0x33d04 ; Objc selector ref: class
000000010000ed50	bl	0x1000313d0 ; Objc message: +[OS_launch_socket class]
000000010000ed54	mov	x1, x19
000000010000ed58	ldp	x29, x30, [sp, #0x10]
000000010000ed5c	ldp	x20, x19, [sp], #0x20
000000010000ed60	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000ed64	sub	sp, sp, #0x30
000000010000ed68	stp	x20, x19, [sp, #0x10]
000000010000ed6c	stp	x29, x30, [sp, #0x20]
000000010000ed70	add	x29, sp, #0x20
000000010000ed74	mov	x19, x0
000000010000ed78	bl	0x1000037f8
000000010000ed7c	nop
000000010000ed80	ldr	x8, #0x33d90 ; Objc class ref: OS_launch_service
000000010000ed84	stp	x19, x8, [sp]
000000010000ed88	nop
000000010000ed8c	ldr	x1, #0x33cbc ; Objc selector ref: dealloc
000000010000ed90	mov	x0, sp
000000010000ed94	bl	0x1000313dc ; Objc message: -[[x0 super] dealloc]
000000010000ed98	ldp	x29, x30, [sp, #0x20]
000000010000ed9c	ldp	x20, x19, [sp, #0x10]
000000010000eda0	add	sp, sp, #0x30
000000010000eda4	ret
000000010000eda8	stp	x20, x19, [sp, #-0x20]!
000000010000edac	stp	x29, x30, [sp, #0x10]
000000010000edb0	add	x29, sp, #0x10
000000010000edb4	add	x19, x0, #0x458
000000010000edb8	nop
000000010000edbc	ldr	x0, #0x33cf4 ; Objc class ref: OS_launch_service
000000010000edc0	nop
000000010000edc4	ldr	x1, #0x33c8c ; Objc selector ref: class
000000010000edc8	bl	0x1000313d0 ; Objc message: +[OS_launch_service class]
000000010000edcc	mov	x1, x19
000000010000edd0	ldp	x29, x30, [sp, #0x10]
000000010000edd4	ldp	x20, x19, [sp], #0x20
000000010000edd8	b	0x100030c68 ; symbol stub for: _class_createInstance
000000010000eddc	stp	x22, x21, [sp, #-0x30]!
000000010000ede0	stp	x20, x19, [sp, #0x10]
000000010000ede4	stp	x29, x30, [sp, #0x20]
000000010000ede8	add	x29, sp, #0x20
000000010000edec	mov	x19, x0
000000010000edf0	ldr	x8, [x19, #0x48]
000000010000edf4	cbz	x8, 0x10000ee40
000000010000edf8	mov	x21, #0x0
000000010000edfc	adr	x20, #248
000000010000ee00	nop
000000010000ee04	ldr	x8, [x19, #0x38]
000000010000ee08	ldr	w0, [x8, x21, lsl #2]
000000010000ee0c	bl	0x100030c74 ; symbol stub for: _close
000000010000ee10	cmn	w0, #0x1
000000010000ee14	b.ne	0x10000ee30
000000010000ee18	bl	0x100030adc ; symbol stub for: ___error
000000010000ee1c	ldrsw	x2, [x0]
000000010000ee20	mov	x0, x20
000000010000ee24	mov	x1, x19
000000010000ee28	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000ee2c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000ee30	add	x21, x21, #0x1
000000010000ee34	ldr	x8, [x19, #0x48]
000000010000ee38	cmp	x21, x8
000000010000ee3c	b.lo	0x10000ee04
000000010000ee40	ldr	x8, [x19, #0x18]
000000010000ee44	cmn	x8, #0x1
000000010000ee48	b.ne	0x10000eed0
000000010000ee4c	ldr	x8, [x19, #0x20]
000000010000ee50	cmn	x8, #0x1
000000010000ee54	b.ne	0x10000eed0
000000010000ee58	ldr	x8, [x19, #0x8]
000000010000ee5c	cmn	x8, #0x1
000000010000ee60	b.ne	0x10000eedc
000000010000ee64	ldr	x8, [x19, #0x10]
000000010000ee68	cmn	x8, #0x1
000000010000ee6c	b.ne	0x10000eedc
000000010000ee70	ldrh	w8, [x19, #0xbc]
000000010000ee74	mov	w9, #0x84
000000010000ee78	and	w8, w8, w9
000000010000ee7c	cmp	w8, #0x4
000000010000ee80	b.eq	0x10000eee8
000000010000ee84	ldr	x0, [x19, #0x38]
000000010000ee88	bl	0x100031010 ; symbol stub for: _free
000000010000ee8c	ldr	x0, [x19, #0x40]
000000010000ee90	bl	0x100031010 ; symbol stub for: _free
000000010000ee94	ldr	x0, [x19, #0x78]
000000010000ee98	bl	0x100031010 ; symbol stub for: _free
000000010000ee9c	ldr	x0, [x19, #0x80]
000000010000eea0	bl	0x100031010 ; symbol stub for: _free
000000010000eea4	ldr	x0, [x19, #0x90]
000000010000eea8	bl	0x100031010 ; symbol stub for: _free
000000010000eeac	ldr	x0, [x19, #0x98]
000000010000eeb0	bl	0x100031010 ; symbol stub for: _free
000000010000eeb4	ldr	x0, [x19, #0xa0]
000000010000eeb8	bl	0x100031010 ; symbol stub for: _free
000000010000eebc	ldr	x0, [x19, #0xb0]
000000010000eec0	ldp	x29, x30, [sp, #0x20]
000000010000eec4	ldp	x20, x19, [sp, #0x10]
000000010000eec8	ldp	x22, x21, [sp], #0x30
000000010000eecc	b	0x100031b68 ; symbol stub for: _xpc_release
000000010000eed0	adr	x0, #157999 ; literal pool for: "socket deallocated while still in domain list"
000000010000eed4	nop
000000010000eed8	bl	0x100028f84
000000010000eedc	adr	x0, #158033 ; literal pool for: "socket deallocated while still in service list"
000000010000eee0	nop
000000010000eee4	bl	0x100028f84
000000010000eee8	adr	x0, #158068 ; literal pool for: "socket deallocated while still active"
000000010000eeec	nop
000000010000eef0	bl	0x100028f84
000000010000eef4	sub	sp, sp, #0x20
000000010000eef8	stp	x29, x30, [sp, #0x10]
000000010000eefc	add	x29, sp, #0x10
000000010000ef00	mov	x8, x1
000000010000ef04	str	x2, [sp]
000000010000ef08	adr	x2, #157090 ; literal pool for: "%s"
000000010000ef0c	nop
000000010000ef10	orr	w1, wzr, #0x3
000000010000ef14	mov	x0, x8
000000010000ef18	bl	0x10000ef2c
000000010000ef1c	orr	w0, wzr, #0x1
000000010000ef20	ldp	x29, x30, [sp, #0x10]
000000010000ef24	add	sp, sp, #0x20
000000010000ef28	ret
000000010000ef2c	sub	sp, sp, #0x40
000000010000ef30	stp	x22, x21, [sp, #0x10]
000000010000ef34	stp	x20, x19, [sp, #0x20]
000000010000ef38	stp	x29, x30, [sp, #0x30]
000000010000ef3c	add	x29, sp, #0x30
000000010000ef40	mov	x19, x2
000000010000ef44	mov	x20, x1
000000010000ef48	add	x1, x0, #0xc0
000000010000ef4c	mov	w2, #0x0
000000010000ef50	mov	x0, #0x0
000000010000ef54	bl	0x100029d50
000000010000ef58	mov	x21, x0
000000010000ef5c	add	x8, x29, #0x10
000000010000ef60	str	x8, [sp, #0x8]
000000010000ef64	add	x3, x29, #0x10
000000010000ef68	mov	x1, x20
000000010000ef6c	mov	x2, x19
000000010000ef70	bl	0x100029de4
000000010000ef74	mov	w1, #0x0
000000010000ef78	mov	x0, x21
000000010000ef7c	bl	0x10000e4a4
000000010000ef80	ldp	x29, x30, [sp, #0x30]
000000010000ef84	ldp	x20, x19, [sp, #0x20]
000000010000ef88	ldp	x22, x21, [sp, #0x10]
000000010000ef8c	add	sp, sp, #0x40
000000010000ef90	ret
000000010000ef94	stp	x28, x27, [sp, #-0x60]!
000000010000ef98	stp	x26, x25, [sp, #0x10]
000000010000ef9c	stp	x24, x23, [sp, #0x20]
000000010000efa0	stp	x22, x21, [sp, #0x30]
000000010000efa4	stp	x20, x19, [sp, #0x40]
000000010000efa8	stp	x29, x30, [sp, #0x50]
000000010000efac	add	x29, sp, #0x50
000000010000efb0	mov	x20, x7
000000010000efb4	mov	x22, x6
000000010000efb8	mov	x23, x5
000000010000efbc	mov	x24, x4
000000010000efc0	mov	x19, x3
000000010000efc4	mov	x25, x2
000000010000efc8	mov	x26, x1
000000010000efcc	mov	x27, x0
000000010000efd0	mov	x0, x26
000000010000efd4	bl	0x10003173c ; symbol stub for: _strlen
000000010000efd8	add	x0, x0, #0x1
000000010000efdc	bl	0x10000ed30
000000010000efe0	mov	x21, x0
000000010000efe4	str	x27, [x21, #0x30]
000000010000efe8	mov	w8, #-0x1
000000010000efec	str	w8, [x21, #0x50]
000000010000eff0	str	w25, [x21, #0x58]
000000010000eff4	mov	x0, x24
000000010000eff8	bl	0x100030e78 ; symbol stub for: _dispatch_retain
000000010000effc	stp	x24, x23, [x21, #0x60]
000000010000f000	str	x22, [x21, #0x70]
000000010000f004	mov	x0, x19
000000010000f008	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010000f00c	str	x0, [x21, #0xb0]
000000010000f010	ldrh	w8, [x21, #0xbc]
000000010000f014	orr	w8, w8, #0x2
000000010000f018	strh	w8, [x21, #0xbc]
000000010000f01c	add	x0, x21, #0xc0
000000010000f020	mov	x1, x26
000000010000f024	bl	0x10003170c ; symbol stub for: _strcpy
000000010000f028	mov	x8, #-0x1
000000010000f02c	stp	x8, x8, [x21, #0x18]
000000010000f030	stp	x8, x8, [x21, #0x8]
000000010000f034	mov	x0, x27
000000010000f038	bl	0x100015eb4
000000010000f03c	mov	x22, x0
000000010000f040	ldr	w23, [x22, #0x14]
000000010000f044	cbz	w23, 0x10000f060
000000010000f048	bl	0x1000310d0 ; symbol stub for: _getpid
000000010000f04c	cmp	w23, w0
000000010000f050	b.eq	0x10000f060
000000010000f054	ldr	w8, [x22, #0x8]
000000010000f058	cbz	w8, 0x10000f060
000000010000f05c	str	w8, [x21, #0x5c]
000000010000f060	adr	x1, #157730 ; literal pool for: "SockPathName"
000000010000f064	nop
000000010000f068	mov	x0, x19
000000010000f06c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010000f070	cbz	x0, 0x10000f098
000000010000f074	adr	x1, #157723 ; literal pool for: "/var/run/syslog"
000000010000f078	nop
000000010000f07c	bl	0x100031700 ; symbol stub for: _strcmp
000000010000f080	cbnz	w0, 0x10000f098
000000010000f084	adr	x1, #157723 ; literal pool for: "SystemLoggingSocket"
000000010000f088	nop
000000010000f08c	orr	w2, wzr, #0x1
000000010000f090	mov	x0, x19
000000010000f094	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010000f098	orr	w8, wzr, #0x1
000000010000f09c	str	w8, [x21, #0x54]
000000010000f0a0	orr	w1, wzr, #0x1
000000010000f0a4	mov	x0, x21
000000010000f0a8	mov	x2, x20
000000010000f0ac	mov	x3, #0x0
000000010000f0b0	bl	0x10000e39c
000000010000f0b4	mov	x20, x0
000000010000f0b8	adr	x2, #60
000000010000f0bc	nop
000000010000f0c0	mov	x0, x19
000000010000f0c4	mov	x1, x20
000000010000f0c8	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010000f0cc	mov	x0, x20
000000010000f0d0	bl	0x10000e470
000000010000f0d4	mov	x0, x21
000000010000f0d8	ldp	x29, x30, [sp, #0x50]
000000010000f0dc	ldp	x20, x19, [sp, #0x40]
000000010000f0e0	ldp	x22, x21, [sp, #0x30]
000000010000f0e4	ldp	x24, x23, [sp, #0x20]
000000010000f0e8	ldp	x26, x25, [sp, #0x10]
000000010000f0ec	ldp	x28, x27, [sp], #0x60
000000010000f0f0	ret
000000010000f0f4	sub	sp, sp, #0x60
000000010000f0f8	stp	x26, x25, [sp, #0x10]
000000010000f0fc	stp	x24, x23, [sp, #0x20]
000000010000f100	stp	x22, x21, [sp, #0x30]
000000010000f104	stp	x20, x19, [sp, #0x40]
000000010000f108	stp	x29, x30, [sp, #0x50]
000000010000f10c	add	x29, sp, #0x50
000000010000f110	mov	x21, x1
000000010000f114	mov	x20, x0
000000010000f118	ldp	x25, x19, [x2]
000000010000f11c	mov	x0, x21
000000010000f120	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010000f124	mov	x22, x0
000000010000f128	adr	x1, #158092 ; literal pool for: "SockType"
000000010000f12c	nop
000000010000f130	mov	x0, x20
000000010000f134	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f138	cbz	w0, 0x10000f258
000000010000f13c	adr	x1, #158120 ; literal pool for: "SockPassive"
000000010000f140	nop
000000010000f144	mov	x0, x20
000000010000f148	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f14c	cbz	w0, 0x10000f2bc
000000010000f150	adr	x23, #158112 ; literal pool for: "SecureSocketWithKey"
000000010000f154	nop
000000010000f158	mov	x0, x20
000000010000f15c	mov	x1, x23
000000010000f160	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f164	cbz	w0, 0x10000f2e8
000000010000f168	adr	x24, #157466 ; literal pool for: "SockPathName"
000000010000f16c	nop
000000010000f170	mov	x0, x20
000000010000f174	mov	x1, x24
000000010000f178	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f17c	cbz	w0, 0x10000f310
000000010000f180	adr	x1, #158132 ; literal pool for: "SockPathOwner"
000000010000f184	nop
000000010000f188	mov	x0, x20
000000010000f18c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f190	cbz	w0, 0x10000f33c
000000010000f194	adr	x1, #158126 ; literal pool for: "SockPathGroup"
000000010000f198	nop
000000010000f19c	mov	x0, x20
000000010000f1a0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f1a4	cbz	w0, 0x10000f364
000000010000f1a8	adr	x1, #158120 ; literal pool for: "SockPathMode"
000000010000f1ac	nop
000000010000f1b0	mov	x0, x20
000000010000f1b4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f1b8	cbz	w0, 0x10000f38c
000000010000f1bc	adr	x1, #158113 ; literal pool for: "SockNodeName"
000000010000f1c0	nop
000000010000f1c4	mov	x0, x20
000000010000f1c8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f1cc	cbz	w0, 0x10000f3d4
000000010000f1d0	adr	x1, #158106 ; literal pool for: "MulticastGroup"
000000010000f1d4	nop
000000010000f1d8	mov	x0, x20
000000010000f1dc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f1e0	cbz	w0, 0x10000f428
000000010000f1e4	adr	x1, #158101 ; literal pool for: "SockServiceName"
000000010000f1e8	nop
000000010000f1ec	mov	x0, x20
000000010000f1f0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f1f4	cbz	w0, 0x10000f460
000000010000f1f8	adr	x1, #158097 ; literal pool for: "SockFamily"
000000010000f1fc	nop
000000010000f200	mov	x0, x20
000000010000f204	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f208	cbz	w0, 0x10000f49c
000000010000f20c	adr	x1, #158110 ; literal pool for: "SockProtocol"
000000010000f210	nop
000000010000f214	mov	x0, x20
000000010000f218	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f21c	cbz	w0, 0x10000f50c
000000010000f220	adr	x1, #158111 ; literal pool for: "Bonjour"
000000010000f224	nop
000000010000f228	mov	x0, x20
000000010000f22c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f230	cbz	w0, 0x10000f570
000000010000f234	adr	x1, #157291 ; literal pool for: "SystemLoggingSocket"
000000010000f238	nop
000000010000f23c	mov	x0, x20
000000010000f240	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f244	cbz	w0, 0x10000f598
000000010000f248	str	x20, [sp]
000000010000f24c	adr	x2, #158075 ; literal pool for: "Unknown socket key %s"
000000010000f250	nop
000000010000f254	b	0x10000f5ec
000000010000f258	nop
000000010000f25c	ldr	x8, #0x30e84 ; literal pool symbol address: __xpc_type_string
000000010000f260	cmp	x22, x8
000000010000f264	b.ne	0x10000f51c
000000010000f268	mov	x0, x21
000000010000f26c	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000f270	mov	x21, x0
000000010000f274	adr	x1, #157769 ; literal pool for: "stream"
000000010000f278	nop
000000010000f27c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f280	cbz	w0, 0x10000f35c
000000010000f284	adr	x1, #157760 ; literal pool for: "dgram"
000000010000f288	nop
000000010000f28c	mov	x0, x21
000000010000f290	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f294	cbz	w0, 0x10000f384
000000010000f298	adr	x1, #157746 ; literal pool for: "seqpacket"
000000010000f29c	nop
000000010000f2a0	mov	x0, x21
000000010000f2a4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f2a8	cbz	w0, 0x10000f3b4
000000010000f2ac	str	x20, [sp]
000000010000f2b0	adr	x2, #157732 ; literal pool for: "Unrecognized %s"
000000010000f2b4	nop
000000010000f2b8	b	0x10000f52c
000000010000f2bc	nop
000000010000f2c0	ldr	x8, #0x30de0 ; literal pool symbol address: __xpc_type_bool
000000010000f2c4	cmp	x22, x8
000000010000f2c8	b.ne	0x10000f51c
000000010000f2cc	mov	x0, x21
000000010000f2d0	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
000000010000f2d4	ldrh	w8, [x25, #0xbc]
000000010000f2d8	and	w8, w8, #0xfffffffd
000000010000f2dc	orr	w8, w8, w0, lsl #1
000000010000f2e0	strh	w8, [x25, #0xbc]
000000010000f2e4	b	0x10000f540
000000010000f2e8	nop
000000010000f2ec	ldr	x8, #0x30df4 ; literal pool symbol address: __xpc_type_string
000000010000f2f0	cmp	x22, x8
000000010000f2f4	b.ne	0x10000f51c
000000010000f2f8	ldr	x8, [x25, #0x80]
000000010000f2fc	cbz	x8, 0x10000f3c0
000000010000f300	adr	x8, #157058 ; literal pool for: "SockPathName"
000000010000f304	nop
000000010000f308	str	x8, [sp]
000000010000f30c	b	0x10000f32c
000000010000f310	nop
000000010000f314	ldr	x8, #0x30dcc ; literal pool symbol address: __xpc_type_string
000000010000f318	cmp	x22, x8
000000010000f31c	b.ne	0x10000f51c
000000010000f320	ldr	x8, [x25, #0x78]
000000010000f324	cbz	x8, 0x10000f3f8
000000010000f328	str	x24, [sp]
000000010000f32c	str	x23, [sp, #0x8]
000000010000f330	adr	x2, #157652 ; literal pool for: "Can't have both %s and %s"
000000010000f334	nop
000000010000f338	b	0x10000f52c
000000010000f33c	nop
000000010000f340	ldr	x8, #0x30d90 ; literal pool symbol address: __xpc_type_int64
000000010000f344	cmp	x22, x8
000000010000f348	b.ne	0x10000f51c
000000010000f34c	mov	x0, x21
000000010000f350	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010000f354	str	w0, [x25, #0x58]
000000010000f358	b	0x10000f540
000000010000f35c	orr	w8, wzr, #0x1
000000010000f360	b	0x10000f3b8
000000010000f364	nop
000000010000f368	ldr	x8, #0x30d68 ; literal pool symbol address: __xpc_type_int64
000000010000f36c	cmp	x22, x8
000000010000f370	b.ne	0x10000f51c
000000010000f374	mov	x0, x21
000000010000f378	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010000f37c	str	w0, [x25, #0x5c]
000000010000f380	b	0x10000f540
000000010000f384	orr	w8, wzr, #0x2
000000010000f388	b	0x10000f3b8
000000010000f38c	nop
000000010000f390	ldr	x8, #0x30d40 ; literal pool symbol address: __xpc_type_int64
000000010000f394	cmp	x22, x8
000000010000f398	b.ne	0x10000f51c
000000010000f39c	mov	x0, x21
000000010000f3a0	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010000f3a4	strh	w0, [x25, #0x88]
000000010000f3a8	ldrh	w8, [x25, #0xbc]
000000010000f3ac	orr	w8, w8, #0x8
000000010000f3b0	b	0x10000f2e0
000000010000f3b4	mov	w8, #0x5
000000010000f3b8	str	w8, [x25, #0x54]
000000010000f3bc	b	0x10000f540
000000010000f3c0	mov	x0, x21
000000010000f3c4	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000f3c8	bl	0x10000d520
000000010000f3cc	str	x0, [x25, #0x78]
000000010000f3d0	b	0x10000f540
000000010000f3d4	nop
000000010000f3d8	ldr	x8, #0x30d08 ; literal pool symbol address: __xpc_type_string
000000010000f3dc	cmp	x22, x8
000000010000f3e0	b.ne	0x10000f51c
000000010000f3e4	mov	x0, x21
000000010000f3e8	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000f3ec	bl	0x10000d520
000000010000f3f0	str	x0, [x25, #0x90]
000000010000f3f4	b	0x10000f540
000000010000f3f8	mov	x0, x21
000000010000f3fc	bl	0x100031ba4 ; symbol stub for: _xpc_string_get_length
000000010000f400	cmp	x0, #0x68
000000010000f404	b.lo	0x10000f44c
000000010000f408	str	x20, [sp]
000000010000f40c	adr	x2, #157458 ; literal pool for: "%s value is too long."
000000010000f410	nop
000000010000f414	orr	w1, wzr, #0x3
000000010000f418	mov	x0, x19
000000010000f41c	bl	0x10000ce7c
000000010000f420	mov	w8, #0x22
000000010000f424	b	0x10000f53c
000000010000f428	nop
000000010000f42c	ldr	x8, #0x30cb4 ; literal pool symbol address: __xpc_type_string
000000010000f430	cmp	x22, x8
000000010000f434	b.ne	0x10000f51c
000000010000f438	mov	x0, x21
000000010000f43c	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000f440	bl	0x10000d520
000000010000f444	str	x0, [x25, #0x98]
000000010000f448	b	0x10000f540
000000010000f44c	mov	x0, x21
000000010000f450	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000f454	bl	0x10000d520
000000010000f458	str	x0, [x25, #0x80]
000000010000f45c	b	0x10000f540
000000010000f460	nop
000000010000f464	ldr	x8, #0x30c7c ; literal pool symbol address: __xpc_type_string
000000010000f468	cmp	x22, x8
000000010000f46c	b.eq	0x10000f55c
000000010000f470	nop
000000010000f474	ldr	x8, #0x30c5c ; literal pool symbol address: __xpc_type_int64
000000010000f478	cmp	x22, x8
000000010000f47c	b.ne	0x10000f51c
000000010000f480	mov	x0, x21
000000010000f484	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010000f488	str	x0, [sp]
000000010000f48c	adr	x0, #153641 ; literal pool for: "%lld"
000000010000f490	nop
000000010000f494	bl	0x10000d72c
000000010000f498	b	0x10000f568
000000010000f49c	nop
000000010000f4a0	ldr	x8, #0x30c40 ; literal pool symbol address: __xpc_type_string
000000010000f4a4	cmp	x22, x8
000000010000f4a8	b.ne	0x10000f51c
000000010000f4ac	mov	x0, x21
000000010000f4b0	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000f4b4	mov	x21, x0
000000010000f4b8	adr	x1, #157404 ; literal pool for: "IPv4"
000000010000f4bc	nop
000000010000f4c0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f4c4	cbz	w0, 0x10000f5fc
000000010000f4c8	adr	x1, #157393 ; literal pool for: "IPv6"
000000010000f4cc	nop
000000010000f4d0	mov	x0, x21
000000010000f4d4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f4d8	cbz	w0, 0x10000f604
000000010000f4dc	adr	x1, #157378 ; literal pool for: "IPv4v6"
000000010000f4e0	nop
000000010000f4e4	mov	x0, x21
000000010000f4e8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f4ec	cbz	w0, 0x10000f618
000000010000f4f0	adr	x1, #157365 ; literal pool for: "Unix"
000000010000f4f4	nop
000000010000f4f8	mov	x0, x21
000000010000f4fc	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f500	cbnz	w0, 0x10000f5e0
000000010000f504	orr	w8, wzr, #0x1
000000010000f508	b	0x10000f608
000000010000f50c	nop
000000010000f510	ldr	x8, #0x30bd0 ; literal pool symbol address: __xpc_type_string
000000010000f514	cmp	x22, x8
000000010000f518	b.eq	0x10000f5b0
000000010000f51c	ldr	x8, [x22, #0x30]
000000010000f520	stp	x20, x8, [sp]
000000010000f524	adr	x2, #157369 ; literal pool for: "Invalid type for socket dictionary (key/type): %s/%s"
000000010000f528	nop
000000010000f52c	orr	w1, wzr, #0x3
000000010000f530	mov	x0, x19
000000010000f534	bl	0x10000ce7c
000000010000f538	mov	w8, #0x16
000000010000f53c	str	w8, [x25, #0xb8]
000000010000f540	ldp	x29, x30, [sp, #0x50]
000000010000f544	ldp	x20, x19, [sp, #0x40]
000000010000f548	ldp	x22, x21, [sp, #0x30]
000000010000f54c	ldp	x24, x23, [sp, #0x20]
000000010000f550	ldp	x26, x25, [sp, #0x10]
000000010000f554	add	sp, sp, #0x60
000000010000f558	ret
000000010000f55c	mov	x0, x21
000000010000f560	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000f564	bl	0x10000d520
000000010000f568	str	x0, [x25, #0xa0]
000000010000f56c	b	0x10000f540
000000010000f570	nop
000000010000f574	ldr	x8, #0x30b2c ; literal pool symbol address: __xpc_type_bool
000000010000f578	cmp	x22, x8
000000010000f57c	b.ne	0x10000f58c
000000010000f580	mov	x0, x21
000000010000f584	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
000000010000f588	cbz	w0, 0x10000f540
000000010000f58c	ldrh	w8, [x25, #0xbc]
000000010000f590	orr	w8, w8, #0x10
000000010000f594	b	0x10000f2e0
000000010000f598	mov	x0, x21
000000010000f59c	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
000000010000f5a0	ldrh	w8, [x25, #0xbc]
000000010000f5a4	and	w8, w8, #0xffffffbf
000000010000f5a8	orr	w8, w8, w0, lsl #6
000000010000f5ac	b	0x10000f2e0
000000010000f5b0	mov	x0, x21
000000010000f5b4	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010000f5b8	mov	x21, x0
000000010000f5bc	adr	x1, #157179 ; literal pool for: "TCP"
000000010000f5c0	nop
000000010000f5c4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f5c8	cbz	w0, 0x10000f610
000000010000f5cc	adr	x1, #157167 ; literal pool for: "UDP"
000000010000f5d0	nop
000000010000f5d4	mov	x0, x21
000000010000f5d8	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010000f5dc	cbz	w0, 0x10000f62c
000000010000f5e0	str	x20, [sp]
000000010000f5e4	adr	x2, #156912 ; literal pool for: "Unrecognized %s"
000000010000f5e8	nop
000000010000f5ec	orr	w1, wzr, #0x4
000000010000f5f0	mov	x0, x19
000000010000f5f4	bl	0x10000ce7c
000000010000f5f8	b	0x10000f540
000000010000f5fc	orr	w8, wzr, #0x2
000000010000f600	b	0x10000f608
000000010000f604	orr	w8, wzr, #0x1e
000000010000f608	str	w8, [x25, #0xa8]
000000010000f60c	b	0x10000f540
000000010000f610	orr	w8, wzr, #0x6
000000010000f614	b	0x10000f630
000000010000f618	orr	w8, wzr, #0x1e
000000010000f61c	str	w8, [x25, #0xa8]
000000010000f620	ldrh	w8, [x25, #0xbc]
000000010000f624	orr	w8, w8, #0x20
000000010000f628	b	0x10000f2e0
000000010000f62c	mov	w8, #0x11
000000010000f630	str	w8, [x25, #0xac]
000000010000f634	b	0x10000f540
000000010000f638	sub	sp, sp, #0x30
000000010000f63c	stp	x20, x19, [sp, #0x10]
000000010000f640	stp	x29, x30, [sp, #0x20]
000000010000f644	add	x29, sp, #0x20
000000010000f648	mov	x19, x0
000000010000f64c	ldrb	w8, [x19, #0xbc]
000000010000f650	tbnz	w8, #0x6, 0x10000f680
000000010000f654	orr	w1, wzr, #0x20
000000010000f658	mov	x0, x19
000000010000f65c	bl	0x10000e3f4
000000010000f660	bl	0x10000a2b0
000000010000f664	adr	x2, #268
000000010000f668	nop
000000010000f66c	mov	x1, x19
000000010000f670	ldp	x29, x30, [sp, #0x20]
000000010000f674	ldp	x20, x19, [sp, #0x10]
000000010000f678	add	sp, sp, #0x30
000000010000f67c	b	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000f680	adrp	x8, 52 ; 0x100043000
000000010000f684	ldr	x9, [x8, #0x6e0]
000000010000f688	cbz	x9, 0x10000f6b8
000000010000f68c	add	x8, x9, #0xc0
000000010000f690	str	x8, [sp]
000000010000f694	adr	x2, #156191 ; literal pool for: "System logger socket is already claimed by: %s"
000000010000f698	nop
000000010000f69c	orr	w1, wzr, #0x3
000000010000f6a0	mov	x0, x19
000000010000f6a4	bl	0x10000ef2c
000000010000f6a8	mov	w8, #0x25
000000010000f6ac	str	w8, [x19, #0xb8]
000000010000f6b0	orr	w1, wzr, #0x1
000000010000f6b4	b	0x10000f704
000000010000f6b8	str	x19, [x8, #0x6e0]
000000010000f6bc	orr	w0, wzr, #0x4
000000010000f6c0	bl	0x10000d408
000000010000f6c4	str	x0, [x19, #0x38]
000000010000f6c8	orr	w20, wzr, #0x1
000000010000f6cc	orr	w0, wzr, #0x1
000000010000f6d0	bl	0x10000d408
000000010000f6d4	stp	x0, x20, [x19, #0x40]
000000010000f6d8	nop
000000010000f6dc	nop
000000010000f6e0	ldr	w8, 0x100043468
000000010000f6e4	ldr	x9, [x19, #0x38]
000000010000f6e8	str	w8, [x9]
000000010000f6ec	orr	w8, wzr, #0x2
000000010000f6f0	str	w8, [x19, #0x54]
000000010000f6f4	ldrh	w8, [x19, #0xbc]
000000010000f6f8	orr	w8, w8, #0x4
000000010000f6fc	strh	w8, [x19, #0xbc]
000000010000f700	mov	w1, #0x0
000000010000f704	mov	x0, x19
000000010000f708	ldp	x29, x30, [sp, #0x20]
000000010000f70c	ldp	x20, x19, [sp, #0x10]
000000010000f710	add	sp, sp, #0x30
000000010000f714	b	0x10000f718
000000010000f718	stp	x22, x21, [sp, #-0x30]!
000000010000f71c	stp	x20, x19, [sp, #0x10]
000000010000f720	stp	x29, x30, [sp, #0x20]
000000010000f724	add	x29, sp, #0x20
000000010000f728	mov	x19, x1
000000010000f72c	mov	x20, x0
000000010000f730	orr	w0, wzr, #0x10
000000010000f734	bl	0x10000d408
000000010000f738	mov	x21, x0
000000010000f73c	mov	w1, #0x21
000000010000f740	mov	x0, x20
000000010000f744	bl	0x10000e3f4
000000010000f748	str	x0, [x21]
000000010000f74c	str	w19, [x21, #0x8]
000000010000f750	ldr	x0, [x20, #0x60]
000000010000f754	adr	x2, #4564
000000010000f758	nop
000000010000f75c	mov	x1, x21
000000010000f760	ldp	x29, x30, [sp, #0x20]
000000010000f764	ldp	x20, x19, [sp, #0x10]
000000010000f768	ldp	x22, x21, [sp], #0x30
000000010000f76c	b	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010000f770	stp	x28, x27, [sp, #-0x60]!
000000010000f774	stp	x26, x25, [sp, #0x10]
000000010000f778	stp	x24, x23, [sp, #0x20]
000000010000f77c	stp	x22, x21, [sp, #0x30]
000000010000f780	stp	x20, x19, [sp, #0x40]
000000010000f784	stp	x29, x30, [sp, #0x50]
000000010000f788	add	x29, sp, #0x50
000000010000f78c	sub	sp, sp, #0x600
000000010000f790	mov	x19, x0
000000010000f794	add	x23, sp, #0x530
000000010000f798	nop
000000010000f79c	ldr	x8, #0x3087c ; literal pool symbol address: ___stack_chk_guard
000000010000f7a0	ldr	x8, [x8]
000000010000f7a4	str	x8, [x23, #0xc8]
000000010000f7a8	ldr	x8, [x19, #0x78]
000000010000f7ac	cbz	x8, 0x10000f81c
000000010000f7b0	strb	wzr, [sp, #0x130]
000000010000f7b4	adr	x1, #156766 ; literal pool for: "/private/var/tmp/com.apple.launchd.XXXXXXXXXX"
000000010000f7b8	nop
000000010000f7bc	add	x20, sp, #0x130
000000010000f7c0	add	x0, sp, #0x130
000000010000f7c4	orr	w2, wzr, #0x400
000000010000f7c8	orr	w3, wzr, #0x400
000000010000f7cc	bl	0x100030b0c ; symbol stub for: ___strlcpy_chk
000000010000f7d0	add	x0, sp, #0x130
000000010000f7d4	bl	0x1000313a0 ; symbol stub for: _mkdtemp
000000010000f7d8	cbnz	x0, 0x10000f7fc
000000010000f7dc	bl	0x100030adc ; symbol stub for: ___error
000000010000f7e0	ldrsw	x2, [x0]
000000010000f7e4	cbz	w2, 0x10000f7fc
000000010000f7e8	adr	x0, #-2292
000000010000f7ec	nop
000000010000f7f0	mov	x1, x19
000000010000f7f4	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000f7f8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000f7fc	add	x8, x19, #0xc0
000000010000f800	stp	x20, x8, [sp]
000000010000f804	adr	x0, #156732 ; literal pool for: "%s/%s"
000000010000f808	nop
000000010000f80c	bl	0x10000d72c
000000010000f810	mov	x22, x0
000000010000f814	str	x22, [x19, #0x80]
000000010000f818	b	0x10000f830
000000010000f81c	ldr	x8, [x19, #0x80]
000000010000f820	cbz	x8, 0x10000f97c
000000010000f824	add	x20, sp, #0x130
000000010000f828	strb	wzr, [sp, #0x130]
000000010000f82c	ldr	x22, [x19, #0x80]
000000010000f830	add	x21, sp, #0x530
000000010000f834	add	x0, sp, #0x530
000000010000f838	mov	w2, #0x6a
000000010000f83c	mov	w1, #0x0
000000010000f840	bl	0x100031340 ; symbol stub for: _memset
000000010000f844	orr	w24, wzr, #0x1
000000010000f848	strb	w24, [sp, #0x531]
000000010000f84c	orr	x21, x21, #0x2
000000010000f850	mov	w2, #0x67
000000010000f854	mov	x0, x21
000000010000f858	mov	x1, x22
000000010000f85c	bl	0x100031754 ; symbol stub for: _strncpy
000000010000f860	orr	w0, wzr, #0x4
000000010000f864	bl	0x10000d408
000000010000f868	str	x0, [x19, #0x38]
000000010000f86c	orr	w0, wzr, #0x1
000000010000f870	bl	0x10000d408
000000010000f874	stp	x0, x24, [x19, #0x40]
000000010000f878	ldr	w1, [x19, #0x54]
000000010000f87c	orr	w0, wzr, #0x1
000000010000f880	mov	w2, #0x0
000000010000f884	bl	0x1000316c4 ; symbol stub for: _socket
000000010000f888	ldr	x8, [x19, #0x38]
000000010000f88c	str	w0, [x8]
000000010000f890	cmn	w0, #0x1
000000010000f894	b.eq	0x10000ffb4
000000010000f898	ldrb	w8, [x19, #0xbc]
000000010000f89c	tbnz	w8, #0x1, 0x10000f8bc
000000010000f8a0	mov	w2, #0x6a
000000010000f8a4	add	x1, sp, #0x530
000000010000f8a8	bl	0x100030cd4 ; symbol stub for: _connect
000000010000f8ac	cmn	w0, #0x1
000000010000f8b0	b.eq	0x10000ffb4
000000010000f8b4	mov	w0, #0x0
000000010000f8b8	b	0x10000ffd8
000000010000f8bc	mov	x0, x21
000000010000f8c0	bl	0x10003182c ; symbol stub for: _unlink
000000010000f8c4	cmn	w0, #0x1
000000010000f8c8	b.ne	0x10000f8dc
000000010000f8cc	bl	0x100030adc ; symbol stub for: ___error
000000010000f8d0	ldr	w8, [x0]
000000010000f8d4	cmp	w8, #0x2
000000010000f8d8	b.ne	0x10000ff68
000000010000f8dc	ldr	x8, [x19, #0x38]
000000010000f8e0	ldr	w0, [x8]
000000010000f8e4	mov	w2, #0x6a
000000010000f8e8	add	x1, sp, #0x530
000000010000f8ec	bl	0x100030c20 ; symbol stub for: _bind
000000010000f8f0	cmn	w0, #0x1
000000010000f8f4	b.eq	0x10000ffb4
000000010000f8f8	ldp	w1, w8, [x19, #0x58]
000000010000f8fc	cmp	w1, #0x0
000000010000f900	cset	w9, eq
000000010000f904	cmp	w8, #0x0
000000010000f908	csel	w2, w9, w8, eq
000000010000f90c	ldr	x0, [x19, #0x80]
000000010000f910	bl	0x100030c5c ; symbol stub for: _chown
000000010000f914	cmn	w0, #0x1
000000010000f918	b.eq	0x10000ffb4
000000010000f91c	ldr	x8, [x19, #0x78]
000000010000f920	cbz	x8, 0x10000f940
000000010000f924	ldr	w1, [x19, #0x58]
000000010000f928	cbz	w1, 0x10000f940
000000010000f92c	mov	w2, #0x0
000000010000f930	mov	x0, x20
000000010000f934	bl	0x100030c5c ; symbol stub for: _chown
000000010000f938	cmn	w0, #0x1
000000010000f93c	b.eq	0x10000ffb4
000000010000f940	ldrb	w8, [x19, #0xbc]
000000010000f944	tbnz	w8, #0x3, 0x10000ff7c
000000010000f948	mov	w1, #0x1b6
000000010000f94c	mov	x0, x21
000000010000f950	bl	0x100030c50 ; symbol stub for: _chmod
000000010000f954	cmn	w0, #0x1
000000010000f958	b.ne	0x10000ff90
000000010000f95c	bl	0x100030adc ; symbol stub for: ___error
000000010000f960	ldrsw	x2, [x0]
000000010000f964	adr	x0, #-2672
000000010000f968	nop
000000010000f96c	mov	x1, x19
000000010000f970	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000f974	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000f978	b	0x10000ff90
000000010000f97c	ldr	w8, [x19, #0xa8]
000000010000f980	stp	wzr, w8, [sp, #0x68]
000000010000f984	ldr	w8, [x19, #0x54]
000000010000f988	str	w8, [sp, #0x70]
000000010000f98c	ldr	w8, [x19, #0xac]
000000010000f990	stp	w8, wzr, [sp, #0x74]
000000010000f994	stp	xzr, xzr, [sp, #0x88]
000000010000f998	str	xzr, [sp, #0x80]
000000010000f99c	ldrb	w8, [x19, #0xbc]
000000010000f9a0	tbz	w8, #0x1, 0x10000f9ac
000000010000f9a4	orr	w8, wzr, #0x1
000000010000f9a8	str	w8, [sp, #0x68]
000000010000f9ac	str	xzr, [sp, #0x60]
000000010000f9b0	ldr	x0, [x19, #0x90]
000000010000f9b4	ldr	x1, [x19, #0xa0]
000000010000f9b8	add	x2, sp, #0x68
000000010000f9bc	add	x3, sp, #0x60
000000010000f9c0	bl	0x1000310a0 ; symbol stub for: _getaddrinfo
000000010000f9c4	mov	x20, x0
000000010000f9c8	cbz	w20, 0x10000fa10
000000010000f9cc	sxtw	x2, w20
000000010000f9d0	adr	x0, #-2780
000000010000f9d4	nop
000000010000f9d8	mov	x1, x19
000000010000f9dc	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000f9e0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000f9e4	mov	x0, x20
000000010000f9e8	bl	0x100031094 ; symbol stub for: _gai_strerror
000000010000f9ec	stp	x20, x0, [sp]
000000010000f9f0	adr	x2, #156246 ; literal pool for: "getaddrinfo(3): %d: %s"
000000010000f9f4	nop
000000010000f9f8	orr	w1, wzr, #0x3
000000010000f9fc	mov	x0, x19
000000010000fa00	bl	0x10000ef2c
000000010000fa04	mov	x0, x20
000000010000fa08	bl	0x1000109ac
000000010000fa0c	b	0x100010048
000000010000fa10	ldr	x9, [sp, #0x60]
000000010000fa14	ldr	x8, [x19, #0x48]
000000010000fa18	cbz	x9, 0x10000fa2c
000000010000fa1c	add	x8, x8, #0x1
000000010000fa20	ldr	x9, [x9, #0x28]
000000010000fa24	cbnz	x9, 0x10000fa1c
000000010000fa28	str	x8, [x19, #0x48]
000000010000fa2c	lsl	x0, x8, #2
000000010000fa30	bl	0x10000d408
000000010000fa34	str	x0, [x19, #0x38]
000000010000fa38	ldr	x0, [x19, #0x48]
000000010000fa3c	bl	0x10000d408
000000010000fa40	str	x0, [x19, #0x40]
000000010000fa44	ldr	x24, [sp, #0x60]
000000010000fa48	cbz	x24, 0x10001003c
000000010000fa4c	mov	x27, #0x0
000000010000fa50	add	x20, sp, #0x128
000000010000fa54	add	x8, sp, #0x130
000000010000fa58	add	x8, x8, #0x18
000000010000fa5c	str	x8, [sp, #0x48]
000000010000fa60	adr	x25, #-2924
000000010000fa64	nop
000000010000fa68	adr	x28, #156149 ; literal pool for: "Could not create socket for resolved listener (family = %d, type = %d, protocol = %d, idx = %lu: "
000000010000fa6c	nop
000000010000fa70	orr	w26, wzr, #0x1
000000010000fa74	add	x21, sp, #0x530
000000010000fa78	b	0x10000fde4
000000010000fa7c	adr	x0, #156286 ; literal pool for: "PATH"
000000010000fa80	nop
000000010000fa84	bl	0x1000310b8 ; symbol stub for: _getenv
000000010000fa88	str	x0, [x20]
000000010000fa8c	cbz	x0, 0x10000fb1c
000000010000fa90	bl	0x10000d520
000000010000fa94	mov	x28, x0
000000010000fa98	str	x28, [x20]
000000010000fa9c	add	x0, sp, #0x128
000000010000faa0	adr	x1, #156347 ; literal pool for: ":"
000000010000faa4	nop
000000010000faa8	bl	0x100031790 ; symbol stub for: _strsep
000000010000faac	cbz	x0, 0x10000fbbc
000000010000fab0	mov	x8, #0x0
000000010000fab4	adr	x20, #156327 ; literal pool for: ":"
000000010000fab8	nop
000000010000fabc	cmp	x8, #0x18
000000010000fac0	b.eq	0x10000fb38
000000010000fac4	add	x25, x8, #0x1
000000010000fac8	str	x0, [x21, x8, lsl #3]
000000010000facc	add	x0, sp, #0x128
000000010000fad0	mov	x1, x20
000000010000fad4	bl	0x100031790 ; symbol stub for: _strsep
000000010000fad8	mov	x8, x25
000000010000fadc	cbnz	x0, 0x10000fabc
000000010000fae0	b	0x10000fb50
000000010000fae4	ldr	w0, [x8]
000000010000fae8	bl	0x100030c74 ; symbol stub for: _close
000000010000faec	cmn	w0, #0x1
000000010000faf0	b.ne	0x10000fb0c
000000010000faf4	bl	0x100030adc ; symbol stub for: ___error
000000010000faf8	ldrsw	x2, [x0]
000000010000fafc	mov	x0, x25
000000010000fb00	mov	x1, x19
000000010000fb04	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000fb08	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000fb0c	ldr	x8, [x19, #0x38]
000000010000fb10	mov	w9, #-0x1
000000010000fb14	str	w9, [x8, x27, lsl #2]
000000010000fb18	b	0x10000ff54
000000010000fb1c	orr	w1, wzr, #0x3
000000010000fb20	mov	x0, x19
000000010000fb24	adr	x2, #156123 ; literal pool for: "No PATH environment variable set. The application firewall will not work with this service."
000000010000fb28	nop
000000010000fb2c	bl	0x10000ef2c
000000010000fb30	orr	w26, wzr, #0x1
000000010000fb34	b	0x10000fc44
000000010000fb38	orr	w1, wzr, #0x4
000000010000fb3c	mov	x0, x19
000000010000fb40	adr	x2, #156189 ; literal pool for: "PATH contains lots of paths. Some will be skipped."
000000010000fb44	nop
000000010000fb48	bl	0x10000ef2c
000000010000fb4c	orr	w25, wzr, #0x18
000000010000fb50	mov	x20, #0x0
000000010000fb54	ldr	x8, [x21, x20, lsl #3]
000000010000fb58	stp	x8, x22, [sp]
000000010000fb5c	add	x0, sp, #0x130
000000010000fb60	orr	w1, wzr, #0x400
000000010000fb64	orr	w3, wzr, #0x400
000000010000fb68	mov	w2, #0x0
000000010000fb6c	adr	x4, #155860 ; literal pool for: "%s/%s"
000000010000fb70	nop
000000010000fb74	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010000fb78	add	x0, sp, #0x130
000000010000fb7c	add	x1, sp, #0x98
000000010000fb80	bl	0x1000316d0 ; symbol stub for: _stat
000000010000fb84	cbz	w0, 0x10000fb98
000000010000fb88	add	x20, x20, #0x1
000000010000fb8c	cmp	x20, x25
000000010000fb90	b.lo	0x10000fb54
000000010000fb94	b	0x10000fbb0
000000010000fb98	mov	x0, x28
000000010000fb9c	bl	0x100031010 ; symbol stub for: _free
000000010000fba0	add	x0, sp, #0x130
000000010000fba4	bl	0x10000d520
000000010000fba8	mov	x22, x0
000000010000fbac	mov	x28, x22
000000010000fbb0	add	x20, sp, #0x128
000000010000fbb4	adr	x25, #-3264
000000010000fbb8	nop
000000010000fbbc	cbz	x22, 0x10000fc1c
000000010000fbc0	mov	x0, x22
000000010000fbc4	bl	0x10003173c ; symbol stub for: _strlen
000000010000fbc8	add	w4, w0, #0x1
000000010000fbcc	orr	w1, wzr, #0xffff
000000010000fbd0	mov	w2, #0x1085
000000010000fbd4	mov	x0, x26
000000010000fbd8	mov	x3, x22
000000010000fbdc	bl	0x100031694 ; symbol stub for: _setsockopt
000000010000fbe0	cmn	w0, #0x1
000000010000fbe4	orr	w26, wzr, #0x1
000000010000fbe8	b.ne	0x10000fc34
000000010000fbec	bl	0x100030adc ; symbol stub for: ___error
000000010000fbf0	ldr	w8, [x0]
000000010000fbf4	cmp	w8, #0x2a
000000010000fbf8	b.eq	0x10000fc34
000000010000fbfc	bl	0x100030adc ; symbol stub for: ___error
000000010000fc00	ldrsw	x2, [x0]
000000010000fc04	cbz	w2, 0x10000fc34
000000010000fc08	mov	x0, x25
000000010000fc0c	mov	x1, x19
000000010000fc10	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000fc14	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000fc18	b	0x10000fc34
000000010000fc1c	orr	w1, wzr, #0x3
000000010000fc20	mov	x0, x19
000000010000fc24	adr	x2, #156012 ; literal pool for: "Socket's service points to a non-existent executable. The application firewall will not work with this service."
000000010000fc28	nop
000000010000fc2c	bl	0x10000ef2c
000000010000fc30	orr	w26, wzr, #0x1
000000010000fc34	mov	x0, x28
000000010000fc38	bl	0x100031010 ; symbol stub for: _free
000000010000fc3c	adr	x28, #155681 ; literal pool for: "Could not create socket for resolved listener (family = %d, type = %d, protocol = %d, idx = %lu: "
000000010000fc40	nop
000000010000fc44	ldr	x8, [x19, #0x38]
000000010000fc48	ldr	w0, [x8, x27, lsl #2]
000000010000fc4c	orr	w8, wzr, #0x4
000000010000fc50	str	x8, [sp]
000000010000fc54	orr	w1, wzr, #0x4
000000010000fc58	bl	0x100030fb0 ; symbol stub for: _fcntl
000000010000fc5c	cmn	w0, #0x1
000000010000fc60	b.ne	0x10000ff54
000000010000fc64	bl	0x100030adc ; symbol stub for: ___error
000000010000fc68	ldrsw	x0, [x0]
000000010000fc6c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010000fc70	b	0x10000ff50
000000010000fc74	ldr	x0, [x19, #0x98]
000000010000fc78	cbz	x0, 0x10000fdbc
000000010000fc7c	ldr	x8, [x19, #0x38]
000000010000fc80	ldr	w22, [x8, x27, lsl #2]
000000010000fc84	ldur	d0, [x24, #0x4]
000000010000fc88	ldr	w8, [x24, #0xc]
000000010000fc8c	str	w26, [sp, #0x130]
000000010000fc90	str	q0, [sp, #0x30]
000000010000fc94	stur	d0, [x20, #0xc]
000000010000fc98	str	w8, [sp, #0x13c]
000000010000fc9c	str	wzr, [sp, #0x140]
000000010000fca0	ldr	x8, [sp, #0x48]
000000010000fca4	stp	xzr, xzr, [x8]
000000010000fca8	str	xzr, [x8, #0x10]
000000010000fcac	str	xzr, [sp, #0x98]
000000010000fcb0	add	x2, sp, #0x130
000000010000fcb4	add	x3, sp, #0x98
000000010000fcb8	mov	x1, #0x0
000000010000fcbc	bl	0x1000310a0 ; symbol stub for: _getaddrinfo
000000010000fcc0	mov	x26, x0
000000010000fcc4	cbz	w26, 0x10000fcf4
000000010000fcc8	mov	x0, x26
000000010000fccc	bl	0x100031094 ; symbol stub for: _gai_strerror
000000010000fcd0	stp	x26, x0, [sp]
000000010000fcd4	orr	w1, wzr, #0x3
000000010000fcd8	mov	x0, x19
000000010000fcdc	adr	x2, #155498 ; literal pool for: "getaddrinfo(3): %d: %s"
000000010000fce0	nop
000000010000fce4	bl	0x10000ef2c
000000010000fce8	mov	x0, x26
000000010000fcec	bl	0x1000109ac
000000010000fcf0	b	0x10000fdb8
000000010000fcf4	ldr	q0, [sp, #0x30]
000000010000fcf8	ldr	x26, [sp, #0x98]
000000010000fcfc	cbz	x26, 0x10000fda8
000000010000fd00	fmov	w28, s0
000000010000fd04	cmp	w28, #0x1e
000000010000fd08	b.eq	0x10000fd3c
000000010000fd0c	cmp	w28, #0x2
000000010000fd10	b.ne	0x10000fd88
000000010000fd14	ldr	x8, [x26, #0x20]
000000010000fd18	ldr	w8, [x8, #0x4]
000000010000fd1c	str	w8, [sp, #0x530]
000000010000fd20	str	wzr, [sp, #0x534]
000000010000fd24	orr	w2, wzr, #0xc
000000010000fd28	orr	w4, wzr, #0x8
000000010000fd2c	add	x3, sp, #0x530
000000010000fd30	mov	x0, x22
000000010000fd34	mov	w1, #0x0
000000010000fd38	b	0x10000fd60
000000010000fd3c	ldr	x8, [x26, #0x20]
000000010000fd40	ldur	q0, [x8, #0x8]
000000010000fd44	str	q0, [x23]
000000010000fd48	str	wzr, [sp, #0x540]
000000010000fd4c	mov	w1, #0x29
000000010000fd50	orr	w2, wzr, #0xc
000000010000fd54	mov	w4, #0x14
000000010000fd58	add	x3, sp, #0x530
000000010000fd5c	mov	x0, x22
000000010000fd60	bl	0x100031694 ; symbol stub for: _setsockopt
000000010000fd64	cmn	w0, #0x1
000000010000fd68	b.ne	0x10000fda8
000000010000fd6c	bl	0x100030adc ; symbol stub for: ___error
000000010000fd70	ldrsw	x2, [x0]
000000010000fd74	mov	x0, x25
000000010000fd78	mov	x1, x19
000000010000fd7c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000fd80	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000fd84	b	0x10000fda0
000000010000fd88	str	x28, [sp]
000000010000fd8c	orr	w1, wzr, #0x3
000000010000fd90	mov	x0, x19
000000010000fd94	adr	x2, #155435 ; literal pool for: "Unknown family encountered during multicast group bind: %d"
000000010000fd98	nop
000000010000fd9c	bl	0x10000ef2c
000000010000fda0	ldr	x26, [x26, #0x28]
000000010000fda4	cbnz	x26, 0x10000fd04
000000010000fda8	ldr	x0, [sp, #0x98]
000000010000fdac	bl	0x10003101c ; symbol stub for: _freeaddrinfo
000000010000fdb0	adr	x28, #155309 ; literal pool for: "Could not create socket for resolved listener (family = %d, type = %d, protocol = %d, idx = %lu: "
000000010000fdb4	nop
000000010000fdb8	orr	w26, wzr, #0x1
000000010000fdbc	ldr	w8, [x24, #0x8]
000000010000fdc0	orr	w8, w8, #0x4
000000010000fdc4	cmp	w8, #0x5
000000010000fdc8	b.ne	0x10000fe24
000000010000fdcc	ldr	x8, [x19, #0x38]
000000010000fdd0	ldr	w0, [x8, x27, lsl #2]
000000010000fdd4	mov	w1, #-0x1
000000010000fdd8	bl	0x1000311f0 ; symbol stub for: _listen
000000010000fddc	cbnz	w0, 0x10000ff34
000000010000fde0	b	0x10000fe24
000000010000fde4	ldp	w0, w1, [x24, #0x4]
000000010000fde8	ldr	w2, [x24, #0xc]
000000010000fdec	bl	0x1000316c4 ; symbol stub for: _socket
000000010000fdf0	ldr	x8, [x19, #0x38]
000000010000fdf4	add	x8, x8, x27, lsl #2
000000010000fdf8	str	w0, [x8]
000000010000fdfc	cmn	w0, #0x1
000000010000fe00	b.eq	0x10000fe4c
000000010000fe04	str	w26, [sp, #0x5c]
000000010000fe08	ldrh	w9, [x19, #0xbc]
000000010000fe0c	tbnz	w9, #0x1, 0x10000fe88
000000010000fe10	ldr	w0, [x8]
000000010000fe14	ldr	x1, [x24, #0x20]
000000010000fe18	ldr	w2, [x24, #0x10]
000000010000fe1c	bl	0x100030cd4 ; symbol stub for: _connect
000000010000fe20	cbnz	w0, 0x10000ff34
000000010000fe24	ldp	x0, x8, [x19, #0x30]
000000010000fe28	ldr	w26, [x8, x27, lsl #2]
000000010000fe2c	bl	0x1000162ac
000000010000fe30	mov	x22, x0
000000010000fe34	ldrb	w8, [x22]
000000010000fe38	cmp	w8, #0x2f
000000010000fe3c	b.ne	0x10000fa7c
000000010000fe40	mov	x28, #0x0
000000010000fe44	cbnz	x22, 0x10000fbc0
000000010000fe48	b	0x10000fc1c
000000010000fe4c	bl	0x100030adc ; symbol stub for: ___error
000000010000fe50	ldrsw	x2, [x0]
000000010000fe54	mov	x0, x25
000000010000fe58	mov	x1, x19
000000010000fe5c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000fe60	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000fe64	ldp	w8, w9, [x24, #0x4]
000000010000fe68	ldr	w10, [x24, #0xc]
000000010000fe6c	stp	x10, x27, [sp, #0x10]
000000010000fe70	orr	w1, wzr, #0x3
000000010000fe74	stp	x8, x9, [sp]
000000010000fe78	mov	x0, x19
000000010000fe7c	mov	x2, x28
000000010000fe80	bl	0x10000ef2c
000000010000fe84	b	0x10000ff54
000000010000fe88	ldr	w10, [x24, #0x4]
000000010000fe8c	cmp	w10, #0x2
000000010000fe90	b.eq	0x10000fed0
000000010000fe94	cmp	w10, #0x1e
000000010000fe98	b.ne	0x10000fed4
000000010000fe9c	tbnz	w9, #0x5, 0x10000fed4
000000010000fea0	ldr	w0, [x8]
000000010000fea4	mov	w1, #0x29
000000010000fea8	mov	w2, #0x1b
000000010000feac	orr	w4, wzr, #0x4
000000010000feb0	add	x3, sp, #0x5c
000000010000feb4	bl	0x100031694 ; symbol stub for: _setsockopt
000000010000feb8	cbnz	w0, 0x10000ff34
000000010000febc	ldr	x8, [x19, #0x38]
000000010000fec0	add	x8, x8, x27, lsl #2
000000010000fec4	ldr	w9, [x8]
000000010000fec8	str	w9, [x19, #0x50]
000000010000fecc	b	0x10000fed4
000000010000fed0	tbnz	w9, #0x5, 0x10000fae4
000000010000fed4	ldr	x9, [x19, #0x98]
000000010000fed8	ldr	w0, [x8]
000000010000fedc	orr	w1, wzr, #0xffff
000000010000fee0	cbz	x9, 0x10000feec
000000010000fee4	orr	w2, wzr, #0x200
000000010000fee8	b	0x10000fef0
000000010000feec	orr	w2, wzr, #0x4
000000010000fef0	orr	w4, wzr, #0x4
000000010000fef4	add	x3, sp, #0x5c
000000010000fef8	bl	0x100031694 ; symbol stub for: _setsockopt
000000010000fefc	cbnz	w0, 0x10000ff34
000000010000ff00	ldr	x8, [x19, #0x38]
000000010000ff04	ldr	w0, [x8, x27, lsl #2]
000000010000ff08	mov	x22, x24
000000010000ff0c	ldr	w2, [x22, #0x10]!
000000010000ff10	ldr	x1, [x22, #0x10]
000000010000ff14	bl	0x100030c20 ; symbol stub for: _bind
000000010000ff18	cbnz	w0, 0x10000ff34
000000010000ff1c	ldr	x8, [x19, #0x38]
000000010000ff20	ldr	w0, [x8, x27, lsl #2]
000000010000ff24	ldr	x1, [x24, #0x20]
000000010000ff28	mov	x2, x22
000000010000ff2c	bl	0x10003110c ; symbol stub for: _getsockname
000000010000ff30	cbz	w0, 0x10000fc74
000000010000ff34	cmn	w0, #0x1
000000010000ff38	b.ne	0x10000ff54
000000010000ff3c	bl	0x100030adc ; symbol stub for: ___error
000000010000ff40	ldrsw	x2, [x0]
000000010000ff44	mov	x0, x25
000000010000ff48	mov	x1, x19
000000010000ff4c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000ff50	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000ff54	add	x27, x27, #0x1
000000010000ff58	ldr	x24, [x24, #0x28]
000000010000ff5c	cbnz	x24, 0x10000fde4
000000010000ff60	ldr	x0, [sp, #0x60]
000000010000ff64	b	0x100010040
000000010000ff68	bl	0x100030adc ; symbol stub for: ___error
000000010000ff6c	ldr	w8, [x0]
000000010000ff70	cmn	w8, #0x1
000000010000ff74	b.ne	0x10000ffd0
000000010000ff78	b	0x10000ffb4
000000010000ff7c	ldrh	w1, [x19, #0x88]
000000010000ff80	mov	x0, x21
000000010000ff84	bl	0x100030c50 ; symbol stub for: _chmod
000000010000ff88	cmn	w0, #0x1
000000010000ff8c	b.eq	0x10000ffb4
000000010000ff90	ldr	w8, [x19, #0x54]
000000010000ff94	orr	w8, w8, #0x4
000000010000ff98	cmp	w8, #0x5
000000010000ff9c	b.ne	0x10000f8b4
000000010000ffa0	ldr	x8, [x19, #0x38]
000000010000ffa4	ldr	w0, [x8]
000000010000ffa8	mov	w1, #-0x1
000000010000ffac	bl	0x1000311f0 ; symbol stub for: _listen
000000010000ffb0	b	0x10000f8ac
000000010000ffb4	bl	0x100030adc ; symbol stub for: ___error
000000010000ffb8	ldrsw	x2, [x0]
000000010000ffbc	adr	x0, #-4296
000000010000ffc0	nop
000000010000ffc4	mov	x1, x19
000000010000ffc8	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010000ffcc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010000ffd0	bl	0x100030adc ; symbol stub for: ___error
000000010000ffd4	ldr	w0, [x0]
000000010000ffd8	str	w0, [x19, #0xb8]
000000010000ffdc	ldrh	w8, [x19, #0xbc]
000000010000ffe0	orr	w8, w8, #0x4
000000010000ffe4	strh	w8, [x19, #0xbc]
000000010000ffe8	cmp	w0, #0x0
000000010000ffec	cset	w1, ne
000000010000fff0	mov	x0, x19
000000010000fff4	bl	0x10000f718
000000010000fff8	orr	w1, wzr, #0x20
000000010000fffc	mov	x0, x19
0000000100010000	bl	0x10000e4a4
0000000100010004	ldr	x8, [x23, #0xc8]
0000000100010008	nop
000000010001000c	ldr	x9, #0x3000c ; literal pool symbol address: ___stack_chk_guard
0000000100010010	ldr	x9, [x9]
0000000100010014	cmp	x9, x8
0000000100010018	b.ne	0x100010088
000000010001001c	add	sp, sp, #0x600
0000000100010020	ldp	x29, x30, [sp, #0x50]
0000000100010024	ldp	x20, x19, [sp, #0x40]
0000000100010028	ldp	x22, x21, [sp, #0x30]
000000010001002c	ldp	x24, x23, [sp, #0x20]
0000000100010030	ldp	x26, x25, [sp, #0x10]
0000000100010034	ldp	x28, x27, [sp], #0x60
0000000100010038	ret
000000010001003c	mov	x0, #0x0
0000000100010040	bl	0x10003101c ; symbol stub for: _freeaddrinfo
0000000100010044	mov	w0, #0x0
0000000100010048	str	w0, [x19, #0xb8]
000000010001004c	cbnz	w0, 0x10000ffdc
0000000100010050	ldrb	w8, [x19, #0xbc]
0000000100010054	tbnz	w8, #0x4, 0x100010060
0000000100010058	mov	w0, #0x0
000000010001005c	b	0x10000ffdc
0000000100010060	mov	w1, #0x22
0000000100010064	mov	x0, x19
0000000100010068	bl	0x10000e3f4
000000010001006c	bl	0x10000d8e0
0000000100010070	adr	x2, #2296
0000000100010074	nop
0000000100010078	mov	x1, x19
000000010001007c	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100010080	ldr	w0, [x19, #0xb8]
0000000100010084	b	0x10000ffdc
0000000100010088	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010001008c	ldr	x8, [x0, #0x78]
0000000100010090	cbz	x8, 0x1000100a0
0000000100010094	ldr	x0, [x0, #0x80]
0000000100010098	str	x8, [x1]
000000010001009c	ret
00000001000100a0	mov	x0, #0x0
00000001000100a4	ret
00000001000100a8	stp	x22, x21, [sp, #-0x30]!
00000001000100ac	stp	x20, x19, [sp, #0x10]
00000001000100b0	stp	x29, x30, [sp, #0x20]
00000001000100b4	add	x29, sp, #0x20
00000001000100b8	mov	x19, x0
00000001000100bc	ldrh	w8, [x19, #0xbc]
00000001000100c0	tbnz	w8, #0x8, 0x10001011c
00000001000100c4	tbnz	w8, #0x7, 0x100010128
00000001000100c8	ldr	x9, [x19, #0x48]
00000001000100cc	cbz	x9, 0x100010104
00000001000100d0	mov	x21, #0x0
00000001000100d4	adr	x20, #96
00000001000100d8	nop
00000001000100dc	ldr	x8, [x19, #0x38]
00000001000100e0	ldr	w0, [x8, x21, lsl #2]
00000001000100e4	mov	x1, x20
00000001000100e8	mov	x2, x19
00000001000100ec	bl	0x10002d9c0
00000001000100f0	add	x21, x21, #0x1
00000001000100f4	ldr	x8, [x19, #0x48]
00000001000100f8	cmp	x21, x8
00000001000100fc	b.lo	0x1000100dc
0000000100010100	ldrh	w8, [x19, #0xbc]
0000000100010104	orr	w8, w8, #0x100
0000000100010108	strh	w8, [x19, #0xbc]
000000010001010c	ldp	x29, x30, [sp, #0x20]
0000000100010110	ldp	x20, x19, [sp, #0x10]
0000000100010114	ldp	x22, x21, [sp], #0x30
0000000100010118	ret
000000010001011c	adr	x0, #153542 ; literal pool for: "attempt to watch socket that is already watched"
0000000100010120	nop
0000000100010124	bl	0x100028f84
0000000100010128	adr	x0, #153578 ; literal pool for: "attempt to watch canceled socket"
000000010001012c	nop
0000000100010130	bl	0x100028f84
0000000100010134	stp	x20, x19, [sp, #-0x20]!
0000000100010138	stp	x29, x30, [sp, #0x10]
000000010001013c	add	x29, sp, #0x10
0000000100010140	mov	x19, x1
0000000100010144	mov	x20, x0
0000000100010148	bl	0x10002d3cc
000000010001014c	cbnz	w20, 0x1000101a0
0000000100010150	ldr	x8, [x19, #0x48]
0000000100010154	cbz	x8, 0x100010188
0000000100010158	mov	x9, #0x0
000000010001015c	ldr	x10, [x19, #0x38]
0000000100010160	ldr	w11, [x10, x9, lsl #2]
0000000100010164	cmp	w11, w0
0000000100010168	b.eq	0x10001017c
000000010001016c	add	x9, x9, #0x1
0000000100010170	cmp	x9, x8
0000000100010174	b.lo	0x100010160
0000000100010178	b	0x100010188
000000010001017c	ldr	x8, [x19, #0x40]
0000000100010180	orr	w10, wzr, #0x1
0000000100010184	strb	w10, [x8, x9]
0000000100010188	ldp	x3, x2, [x19, #0x68]
000000010001018c	orr	w1, wzr, #0x2
0000000100010190	mov	x0, x19
0000000100010194	ldp	x29, x30, [sp, #0x10]
0000000100010198	ldp	x20, x19, [sp], #0x20
000000010001019c	br	x3
00000001000101a0	adr	x0, #154751 ; literal pool for: "unrecognized socket event"
00000001000101a4	nop
00000001000101a8	bl	0x100028f84
00000001000101ac	stp	x20, x19, [sp, #-0x20]!
00000001000101b0	stp	x29, x30, [sp, #0x10]
00000001000101b4	add	x29, sp, #0x10
00000001000101b8	mov	x19, x0
00000001000101bc	ldrh	w8, [x19, #0xbc]
00000001000101c0	tbz	w8, #0x8, 0x100010208
00000001000101c4	tbnz	w8, #0x7, 0x100010214
00000001000101c8	ldr	x9, [x19, #0x48]
00000001000101cc	cbz	x9, 0x1000101f4
00000001000101d0	mov	x20, #0x0
00000001000101d4	ldr	x8, [x19, #0x38]
00000001000101d8	ldr	w0, [x8, x20, lsl #2]
00000001000101dc	bl	0x10002de9c
00000001000101e0	add	x20, x20, #0x1
00000001000101e4	ldr	x8, [x19, #0x48]
00000001000101e8	cmp	x20, x8
00000001000101ec	b.lo	0x1000101d4
00000001000101f0	ldrh	w8, [x19, #0xbc]
00000001000101f4	and	w8, w8, #0xfffffeff
00000001000101f8	strh	w8, [x19, #0xbc]
00000001000101fc	ldp	x29, x30, [sp, #0x10]
0000000100010200	ldp	x20, x19, [sp], #0x20
0000000100010204	ret
0000000100010208	adr	x0, #153387 ; literal pool for: "attempt to ignore socket that is already ignored"
000000010001020c	nop
0000000100010210	bl	0x100028f84
0000000100010214	adr	x0, #153424 ; literal pool for: "attempt to ignore canceled socket"
0000000100010218	nop
000000010001021c	bl	0x100028f84
0000000100010220	sub	sp, sp, #0x30
0000000100010224	stp	x20, x19, [sp, #0x10]
0000000100010228	stp	x29, x30, [sp, #0x20]
000000010001022c	add	x29, sp, #0x20
0000000100010230	mov	x19, x0
0000000100010234	ldrb	w8, [x19, #0xbc]
0000000100010238	tbnz	w8, #0x0, 0x1000102b4
000000010001023c	ldr	x8, [x19, #0x38]
0000000100010240	str	x8, [x1]
0000000100010244	ldr	x8, [x19, #0x48]
0000000100010248	str	x8, [x3]
000000010001024c	cbz	x2, 0x100010258
0000000100010250	ldr	x8, [x19, #0x40]
0000000100010254	str	x8, [x2]
0000000100010258	ldr	x8, [x19, #0x48]
000000010001025c	cbz	x8, 0x1000102a0
0000000100010260	mov	x20, #0x0
0000000100010264	ldr	x8, [x19, #0x38]
0000000100010268	ldr	w0, [x8, x20, lsl #2]
000000010001026c	str	xzr, [sp]
0000000100010270	orr	w1, wzr, #0x4
0000000100010274	bl	0x100030fb0 ; symbol stub for: _fcntl
0000000100010278	cmn	w0, #0x1
000000010001027c	b.ne	0x100010290
0000000100010280	bl	0x100030adc ; symbol stub for: ___error
0000000100010284	ldrsw	x0, [x0]
0000000100010288	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010001028c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100010290	add	x20, x20, #0x1
0000000100010294	ldr	x8, [x19, #0x48]
0000000100010298	cmp	x20, x8
000000010001029c	b.lo	0x100010264
00000001000102a0	mov	w0, #0x0
00000001000102a4	ldrh	w8, [x19, #0xbc]
00000001000102a8	orr	w8, w8, #0x1
00000001000102ac	strh	w8, [x19, #0xbc]
00000001000102b0	b	0x1000102b8
00000001000102b4	mov	w0, #0x25
00000001000102b8	ldp	x29, x30, [sp, #0x20]
00000001000102bc	ldp	x20, x19, [sp, #0x10]
00000001000102c0	add	sp, sp, #0x30
00000001000102c4	ret
00000001000102c8	ldr	x8, [x0, #0x38]
00000001000102cc	str	x8, [x1]
00000001000102d0	ldr	x8, [x0, #0x48]
00000001000102d4	str	x8, [x2]
00000001000102d8	ret
00000001000102dc	ldr	w0, [x0, #0xb8]
00000001000102e0	ret
00000001000102e4	sub	sp, sp, #0x40
00000001000102e8	stp	x22, x21, [sp, #0x10]
00000001000102ec	stp	x20, x19, [sp, #0x20]
00000001000102f0	stp	x29, x30, [sp, #0x30]
00000001000102f4	add	x29, sp, #0x30
00000001000102f8	mov	x19, x0
00000001000102fc	ldrh	w8, [x19, #0xbc]
0000000100010300	and	w8, w8, #0xfffe
0000000100010304	strh	w8, [x19, #0xbc]
0000000100010308	ldr	x8, [x19, #0x48]
000000010001030c	cbz	x8, 0x10001035c
0000000100010310	mov	x20, #0x0
0000000100010314	orr	w21, wzr, #0x4
0000000100010318	ldr	x8, [x19, #0x38]
000000010001031c	ldr	w0, [x8, x20, lsl #2]
0000000100010320	str	x21, [sp]
0000000100010324	orr	w1, wzr, #0x4
0000000100010328	bl	0x100030fb0 ; symbol stub for: _fcntl
000000010001032c	cmn	w0, #0x1
0000000100010330	b.ne	0x100010344
0000000100010334	bl	0x100030adc ; symbol stub for: ___error
0000000100010338	ldrsw	x0, [x0]
000000010001033c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100010340	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100010344	ldr	x8, [x19, #0x40]
0000000100010348	strb	wzr, [x8, x20]
000000010001034c	add	x20, x20, #0x1
0000000100010350	ldr	x8, [x19, #0x48]
0000000100010354	cmp	x20, x8
0000000100010358	b.lo	0x100010318
000000010001035c	ldp	x29, x30, [sp, #0x30]
0000000100010360	ldp	x20, x19, [sp, #0x20]
0000000100010364	ldp	x22, x21, [sp, #0x10]
0000000100010368	add	sp, sp, #0x40
000000010001036c	ret
0000000100010370	stp	x20, x19, [sp, #-0x20]!
0000000100010374	stp	x29, x30, [sp, #0x10]
0000000100010378	add	x29, sp, #0x10
000000010001037c	mov	x19, x0
0000000100010380	ldrh	w8, [x19, #0xbc]
0000000100010384	tbz	w8, #0x8, 0x100010394
0000000100010388	mov	x0, x19
000000010001038c	bl	0x1000101ac
0000000100010390	ldrh	w8, [x19, #0xbc]
0000000100010394	orr	w8, w8, #0x80
0000000100010398	strh	w8, [x19, #0xbc]
000000010001039c	ldp	x29, x30, [sp, #0x10]
00000001000103a0	ldp	x20, x19, [sp], #0x20
00000001000103a4	ret
00000001000103a8	sub	sp, sp, #0x100
00000001000103ac	stp	x28, x27, [sp, #0xa0]
00000001000103b0	stp	x26, x25, [sp, #0xb0]
00000001000103b4	stp	x24, x23, [sp, #0xc0]
00000001000103b8	stp	x22, x21, [sp, #0xd0]
00000001000103bc	stp	x20, x19, [sp, #0xe0]
00000001000103c0	stp	x29, x30, [sp, #0xf0]
00000001000103c4	add	x29, sp, #0xf0
00000001000103c8	mov	x21, x2
00000001000103cc	mov	x22, x1
00000001000103d0	mov	x19, x0
00000001000103d4	add	x24, sp, #0x8
00000001000103d8	nop
00000001000103dc	ldr	x8, #0x2fc3c ; literal pool symbol address: ___stack_chk_guard
00000001000103e0	ldr	x8, [x8]
00000001000103e4	str	x8, [x24]
00000001000103e8	ldr	x8, [x19, #0x48]
00000001000103ec	lsl	x0, x8, #2
00000001000103f0	bl	0x10000d408
00000001000103f4	mov	x20, x0
00000001000103f8	ldr	x8, [x19, #0x48]
00000001000103fc	cbz	x8, 0x100010488
0000000100010400	mov	x25, #0x0
0000000100010404	mov	x26, #0x0
0000000100010408	orr	w27, wzr, #0x80
000000010001040c	str	w27, [sp, #0x14]
0000000100010410	ldr	x8, [x19, #0x38]
0000000100010414	ldr	w0, [x8, x25, lsl #2]
0000000100010418	add	x1, sp, #0x18
000000010001041c	add	x2, sp, #0x14
0000000100010420	bl	0x100030be4 ; symbol stub for: _accept
0000000100010424	mov	x23, x0
0000000100010428	cmn	w23, #0x1
000000010001042c	b.eq	0x100010464
0000000100010430	str	xzr, [sp]
0000000100010434	orr	w1, wzr, #0x4
0000000100010438	mov	x0, x23
000000010001043c	bl	0x100030fb0 ; symbol stub for: _fcntl
0000000100010440	cmn	w0, #0x1
0000000100010444	b.ne	0x100010458
0000000100010448	bl	0x100030adc ; symbol stub for: ___error
000000010001044c	ldrsw	x0, [x0]
0000000100010450	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100010454	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100010458	str	w23, [x20, x26, lsl #2]
000000010001045c	add	x26, x26, #0x1
0000000100010460	b	0x100010474
0000000100010464	bl	0x100030adc ; symbol stub for: ___error
0000000100010468	ldr	w8, [x0]
000000010001046c	cmp	w8, #0x23
0000000100010470	b.ne	0x1000104a0
0000000100010474	add	x25, x25, #0x1
0000000100010478	ldr	x8, [x19, #0x48]
000000010001047c	cmp	x25, x8
0000000100010480	b.lo	0x10001040c
0000000100010484	b	0x10001048c
0000000100010488	mov	x26, #0x0
000000010001048c	mov	w0, #0x0
0000000100010490	cbz	x20, 0x1000104f4
0000000100010494	str	x20, [x22]
0000000100010498	str	x26, [x21]
000000010001049c	b	0x1000104f4
00000001000104a0	cbz	x25, 0x1000104e4
00000001000104a4	mov	x22, #0x0
00000001000104a8	adr	x21, #-5556
00000001000104ac	nop
00000001000104b0	ldr	w0, [x20, x25, lsl #2]
00000001000104b4	bl	0x100030c74 ; symbol stub for: _close
00000001000104b8	cmn	w0, #0x1
00000001000104bc	b.ne	0x1000104d8
00000001000104c0	bl	0x100030adc ; symbol stub for: ___error
00000001000104c4	ldrsw	x2, [x0]
00000001000104c8	mov	x0, x21
00000001000104cc	mov	x1, x19
00000001000104d0	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000104d4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000104d8	add	x22, x22, #0x1
00000001000104dc	cmp	x25, x22
00000001000104e0	b.ne	0x1000104b0
00000001000104e4	mov	x0, x20
00000001000104e8	bl	0x100031010 ; symbol stub for: _free
00000001000104ec	bl	0x100030adc ; symbol stub for: ___error
00000001000104f0	ldr	w0, [x0]
00000001000104f4	ldr	x8, [x24]
00000001000104f8	nop
00000001000104fc	ldr	x9, #0x2fb1c ; literal pool symbol address: ___stack_chk_guard
0000000100010500	ldr	x9, [x9]
0000000100010504	cmp	x9, x8
0000000100010508	b.ne	0x10001052c
000000010001050c	ldp	x29, x30, [sp, #0xf0]
0000000100010510	ldp	x20, x19, [sp, #0xe0]
0000000100010514	ldp	x22, x21, [sp, #0xd0]
0000000100010518	ldp	x24, x23, [sp, #0xc0]
000000010001051c	ldp	x26, x25, [sp, #0xb0]
0000000100010520	ldp	x28, x27, [sp, #0xa0]
0000000100010524	add	sp, sp, #0x100
0000000100010528	ret
000000010001052c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100010530	sub	sp, sp, #0x70
0000000100010534	stp	x28, x27, [sp, #0x10]
0000000100010538	stp	x26, x25, [sp, #0x20]
000000010001053c	stp	x24, x23, [sp, #0x30]
0000000100010540	stp	x22, x21, [sp, #0x40]
0000000100010544	stp	x20, x19, [sp, #0x50]
0000000100010548	stp	x29, x30, [sp, #0x60]
000000010001054c	add	x29, sp, #0x60
0000000100010550	mov	x19, x2
0000000100010554	mov	x20, x1
0000000100010558	mov	x21, x0
000000010001055c	add	x8, x21, #0xc0
0000000100010560	str	x8, [sp]
0000000100010564	adr	x2, #152610 ; literal pool for: "\"%s\" = {"
0000000100010568	nop
000000010001056c	mov	x0, x20
0000000100010570	mov	x1, x19
0000000100010574	bl	0x10002a548
0000000100010578	ldrh	w8, [x21, #0xbc]
000000010001057c	tbnz	w8, #0x2, 0x100010594
0000000100010580	add	x1, x19, #0x1
0000000100010584	adr	x2, #152587 ; literal pool for: "(animating)"
0000000100010588	nop
000000010001058c	mov	x0, x20
0000000100010590	b	0x1000108f0
0000000100010594	add	x22, x19, #0x1
0000000100010598	tbnz	w8, #0x6, 0x100010684
000000010001059c	ldr	w8, [x21, #0x54]
00000001000105a0	sub	w9, w8, #0x1
00000001000105a4	adr	x23, #148769 ; literal pool for: "(unknown)"
00000001000105a8	nop
00000001000105ac	mov	x8, x23
00000001000105b0	cmp	w9, #0x4
00000001000105b4	b.hi	0x1000105c4
00000001000105b8	adr	x8, #201704
00000001000105bc	nop
00000001000105c0	ldr	x8, [x8, w9, sxtw #3]
00000001000105c4	str	x8, [sp]
00000001000105c8	adr	x2, #152554 ; literal pool for: "type = %s"
00000001000105cc	nop
00000001000105d0	mov	x0, x20
00000001000105d4	mov	x1, x22
00000001000105d8	bl	0x10002a548
00000001000105dc	ldr	x8, [x21, #0x80]
00000001000105e0	cbnz	x8, 0x1000105ec
00000001000105e4	ldr	x9, [x21, #0x78]
00000001000105e8	cbz	x9, 0x100010690
00000001000105ec	str	x8, [sp]
00000001000105f0	adr	x2, #152524 ; literal pool for: "path = %s"
00000001000105f4	nop
00000001000105f8	mov	x0, x20
00000001000105fc	mov	x1, x22
0000000100010600	bl	0x10002a548
0000000100010604	ldrb	w8, [x21, #0xbc]
0000000100010608	tbz	w8, #0x3, 0x100010628
000000010001060c	ldrh	w8, [x21, #0x88]
0000000100010610	str	x8, [sp]
0000000100010614	adr	x2, #152498 ; literal pool for: "mode = %o"
0000000100010618	nop
000000010001061c	mov	x0, x20
0000000100010620	mov	x1, x22
0000000100010624	bl	0x10002a548
0000000100010628	ldr	x8, [x21, #0x78]
000000010001062c	cbz	x8, 0x100010648
0000000100010630	str	x8, [sp]
0000000100010634	adr	x2, #152476 ; literal pool for: "secure key = %s"
0000000100010638	nop
000000010001063c	mov	x0, x20
0000000100010640	mov	x1, x22
0000000100010644	bl	0x10002a548
0000000100010648	ldr	w8, [x21, #0x58]
000000010001064c	cbz	w8, 0x10001079c
0000000100010650	str	x8, [sp]
0000000100010654	adr	x2, #152460 ; literal pool for: "owner uid = %u"
0000000100010658	nop
000000010001065c	mov	x0, x20
0000000100010660	mov	x1, x22
0000000100010664	bl	0x10002a548
0000000100010668	ldr	w8, [x21, #0x58]
000000010001066c	cbz	w8, 0x10001079c
0000000100010670	ldr	w8, [x21, #0x5c]
0000000100010674	str	x8, [sp]
0000000100010678	adr	x2, #152439 ; literal pool for: "group id = %u"
000000010001067c	nop
0000000100010680	b	0x100010790
0000000100010684	adr	x2, #152343 ; literal pool for: "(system logger socket)"
0000000100010688	nop
000000010001068c	b	0x1000108e8
0000000100010690	ldr	x8, [x21, #0x90]
0000000100010694	cbz	x8, 0x1000106b0
0000000100010698	str	x8, [sp]
000000010001069c	adr	x2, #152417 ; literal pool for: "node name = %s"
00000001000106a0	nop
00000001000106a4	mov	x0, x20
00000001000106a8	mov	x1, x22
00000001000106ac	bl	0x10002a548
00000001000106b0	ldr	x8, [x21, #0x98]
00000001000106b4	cbz	x8, 0x1000106d0
00000001000106b8	str	x8, [sp]
00000001000106bc	adr	x2, #152400 ; literal pool for: "multicast group = %s"
00000001000106c0	nop
00000001000106c4	mov	x0, x20
00000001000106c8	mov	x1, x22
00000001000106cc	bl	0x10002a548
00000001000106d0	ldr	x8, [x21, #0xa0]
00000001000106d4	cbz	x8, 0x1000106f0
00000001000106d8	str	x8, [sp]
00000001000106dc	adr	x2, #152389 ; literal pool for: "service name = %s"
00000001000106e0	nop
00000001000106e4	mov	x0, x20
00000001000106e8	mov	x1, x22
00000001000106ec	bl	0x10002a548
00000001000106f0	ldr	w8, [x21, #0xa8]
00000001000106f4	cmp	w8, #0x1
00000001000106f8	b.gt	0x100010714
00000001000106fc	cbz	w8, 0x10001075c
0000000100010700	cmp	w8, #0x1
0000000100010704	b.ne	0x10001073c
0000000100010708	adr	x8, #153428 ; literal pool for: "unix"
000000010001070c	nop
0000000100010710	b	0x100010744
0000000100010714	cmp	w8, #0x2
0000000100010718	b.eq	0x100010730
000000010001071c	cmp	w8, #0x1e
0000000100010720	b.ne	0x10001073c
0000000100010724	adr	x8, #153395 ; literal pool for: "ipv6"
0000000100010728	nop
000000010001072c	b	0x100010744
0000000100010730	adr	x8, #153378 ; literal pool for: "ipv4"
0000000100010734	nop
0000000100010738	b	0x100010744
000000010001073c	adr	x8, #148361 ; literal pool for: "(unknown)"
0000000100010740	nop
0000000100010744	str	x8, [sp]
0000000100010748	adr	x2, #152299 ; literal pool for: "family = %s"
000000010001074c	nop
0000000100010750	mov	x0, x20
0000000100010754	mov	x1, x22
0000000100010758	bl	0x10002a548
000000010001075c	ldr	w8, [x21, #0xac]
0000000100010760	cbz	w8, 0x10001079c
0000000100010764	adr	x9, #153345 ; literal pool for: "udp"
0000000100010768	nop
000000010001076c	cmp	w8, #0x11
0000000100010770	csel	x9, x9, x23, eq
0000000100010774	adr	x10, #153325 ; literal pool for: "tcp"
0000000100010778	nop
000000010001077c	cmp	w8, #0x6
0000000100010780	csel	x8, x10, x9, eq
0000000100010784	str	x8, [sp]
0000000100010788	adr	x2, #152247 ; literal pool for: "protocol = %s"
000000010001078c	nop
0000000100010790	mov	x0, x20
0000000100010794	mov	x1, x22
0000000100010798	bl	0x10002a548
000000010001079c	ldr	w8, [x21, #0xb8]
00000001000107a0	cbz	w8, 0x1000107bc
00000001000107a4	str	x8, [sp]
00000001000107a8	adr	x2, #152229 ; literal pool for: "error = %d"
00000001000107ac	nop
00000001000107b0	mov	x0, x20
00000001000107b4	mov	x1, x22
00000001000107b8	bl	0x10002a548
00000001000107bc	mov	x0, x20
00000001000107c0	bl	0x10002a5c4
00000001000107c4	adr	x2, #152212 ; literal pool for: "sockets = {"
00000001000107c8	nop
00000001000107cc	mov	x0, x20
00000001000107d0	mov	x1, x22
00000001000107d4	bl	0x10002a548
00000001000107d8	ldr	x8, [x21, #0x48]
00000001000107dc	cbz	x8, 0x100010838
00000001000107e0	mov	x25, #0x0
00000001000107e4	add	x23, x19, #0x2
00000001000107e8	adr	x26, #152209 ; literal pool for: ""
00000001000107ec	nop
00000001000107f0	adr	x27, #152202 ; literal pool for: "no "
00000001000107f4	nop
00000001000107f8	adr	x24, #152172 ; literal pool for: "%d (%sbytes to read)"
00000001000107fc	nop
0000000100010800	ldp	x8, x9, [x21, #0x38]
0000000100010804	ldrb	w9, [x9, x25]
0000000100010808	cmp	w9, #0x0
000000010001080c	csel	x9, x27, x26, eq
0000000100010810	ldr	w8, [x8, x25, lsl #2]
0000000100010814	stp	x8, x9, [sp]
0000000100010818	mov	x0, x20
000000010001081c	mov	x1, x23
0000000100010820	mov	x2, x24
0000000100010824	bl	0x10002a548
0000000100010828	add	x25, x25, #0x1
000000010001082c	ldr	x8, [x21, #0x48]
0000000100010830	cmp	x25, x8
0000000100010834	b.lo	0x100010800
0000000100010838	adr	x2, #150859 ; literal pool for: "}"
000000010001083c	nop
0000000100010840	mov	x0, x20
0000000100010844	mov	x1, x22
0000000100010848	bl	0x10002a548
000000010001084c	mov	x0, x20
0000000100010850	bl	0x10002a5c4
0000000100010854	ldrh	w8, [x21, #0xbc]
0000000100010858	adr	x23, #152114 ; literal pool for: "1"
000000010001085c	nop
0000000100010860	adr	x24, #152108 ; literal pool for: "0"
0000000100010864	nop
0000000100010868	tst	w8, #0x1
000000010001086c	csel	x8, x24, x23, eq
0000000100010870	str	x8, [sp]
0000000100010874	adr	x2, #152074 ; literal pool for: "active = %s"
0000000100010878	nop
000000010001087c	mov	x0, x20
0000000100010880	mov	x1, x22
0000000100010884	bl	0x10002a548
0000000100010888	ldrh	w8, [x21, #0xbc]
000000010001088c	tst	w8, #0x2
0000000100010890	csel	x8, x24, x23, eq
0000000100010894	str	x8, [sp]
0000000100010898	adr	x2, #152054 ; literal pool for: "passive = %s"
000000010001089c	nop
00000001000108a0	mov	x0, x20
00000001000108a4	mov	x1, x22
00000001000108a8	bl	0x10002a548
00000001000108ac	ldrh	w8, [x21, #0xbc]
00000001000108b0	tst	w8, #0x10
00000001000108b4	csel	x8, x24, x23, eq
00000001000108b8	str	x8, [sp]
00000001000108bc	adr	x2, #152031 ; literal pool for: "bonjour = %s"
00000001000108c0	nop
00000001000108c4	mov	x0, x20
00000001000108c8	mov	x1, x22
00000001000108cc	bl	0x10002a548
00000001000108d0	ldrh	w8, [x21, #0xbc]
00000001000108d4	tst	w8, #0x20
00000001000108d8	csel	x8, x24, x23, eq
00000001000108dc	str	x8, [sp]
00000001000108e0	adr	x2, #152008 ; literal pool for: "ipv4v6 = %s"
00000001000108e4	nop
00000001000108e8	mov	x0, x20
00000001000108ec	mov	x1, x22
00000001000108f0	bl	0x10002a548
00000001000108f4	adr	x2, #150671 ; literal pool for: "}"
00000001000108f8	nop
00000001000108fc	mov	x0, x20
0000000100010900	mov	x1, x19
0000000100010904	bl	0x10002a548
0000000100010908	ldp	x29, x30, [sp, #0x60]
000000010001090c	ldp	x20, x19, [sp, #0x50]
0000000100010910	ldp	x22, x21, [sp, #0x40]
0000000100010914	ldp	x24, x23, [sp, #0x30]
0000000100010918	ldp	x26, x25, [sp, #0x20]
000000010001091c	ldp	x28, x27, [sp, #0x10]
0000000100010920	add	sp, sp, #0x70
0000000100010924	ret
0000000100010928	stp	x20, x19, [sp, #-0x20]!
000000010001092c	stp	x29, x30, [sp, #0x10]
0000000100010930	add	x29, sp, #0x10
0000000100010934	mov	x19, x0
0000000100010938	ldr	x20, [x19]
000000010001093c	ldr	w1, [x19, #0x8]
0000000100010940	ldp	x8, x2, [x20, #0x68]
0000000100010944	mov	x0, x20
0000000100010948	blr	x8
000000010001094c	mov	w1, #0x21
0000000100010950	mov	x0, x20
0000000100010954	bl	0x10000e4a4
0000000100010958	mov	x0, x19
000000010001095c	ldp	x29, x30, [sp, #0x10]
0000000100010960	ldp	x20, x19, [sp], #0x20
0000000100010964	b	0x100031010 ; symbol stub for: _free
0000000100010968	stp	x20, x19, [sp, #-0x20]!
000000010001096c	stp	x29, x30, [sp, #0x10]
0000000100010970	add	x29, sp, #0x10
0000000100010974	mov	x19, x0
0000000100010978	ldrb	w8, [x19, #0xbc]
000000010001097c	tbnz	w8, #0x7, 0x100010998
0000000100010980	ldr	x0, [x19, #0x30]
0000000100010984	add	x2, x19, #0xc0
0000000100010988	ldr	x3, [x19, #0xb0]
000000010001098c	adr	x1, #152692 ; literal pool for: "com.apple.bonjour.registration"
0000000100010990	nop
0000000100010994	bl	0x100028668
0000000100010998	mov	w1, #0x22
000000010001099c	mov	x0, x19
00000001000109a0	ldp	x29, x30, [sp, #0x10]
00000001000109a4	ldp	x20, x19, [sp], #0x20
00000001000109a8	b	0x10000e4a4
00000001000109ac	sub	w8, w0, #0x1
00000001000109b0	cmp	w8, #0xd
00000001000109b4	b.hi	0x1000109e4
00000001000109b8	adr	x9, #108
00000001000109bc	nop
00000001000109c0	ldrsw	x8, [x9, x8, lsl #2]
00000001000109c4	add	x8, x8, x9
00000001000109c8	br	x8
00000001000109cc	mov	w0, #0x2d
00000001000109d0	ret
00000001000109d4	mov	w0, #0x16
00000001000109d8	ret
00000001000109dc	orr	w0, wzr, #0x3
00000001000109e0	ret
00000001000109e4	mov	w0, #-0x1
00000001000109e8	ret
00000001000109ec	mov	w0, #0x23
00000001000109f0	ret
00000001000109f4	mov	w0, #0x99
00000001000109f8	ret
00000001000109fc	orr	w0, wzr, #0xc
0000000100010a00	ret
0000000100010a04	stp	x29, x30, [sp, #-0x10]!
0000000100010a08	mov	x29, sp
0000000100010a0c	bl	0x100030adc ; symbol stub for: ___error
0000000100010a10	ldr	w0, [x0]
0000000100010a14	ldp	x29, x30, [sp], #0x10
0000000100010a18	ret
0000000100010a1c	mov	w0, #0x22
0000000100010a20	ret
0000000100010a24	.long	0xffffffa8
0000000100010a28	.long	0xffffffc8
0000000100010a2c	.long	0xffffffb0
0000000100010a30	.long	0xffffffd0
0000000100010a34	.long	0xffffffa8
0000000100010a38	.long	0xffffffd8
0000000100010a3c	.long	0xffffffb8
0000000100010a40	.long	0xffffffb8
0000000100010a44	.long	0xffffffa8
0000000100010a48	.long	0xffffffa8
0000000100010a4c	.long	0xffffffe0
0000000100010a50	.long	0xffffffb0
0000000100010a54	.long	0xffffffb0
0000000100010a58	.long	0xfffffff8
0000000100010a5c	stp	x20, x19, [sp, #-0x20]!
0000000100010a60	stp	x29, x30, [sp, #0x10]
0000000100010a64	add	x29, sp, #0x10
0000000100010a68	mov	x19, x1
0000000100010a6c	adr	x8, #211475
0000000100010a70	nop
0000000100010a74	ldrb	w8, [x8]
0000000100010a78	cbnz	w8, 0x100010aa0
0000000100010a7c	ldrb	w8, [x0, #0x45b]
0000000100010a80	tbnz	w8, #0x3, 0x100010aa0
0000000100010a84	add	x0, x0, #0x358
0000000100010a88	bl	0x10002cbf4
0000000100010a8c	ldrb	w8, [x19, #0x20]
0000000100010a90	cmp	w0, w8
0000000100010a94	orr	w8, wzr, #0x6
0000000100010a98	csel	w0, w8, wzr, eq
0000000100010a9c	b	0x100010aa4
0000000100010aa0	mov	w0, #0x0
0000000100010aa4	ldp	x29, x30, [sp, #0x10]
0000000100010aa8	ldp	x20, x19, [sp], #0x20
0000000100010aac	ret
0000000100010ab0	stp	x22, x21, [sp, #-0x30]!
0000000100010ab4	stp	x20, x19, [sp, #0x10]
0000000100010ab8	stp	x29, x30, [sp, #0x20]
0000000100010abc	add	x29, sp, #0x20
0000000100010ac0	mov	x19, x1
0000000100010ac4	mov	x20, x0
0000000100010ac8	adr	x8, #211383
0000000100010acc	nop
0000000100010ad0	ldrb	w8, [x8]
0000000100010ad4	cbnz	w8, 0x100010af8
0000000100010ad8	ldrb	w8, [x20, #0x45b]
0000000100010adc	tbnz	w8, #0x3, 0x100010af8
0000000100010ae0	add	x21, x20, #0x358
0000000100010ae4	mov	x0, x21
0000000100010ae8	bl	0x10002cd2c
0000000100010aec	tbz	w0, #0x0, 0x100010b0c
0000000100010af0	orr	w8, wzr, #0x1
0000000100010af4	b	0x100010b48
0000000100010af8	mov	w0, #0x0
0000000100010afc	ldp	x29, x30, [sp, #0x20]
0000000100010b00	ldp	x20, x19, [sp, #0x10]
0000000100010b04	ldp	x22, x21, [sp], #0x30
0000000100010b08	ret
0000000100010b0c	mov	x0, x21
0000000100010b10	bl	0x10002cc80
0000000100010b14	cbz	w0, 0x100010b2c
0000000100010b18	mov	x0, x21
0000000100010b1c	bl	0x10002ccac
0000000100010b20	cmp	w0, #0x0
0000000100010b24	cset	w8, eq
0000000100010b28	b	0x100010b48
0000000100010b2c	ldr	w8, [x20, #0x310]
0000000100010b30	cbz	w8, 0x100010b3c
0000000100010b34	mov	w8, #0x0
0000000100010b38	b	0x100010b48
0000000100010b3c	ldrb	w8, [x19, #0x20]
0000000100010b40	cmp	w8, #0x0
0000000100010b44	cset	w8, ne
0000000100010b48	ldrb	w9, [x19, #0x20]
0000000100010b4c	cmp	w8, w9
0000000100010b50	orr	w8, wzr, #0x6
0000000100010b54	csel	w0, w8, wzr, eq
0000000100010b58	b	0x100010afc
0000000100010b5c	stp	x22, x21, [sp, #-0x30]!
0000000100010b60	stp	x20, x19, [sp, #0x10]
0000000100010b64	stp	x29, x30, [sp, #0x20]
0000000100010b68	add	x29, sp, #0x20
0000000100010b6c	mov	x19, x1
0000000100010b70	ldr	x20, [x0, #0xa0]
0000000100010b74	cbz	x20, 0x100010b94
0000000100010b78	mov	w21, #0x0
0000000100010b7c	mov	x0, x20
0000000100010b80	bl	0x10002829c
0000000100010b84	orr	w21, w21, w0
0000000100010b88	ldr	x20, [x20, #0x8]
0000000100010b8c	cbnz	x20, 0x100010b7c
0000000100010b90	b	0x100010b98
0000000100010b94	mov	w21, #0x0
0000000100010b98	ldrb	w8, [x19, #0x20]
0000000100010b9c	cmp	w21, w8
0000000100010ba0	orr	w8, wzr, #0xe
0000000100010ba4	csel	w0, w8, wzr, eq
0000000100010ba8	ldp	x29, x30, [sp, #0x20]
0000000100010bac	ldp	x20, x19, [sp, #0x10]
0000000100010bb0	ldp	x22, x21, [sp], #0x30
0000000100010bb4	ret
0000000100010bb8	sub	sp, sp, #0x1c0
0000000100010bbc	stp	x28, x27, [sp, #0x160]
0000000100010bc0	stp	x26, x25, [sp, #0x170]
0000000100010bc4	stp	x24, x23, [sp, #0x180]
0000000100010bc8	stp	x22, x21, [sp, #0x190]
0000000100010bcc	stp	x20, x19, [sp, #0x1a0]
0000000100010bd0	stp	x29, x30, [sp, #0x1b0]
0000000100010bd4	add	x29, sp, #0x1b0
0000000100010bd8	mov	x21, x1
0000000100010bdc	mov	x19, x0
0000000100010be0	nop
0000000100010be4	ldr	x8, #0x2f434 ; literal pool symbol address: ___stack_chk_guard
0000000100010be8	ldr	x8, [x8]
0000000100010bec	stur	x8, [x29, #-0x58]
0000000100010bf0	ldr	x8, [x19, #0x1d0]
0000000100010bf4	ldr	x2, [x19, #0x200]
0000000100010bf8	blr	x8
0000000100010bfc	mov	x24, x0
0000000100010c00	adrp	x28, 52 ; 0x100044000
0000000100010c04	ldr	x0, [x28, #0x420]
0000000100010c08	add	x20, x19, #0x460
0000000100010c0c	stp	x20, x24, [sp]
0000000100010c10	adr	x2, #152153 ; literal pool for: "%s: spawn delegate check: %d"
0000000100010c14	nop
0000000100010c18	mov	w1, #0x0
0000000100010c1c	bl	0x1000270c8
0000000100010c20	cmp	w24, #0x23
0000000100010c24	b.gt	0x100010c3c
0000000100010c28	cbz	w24, 0x100010c68
0000000100010c2c	cmp	w24, #0x2
0000000100010c30	ccmp	w24, #0x10, #0x4, ne
0000000100010c34	b.eq	0x100010c60
0000000100010c38	b	0x100010d28
0000000100010c3c	cmp	w24, #0x24
0000000100010c40	b.eq	0x100010cdc
0000000100010c44	cmp	w24, #0x7c
0000000100010c48	b.eq	0x100010c60
0000000100010c4c	cmp	w24, #0x92
0000000100010c50	b.ne	0x100010d28
0000000100010c54	ldr	x8, [x19, #0x458]
0000000100010c58	orr	x8, x8, #0x400000
0000000100010c5c	str	x8, [x19, #0x458]
0000000100010c60	mov	w24, #0x0
0000000100010c64	b	0x100010d28
0000000100010c68	ldrb	w8, [x19, #0x45a]
0000000100010c6c	tbnz	w8, #0x5, 0x100010cf4
0000000100010c70	ldr	x0, [x19, #0xe0]
0000000100010c74	bl	0x10001dddc
0000000100010c78	adr	x24, #206240
0000000100010c7c	nop
0000000100010c80	cmp	x0, x24
0000000100010c84	b.eq	0x100010d64
0000000100010c88	ldr	x8, [x19, #0x280]
0000000100010c8c	cbz	x8, 0x100010db0
0000000100010c90	ldr	x0, [x28, #0x420]
0000000100010c94	str	x20, [sp]
0000000100010c98	adr	x2, #153244 ; literal pool for: "%s: cannot spawn: service is throttled"
0000000100010c9c	nop
0000000100010ca0	mov	w1, #0x0
0000000100010ca4	bl	0x1000270c8
0000000100010ca8	mov	w24, #0x24
0000000100010cac	ldr	w8, [x19, #0x170]
0000000100010cb0	cmp	w8, #0x1
0000000100010cb4	b.eq	0x100010d28
0000000100010cb8	mov	x0, x24
0000000100010cbc	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100010cc0	stp	x24, x0, [sp]
0000000100010cc4	adr	x2, #152026 ; literal pool for: "Fatal error in spawning service: %d: %s"
0000000100010cc8	nop
0000000100010ccc	orr	w1, wzr, #0x3
0000000100010cd0	mov	x0, x19
0000000100010cd4	bl	0x1000118ec
0000000100010cd8	b	0x100010d28
0000000100010cdc	mov	w1, #0x0
0000000100010ce0	mov	x0, x19
0000000100010ce4	mov	x2, #0x0
0000000100010ce8	bl	0x10001195c
0000000100010cec	mov	w24, #0x24
0000000100010cf0	b	0x100010d28
0000000100010cf4	ldr	x0, [x28, #0x420]
0000000100010cf8	str	x20, [sp]
0000000100010cfc	adr	x2, #153027 ; literal pool for: "%s: cannot spawn: service is in penalty box"
0000000100010d00	nop
0000000100010d04	mov	w1, #0x0
0000000100010d08	bl	0x1000270c8
0000000100010d0c	ldr	x0, [x28, #0x420]
0000000100010d10	str	x20, [sp]
0000000100010d14	adr	x2, #151922 ; literal pool for: "%s: service cannot exec"
0000000100010d18	nop
0000000100010d1c	mov	w1, #0x0
0000000100010d20	bl	0x1000270c8
0000000100010d24	mov	w24, #0x8b
0000000100010d28	ldur	x8, [x29, #-0x58]
0000000100010d2c	nop
0000000100010d30	ldr	x9, #0x2f2e8 ; literal pool symbol address: ___stack_chk_guard
0000000100010d34	ldr	x9, [x9]
0000000100010d38	cmp	x9, x8
0000000100010d3c	b.ne	0x100011858
0000000100010d40	mov	x0, x24
0000000100010d44	ldp	x29, x30, [sp, #0x1b0]
0000000100010d48	ldp	x20, x19, [sp, #0x1a0]
0000000100010d4c	ldp	x22, x21, [sp, #0x190]
0000000100010d50	ldp	x24, x23, [sp, #0x180]
0000000100010d54	ldp	x26, x25, [sp, #0x170]
0000000100010d58	ldp	x28, x27, [sp, #0x160]
0000000100010d5c	add	sp, sp, #0x1c0
0000000100010d60	ret
0000000100010d64	nop
0000000100010d68	ldr	x22, #0x32980
0000000100010d6c	cbz	x22, 0x100010c88
0000000100010d70	adr	x23, #153432 ; literal pool for: "%s: evaluating against global attach: %s"
0000000100010d74	nop
0000000100010d78	ldr	x25, [x22]
0000000100010d7c	ldr	x0, [x28, #0x420]
0000000100010d80	ldr	x8, [x22, #0x10]
0000000100010d84	stp	x20, x8, [sp]
0000000100010d88	mov	w1, #0x0
0000000100010d8c	mov	x2, x23
0000000100010d90	bl	0x1000270c8
0000000100010d94	ldr	x1, [x22, #0x10]
0000000100010d98	mov	x0, x20
0000000100010d9c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100010da0	cbz	w0, 0x100010fec
0000000100010da4	mov	x22, x25
0000000100010da8	cbnz	x25, 0x100010d78
0000000100010dac	b	0x100010c88
0000000100010db0	ldr	x0, [x19, #0x318]
0000000100010db4	bl	0x100008730
0000000100010db8	ldr	x8, [x19, #0x458]
0000000100010dbc	tbnz	w8, #0x12, 0x100010e08
0000000100010dc0	orr	w9, w21, #0x8
0000000100010dc4	cmp	w9, #0xb
0000000100010dc8	b.eq	0x100010e08
0000000100010dcc	tbnz	w8, #0xf, 0x100010e08
0000000100010dd0	lsr	x9, x0, #9
0000000100010dd4	mov	x10, #0x5a53
0000000100010dd8	movk	x10, #0xa09b, lsl #16
0000000100010ddc	movk	x10, #0xb82f, lsl #32
0000000100010de0	movk	x10, #0x44, lsl #48
0000000100010de4	umulh	x9, x9, x10
0000000100010de8	lsr	x1, x9, #11
0000000100010dec	ldr	w9, [x19, #0x28c]
0000000100010df0	cmp	x1, x9
0000000100010df4	b.hs	0x100010e08
0000000100010df8	mov	x2, x21
0000000100010dfc	mov	x0, x19
0000000100010e00	bl	0x1000180ac
0000000100010e04	b	0x100010ca8
0000000100010e08	ldr	w9, [x19, #0x170]
0000000100010e0c	cbnz	w9, 0x100010e24
0000000100010e10	mov	w1, #0x0
0000000100010e14	mov	x0, x19
0000000100010e18	mov	x2, #0x0
0000000100010e1c	bl	0x10001195c
0000000100010e20	ldr	x8, [x19, #0x458]
0000000100010e24	mov	x9, #-0x8040001
0000000100010e28	and	x8, x8, x9
0000000100010e2c	str	x8, [x19, #0x458]
0000000100010e30	str	w21, [x19, #0x334]
0000000100010e34	nop
0000000100010e38	nop
0000000100010e3c	adr	x9, #152863 ; literal pool for: "xpcproxy"
0000000100010e40	nop
0000000100010e44	ldr	x27, #0x32684
0000000100010e48	stp	x9, x20, [x29, #-0x80]
0000000100010e4c	stp	xzr, xzr, [x29, #-0x70]
0000000100010e50	ldr	x0, [x19, #0xe0]
0000000100010e54	bl	0x10001dddc
0000000100010e58	cmp	x0, x24
0000000100010e5c	b.ne	0x100010e90
0000000100010e60	ldr	x0, [x19, #0xe0]
0000000100010e64	bl	0x10001dde4
0000000100010e68	str	x0, [sp]
0000000100010e6c	adr	x4, #152824 ; literal pool for: "%lu"
0000000100010e70	nop
0000000100010e74	sub	x22, x29, #0x98
0000000100010e78	sub	x0, x29, #0x98
0000000100010e7c	orr	w1, wzr, #0x18
0000000100010e80	orr	w3, wzr, #0x18
0000000100010e84	mov	w2, #0x0
0000000100010e88	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100010e8c	stur	x22, [x29, #-0x70]
0000000100010e90	ldrb	w8, [x19, #0x44a]
0000000100010e94	ldrh	w9, [x19, #0x354]
0000000100010e98	lsl	w8, w8, #2
0000000100010e9c	and	w8, w8, #0x8
0000000100010ea0	lsr	w10, w8, #3
0000000100010ea4	and	w9, w9, #0xfffffff7
0000000100010ea8	orr	w8, w9, w8
0000000100010eac	strh	w8, [x19, #0x354]
0000000100010eb0	mov	w23, #0x400c
0000000100010eb4	bfi	w23, w10, #7, #1
0000000100010eb8	add	x0, sp, #0x40
0000000100010ebc	bl	0x1000314a8 ; symbol stub for: _posix_spawnattr_init
0000000100010ec0	cbz	w0, 0x100010edc
0000000100010ec4	sxtw	x2, w0
0000000100010ec8	adr	x0, #3808
0000000100010ecc	nop
0000000100010ed0	mov	x1, x19
0000000100010ed4	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100010ed8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100010edc	add	x0, sp, #0x40
0000000100010ee0	mov	x1, x23
0000000100010ee4	bl	0x100031508 ; symbol stub for: _posix_spawnattr_setflags
0000000100010ee8	cbz	w0, 0x100010f04
0000000100010eec	sxtw	x2, w0
0000000100010ef0	adr	x0, #3768
0000000100010ef4	nop
0000000100010ef8	mov	x1, x19
0000000100010efc	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100010f00	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100010f04	str	wzr, [sp, #0x3c]
0000000100010f08	add	x0, sp, #0x40
0000000100010f0c	add	x1, sp, #0x3c
0000000100010f10	bl	0x100031538 ; symbol stub for: _posix_spawnattr_setsigmask
0000000100010f14	cbz	w0, 0x100010f30
0000000100010f18	sxtw	x2, w0
0000000100010f1c	adr	x0, #3724
0000000100010f20	nop
0000000100010f24	mov	x1, x19
0000000100010f28	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100010f2c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100010f30	mov	w8, #-0x1
0000000100010f34	str	w8, [sp, #0x38]
0000000100010f38	add	x0, sp, #0x40
0000000100010f3c	add	x1, sp, #0x38
0000000100010f40	bl	0x10003152c ; symbol stub for: _posix_spawnattr_setsigdefault
0000000100010f44	cbz	w0, 0x100010f60
0000000100010f48	sxtw	x2, w0
0000000100010f4c	adr	x0, #3676
0000000100010f50	nop
0000000100010f54	mov	x1, x19
0000000100010f58	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100010f5c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100010f60	ldr	w1, [x19, #0x2c0]
0000000100010f64	add	x0, sp, #0x40
0000000100010f68	bl	0x100031520 ; symbol stub for: _posix_spawnattr_setprocesstype_np
0000000100010f6c	cbz	w0, 0x100010f88
0000000100010f70	sxtw	x2, w0
0000000100010f74	adr	x0, #3636
0000000100010f78	nop
0000000100010f7c	mov	x1, x19
0000000100010f80	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100010f84	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100010f88	ldr	w1, [x19, #0x2c4]
0000000100010f8c	cbz	w1, 0x100010f9c
0000000100010f90	add	x0, sp, #0x40
0000000100010f94	bl	0x1000314b4 ; symbol stub for: _posix_spawnattr_set_darwin_role_np
0000000100010f98	cbnz	w0, 0x1000118ac
0000000100010f9c	ldr	w8, [x19, #0x2c0]
0000000100010fa0	cmp	w8, #0x600
0000000100010fa4	b.ne	0x100010fe4
0000000100010fa8	ldr	x24, [x19, #0xa8]
0000000100010fac	cbz	x24, 0x1000110ac
0000000100010fb0	mov	x23, #0x0
0000000100010fb4	add	x22, sp, #0x98
0000000100010fb8	mov	x0, x24
0000000100010fbc	bl	0x10002f2ec
0000000100010fc0	str	w0, [x22, x23, lsl #2]
0000000100010fc4	cmp	x23, #0x1f
0000000100010fc8	b.eq	0x100011114
0000000100010fcc	add	x23, x23, #0x1
0000000100010fd0	ldr	x24, [x24, #0x8]
0000000100010fd4	cbnz	x24, 0x100010fb8
0000000100010fd8	cmp	x23, #0x1f
0000000100010fdc	b.ls	0x1000110b0
0000000100010fe0	b	0x10001112c
0000000100010fe4	mov	x23, #0x0
0000000100010fe8	b	0x10001119c
0000000100010fec	ldr	x0, [x19, #0xe0]
0000000100010ff0	bl	0x10001dde4
0000000100010ff4	mov	x23, x0
0000000100010ff8	ldr	x0, [x22, #0x18]
0000000100010ffc	adr	x1, #152821 ; literal pool for: "handle"
0000000100011000	nop
0000000100011004	mov	x2, x23
0000000100011008	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001100c	ldr	x0, [x28, #0x420]
0000000100011010	stp	x20, x23, [sp]
0000000100011014	adr	x2, #152804 ; literal pool for: "%s: sending request back through server: new handle = %lu"
0000000100011018	nop
000000010001101c	mov	w1, #0x0
0000000100011020	bl	0x1000270c8
0000000100011024	nop
0000000100011028	nop
000000010001102c	ldr	w0, 0x100044430
0000000100011030	ldr	x1, [x22, #0x18]
0000000100011034	bl	0x10002e418
0000000100011038	ldr	x0, [x22, #0x18]
000000010001103c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100011040	ldr	x8, [x22]
0000000100011044	cbz	x8, 0x100011050
0000000100011048	ldr	x9, [x22, #0x8]
000000010001104c	str	x9, [x8, #0x8]
0000000100011050	ldr	x9, [x22, #0x8]
0000000100011054	str	x8, [x9]
0000000100011058	mov	x0, x22
000000010001105c	bl	0x100031010 ; symbol stub for: _free
0000000100011060	str	w21, [x19, #0x27c]
0000000100011064	ldrb	w8, [x19, #0x44a]
0000000100011068	orr	w8, w8, #0x8
000000010001106c	strb	w8, [x19, #0x44a]
0000000100011070	ldr	x0, [x28, #0x420]
0000000100011074	str	x20, [sp]
0000000100011078	adr	x2, #152762 ; literal pool for: "%s: service spawn pended until controller attaches"
000000010001107c	nop
0000000100011080	mov	w1, #0x0
0000000100011084	bl	0x1000270c8
0000000100011088	mov	w1, #0x0
000000010001108c	mov	x0, x19
0000000100011090	mov	x2, #0x0
0000000100011094	bl	0x10001195c
0000000100011098	ldr	x0, [x28, #0x420]
000000010001109c	str	x20, [sp]
00000001000110a0	adr	x2, #152139 ; literal pool for: "%s: matched pending controller attach; deferring spawn for configuration"
00000001000110a4	nop
00000001000110a8	b	0x100010ca0
00000001000110ac	mov	x23, #0x0
00000001000110b0	ldr	x24, [x19, #0xc0]
00000001000110b4	cbz	x24, 0x1000110e4
00000001000110b8	add	x22, sp, #0x98
00000001000110bc	mov	x0, x24
00000001000110c0	bl	0x10002f2ec
00000001000110c4	str	w0, [x22, x23, lsl #2]
00000001000110c8	cmp	x23, #0x1f
00000001000110cc	b.eq	0x100011144
00000001000110d0	add	x23, x23, #0x1
00000001000110d4	ldr	x24, [x24, #0x8]
00000001000110d8	cbnz	x24, 0x1000110bc
00000001000110dc	cmp	x23, #0x1f
00000001000110e0	b.hi	0x10001115c
00000001000110e4	ldr	x24, [x19, #0xc8]
00000001000110e8	cbz	x24, 0x100011170
00000001000110ec	add	x22, sp, #0x98
00000001000110f0	mov	x0, x24
00000001000110f4	bl	0x10002f2ec
00000001000110f8	str	w0, [x22, x23, lsl #2]
00000001000110fc	cmp	x23, #0x1f
0000000100011100	b.eq	0x1000116b4
0000000100011104	add	x23, x23, #0x1
0000000100011108	ldr	x24, [x24, #0x8]
000000010001110c	cbnz	x24, 0x1000110f0
0000000100011110	b	0x100011170
0000000100011114	adr	x2, #152148 ; literal pool for: "Skipping remaining service endpoints for importance boosting."
0000000100011118	nop
000000010001111c	orr	w1, wzr, #0x4
0000000100011120	mov	x0, x19
0000000100011124	bl	0x1000118ec
0000000100011128	orr	w23, wzr, #0x20
000000010001112c	adr	x2, #152186 ; literal pool for: "Skipping remaining event endpoints for importance boosting."
0000000100011130	nop
0000000100011134	orr	w1, wzr, #0x4
0000000100011138	mov	x0, x19
000000010001113c	bl	0x1000118ec
0000000100011140	b	0x10001115c
0000000100011144	adr	x2, #152162 ; literal pool for: "Skipping remaining event endpoints for importance boosting."
0000000100011148	nop
000000010001114c	orr	w1, wzr, #0x4
0000000100011150	mov	x0, x19
0000000100011154	bl	0x1000118ec
0000000100011158	orr	w23, wzr, #0x20
000000010001115c	adr	x2, #152198 ; literal pool for: "Skipping remaining instance endpoints for importance boosting."
0000000100011160	nop
0000000100011164	orr	w1, wzr, #0x4
0000000100011168	mov	x0, x19
000000010001116c	bl	0x1000118ec
0000000100011170	add	x0, sp, #0x40
0000000100011174	add	x2, sp, #0x98
0000000100011178	mov	x1, x23
000000010001117c	bl	0x1000314c0 ; symbol stub for: _posix_spawnattr_set_importancewatch_port_np
0000000100011180	cbz	w0, 0x10001119c
0000000100011184	sxtw	x2, w0
0000000100011188	adr	x0, #3104
000000010001118c	nop
0000000100011190	mov	x1, x19
0000000100011194	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100011198	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001119c	orr	w1, wzr, #0x1
00000001000111a0	mov	w2, #0x15
00000001000111a4	mov	w3, #-0x1
00000001000111a8	mov	w4, #-0x1
00000001000111ac	add	x0, sp, #0x40
00000001000111b0	bl	0x100031514 ; symbol stub for: _posix_spawnattr_setjetsam_ext
00000001000111b4	cbz	w0, 0x1000111d0
00000001000111b8	sxtw	x2, w0
00000001000111bc	adr	x0, #3052
00000001000111c0	nop
00000001000111c4	mov	x1, x19
00000001000111c8	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000111cc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000111d0	add	x0, sp, #0x30
00000001000111d4	bl	0x100031490 ; symbol stub for: _posix_spawn_file_actions_init
00000001000111d8	cmn	w0, #0x1
00000001000111dc	b.eq	0x10001185c
00000001000111e0	adr	x2, #152129 ; literal pool for: "/dev/console"
00000001000111e4	nop
00000001000111e8	add	x0, sp, #0x30
00000001000111ec	mov	w1, #0x0
00000001000111f0	mov	w3, #0x0
00000001000111f4	mov	w4, #0x0
00000001000111f8	bl	0x100031478 ; symbol stub for: _posix_spawn_file_actions_addopen
00000001000111fc	cmn	w0, #0x1
0000000100011200	b.eq	0x100011870
0000000100011204	adr	x2, #152093 ; literal pool for: "/dev/console"
0000000100011208	nop
000000010001120c	orr	w1, wzr, #0x1
0000000100011210	orr	w3, wzr, #0x1
0000000100011214	add	x0, sp, #0x30
0000000100011218	mov	w4, #0x0
000000010001121c	bl	0x100031478 ; symbol stub for: _posix_spawn_file_actions_addopen
0000000100011220	cmn	w0, #0x1
0000000100011224	b.eq	0x100011884
0000000100011228	adr	x2, #152057 ; literal pool for: "/dev/console"
000000010001122c	nop
0000000100011230	orr	w1, wzr, #0x2
0000000100011234	orr	w3, wzr, #0x2
0000000100011238	add	x0, sp, #0x30
000000010001123c	mov	w4, #0x0
0000000100011240	bl	0x100031478 ; symbol stub for: _posix_spawn_file_actions_addopen
0000000100011244	cmn	w0, #0x1
0000000100011248	b.eq	0x100011898
000000010001124c	ldr	x0, [x19, #0xe0]
0000000100011250	ldr	x8, [x19, #0x458]
0000000100011254	ubfx	x2, x8, #33, #1
0000000100011258	mov	x1, x19
000000010001125c	bl	0x10001df58
0000000100011260	mov	x4, x0
0000000100011264	add	x0, sp, #0x40
0000000100011268	mov	w2, #0x0
000000010001126c	mov	x3, x1
0000000100011270	mov	x1, x4
0000000100011274	bl	0x1000314f0 ; symbol stub for: _posix_spawnattr_setcoalition_np
0000000100011278	cbz	w0, 0x100011294
000000010001127c	sxtw	x2, w0
0000000100011280	adr	x0, #2856
0000000100011284	nop
0000000100011288	mov	x1, x19
000000010001128c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100011290	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011294	ldr	x0, [x19, #0xe0]
0000000100011298	ldr	x8, [x19, #0x458]
000000010001129c	ubfx	x2, x8, #33, #1
00000001000112a0	mov	x1, x19
00000001000112a4	bl	0x10001e0b0
00000001000112a8	mov	x4, x0
00000001000112ac	orr	w2, wzr, #0x1
00000001000112b0	add	x0, sp, #0x40
00000001000112b4	mov	x3, x1
00000001000112b8	mov	x1, x4
00000001000112bc	bl	0x1000314f0 ; symbol stub for: _posix_spawnattr_setcoalition_np
00000001000112c0	cbz	w0, 0x1000112dc
00000001000112c4	sxtw	x2, w0
00000001000112c8	adr	x0, #2784
00000001000112cc	nop
00000001000112d0	mov	x1, x19
00000001000112d4	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000112d8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000112dc	ldr	x8, [x19, #0xe0]
00000001000112e0	ldr	w1, [x8, #0x34]
00000001000112e4	cbz	w1, 0x100011360
00000001000112e8	orr	w2, wzr, #0x1
00000001000112ec	add	x0, sp, #0x40
00000001000112f0	bl	0x1000314d8 ; symbol stub for: _posix_spawnattr_set_persona_np
00000001000112f4	cbz	w0, 0x100011310
00000001000112f8	sxtw	x2, w0
00000001000112fc	adr	x0, #2732
0000000100011300	nop
0000000100011304	mov	x1, x19
0000000100011308	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001130c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011310	add	x0, sp, #0x40
0000000100011314	mov	w1, #0x0
0000000100011318	bl	0x1000314e4 ; symbol stub for: _posix_spawnattr_set_persona_uid_np
000000010001131c	cbz	w0, 0x100011338
0000000100011320	sxtw	x2, w0
0000000100011324	adr	x0, #2692
0000000100011328	nop
000000010001132c	mov	x1, x19
0000000100011330	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100011334	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011338	add	x0, sp, #0x40
000000010001133c	mov	w1, #0x0
0000000100011340	bl	0x1000314cc ; symbol stub for: _posix_spawnattr_set_persona_gid_np
0000000100011344	cbz	w0, 0x100011360
0000000100011348	sxtw	x2, w0
000000010001134c	adr	x0, #2652
0000000100011350	nop
0000000100011354	mov	x1, x19
0000000100011358	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001135c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011360	ldr	x1, [x19, #0x2b8]
0000000100011364	cbz	x1, 0x1000113c8
0000000100011368	ldr	x0, [x19, #0xe0]
000000010001136c	bl	0x10001e2b0
0000000100011370	cbz	x0, 0x1000113ac
0000000100011374	bl	0x10002f2ec
0000000100011378	mov	x22, x0
000000010001137c	bl	0x10000886c
0000000100011380	cbnz	w0, 0x1000118cc
0000000100011384	add	w8, w22, #0x1
0000000100011388	cmp	w8, #0x2
000000010001138c	b.lo	0x1000113d4
0000000100011390	add	x0, sp, #0x40
0000000100011394	mov	x1, x22
0000000100011398	bl	0x1000089cc
000000010001139c	cbnz	w0, 0x1000118dc
00000001000113a0	orr	w8, wzr, #0x1
00000001000113a4	str	w8, [sp, #0x2c]
00000001000113a8	b	0x1000113d8
00000001000113ac	ldr	x8, [x19, #0x2b8]
00000001000113b0	str	x8, [sp]
00000001000113b4	adr	x2, #151674 ; literal pool for: "Could not find exception endpoint for service: %s"
00000001000113b8	nop
00000001000113bc	orr	w1, wzr, #0x3
00000001000113c0	mov	x0, x19
00000001000113c4	bl	0x1000118ec
00000001000113c8	str	wzr, [sp, #0x2c]
00000001000113cc	mov	w22, #0x0
00000001000113d0	b	0x1000113d8
00000001000113d4	str	wzr, [sp, #0x2c]
00000001000113d8	bl	0x100031214 ; symbol stub for: _mach_absolute_time
00000001000113dc	str	x0, [x19, #0x318]
00000001000113e0	ldr	w8, [x19, #0x310]
00000001000113e4	add	w8, w8, #0x1
00000001000113e8	str	w8, [x19, #0x310]
00000001000113ec	ldr	x8, [x19, #0x458]
00000001000113f0	lsr	x8, x8, #27
00000001000113f4	and	x0, x8, #0x400
00000001000113f8	add	x1, sp, #0x58
00000001000113fc	bl	0x100030530
0000000100011400	ldr	x8, [x19, #0xe8]
0000000100011404	cmp	x8, #0x0
0000000100011408	csel	x8, x19, x8, eq
000000010001140c	ldr	w8, [x8, #0x254]
0000000100011410	add	w9, w8, #0x1
0000000100011414	cmp	w9, #0x2
0000000100011418	b.lo	0x100011454
000000010001141c	nop
0000000100011420	nop
0000000100011424	ldr	w9, 0x100044430
0000000100011428	stp	w9, w8, [x29, #-0x60]
000000010001142c	nop
0000000100011430	ldr	x8, #0x2ecf0 ; literal pool symbol address: _mach_task_self_
0000000100011434	ldr	w0, [x8]
0000000100011438	orr	w2, wzr, #0x2
000000010001143c	sub	x1, x29, #0x60
0000000100011440	bl	0x1000312d4 ; symbol stub for: _mach_ports_register
0000000100011444	cbz	w0, 0x100011454
0000000100011448	sxtw	x0, w0
000000010001144c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100011450	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011454	str	w22, [sp, #0x28]
0000000100011458	add	x26, x19, #0x330
000000010001145c	nop
0000000100011460	nop
0000000100011464	ldr	x5, #0x32fec
0000000100011468	add	x2, sp, #0x30
000000010001146c	add	x3, sp, #0x40
0000000100011470	sub	x4, x29, #0x80
0000000100011474	mov	x0, x26
0000000100011478	mov	x25, x27
000000010001147c	mov	x1, x27
0000000100011480	bl	0x100031544 ; symbol stub for: _posix_spawnp
0000000100011484	mov	x24, x0
0000000100011488	ldr	x27, [x28, #0x420]
000000010001148c	cbz	w24, 0x100011550
0000000100011490	mov	x0, x24
0000000100011494	bl	0x100031724 ; symbol stub for: _strerror
0000000100011498	stp	x24, x0, [sp, #0x8]
000000010001149c	str	x20, [sp]
00000001000114a0	adr	x2, #151518 ; literal pool for: "%s: trampoline spawn failed: %d: %s"
00000001000114a4	nop
00000001000114a8	mov	w1, #0x0
00000001000114ac	mov	x0, x27
00000001000114b0	bl	0x1000270c8
00000001000114b4	str	wzr, [x19, #0x330]
00000001000114b8	sxtw	x2, w24
00000001000114bc	orr	w1, wzr, #0x1
00000001000114c0	mov	x0, x19
00000001000114c4	bl	0x10001195c
00000001000114c8	cbz	x23, 0x100011504
00000001000114cc	add	x22, sp, #0x98
00000001000114d0	adr	x27, #2264
00000001000114d4	nop
00000001000114d8	ldr	w0, [x22]
00000001000114dc	bl	0x100008910
00000001000114e0	cbz	w0, 0x1000114f8
00000001000114e4	sxtw	x2, w0
00000001000114e8	mov	x0, x27
00000001000114ec	mov	x1, x19
00000001000114f0	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000114f4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000114f8	add	x22, x22, #0x4
00000001000114fc	subs	x23, x23, #0x1
0000000100011500	b.ne	0x1000114d8
0000000100011504	mov	x0, x24
0000000100011508	bl	0x100031724 ; symbol stub for: _strerror
000000010001150c	stp	x24, x0, [sp, #0x8]
0000000100011510	str	x25, [sp]
0000000100011514	adr	x2, #151438 ; literal pool for: "Could not spawn trampoline %s: %d: %s"
0000000100011518	nop
000000010001151c	orr	w1, wzr, #0x3
0000000100011520	mov	x0, x19
0000000100011524	bl	0x1000118ec
0000000100011528	str	wzr, [x19, #0x170]
000000010001152c	mov	x2, x21
0000000100011530	mov	x0, x19
0000000100011534	mov	x1, #0x0
0000000100011538	bl	0x1000180ac
000000010001153c	ldrb	w8, [x19, #0x45c]
0000000100011540	tbz	w8, #0x7, 0x100011754
0000000100011544	mov	x0, x19
0000000100011548	bl	0x100015c4c
000000010001154c	b	0x100011754
0000000100011550	ldr	w8, [x19, #0x330]
0000000100011554	stp	x20, x8, [sp]
0000000100011558	adr	x2, #151304 ; literal pool for: "%s: trampoline spawned as: %d"
000000010001155c	nop
0000000100011560	mov	w1, #0x0
0000000100011564	mov	x0, x27
0000000100011568	bl	0x1000270c8
000000010001156c	ldrsw	x1, [x19, #0x330]
0000000100011570	mov	w0, #0x4
0000000100011574	movk	w0, #0x2200, lsl #16
0000000100011578	bl	0x10000ccd0
000000010001157c	ldr	w0, [x19, #0x330]
0000000100011580	nop
0000000100011584	orr	w1, wzr, #0x4
0000000100011588	mov	x0, x26
000000010001158c	bl	0x10000d840
0000000100011590	mov	x8, #0x1353
0000000100011594	movk	x8, #0xb78c, lsl #16
0000000100011598	movk	x8, #0xcfb2, lsl #32
000000010001159c	movk	x8, #0x3521, lsl #48
00000001000115a0	umulh	x8, x0, x8
00000001000115a4	sub	x9, x0, x8
00000001000115a8	add	x8, x8, x9, lsr #1
00000001000115ac	lsr	x8, x8, #5
00000001000115b0	mov	w9, #0x35
00000001000115b4	msub	x8, x8, x9, x0
00000001000115b8	adr	x9, #205112
00000001000115bc	nop
00000001000115c0	add	x8, x9, x8, lsl #3
00000001000115c4	ldr	x9, [x8]
00000001000115c8	str	x9, [x19, #0x8]
00000001000115cc	cbz	x9, 0x1000115d8
00000001000115d0	add	x10, x19, #0x8
00000001000115d4	str	x10, [x9, #0x10]
00000001000115d8	str	x19, [x8]
00000001000115dc	str	x8, [x19, #0x10]
00000001000115e0	ldrsw	x22, [x19, #0x330]
00000001000115e4	bl	0x10000d8e0
00000001000115e8	mov	x3, x0
00000001000115ec	nop
00000001000115f0	ldr	x0, #0x2ea60 ; literal pool symbol address: __dispatch_source_type_proc
00000001000115f4	orr	w2, wzr, #0xe0000000
00000001000115f8	mov	x1, x22
00000001000115fc	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100011600	mov	x8, x0
0000000100011604	str	x8, [x19, #0x338]
0000000100011608	mov	w1, #0x17
000000010001160c	mov	x0, x19
0000000100011610	mov	x2, x8
0000000100011614	mov	x3, #0x0
0000000100011618	bl	0x10000e39c
000000010001161c	mov	x1, x0
0000000100011620	ldr	x0, [x19, #0x338]
0000000100011624	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100011628	ldr	x0, [x19, #0x338]
000000010001162c	adr	x1, #1972
0000000100011630	nop
0000000100011634	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100011638	ldr	x0, [x19, #0x338]
000000010001163c	adr	x1, #27688
0000000100011640	nop
0000000100011644	bl	0x100030f08 ; symbol stub for: _dispatch_source_set_registration_handler_f
0000000100011648	ldr	x0, [x19, #0x338]
000000010001164c	adr	x1, #27724
0000000100011650	nop
0000000100011654	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
0000000100011658	ldr	x0, [x19, #0x338]
000000010001165c	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100011660	ldrb	w8, [x19, #0x45a]
0000000100011664	tbz	w8, #0x0, 0x10001173c
0000000100011668	ldr	x0, [x19, #0xd0]
000000010001166c	cbz	x0, 0x1000116a8
0000000100011670	stur	xzr, [x29, #-0x60]
0000000100011674	stp	xzr, xzr, [sp, #0x48]
0000000100011678	sub	x1, x29, #0x60
000000010001167c	add	x2, sp, #0x50
0000000100011680	add	x3, sp, #0x48
0000000100011684	bl	0x100010220
0000000100011688	mov	x22, x0
000000010001168c	cbz	w22, 0x1000116d0
0000000100011690	mov	x0, x22
0000000100011694	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100011698	stp	x22, x0, [sp]
000000010001169c	adr	x2, #151568 ; literal pool for: "Could not activate inetd socket: %d: %s"
00000001000116a0	nop
00000001000116a4	b	0x100011730
00000001000116a8	adr	x2, #151514 ; literal pool for: "inetd-compatible service with no sockets."
00000001000116ac	nop
00000001000116b0	b	0x100011730
00000001000116b4	adr	x2, #150830 ; literal pool for: "Skipping remaining instance endpoints for importance boosting."
00000001000116b8	nop
00000001000116bc	orr	w1, wzr, #0x4
00000001000116c0	mov	x0, x19
00000001000116c4	bl	0x1000118ec
00000001000116c8	orr	w23, wzr, #0x20
00000001000116cc	b	0x100011170
00000001000116d0	ldur	x8, [x29, #-0x60]
00000001000116d4	ldr	w4, [x8]
00000001000116d8	ldr	x9, [sp, #0x48]
00000001000116dc	cbz	x9, 0x100011704
00000001000116e0	mov	x10, #0x0
00000001000116e4	ldr	x11, [sp, #0x50]
00000001000116e8	ldrb	w12, [x11, x10]
00000001000116ec	cbnz	w12, 0x100011700
00000001000116f0	add	x10, x10, #0x1
00000001000116f4	cmp	x10, x9
00000001000116f8	b.lo	0x1000116e8
00000001000116fc	b	0x100011704
0000000100011700	ldr	w4, [x8, x10, lsl #2]
0000000100011704	ldp	x1, x2, [x19, #0x188]
0000000100011708	ldr	x3, [x19, #0x198]
000000010001170c	mov	x0, x19
0000000100011710	bl	0x100011c78
0000000100011714	mov	x22, x0
0000000100011718	cbz	w22, 0x10001173c
000000010001171c	mov	x0, x22
0000000100011720	bl	0x100031724 ; symbol stub for: _strerror
0000000100011724	stp	x22, x0, [sp]
0000000100011728	adr	x2, #151468 ; literal pool for: "Could not setup inetd descriptors: %d: %s"
000000010001172c	nop
0000000100011730	orr	w1, wzr, #0x3
0000000100011734	mov	x0, x19
0000000100011738	bl	0x1000118ec
000000010001173c	orr	w1, wzr, #0x1
0000000100011740	mov	x0, x19
0000000100011744	mov	x2, #0x0
0000000100011748	bl	0x10001195c
000000010001174c	orr	w8, wzr, #0x2
0000000100011750	str	w8, [x19, #0x170]
0000000100011754	ldr	x8, [x19, #0xe8]
0000000100011758	cmp	x8, #0x0
000000010001175c	csel	x8, x19, x8, eq
0000000100011760	ldr	w8, [x8, #0x254]
0000000100011764	add	w8, w8, #0x1
0000000100011768	cmp	w8, #0x2
000000010001176c	b.lo	0x1000117a8
0000000100011770	nop
0000000100011774	nop
0000000100011778	ldr	w8, 0x100044430
000000010001177c	stur	w8, [x29, #-0x60]
0000000100011780	nop
0000000100011784	ldr	x8, #0x2e99c ; literal pool symbol address: _mach_task_self_
0000000100011788	ldr	w0, [x8]
000000010001178c	orr	w2, wzr, #0x1
0000000100011790	sub	x1, x29, #0x60
0000000100011794	bl	0x1000312d4 ; symbol stub for: _mach_ports_register
0000000100011798	cbz	w0, 0x1000117a8
000000010001179c	sxtw	x0, w0
00000001000117a0	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000117a4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000117a8	ldr	w8, [sp, #0x2c]
00000001000117ac	cbz	w8, 0x1000117bc
00000001000117b0	ldr	w0, [sp, #0x28]
00000001000117b4	bl	0x10000888c
00000001000117b8	cbnz	w0, 0x1000118bc
00000001000117bc	add	x0, sp, #0x40
00000001000117c0	bl	0x10003149c ; symbol stub for: _posix_spawnattr_destroy
00000001000117c4	cbz	w0, 0x1000117e0
00000001000117c8	sxtw	x2, w0
00000001000117cc	adr	x0, #1500
00000001000117d0	nop
00000001000117d4	mov	x1, x19
00000001000117d8	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000117dc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000117e0	add	x0, sp, #0x30
00000001000117e4	bl	0x100031484 ; symbol stub for: _posix_spawn_file_actions_destroy
00000001000117e8	cbz	w0, 0x100011804
00000001000117ec	sxtw	x2, w0
00000001000117f0	adr	x0, #1464
00000001000117f4	nop
00000001000117f8	mov	x1, x19
00000001000117fc	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100011800	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011804	ldr	x22, [x28, #0x420]
0000000100011808	mov	x0, x21
000000010001180c	bl	0x10001802c
0000000100011810	stp	x20, x0, [sp]
0000000100011814	adr	x2, #151274 ; literal pool for: "%s: launching: %s"
0000000100011818	nop
000000010001181c	mov	w1, #0x0
0000000100011820	mov	x0, x22
0000000100011824	bl	0x1000270c8
0000000100011828	ldrsw	x1, [x26]
000000010001182c	sxtw	x2, w21
0000000100011830	mov	w8, #0x4
0000000100011834	movk	w8, #0x2200, lsl #16
0000000100011838	add	w0, w8, #0x44
000000010001183c	mov	x3, #0x0
0000000100011840	mov	x4, #0x0
0000000100011844	bl	0x10000ccb8
0000000100011848	cbz	w24, 0x100010d28
000000010001184c	cmp	w24, #0x8b
0000000100011850	b.eq	0x100010d0c
0000000100011854	b	0x100010cac
0000000100011858	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010001185c	bl	0x100030adc ; symbol stub for: ___error
0000000100011860	ldrsw	x0, [x0]
0000000100011864	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100011868	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001186c	brk	#0x1
0000000100011870	bl	0x100030adc ; symbol stub for: ___error
0000000100011874	ldrsw	x0, [x0]
0000000100011878	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001187c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100011880	brk	#0x1
0000000100011884	bl	0x100030adc ; symbol stub for: ___error
0000000100011888	ldrsw	x0, [x0]
000000010001188c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100011890	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100011894	brk	#0x1
0000000100011898	bl	0x100030adc ; symbol stub for: ___error
000000010001189c	ldrsw	x0, [x0]
00000001000118a0	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000118a4	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000118a8	brk	#0x1
00000001000118ac	sxtw	x0, w0
00000001000118b0	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000118b4	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000118b8	brk	#0x1
00000001000118bc	sxtw	x0, w0
00000001000118c0	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000118c4	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000118c8	brk	#0x1
00000001000118cc	sxtw	x0, w0
00000001000118d0	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000118d4	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000118d8	brk	#0x1
00000001000118dc	sxtw	x0, w0
00000001000118e0	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000118e4	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000118e8	brk	#0x1
00000001000118ec	sub	sp, sp, #0x40
00000001000118f0	stp	x22, x21, [sp, #0x10]
00000001000118f4	stp	x20, x19, [sp, #0x20]
00000001000118f8	stp	x29, x30, [sp, #0x30]
00000001000118fc	add	x29, sp, #0x30
0000000100011900	mov	x19, x2
0000000100011904	mov	x20, x1
0000000100011908	ldr	w2, [x0, #0x110]
000000010001190c	cbnz	w2, 0x100011914
0000000100011910	ldr	w2, [x0, #0x330]
0000000100011914	add	x1, x0, #0x460
0000000100011918	mov	x0, #0x0
000000010001191c	bl	0x100029d50
0000000100011920	mov	x21, x0
0000000100011924	add	x8, x29, #0x10
0000000100011928	str	x8, [sp, #0x8]
000000010001192c	add	x3, x29, #0x10
0000000100011930	mov	x1, x20
0000000100011934	mov	x2, x19
0000000100011938	bl	0x100029de4
000000010001193c	mov	w1, #0x0
0000000100011940	mov	x0, x21
0000000100011944	bl	0x10000e4a4
0000000100011948	ldp	x29, x30, [sp, #0x30]
000000010001194c	ldp	x20, x19, [sp, #0x20]
0000000100011950	ldp	x22, x21, [sp, #0x10]
0000000100011954	add	sp, sp, #0x40
0000000100011958	ret
000000010001195c	sub	sp, sp, #0x70
0000000100011960	stp	x26, x25, [sp, #0x20]
0000000100011964	stp	x24, x23, [sp, #0x30]
0000000100011968	stp	x22, x21, [sp, #0x40]
000000010001196c	stp	x20, x19, [sp, #0x50]
0000000100011970	stp	x29, x30, [sp, #0x60]
0000000100011974	add	x29, sp, #0x60
0000000100011978	mov	x19, x2
000000010001197c	mov	x21, x1
0000000100011980	mov	x20, x0
0000000100011984	ldr	x22, [x20, #0x1c0]
0000000100011988	cbz	x22, 0x1000119ec
000000010001198c	adr	x23, #26320
0000000100011990	nop
0000000100011994	mov	x24, #-0x1
0000000100011998	ldr	x25, [x22]
000000010001199c	ldr	w8, [x22, #0x20]
00000001000119a0	cmp	w8, w21
00000001000119a4	b.ne	0x1000119e4
00000001000119a8	mov	w1, #0x15
00000001000119ac	mov	x0, x20
00000001000119b0	bl	0x10000e3f4
00000001000119b4	str	x0, [x22, #0x28]
00000001000119b8	bl	0x10000d8e0
00000001000119bc	mov	x1, x22
00000001000119c0	mov	x2, x23
00000001000119c4	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
00000001000119c8	ldr	x8, [x22]
00000001000119cc	cbz	x8, 0x1000119d8
00000001000119d0	ldr	x9, [x22, #0x8]
00000001000119d4	str	x9, [x8, #0x8]
00000001000119d8	ldp	x8, x9, [x22]
00000001000119dc	str	x8, [x9]
00000001000119e0	stp	x24, x24, [x22]
00000001000119e4	mov	x22, x25
00000001000119e8	cbnz	x25, 0x100011998
00000001000119ec	cbz	w21, 0x100011a00
00000001000119f0	nop
00000001000119f4	ldr	x0, #0x32a2c
00000001000119f8	add	x8, x20, #0x460
00000001000119fc	b	0x100011a50
0000000100011a00	ldr	w9, [x20, #0x170]
0000000100011a04	orr	w8, wzr, #0x1
0000000100011a08	str	w8, [x20, #0x170]
0000000100011a0c	nop
0000000100011a10	ldr	x0, #0x32a10
0000000100011a14	add	x8, x20, #0x460
0000000100011a18	cmp	w9, #0x1
0000000100011a1c	b.ne	0x100011a50
0000000100011a20	str	x8, [sp]
0000000100011a24	adr	x2, #149608 ; literal pool for: "%s: service was already deferred; skipping callout"
0000000100011a28	nop
0000000100011a2c	mov	w1, #0x0
0000000100011a30	bl	0x1000270c8
0000000100011a34	ldp	x29, x30, [sp, #0x60]
0000000100011a38	ldp	x20, x19, [sp, #0x50]
0000000100011a3c	ldp	x22, x21, [sp, #0x40]
0000000100011a40	ldp	x24, x23, [sp, #0x30]
0000000100011a44	ldp	x26, x25, [sp, #0x20]
0000000100011a48	add	sp, sp, #0x70
0000000100011a4c	ret
0000000100011a50	stp	x21, x19, [sp, #0x8]
0000000100011a54	str	x8, [sp]
0000000100011a58	adr	x2, #149514 ; literal pool for: "%s: event callout: event = %d, code = %ld"
0000000100011a5c	nop
0000000100011a60	mov	w1, #0x0
0000000100011a64	bl	0x1000270c8
0000000100011a68	ldr	x4, [x20, #0x1c8]
0000000100011a6c	ldr	x3, [x20, #0x200]
0000000100011a70	mov	x1, x21
0000000100011a74	mov	x0, x20
0000000100011a78	mov	x2, x19
0000000100011a7c	ldp	x29, x30, [sp, #0x60]
0000000100011a80	ldp	x20, x19, [sp, #0x50]
0000000100011a84	ldp	x22, x21, [sp, #0x40]
0000000100011a88	ldp	x24, x23, [sp, #0x30]
0000000100011a8c	ldp	x26, x25, [sp, #0x20]
0000000100011a90	add	sp, sp, #0x70
0000000100011a94	br	x4
0000000100011a98	sub	sp, sp, #0x30
0000000100011a9c	stp	x20, x19, [sp, #0x10]
0000000100011aa0	stp	x29, x30, [sp, #0x20]
0000000100011aa4	add	x29, sp, #0x20
0000000100011aa8	mov	x19, x0
0000000100011aac	ldr	x8, [x19, #0x458]
0000000100011ab0	mov	w9, #0x2100000
0000000100011ab4	tst	x8, x9
0000000100011ab8	b.eq	0x100011ac4
0000000100011abc	orr	w0, wzr, #0x7
0000000100011ac0	b	0x100011b4c
0000000100011ac4	tbnz	w8, #0x3, 0x100011b3c
0000000100011ac8	tbz	w8, #0x4, 0x100011ad4
0000000100011acc	ldr	w8, [x19, #0x310]
0000000100011ad0	cbz	w8, 0x100011c18
0000000100011ad4	ldrb	w8, [x19, #0x408]
0000000100011ad8	tbz	w8, #0x1, 0x100011af8
0000000100011adc	add	x20, x19, #0x358
0000000100011ae0	mov	x0, x20
0000000100011ae4	bl	0x10002cd2c
0000000100011ae8	cbz	w0, 0x100011bdc
0000000100011aec	ldr	x8, [x19, #0x458]
0000000100011af0	orr	x8, x8, #0x40000
0000000100011af4	str	x8, [x19, #0x458]
0000000100011af8	ldr	x20, [x19, #0x98]
0000000100011afc	cbz	x20, 0x100011b14
0000000100011b00	mov	x0, x20
0000000100011b04	bl	0x10002876c
0000000100011b08	tbnz	w0, #0x0, 0x100011bd4
0000000100011b0c	ldr	x20, [x20, #0x8]
0000000100011b10	cbnz	x20, 0x100011b00
0000000100011b14	ldr	x20, [x19, #0x238]
0000000100011b18	cbz	x20, 0x100011bb0
0000000100011b1c	ldr	x8, [x20, #0x10]
0000000100011b20	mov	x0, x19
0000000100011b24	mov	x1, x20
0000000100011b28	blr	x8
0000000100011b2c	cbnz	w0, 0x100011b4c
0000000100011b30	ldr	x20, [x20]
0000000100011b34	cbnz	x20, 0x100011b1c
0000000100011b38	b	0x100011bb0
0000000100011b3c	ldr	w8, [x19, #0x310]
0000000100011b40	cmp	w8, #0x0
0000000100011b44	orr	w8, wzr, #0x4
0000000100011b48	cinc	w0, w8, ne
0000000100011b4c	adr	x8, #207069
0000000100011b50	nop
0000000100011b54	ldrb	w8, [x8]
0000000100011b58	cbz	w0, 0x100011b80
0000000100011b5c	cbnz	w8, 0x100011b80
0000000100011b60	adr	x8, #207135
0000000100011b64	nop
0000000100011b68	ldrb	w8, [x8]
0000000100011b6c	cbz	w8, 0x100011bb4
0000000100011b70	adr	x8, #201792
0000000100011b74	nop
0000000100011b78	orr	w9, wzr, #0x7
0000000100011b7c	b	0x100011b94
0000000100011b80	cbz	w0, 0x100011bb4
0000000100011b84	cbz	w8, 0x100011bb4
0000000100011b88	adr	x8, #201796
0000000100011b8c	nop
0000000100011b90	orr	w9, wzr, #0x2
0000000100011b94	mov	x10, #0x0
0000000100011b98	ldr	w11, [x8, x10, lsl #2]
0000000100011b9c	cmp	w11, w0
0000000100011ba0	b.eq	0x100011bb4
0000000100011ba4	add	x10, x10, #0x1
0000000100011ba8	cmp	x10, x9
0000000100011bac	b.lo	0x100011b98
0000000100011bb0	mov	w0, #0x0
0000000100011bb4	ldr	x8, [x19, #0x458]
0000000100011bb8	tbz	x8, #0x25, 0x100011bc4
0000000100011bbc	orr	x8, x8, #0x40000
0000000100011bc0	str	x8, [x19, #0x458]
0000000100011bc4	ldp	x29, x30, [sp, #0x20]
0000000100011bc8	ldp	x20, x19, [sp, #0x10]
0000000100011bcc	add	sp, sp, #0x30
0000000100011bd0	ret
0000000100011bd4	orr	w0, wzr, #0x8
0000000100011bd8	b	0x100011b4c
0000000100011bdc	mov	x0, x20
0000000100011be0	bl	0x10002ccec
0000000100011be4	cbz	w0, 0x100011c20
0000000100011be8	mov	x0, x20
0000000100011bec	bl	0x10002ccfc
0000000100011bf0	tbnz	w0, #0x0, 0x100011af8
0000000100011bf4	ldr	w8, [x19, #0x2e0]
0000000100011bf8	cmp	w8, #0x4
0000000100011bfc	b.lt	0x100011c0c
0000000100011c00	ldr	x8, [x19, #0x458]
0000000100011c04	orr	x8, x8, #0x40000
0000000100011c08	str	x8, [x19, #0x458]
0000000100011c0c	ldrb	w8, [x19, #0x45c]
0000000100011c10	tbnz	w8, #0x5, 0x100011af8
0000000100011c14	b	0x100011c4c
0000000100011c18	orr	w0, wzr, #0x4
0000000100011c1c	b	0x100011b4c
0000000100011c20	mov	x0, x20
0000000100011c24	bl	0x10002cbf4
0000000100011c28	cbz	w0, 0x100011af8
0000000100011c2c	ldrb	w8, [x19, #0x408]
0000000100011c30	tbz	w8, #0x0, 0x100011af8
0000000100011c34	ldr	w8, [x19, #0x314]
0000000100011c38	cmp	w8, #0x2
0000000100011c3c	b.hi	0x100011c54
0000000100011c40	ldr	x8, [x19, #0x458]
0000000100011c44	orr	x8, x8, #0x40000
0000000100011c48	str	x8, [x19, #0x458]
0000000100011c4c	orr	w0, wzr, #0x3
0000000100011c50	b	0x100011b4c
0000000100011c54	nop
0000000100011c58	ldr	x0, #0x327c8
0000000100011c5c	add	x8, x19, #0x460
0000000100011c60	str	x8, [sp]
0000000100011c64	adr	x2, #148066 ; literal pool for: "%s: service exceeded successive crash limit. launch will be throttled"
0000000100011c68	nop
0000000100011c6c	mov	w1, #0x0
0000000100011c70	bl	0x1000270c8
0000000100011c74	b	0x100011af8
0000000100011c78	stp	x24, x23, [sp, #-0x40]!
0000000100011c7c	stp	x22, x21, [sp, #0x10]
0000000100011c80	stp	x20, x19, [sp, #0x20]
0000000100011c84	stp	x29, x30, [sp, #0x30]
0000000100011c88	add	x29, sp, #0x30
0000000100011c8c	mov	x20, x4
0000000100011c90	mov	x23, x3
0000000100011c94	mov	x21, x2
0000000100011c98	mov	x19, x0
0000000100011c9c	cbz	x1, 0x100011cb4
0000000100011ca0	adr	x2, #148076 ; literal pool for: "Overriding specified stdin path for inetd-compatible service."
0000000100011ca4	nop
0000000100011ca8	orr	w1, wzr, #0x4
0000000100011cac	mov	x0, x19
0000000100011cb0	bl	0x1000118ec
0000000100011cb4	mov	x0, x20
0000000100011cb8	bl	0x100030f74 ; symbol stub for: _dup
0000000100011cbc	mov	x22, x0
0000000100011cc0	cmn	w22, #0x1
0000000100011cc4	b.eq	0x100011cd8
0000000100011cc8	cbz	x21, 0x100011ce4
0000000100011ccc	mov	w21, #-0x1
0000000100011cd0	cbnz	x23, 0x100011cfc
0000000100011cd4	b	0x100011d04
0000000100011cd8	bl	0x100030adc ; symbol stub for: ___error
0000000100011cdc	ldr	w20, [x0]
0000000100011ce0	b	0x100011d24
0000000100011ce4	mov	x0, x20
0000000100011ce8	bl	0x100030f74 ; symbol stub for: _dup
0000000100011cec	mov	x21, x0
0000000100011cf0	cmn	w21, #0x1
0000000100011cf4	b.eq	0x100011d3c
0000000100011cf8	cbz	x23, 0x100011d04
0000000100011cfc	mov	w0, #-0x1
0000000100011d00	b	0x100011d14
0000000100011d04	mov	x0, x20
0000000100011d08	bl	0x100030f74 ; symbol stub for: _dup
0000000100011d0c	cmn	w0, #0x1
0000000100011d10	b.eq	0x100011d3c
0000000100011d14	mov	w20, #0x0
0000000100011d18	str	w22, [x19, #0x248]
0000000100011d1c	str	w21, [x19, #0x24c]
0000000100011d20	str	w0, [x19, #0x250]
0000000100011d24	mov	x0, x20
0000000100011d28	ldp	x29, x30, [sp, #0x30]
0000000100011d2c	ldp	x20, x19, [sp, #0x20]
0000000100011d30	ldp	x22, x21, [sp, #0x10]
0000000100011d34	ldp	x24, x23, [sp], #0x40
0000000100011d38	ret
0000000100011d3c	bl	0x100030adc ; symbol stub for: ___error
0000000100011d40	ldr	w20, [x0]
0000000100011d44	mov	x0, x22
0000000100011d48	bl	0x100030c74 ; symbol stub for: _close
0000000100011d4c	cmn	w0, #0x1
0000000100011d50	b.ne	0x100011d70
0000000100011d54	bl	0x100030adc ; symbol stub for: ___error
0000000100011d58	ldrsw	x2, [x0]
0000000100011d5c	adr	x0, #76
0000000100011d60	nop
0000000100011d64	mov	x1, x19
0000000100011d68	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100011d6c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011d70	cmn	w21, #0x1
0000000100011d74	b.eq	0x100011d24
0000000100011d78	mov	x0, x21
0000000100011d7c	bl	0x100030c74 ; symbol stub for: _close
0000000100011d80	cmn	w0, #0x1
0000000100011d84	b.ne	0x100011d24
0000000100011d88	bl	0x100030adc ; symbol stub for: ___error
0000000100011d8c	ldrsw	x2, [x0]
0000000100011d90	adr	x0, #24
0000000100011d94	nop
0000000100011d98	mov	x1, x19
0000000100011d9c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100011da0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011da4	b	0x100011d24
0000000100011da8	sub	sp, sp, #0x20
0000000100011dac	stp	x29, x30, [sp, #0x10]
0000000100011db0	add	x29, sp, #0x10
0000000100011db4	mov	x8, x1
0000000100011db8	str	x2, [sp]
0000000100011dbc	adr	x2, #145134 ; literal pool for: "%s"
0000000100011dc0	nop
0000000100011dc4	orr	w1, wzr, #0x3
0000000100011dc8	mov	x0, x8
0000000100011dcc	bl	0x1000118ec
0000000100011dd0	orr	w0, wzr, #0x1
0000000100011dd4	ldp	x29, x30, [sp, #0x10]
0000000100011dd8	add	sp, sp, #0x20
0000000100011ddc	ret
0000000100011de0	sub	sp, sp, #0x110
0000000100011de4	stp	x28, x27, [sp, #0xd0]
0000000100011de8	stp	x22, x21, [sp, #0xe0]
0000000100011dec	stp	x20, x19, [sp, #0xf0]
0000000100011df0	stp	x29, x30, [sp, #0x100]
0000000100011df4	add	x29, sp, #0x100
0000000100011df8	nop
0000000100011dfc	ldr	x8, #0x2e21c ; literal pool symbol address: ___stack_chk_guard
0000000100011e00	ldr	x8, [x8]
0000000100011e04	stur	x8, [x29, #-0x38]
0000000100011e08	ldr	x19, [x0]
0000000100011e0c	ldr	x0, [x19, #0x338]
0000000100011e10	bl	0x100030ecc ; symbol stub for: _dispatch_source_get_data
0000000100011e14	mov	x20, x0
0000000100011e18	tbz	w20, #0x1e, 0x100011e28
0000000100011e1c	ldrh	w8, [x19, #0x348]
0000000100011e20	add	w8, w8, #0x1
0000000100011e24	strh	w8, [x19, #0x348]
0000000100011e28	tbz	w20, #0x1d, 0x100011fe0
0000000100011e2c	ldr	w0, [x19, #0x330]
0000000100011e30	add	x1, sp, #0x8
0000000100011e34	bl	0x100029380
0000000100011e38	mov	x21, x0
0000000100011e3c	cbz	w21, 0x100011e60
0000000100011e40	sxtw	x2, w21
0000000100011e44	adr	x0, #-156
0000000100011e48	nop
0000000100011e4c	mov	x1, x19
0000000100011e50	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100011e54	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011e58	mov	w22, #0x0
0000000100011e5c	b	0x100011e6c
0000000100011e60	ldr	x8, [sp, #0xa0]
0000000100011e64	str	x8, [x19, #0x328]
0000000100011e68	orr	w22, wzr, #0x1
0000000100011e6c	ldrh	w8, [x19, #0x354]
0000000100011e70	tbnz	w8, #0x1, 0x100011f3c
0000000100011e74	ldr	w9, [x19, #0x170]
0000000100011e78	cmp	w9, #0x3
0000000100011e7c	b.gt	0x100011fec
0000000100011e80	orr	w9, wzr, #0x3
0000000100011e84	str	w9, [x19, #0x170]
0000000100011e88	orr	w8, w8, #0x2
0000000100011e8c	strh	w8, [x19, #0x354]
0000000100011e90	cbz	w21, 0x100011eac
0000000100011e94	sxtw	x2, w21
0000000100011e98	adr	x0, #-240
0000000100011e9c	nop
0000000100011ea0	mov	x1, x19
0000000100011ea4	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100011ea8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100011eac	cbz	w22, 0x100011eb8
0000000100011eb0	ldr	x8, [sp, #0xa0]
0000000100011eb4	str	x8, [x19, #0x328]
0000000100011eb8	ldr	w1, [x19, #0x350]
0000000100011ebc	cbz	w1, 0x100011f00
0000000100011ec0	ldr	w0, [x19, #0x330]
0000000100011ec4	bl	0x1000311a8 ; symbol stub for: _kill
0000000100011ec8	cbz	w0, 0x100011efc
0000000100011ecc	bl	0x100030adc ; symbol stub for: ___error
0000000100011ed0	ldr	w8, [x0]
0000000100011ed4	cmp	w8, #0x3
0000000100011ed8	b.eq	0x100011efc
0000000100011edc	ldr	w0, [x19, #0x350]
0000000100011ee0	bl	0x10003179c ; symbol stub for: _strsignal
0000000100011ee4	str	x0, [sp]
0000000100011ee8	adr	x2, #147554 ; literal pool for: "Could not deliver pending signal: %s"
0000000100011eec	nop
0000000100011ef0	orr	w1, wzr, #0x4
0000000100011ef4	mov	x0, x19
0000000100011ef8	bl	0x1000118ec
0000000100011efc	str	wzr, [x19, #0x350]
0000000100011f00	ldrb	w8, [x19, #0x45c]
0000000100011f04	tbz	w8, #0x5, 0x100011fbc
0000000100011f08	adr	x8, #206280
0000000100011f0c	nop
0000000100011f10	ldrb	w8, [x8]
0000000100011f14	cbz	w8, 0x100011f54
0000000100011f18	ldr	w8, [x19, #0x2a4]
0000000100011f1c	cbz	w8, 0x100011f54
0000000100011f20	mov	w9, #0xca00
0000000100011f24	movk	w9, #0x3b9a, lsl #16
0000000100011f28	mul	x1, x8, x9
0000000100011f2c	mov	x0, #0x0
0000000100011f30	bl	0x100030f38 ; symbol stub for: _dispatch_time
0000000100011f34	mov	x21, x0
0000000100011f38	b	0x100011f58
0000000100011f3c	cbz	w22, 0x100011fd4
0000000100011f40	add	x8, sp, #0x8
0000000100011f44	add	x0, x8, #0x30
0000000100011f48	bl	0x10000d520
0000000100011f4c	str	x0, [x19, #0x320]
0000000100011f50	b	0x100011fd4
0000000100011f54	mov	x21, #-0x1
0000000100011f58	bl	0x10000d8e0
0000000100011f5c	mov	x3, x0
0000000100011f60	nop
0000000100011f64	ldr	x0, #0x2e104 ; literal pool symbol address: __dispatch_source_type_timer
0000000100011f68	mov	x1, #0x0
0000000100011f6c	mov	x2, #0x0
0000000100011f70	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100011f74	str	x0, [x19, #0x298]
0000000100011f78	mov	w1, #0x1b
0000000100011f7c	mov	x0, x19
0000000100011f80	bl	0x10000e820
0000000100011f84	ldr	x0, [x19, #0x298]
0000000100011f88	mov	x1, x19
0000000100011f8c	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100011f90	ldr	x0, [x19, #0x298]
0000000100011f94	mov	x2, #-0x1
0000000100011f98	mov	x1, x21
0000000100011f9c	mov	x3, #0x0
0000000100011fa0	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100011fa4	ldr	x0, [x19, #0x298]
0000000100011fa8	adr	x1, #120
0000000100011fac	nop
0000000100011fb0	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100011fb4	ldr	x0, [x19, #0x298]
0000000100011fb8	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100011fbc	orr	w1, wzr, #0x4
0000000100011fc0	mov	x0, x19
0000000100011fc4	mov	x2, #0x0
0000000100011fc8	bl	0x10001195c
0000000100011fcc	mov	x0, x19
0000000100011fd0	bl	0x10001213c
0000000100011fd4	ldrh	w8, [x19, #0x34a]
0000000100011fd8	add	w8, w8, #0x1
0000000100011fdc	strh	w8, [x19, #0x34a]
0000000100011fe0	tbz	w20, #0x1f, 0x100011fec
0000000100011fe4	mov	x0, x19
0000000100011fe8	bl	0x1000121ec
0000000100011fec	ldur	x8, [x29, #-0x38]
0000000100011ff0	nop
0000000100011ff4	ldr	x9, #0x2e024 ; literal pool symbol address: ___stack_chk_guard
0000000100011ff8	ldr	x9, [x9]
0000000100011ffc	cmp	x9, x8
0000000100012000	b.ne	0x10001201c
0000000100012004	ldp	x29, x30, [sp, #0x100]
0000000100012008	ldp	x20, x19, [sp, #0xf0]
000000010001200c	ldp	x22, x21, [sp, #0xe0]
0000000100012010	ldp	x28, x27, [sp, #0xd0]
0000000100012014	add	sp, sp, #0x110
0000000100012018	ret
000000010001201c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100012020	sub	sp, sp, #0x30
0000000100012024	stp	x20, x19, [sp, #0x10]
0000000100012028	stp	x29, x30, [sp, #0x20]
000000010001202c	add	x29, sp, #0x20
0000000100012030	mov	x19, x0
0000000100012034	ldr	w0, [x19, #0x330]
0000000100012038	bl	0x100029854
000000010001203c	tbnz	w0, #0x0, 0x10001204c
0000000100012040	ldrb	w8, [x19, #0x354]
0000000100012044	tst	w8, #0xc
0000000100012048	b.eq	0x10001207c
000000010001204c	nop
0000000100012050	ldr	x0, #0x323d0
0000000100012054	add	x8, x19, #0x460
0000000100012058	str	x8, [sp]
000000010001205c	adr	x2, #150000 ; literal pool for: "%s: service is being debugged, not timing out launch"
0000000100012060	nop
0000000100012064	mov	w1, #0x0
0000000100012068	bl	0x1000270c8
000000010001206c	ldp	x29, x30, [sp, #0x20]
0000000100012070	ldp	x20, x19, [sp, #0x10]
0000000100012074	add	sp, sp, #0x30
0000000100012078	ret
000000010001207c	ldr	x8, [x19, #0x298]
0000000100012080	cbz	x8, 0x1000120a4
0000000100012084	mov	w1, #0x1b
0000000100012088	mov	x0, x19
000000010001208c	bl	0x10000e824
0000000100012090	ldr	x0, [x19, #0x298]
0000000100012094	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100012098	ldr	x0, [x19, #0x298]
000000010001209c	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000120a0	str	xzr, [x19, #0x298]
00000001000120a4	adr	x2, #149981 ; literal pool for: "Extension is hanging on launch. Killing."
00000001000120a8	nop
00000001000120ac	orr	w1, wzr, #0x4
00000001000120b0	mov	x0, x19
00000001000120b4	bl	0x1000118ec
00000001000120b8	nop
00000001000120bc	ldr	x0, #0x32364
00000001000120c0	add	x8, x19, #0x460
00000001000120c4	str	x8, [sp]
00000001000120c8	adr	x2, #149986 ; literal pool for: "%s: killing extension hanging on launch"
00000001000120cc	nop
00000001000120d0	mov	w1, #0x0
00000001000120d4	bl	0x1000270c8
00000001000120d8	orr	w1, wzr, #0x6
00000001000120dc	mov	x0, x19
00000001000120e0	bl	0x1000158a4
00000001000120e4	mov	x20, x0
00000001000120e8	cmp	w20, #0x25
00000001000120ec	b.hi	0x10001210c
00000001000120f0	mov	w8, w20
00000001000120f4	orr	w9, wzr, #0x1
00000001000120f8	lsl	x8, x9, x8
00000001000120fc	mov	x9, #0x2000000020
0000000100012100	movk	x9, #0x9
0000000100012104	tst	x8, x9
0000000100012108	b.ne	0x10001212c
000000010001210c	mov	x0, x20
0000000100012110	bl	0x100031724 ; symbol stub for: _strerror
0000000100012114	stp	x20, x0, [sp]
0000000100012118	adr	x2, #149946 ; literal pool for: "Failed to kill hanging extension: %d: %s"
000000010001211c	nop
0000000100012120	orr	w1, wzr, #0x4
0000000100012124	mov	x0, x19
0000000100012128	bl	0x1000118ec
000000010001212c	ldrh	w8, [x19, #0x354]
0000000100012130	orr	w8, w8, #0x40
0000000100012134	strh	w8, [x19, #0x354]
0000000100012138	b	0x10001206c
000000010001213c	stp	x20, x19, [sp, #-0x20]!
0000000100012140	stp	x29, x30, [sp, #0x10]
0000000100012144	add	x29, sp, #0x10
0000000100012148	mov	x19, x0
000000010001214c	ldr	x0, [x19, #0x410]
0000000100012150	bl	0x100031010 ; symbol stub for: _free
0000000100012154	str	xzr, [x19, #0x410]
0000000100012158	ldr	x0, [x19, #0x418]
000000010001215c	cbz	x0, 0x100012168
0000000100012160	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100012164	str	xzr, [x19, #0x418]
0000000100012168	ldr	x0, [x19, #0x420]
000000010001216c	bl	0x100031010 ; symbol stub for: _free
0000000100012170	str	xzr, [x19, #0x420]
0000000100012174	ldr	x0, [x19, #0x428]
0000000100012178	cbz	x0, 0x100012184
000000010001217c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100012180	str	xzr, [x19, #0x428]
0000000100012184	str	wzr, [x19, #0x430]
0000000100012188	ldr	x0, [x19, #0x438]
000000010001218c	cbz	x0, 0x100012198
0000000100012190	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100012194	str	xzr, [x19, #0x438]
0000000100012198	ldr	w0, [x19, #0x434]
000000010001219c	cbz	w0, 0x1000121c4
00000001000121a0	bl	0x10000888c
00000001000121a4	cbz	w0, 0x1000121c0
00000001000121a8	sxtw	x2, w0
00000001000121ac	adr	x0, #-1028
00000001000121b0	nop
00000001000121b4	mov	x1, x19
00000001000121b8	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000121bc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000121c0	str	wzr, [x19, #0x434]
00000001000121c4	strh	wzr, [x19, #0x448]
00000001000121c8	movi	d0, #0x000000ffffffff
00000001000121cc	str	d0, [x19, #0x440]
00000001000121d0	ldrb	w8, [x19, #0x44a]
00000001000121d4	mov	w9, #0xe8
00000001000121d8	and	w8, w8, w9
00000001000121dc	strb	w8, [x19, #0x44a]
00000001000121e0	ldp	x29, x30, [sp, #0x10]
00000001000121e4	ldp	x20, x19, [sp], #0x20
00000001000121e8	ret
00000001000121ec	sub	sp, sp, #0x60
00000001000121f0	stp	x24, x23, [sp, #0x20]
00000001000121f4	stp	x22, x21, [sp, #0x30]
00000001000121f8	stp	x20, x19, [sp, #0x40]
00000001000121fc	stp	x29, x30, [sp, #0x50]
0000000100012200	add	x29, sp, #0x50
0000000100012204	mov	x19, x0
0000000100012208	ldrb	w8, [x19, #0x45a]
000000010001220c	tbnz	w8, #0x1, 0x100012268
0000000100012210	ldr	w0, [x19, #0x330]
0000000100012214	orr	w1, wzr, #0xf
0000000100012218	bl	0x1000311b4 ; symbol stub for: _killpg
000000010001221c	mov	x20, x0
0000000100012220	cbz	w20, 0x100012268
0000000100012224	bl	0x100030adc ; symbol stub for: ___error
0000000100012228	ldr	w8, [x0]
000000010001222c	cmp	w8, #0x3
0000000100012230	b.eq	0x100012268
0000000100012234	bl	0x100030adc ; symbol stub for: ___error
0000000100012238	cmn	w20, #0x1
000000010001223c	b.ne	0x100012268
0000000100012240	ldr	w8, [x0]
0000000100012244	cmp	w8, #0x1
0000000100012248	b.eq	0x100012268
000000010001224c	bl	0x100030adc ; symbol stub for: ___error
0000000100012250	ldrsw	x2, [x0]
0000000100012254	adr	x0, #-1196
0000000100012258	nop
000000010001225c	mov	x1, x19
0000000100012260	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100012264	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100012268	ldrb	w8, [x19, #0x354]
000000010001226c	add	x20, x19, #0x358
0000000100012270	tbnz	w8, #0x5, 0x100012288
0000000100012274	ldr	w1, [x19, #0x330]
0000000100012278	mov	x0, x20
000000010001227c	bl	0x10002c49c
0000000100012280	mov	x21, x0
0000000100012284	b	0x100012294
0000000100012288	mov	x0, x20
000000010001228c	bl	0x10002cae4
0000000100012290	mov	x21, #0x0
0000000100012294	ldr	w9, [x20]
0000000100012298	cbz	w9, 0x10001296c
000000010001229c	ldrh	w8, [x19, #0x354]
00000001000122a0	ldrb	w10, [x19, #0x408]
00000001000122a4	lsr	w11, w8, #4
00000001000122a8	and	w11, w11, #0x4
00000001000122ac	and	w10, w10, #0xfffffffb
00000001000122b0	orr	w10, w11, w10
00000001000122b4	strb	w10, [x19, #0x408]
00000001000122b8	cmp	w9, #0x2
00000001000122bc	b.ne	0x1000122d8
00000001000122c0	adr	x2, #148680 ; literal pool for: "Could not reap service"
00000001000122c4	nop
00000001000122c8	orr	w1, wzr, #0x3
00000001000122cc	mov	x0, x19
00000001000122d0	bl	0x1000118ec
00000001000122d4	ldrh	w8, [x19, #0x354]
00000001000122d8	tbnz	w8, #0x1, 0x100012394
00000001000122dc	ldr	w8, [x20]
00000001000122e0	cmp	w8, #0x1
00000001000122e4	b.ne	0x100012318
00000001000122e8	adr	x2, #148663 ; literal pool for: "Abandoned trampoline before jumping to service."
00000001000122ec	nop
00000001000122f0	orr	w1, wzr, #0x3
00000001000122f4	mov	x0, x19
00000001000122f8	bl	0x1000118ec
00000001000122fc	nop
0000000100012300	ldr	x0, #0x32120
0000000100012304	add	x8, x19, #0x460
0000000100012308	str	x8, [sp]
000000010001230c	adr	x2, #148675 ; literal pool for: "%s: abandoned trampoline"
0000000100012310	nop
0000000100012314	b	0x10001238c
0000000100012318	mov	x0, x20
000000010001231c	bl	0x10002cc80
0000000100012320	cbz	w0, 0x100012374
0000000100012324	mov	x0, x20
0000000100012328	bl	0x10002ccac
000000010001232c	mov	x22, x0
0000000100012330	cmp	w22, #0x4e
0000000100012334	b.eq	0x100012358
0000000100012338	mov	x0, x22
000000010001233c	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100012340	stp	x22, x0, [sp]
0000000100012344	adr	x2, #148644 ; literal pool for: "Service could not exec: %d: %s"
0000000100012348	nop
000000010001234c	orr	w1, wzr, #0x4
0000000100012350	mov	x0, x19
0000000100012354	bl	0x1000118ec
0000000100012358	nop
000000010001235c	ldr	x0, #0x320c4
0000000100012360	add	x8, x19, #0x460
0000000100012364	stp	x8, x22, [sp]
0000000100012368	adr	x2, #148639 ; literal pool for: "%s: trampoline exited with code: %d"
000000010001236c	nop
0000000100012370	b	0x10001238c
0000000100012374	nop
0000000100012378	ldr	x0, #0x320a8
000000010001237c	add	x8, x19, #0x460
0000000100012380	stp	x8, x21, [sp]
0000000100012384	adr	x2, #148647 ; literal pool for: "%s: trampoline exited due to %s"
0000000100012388	nop
000000010001238c	mov	w1, #0x0
0000000100012390	bl	0x1000270c8
0000000100012394	mov	x0, x20
0000000100012398	bl	0x10002cb14
000000010001239c	cbz	w0, 0x1000123b8
00000001000123a0	str	x21, [sp]
00000001000123a4	adr	x2, #148647 ; literal pool for: "removing service since it exited with consistent failure - %s"
00000001000123a8	nop
00000001000123ac	mov	w1, #0x5
00000001000123b0	mov	x0, x19
00000001000123b4	bl	0x1000118ec
00000001000123b8	adrp	x24, 50 ; 0x100044000
00000001000123bc	ldr	x0, [x24, #0x420]
00000001000123c0	add	x23, x19, #0x460
00000001000123c4	ldrb	w8, [x19, #0x408]
00000001000123c8	adr	x9, #145090 ; literal pool for: "1"
00000001000123cc	nop
00000001000123d0	adr	x10, #145084 ; literal pool for: "0"
00000001000123d4	nop
00000001000123d8	tst	w8, #0x1
00000001000123dc	csel	x11, x10, x9, eq
00000001000123e0	tst	w8, #0x2
00000001000123e4	csel	x8, x10, x9, eq
00000001000123e8	stp	x11, x8, [sp, #0x8]
00000001000123ec	str	x23, [sp]
00000001000123f0	adr	x2, #148633 ; literal pool for: "%s: service exited: dirty = %s, supported pressured-exit = %s"
00000001000123f4	nop
00000001000123f8	mov	w1, #0x0
00000001000123fc	bl	0x1000270c8
0000000100012400	mov	x0, x20
0000000100012404	bl	0x10002ccec
0000000100012408	cbz	w0, 0x100012420
000000010001240c	ldr	x0, [x24, #0x420]
0000000100012410	stp	x23, x21, [sp]
0000000100012414	adr	x2, #148659 ; literal pool for: "%s: jettisoned: %s"
0000000100012418	nop
000000010001241c	b	0x10001254c
0000000100012420	mov	x0, x20
0000000100012424	bl	0x10002cd50
0000000100012428	cbz	w0, 0x100012454
000000010001242c	adr	x2, #148654 ; literal pool for: "FairPlay decryption failed on binary."
0000000100012430	nop
0000000100012434	orr	w1, wzr, #0x4
0000000100012438	mov	x0, x19
000000010001243c	bl	0x1000118ec
0000000100012440	ldr	x0, [x24, #0x420]
0000000100012444	str	x23, [sp]
0000000100012448	adr	x2, #148664 ; literal pool for: "%s: fairplay decryption failed"
000000010001244c	nop
0000000100012450	b	0x10001254c
0000000100012454	mov	x0, x20
0000000100012458	bl	0x10002cd7c
000000010001245c	cbz	w0, 0x100012488
0000000100012460	adr	x2, #148671 ; literal pool for: "Binary is improperly signed."
0000000100012464	nop
0000000100012468	orr	w1, wzr, #0x4
000000010001246c	mov	x0, x19
0000000100012470	bl	0x1000118ec
0000000100012474	ldr	x0, [x24, #0x420]
0000000100012478	str	x23, [sp]
000000010001247c	adr	x2, #148672 ; literal pool for: "%s: bad code signature"
0000000100012480	nop
0000000100012484	b	0x10001254c
0000000100012488	mov	x0, x20
000000010001248c	bl	0x10002cd8c
0000000100012490	cbz	w0, 0x1000124bc
0000000100012494	adr	x2, #148671 ; literal pool for: "Extension did not initialize in time."
0000000100012498	nop
000000010001249c	orr	w1, wzr, #0x4
00000001000124a0	mov	x0, x19
00000001000124a4	bl	0x1000118ec
00000001000124a8	ldr	x0, [x24, #0x420]
00000001000124ac	str	x23, [sp]
00000001000124b0	adr	x2, #148681 ; literal pool for: "%s: extension watchdogged"
00000001000124b4	nop
00000001000124b8	b	0x10001254c
00000001000124bc	mov	x0, x20
00000001000124c0	bl	0x10002cb54
00000001000124c4	cbz	w0, 0x100012508
00000001000124c8	ldr	w22, [x19, #0x34c]
00000001000124cc	mov	x0, x20
00000001000124d0	bl	0x10002cba0
00000001000124d4	cmp	w22, w0
00000001000124d8	b.eq	0x1000124f4
00000001000124dc	str	x21, [sp]
00000001000124e0	adr	x2, #148659 ; literal pool for: "Service exited due to %s"
00000001000124e4	nop
00000001000124e8	mov	w1, #0x5
00000001000124ec	mov	x0, x19
00000001000124f0	bl	0x1000118ec
00000001000124f4	ldr	x0, [x24, #0x420]
00000001000124f8	stp	x23, x21, [sp]
00000001000124fc	adr	x2, #148656 ; literal pool for: "%s: exited due to %s"
0000000100012500	nop
0000000100012504	b	0x10001254c
0000000100012508	mov	x0, x20
000000010001250c	bl	0x10002cc80
0000000100012510	cbz	w0, 0x100012554
0000000100012514	mov	x0, x20
0000000100012518	bl	0x10002ccac
000000010001251c	mov	x22, x0
0000000100012520	cbz	w22, 0x10001253c
0000000100012524	str	x22, [sp]
0000000100012528	adr	x2, #148633 ; literal pool for: "Service exited with abnormal code: %d"
000000010001252c	nop
0000000100012530	orr	w1, wzr, #0x4
0000000100012534	mov	x0, x19
0000000100012538	bl	0x1000118ec
000000010001253c	ldr	x0, [x24, #0x420]
0000000100012540	stp	x23, x22, [sp]
0000000100012544	adr	x2, #148643 ; literal pool for: "%s: exited with code: %d"
0000000100012548	nop
000000010001254c	mov	w1, #0x0
0000000100012550	bl	0x1000270c8
0000000100012554	mov	x0, x21
0000000100012558	bl	0x100031010 ; symbol stub for: _free
000000010001255c	ldr	x8, [x19, #0x290]
0000000100012560	cbz	x8, 0x100012584
0000000100012564	mov	w1, #0x1a
0000000100012568	mov	x0, x19
000000010001256c	bl	0x10000e824
0000000100012570	ldr	x0, [x19, #0x290]
0000000100012574	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100012578	ldr	x0, [x19, #0x290]
000000010001257c	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100012580	str	xzr, [x19, #0x290]
0000000100012584	ldr	x8, [x19, #0x298]
0000000100012588	cbz	x8, 0x1000125ac
000000010001258c	mov	w1, #0x1b
0000000100012590	mov	x0, x19
0000000100012594	bl	0x10000e824
0000000100012598	ldr	x0, [x19, #0x298]
000000010001259c	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
00000001000125a0	ldr	x0, [x19, #0x298]
00000001000125a4	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000125a8	str	xzr, [x19, #0x298]
00000001000125ac	adr	x8, #204511
00000001000125b0	nop
00000001000125b4	ldrb	w8, [x8]
00000001000125b8	cbz	w8, 0x1000126dc
00000001000125bc	mov	x0, x20
00000001000125c0	bl	0x10002cb30
00000001000125c4	cbz	w0, 0x1000126dc
00000001000125c8	ldr	x8, [x19, #0x450]
00000001000125cc	cbnz	x8, 0x1000125e0
00000001000125d0	mov	x0, #0x0
00000001000125d4	mov	x1, #0x0
00000001000125d8	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
00000001000125dc	str	x0, [x19, #0x450]
00000001000125e0	mov	x0, #0x0
00000001000125e4	mov	x1, #0x0
00000001000125e8	mov	x2, #0x0
00000001000125ec	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
00000001000125f0	mov	x21, x0
00000001000125f4	ldrsw	x2, [x19, #0x330]
00000001000125f8	adr	x1, #148488 ; literal pool for: "pid"
00000001000125fc	nop
0000000100012600	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100012604	ldrsw	x2, [x19, #0x334]
0000000100012608	adr	x1, #148476 ; literal pool for: "run-reason"
000000010001260c	nop
0000000100012610	mov	x0, x21
0000000100012614	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100012618	ldr	x2, [x19, #0x318]
000000010001261c	adr	x1, #148467 ; literal pool for: "start"
0000000100012620	nop
0000000100012624	mov	x0, x21
0000000100012628	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001262c	bl	0x100031214 ; symbol stub for: _mach_absolute_time
0000000100012630	mov	x2, x0
0000000100012634	adr	x1, #148449 ; literal pool for: "end"
0000000100012638	nop
000000010001263c	mov	x0, x21
0000000100012640	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
0000000100012644	add	x2, x19, #0x378
0000000100012648	adr	x1, #148433 ; literal pool for: "rusage"
000000010001264c	nop
0000000100012650	mov	w3, #0x90
0000000100012654	mov	x0, x21
0000000100012658	bl	0x100031ad8 ; symbol stub for: _xpc_dictionary_set_data
000000010001265c	ldrh	w2, [x19, #0x348]
0000000100012660	adr	x1, #148416 ; literal pool for: "forks"
0000000100012664	nop
0000000100012668	mov	x0, x21
000000010001266c	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
0000000100012670	ldrh	w2, [x19, #0x34a]
0000000100012674	adr	x1, #148402 ; literal pool for: "execs"
0000000100012678	nop
000000010001267c	mov	x0, x21
0000000100012680	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
0000000100012684	ldrb	w8, [x19, #0x408]
0000000100012688	and	w2, w8, #0x1
000000010001268c	adr	x1, #148384 ; literal pool for: "dirty-exit"
0000000100012690	nop
0000000100012694	mov	x0, x21
0000000100012698	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001269c	ldrb	w8, [x19, #0x408]
00000001000126a0	ubfx	w2, w8, #1, #1
00000001000126a4	adr	x1, #148371 ; literal pool for: "idle-exit"
00000001000126a8	nop
00000001000126ac	mov	x0, x21
00000001000126b0	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000126b4	adr	x1, #148365 ; literal pool for: "jettisoned"
00000001000126b8	nop
00000001000126bc	mov	w2, #0x0
00000001000126c0	mov	x0, x21
00000001000126c4	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000126c8	ldr	x0, [x19, #0x450]
00000001000126cc	mov	x1, x21
00000001000126d0	bl	0x1000318b0 ; symbol stub for: _xpc_array_append_value
00000001000126d4	mov	x0, x21
00000001000126d8	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000126dc	mov	x0, x20
00000001000126e0	bl	0x10002ccec
00000001000126e4	cbz	w0, 0x1000126f8
00000001000126e8	ldrb	w8, [x19, #0x45c]
00000001000126ec	tbz	w8, #0x5, 0x1000126f8
00000001000126f0	mov	x0, x19
00000001000126f4	bl	0x100015c20
00000001000126f8	ldrb	w8, [x19, #0x354]
00000001000126fc	tbnz	w8, #0x1, 0x10001273c
0000000100012700	ldr	w8, [x19, #0x34c]
0000000100012704	cmp	w8, #0x0
0000000100012708	mov	w8, #0x59
000000010001270c	mov	w9, #0x99
0000000100012710	csel	x2, x9, x8, eq
0000000100012714	orr	w1, wzr, #0x4
0000000100012718	mov	x0, x19
000000010001271c	bl	0x10001195c
0000000100012720	adr	x8, #204128
0000000100012724	nop
0000000100012728	ldrb	w8, [x8]
000000010001272c	cbz	w8, 0x10001273c
0000000100012730	adr	x0, #147424 ; literal pool for: "xpcproxy exited before exec"
0000000100012734	nop
0000000100012738	bl	0x100028fa4
000000010001273c	ldrb	w8, [x19, #0x45b]
0000000100012740	tbnz	w8, #0x0, 0x100012754
0000000100012744	mov	x0, x20
0000000100012748	bl	0x10002cb14
000000010001274c	cbnz	w0, 0x10001276c
0000000100012750	b	0x100012778
0000000100012754	ldr	x0, [x24, #0x420]
0000000100012758	str	x23, [sp]
000000010001275c	adr	x2, #147408 ; literal pool for: "%s: service only configured to run once, removing"
0000000100012760	nop
0000000100012764	mov	w1, #0x0
0000000100012768	bl	0x1000270c8
000000010001276c	ldrh	w8, [x19, #0x134]
0000000100012770	orr	w8, w8, #0x10
0000000100012774	strh	w8, [x19, #0x134]
0000000100012778	mov	x0, x20
000000010001277c	bl	0x10002cbf4
0000000100012780	cbz	w0, 0x1000127ac
0000000100012784	ldr	w8, [x19, #0x314]
0000000100012788	add	w8, w8, #0x1
000000010001278c	str	w8, [x19, #0x314]
0000000100012790	ldr	x0, [x24, #0x420]
0000000100012794	stp	x23, x8, [sp]
0000000100012798	adr	x2, #147398 ; literal pool for: "%s: service has crashed %u times in a row"
000000010001279c	nop
00000001000127a0	mov	w1, #0x0
00000001000127a4	bl	0x1000270c8
00000001000127a8	b	0x1000127b0
00000001000127ac	str	wzr, [x19, #0x314]
00000001000127b0	mov	w21, #0x248
00000001000127b4	adr	x20, #-2572
00000001000127b8	nop
00000001000127bc	mov	w22, #-0x1
00000001000127c0	ldr	w0, [x19, x21]
00000001000127c4	cmn	w0, #0x1
00000001000127c8	b.eq	0x1000127f4
00000001000127cc	bl	0x100030c74 ; symbol stub for: _close
00000001000127d0	cmn	w0, #0x1
00000001000127d4	b.ne	0x1000127f0
00000001000127d8	bl	0x100030adc ; symbol stub for: ___error
00000001000127dc	ldrsw	x2, [x0]
00000001000127e0	mov	x0, x20
00000001000127e4	mov	x1, x19
00000001000127e8	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000127ec	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000127f0	str	w22, [x19, x21]
00000001000127f4	add	x21, x21, #0x4
00000001000127f8	cmp	x21, #0x254
00000001000127fc	b.ne	0x1000127c0
0000000100012800	orr	w8, wzr, #0x7
0000000100012804	str	w8, [x19, #0x170]
0000000100012808	mov	w1, #0x16
000000010001280c	mov	x0, x19
0000000100012810	bl	0x10000e3f4
0000000100012814	mov	w1, #0x5
0000000100012818	mov	x0, x19
000000010001281c	mov	x2, #0x0
0000000100012820	bl	0x10001195c
0000000100012824	ldr	x0, [x19, #0x320]
0000000100012828	bl	0x100031010 ; symbol stub for: _free
000000010001282c	str	xzr, [x19, #0x320]
0000000100012830	str	wzr, [x19, #0x170]
0000000100012834	nop
0000000100012838	ldr	d0, 0x10003df20
000000010001283c	str	d0, [x19, #0x330]
0000000100012840	ldr	x0, [x19, #0x338]
0000000100012844	cbz	x0, 0x100012858
0000000100012848	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010001284c	ldr	x0, [x19, #0x338]
0000000100012850	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100012854	str	xzr, [x19, #0x338]
0000000100012858	ldr	x8, [x19, #0x340]
000000010001285c	cbz	x8, 0x100012880
0000000100012860	mov	w1, #0x19
0000000100012864	mov	x0, x19
0000000100012868	bl	0x10000e824
000000010001286c	ldr	x0, [x19, #0x340]
0000000100012870	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100012874	ldr	x0, [x19, #0x340]
0000000100012878	bl	0x100030e60 ; symbol stub for: _dispatch_release
000000010001287c	str	xzr, [x19, #0x340]
0000000100012880	str	xzr, [x19, #0x348]
0000000100012884	ldrh	w8, [x19, #0x354]
0000000100012888	str	wzr, [x19, #0x350]
000000010001288c	and	w8, w8, #0xff00
0000000100012890	strh	w8, [x19, #0x354]
0000000100012894	ldr	x8, [x19, #0x8]
0000000100012898	cbz	x8, 0x1000128a4
000000010001289c	ldr	x9, [x19, #0x10]
00000001000128a0	str	x9, [x8, #0x10]
00000001000128a4	ldr	x9, [x19, #0x10]
00000001000128a8	str	x8, [x9]
00000001000128ac	mov	x8, #-0x1
00000001000128b0	stp	x8, x8, [x19, #0x8]
00000001000128b4	ldr	x8, [x19, #0x458]
00000001000128b8	tbnz	w8, #0x13, 0x10001292c
00000001000128bc	tbnz	w8, #0x15, 0x10001292c
00000001000128c0	ldrh	w8, [x19, #0x134]
00000001000128c4	tbnz	w8, #0x4, 0x10001292c
00000001000128c8	mov	x0, x19
00000001000128cc	bl	0x100011a98
00000001000128d0	cbz	w0, 0x10001292c
00000001000128d4	ldr	x8, [x19, #0x458]
00000001000128d8	and	x8, x8, #0xffffffffffbfffff
00000001000128dc	str	x8, [x19, #0x458]
00000001000128e0	mov	x1, x0
00000001000128e4	mov	x0, x19
00000001000128e8	bl	0x100010bb8
00000001000128ec	cmp	w0, #0x7b
00000001000128f0	b.gt	0x100012904
00000001000128f4	cbz	w0, 0x10001292c
00000001000128f8	cmp	w0, #0x24
00000001000128fc	b.eq	0x10001292c
0000000100012900	b	0x100012914
0000000100012904	cmp	w0, #0x7c
0000000100012908	b.eq	0x10001292c
000000010001290c	cmp	w0, #0x92
0000000100012910	b.eq	0x10001292c
0000000100012914	sxtw	x2, w0
0000000100012918	adr	x0, #-2928
000000010001291c	nop
0000000100012920	mov	x1, x19
0000000100012924	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100012928	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001292c	ldrb	w8, [x19, #0x134]
0000000100012930	tbnz	w8, #0x4, 0x10001294c
0000000100012934	ldrb	w8, [x19, #0x45a]
0000000100012938	tbz	w8, #0x5, 0x10001294c
000000010001293c	mov	w1, #0x0
0000000100012940	mov	x0, x19
0000000100012944	mov	x2, #0x0
0000000100012948	bl	0x10001195c
000000010001294c	mov	w1, #0x16
0000000100012950	mov	x0, x19
0000000100012954	ldp	x29, x30, [sp, #0x50]
0000000100012958	ldp	x20, x19, [sp, #0x40]
000000010001295c	ldp	x22, x21, [sp, #0x30]
0000000100012960	ldp	x24, x23, [sp, #0x20]
0000000100012964	add	sp, sp, #0x60
0000000100012968	b	0x10000e4a4
000000010001296c	mov	x0, #0x0
0000000100012970	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100012974	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100012978	brk	#0x1
000000010001297c	stp	x29, x30, [sp, #-0x10]!
0000000100012980	mov	x29, sp
0000000100012984	adr	x1, #84
0000000100012988	nop
000000010001298c	orr	w0, wzr, #0x2
0000000100012990	bl	0x10002d3e8
0000000100012994	adr	x1, #9304
0000000100012998	nop
000000010001299c	orr	w0, wzr, #0x6
00000001000129a0	bl	0x10002d3e8
00000001000129a4	adr	x1, #10796
00000001000129a8	nop
00000001000129ac	orr	w0, wzr, #0x8
00000001000129b0	bl	0x10002d3e8
00000001000129b4	adr	x0, #144827 ; literal pool for: "launches"
00000001000129b8	nop
00000001000129bc	adr	x1, #203469
00000001000129c0	nop
00000001000129c4	bl	0x100026f98
00000001000129c8	adrp	x8, 50 ; 0x100044000
00000001000129cc	str	x0, [x8, #0x420]
00000001000129d0	ldp	x29, x30, [sp], #0x10
00000001000129d4	ret
00000001000129d8	stp	x28, x27, [sp, #-0x60]!
00000001000129dc	stp	x26, x25, [sp, #0x10]
00000001000129e0	stp	x24, x23, [sp, #0x20]
00000001000129e4	stp	x22, x21, [sp, #0x30]
00000001000129e8	stp	x20, x19, [sp, #0x40]
00000001000129ec	stp	x29, x30, [sp, #0x50]
00000001000129f0	add	x29, sp, #0x50
00000001000129f4	sub	sp, sp, #0x4c0
00000001000129f8	mov	x19, x3
00000001000129fc	mov	x21, x2
0000000100012a00	mov	x24, x1
0000000100012a04	sub	x28, x29, #0x80
0000000100012a08	nop
0000000100012a0c	ldr	x8, #0x2d60c ; literal pool symbol address: ___stack_chk_guard
0000000100012a10	ldr	x8, [x8]
0000000100012a14	str	x8, [x28, #0x28]
0000000100012a18	mov	w8, #-0x1
0000000100012a1c	str	w8, [sp, #0x6c]
0000000100012a20	add	x1, sp, #0x6c
0000000100012a24	mov	x0, x21
0000000100012a28	bl	0x10001829c
0000000100012a2c	mov	x20, x0
0000000100012a30	ldr	w8, [sp, #0x6c]
0000000100012a34	cmp	w8, #0x24
0000000100012a38	b.ne	0x100012a54
0000000100012a3c	adr	x1, #147647 ; literal pool for: "domain deferral"
0000000100012a40	nop
0000000100012a44	mov	x0, x21
0000000100012a48	bl	0x10002e5bc
0000000100012a4c	mov	w22, #0x0
0000000100012a50	b	0x100014d20
0000000100012a54	cbz	x20, 0x100012ae8
0000000100012a58	bl	0x10002d3b4
0000000100012a5c	mov	x23, x0
0000000100012a60	sub	w8, w24, #0x2bc
0000000100012a64	cmp	w8, #0x13
0000000100012a68	b.hi	0x100012f60
0000000100012a6c	adr	x9, #9008
0000000100012a70	nop
0000000100012a74	ldrsw	x8, [x9, x8, lsl #2]
0000000100012a78	add	x8, x8, x9
0000000100012a7c	br	x8
0000000100012a80	mov	w27, #0x8
0000000100012a84	movk	w27, #0x2200, lsl #16
0000000100012a88	ldr	x24, [x20, #0xe0]
0000000100012a8c	stp	xzr, xzr, [sp, #0x78]
0000000100012a90	str	xzr, [sp, #0x70]
0000000100012a94	ldrsw	x1, [x20, #0x330]
0000000100012a98	mov	w0, #0x8
0000000100012a9c	movk	w0, #0x2200, lsl #16
0000000100012aa0	bl	0x10000ccd0
0000000100012aa4	ldrsw	x0, [x20, #0x330]
0000000100012aa8	nop
0000000100012aac	ldr	w8, [x20, #0x330]
0000000100012ab0	ldr	w9, [x23, #0x14]
0000000100012ab4	cmp	w8, w9
0000000100012ab8	b.ne	0x100013494
0000000100012abc	ldr	x8, [x20, #0xe8]
0000000100012ac0	cmp	x8, #0x0
0000000100012ac4	csel	x8, x20, x8, eq
0000000100012ac8	ldr	w22, [x8, #0x254]
0000000100012acc	add	w8, w22, #0x1
0000000100012ad0	cmp	w8, #0x2
0000000100012ad4	b.lo	0x1000134e8
0000000100012ad8	ldrb	w8, [x20, #0x44a]
0000000100012adc	tbnz	w8, #0x2, 0x1000134e8
0000000100012ae0	orr	w2, wzr, #0x3
0000000100012ae4	b	0x100013f00
0000000100012ae8	str	x8, [sp]
0000000100012aec	adr	x1, #147487 ; literal pool for: "no service, code = %d"
0000000100012af0	nop
0000000100012af4	mov	x0, x21
0000000100012af8	bl	0x10002e5bc
0000000100012afc	ldr	w22, [sp, #0x6c]
0000000100012b00	cmp	w24, #0x2c0
0000000100012b04	b.ne	0x100014d20
0000000100012b08	orr	w8, w22, #0x1
0000000100012b0c	cmp	w8, #0x71
0000000100012b10	b.ne	0x100014d20
0000000100012b14	bl	0x10002d3b4
0000000100012b18	mov	x23, x0
0000000100012b1c	mov	w8, #-0x1
0000000100012b20	str	w8, [sp, #0x80]
0000000100012b24	mov	x0, x21
0000000100012b28	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100012b2c	tbz	w0, #0x0, 0x100012bcc
0000000100012b30	adr	x1, #147459 ; literal pool for: "name"
0000000100012b34	nop
0000000100012b38	mov	x0, x21
0000000100012b3c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100012b40	mov	x22, x0
0000000100012b44	cbz	x22, 0x100012be4
0000000100012b48	mov	w1, #0xd
0000000100012b4c	mov	x0, x23
0000000100012b50	bl	0x100009be8
0000000100012b54	tbz	w0, #0x0, 0x100012c10
0000000100012b58	adr	x1, #149202 ; literal pool for: "type"
0000000100012b5c	nop
0000000100012b60	mov	x0, x21
0000000100012b64	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
0000000100012b68	mov	x24, x0
0000000100012b6c	adr	x1, #145797 ; literal pool for: "handle"
0000000100012b70	nop
0000000100012b74	mov	x0, x21
0000000100012b78	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
0000000100012b7c	cmp	x24, #0x5
0000000100012b80	b.ne	0x100013354
0000000100012b84	cbnz	x0, 0x100013354
0000000100012b88	adrp	x23, 50 ; 0x100044000
0000000100012b8c	ldr	x0, [x23, #0x420]
0000000100012b90	str	x22, [sp]
0000000100012b94	adr	x2, #149147 ; literal pool for: "%s: global attachment deferral"
0000000100012b98	nop
0000000100012b9c	mov	w1, #0x0
0000000100012ba0	bl	0x1000270c8
0000000100012ba4	adrp	x20, 49 ; 0x100043000
0000000100012ba8	ldr	x19, [x20, #0x6e8]
0000000100012bac	cbz	x19, 0x10001371c
0000000100012bb0	ldr	x0, [x19, #0x10]
0000000100012bb4	mov	x1, x22
0000000100012bb8	bl	0x100031700 ; symbol stub for: _strcmp
0000000100012bbc	cbz	w0, 0x1000136d0
0000000100012bc0	ldr	x19, [x19]
0000000100012bc4	cbnz	x19, 0x100012bb0
0000000100012bc8	b	0x10001371c
0000000100012bcc	nop
0000000100012bd0	nop
0000000100012bd4	ldr	x0, #0x31864
0000000100012bd8	adr	x2, #148972 ; literal pool for: "no reply expected, failing"
0000000100012bdc	nop
0000000100012be0	b	0x100012bf8
0000000100012be4	nop
0000000100012be8	nop
0000000100012bec	ldr	x0, #0x3184c
0000000100012bf0	adr	x2, #148975 ; literal pool for: "no name, failing"
0000000100012bf4	nop
0000000100012bf8	mov	w1, #0x0
0000000100012bfc	bl	0x1000270c8
0000000100012c00	mov	w8, #0x16
0000000100012c04	str	w8, [sp, #0x80]
0000000100012c08	ldr	w22, [sp, #0x80]
0000000100012c0c	b	0x100014d1c
0000000100012c10	add	x1, sp, #0x90
0000000100012c14	mov	x0, x23
0000000100012c18	bl	0x1000293c0
0000000100012c1c	ldr	w8, [x23, #0x14]
0000000100012c20	stp	x0, x8, [sp, #0x8]
0000000100012c24	str	x22, [sp]
0000000100012c28	adr	x2, #148936 ; literal pool for: "Non-entitled process tried to control service \"%s\": %s.%d"
0000000100012c2c	nop
0000000100012c30	orr	w1, wzr, #0x3
0000000100012c34	mov	x0, #0x0
0000000100012c38	bl	0x100029dbc
0000000100012c3c	mov	w8, #0x90
0000000100012c40	b	0x100012c04
0000000100012c44	adr	x1, #149689 ; literal pool for: "yesno"
0000000100012c48	nop
0000000100012c4c	mov	x0, x21
0000000100012c50	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100012c54	mov	x22, x0
0000000100012c58	mov	x0, x21
0000000100012c5c	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100012c60	cbz	w0, 0x100013d7c
0000000100012c64	ldr	w8, [x20, #0x330]
0000000100012c68	ldr	w9, [x23, #0x14]
0000000100012c6c	cmp	w8, w9
0000000100012c70	b.ne	0x100013494
0000000100012c74	ldr	x8, [x20, #0x290]
0000000100012c78	cbz	w22, 0x100013954
0000000100012c7c	cbz	x8, 0x100013958
0000000100012c80	nop
0000000100012c84	ldr	x0, #0x3179c
0000000100012c88	add	x8, x20, #0x460
0000000100012c8c	str	x8, [sp]
0000000100012c90	adr	x2, #149619 ; literal pool for: "%s: extension already attempting clean exit"
0000000100012c94	nop
0000000100012c98	mov	w1, #0x0
0000000100012c9c	bl	0x1000270c8
0000000100012ca0	mov	w22, #0x24
0000000100012ca4	b	0x100014d1c
0000000100012ca8	mov	x0, x21
0000000100012cac	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100012cb0	cbz	w0, 0x100013d7c
0000000100012cb4	orr	w1, wzr, #0x3
0000000100012cb8	mov	x0, x23
0000000100012cbc	bl	0x100009be8
0000000100012cc0	cbz	w0, 0x10001334c
0000000100012cc4	ldr	w8, [x20, #0x330]
0000000100012cc8	cbz	w8, 0x100012ce8
0000000100012ccc	adr	x1, #149496 ; literal pool for: "deferred"
0000000100012cd0	nop
0000000100012cd4	mov	x0, x21
0000000100012cd8	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100012cdc	ldrb	w8, [x20, #0x354]
0000000100012ce0	tbnz	w8, #0x1, 0x100013654
0000000100012ce4	tbz	w0, #0x0, 0x100013d4c
0000000100012ce8	orr	w22, wzr, #0x3
0000000100012cec	b	0x100014d1c
0000000100012cf0	ldr	x22, [x20, #0xe0]
0000000100012cf4	mov	x0, x22
0000000100012cf8	bl	0x10001dddc
0000000100012cfc	adr	x8, #197916
0000000100012d00	nop
0000000100012d04	cmp	x0, x8
0000000100012d08	b.ne	0x100012db0
0000000100012d0c	mov	x0, x22
0000000100012d10	bl	0x10001dde4
0000000100012d14	ldrsw	x8, [x23, #0x14]
0000000100012d18	cmp	x0, x8
0000000100012d1c	b.ne	0x100013494
0000000100012d20	mov	x0, x21
0000000100012d24	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100012d28	cbz	w0, 0x100013d7c
0000000100012d2c	adr	x1, #149376 ; literal pool for: "bootstrap"
0000000100012d30	nop
0000000100012d34	mov	x0, x21
0000000100012d38	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100012d3c	mov	x22, x0
0000000100012d40	ldr	x0, [x20, #0x228]
0000000100012d44	cbz	x0, 0x100012d4c
0000000100012d48	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100012d4c	cbz	x22, 0x100014d0c
0000000100012d50	mov	x0, x22
0000000100012d54	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100012d58	str	x0, [x20, #0x228]
0000000100012d5c	b	0x100014d0c
0000000100012d60	mov	x0, x21
0000000100012d64	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100012d68	cbz	w0, 0x100013d7c
0000000100012d6c	ldr	x0, [x20, #0xe0]
0000000100012d70	orr	w1, wzr, #0x3
0000000100012d74	mov	x2, #0x0
0000000100012d78	mov	x3, x23
0000000100012d7c	bl	0x10001e958
0000000100012d80	mov	x22, x0
0000000100012d84	cbz	w22, 0x1000135d0
0000000100012d88	adr	x3, #148508 ; literal pool for: "kill or attach"
0000000100012d8c	nop
0000000100012d90	b	0x1000132f4
0000000100012d94	ldr	x22, [x20, #0xe0]
0000000100012d98	mov	x0, x22
0000000100012d9c	bl	0x10001dddc
0000000100012da0	adr	x8, #197752
0000000100012da4	nop
0000000100012da8	cmp	x0, x8
0000000100012dac	b.eq	0x100013414
0000000100012db0	mov	w22, #0x7d
0000000100012db4	b	0x100014d1c
0000000100012db8	ldr	w8, [x20, #0x330]
0000000100012dbc	ldr	w9, [x23, #0x14]
0000000100012dc0	cmp	w8, w9
0000000100012dc4	b.ne	0x100013494
0000000100012dc8	ldrb	w8, [x20, #0x354]
0000000100012dcc	tbnz	w8, #0x1, 0x10001356c
0000000100012dd0	adr	x1, #146912 ; literal pool for: "pc"
0000000100012dd4	nop
0000000100012dd8	mov	x0, x21
0000000100012ddc	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
0000000100012de0	mov	x22, x0
0000000100012de4	cbz	x22, 0x1000139c4
0000000100012de8	adr	x1, #146915 ; literal pool for: "line"
0000000100012dec	nop
0000000100012df0	mov	x0, x21
0000000100012df4	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
0000000100012df8	mov	x23, x0
0000000100012dfc	cbz	x23, 0x100013c6c
0000000100012e00	adr	x1, #146929 ; literal pool for: "uuid"
0000000100012e04	nop
0000000100012e08	mov	x0, x21
0000000100012e0c	bl	0x100031ab4 ; symbol stub for: _xpc_dictionary_get_uuid
0000000100012e10	mov	x24, x0
0000000100012e14	cbz	x24, 0x100013d68
0000000100012e18	adr	x1, #146942 ; literal pool for: "setup-event"
0000000100012e1c	nop
0000000100012e20	mov	x0, x21
0000000100012e24	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100012e28	mov	x25, x0
0000000100012e2c	sub	x1, x29, #0x80
0000000100012e30	mov	x0, x24
0000000100012e34	bl	0x100031874 ; symbol stub for: _uuid_unparse
0000000100012e38	adr	x1, #146922 ; literal pool for: "string"
0000000100012e3c	nop
0000000100012e40	mov	x0, x21
0000000100012e44	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100012e48	mov	x27, x0
0000000100012e4c	adr	x1, #146909 ; literal pool for: "code"
0000000100012e50	nop
0000000100012e54	mov	x0, x21
0000000100012e58	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
0000000100012e5c	mov	x24, x0
0000000100012e60	cbz	x24, 0x100013d7c
0000000100012e64	adr	x1, #146890 ; literal pool for: "subcode"
0000000100012e68	nop
0000000100012e6c	mov	x0, x21
0000000100012e70	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
0000000100012e74	mov	x26, x0
0000000100012e78	cmp	x24, #0x55
0000000100012e7c	b.gt	0x100013eb0
0000000100012e80	cmp	x24, #0x8
0000000100012e84	b.eq	0x1000141b8
0000000100012e88	cmp	x24, #0x20
0000000100012e8c	b.eq	0x1000141c4
0000000100012e90	cmp	x24, #0x55
0000000100012e94	b.ne	0x100014aa4
0000000100012e98	adr	x2, #147235 ; literal pool for: "Program specified by service is malformed."
0000000100012e9c	nop
0000000100012ea0	b	0x100014bf8
0000000100012ea4	mov	x0, x21
0000000100012ea8	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100012eac	cbz	w0, 0x100013d7c
0000000100012eb0	orr	w1, wzr, #0x3
0000000100012eb4	mov	x0, x23
0000000100012eb8	bl	0x100009be8
0000000100012ebc	cbz	w0, 0x10001334c
0000000100012ec0	ldr	w8, [x20, #0x310]
0000000100012ec4	add	x20, x20, #0x358
0000000100012ec8	cbz	w8, 0x100013e0c
0000000100012ecc	ldr	w8, [x20]
0000000100012ed0	cbz	w8, 0x100013e0c
0000000100012ed4	mov	x0, x20
0000000100012ed8	bl	0x10002cb30
0000000100012edc	cbz	w0, 0x100013c78
0000000100012ee0	mov	x0, x20
0000000100012ee4	bl	0x10002cc80
0000000100012ee8	tbz	w0, #0x0, 0x100013de4
0000000100012eec	orr	w22, wzr, #0x1
0000000100012ef0	b	0x100013e10
0000000100012ef4	mov	x0, x21
0000000100012ef8	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100012efc	cbz	w0, 0x100013d7c
0000000100012f00	ldr	x0, [x20, #0xe0]
0000000100012f04	orr	w1, wzr, #0x3
0000000100012f08	mov	x2, #0x0
0000000100012f0c	mov	x3, x23
0000000100012f10	bl	0x10001e958
0000000100012f14	mov	x22, x0
0000000100012f18	cbz	w22, 0x100013674
0000000100012f1c	adr	x3, #147838 ; literal pool for: "kickstart service"
0000000100012f20	nop
0000000100012f24	b	0x1000132f4
0000000100012f28	ldr	x0, [x20, #0xe0]
0000000100012f2c	orr	w1, wzr, #0x4
0000000100012f30	mov	x2, #0x0
0000000100012f34	mov	x3, x23
0000000100012f38	bl	0x10001e958
0000000100012f3c	mov	x22, x0
0000000100012f40	cbz	w22, 0x10001349c
0000000100012f44	adr	x3, #148773 ; literal pool for: "service blame"
0000000100012f48	nop
0000000100012f4c	b	0x1000132f4
0000000100012f50	ldrb	w8, [x20, #0x45c]
0000000100012f54	tbnz	w8, #0x5, 0x100013368
0000000100012f58	mov	w22, #0x89
0000000100012f5c	b	0x100014d1c
0000000100012f60	mov	w22, #0x21
0000000100012f64	b	0x100014d1c
0000000100012f68	mov	x0, x21
0000000100012f6c	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100012f70	cbz	w0, 0x100013d7c
0000000100012f74	ldr	x8, [x20, #0xe8]
0000000100012f78	cmp	x8, #0x0
0000000100012f7c	csel	x8, x20, x8, eq
0000000100012f80	ldr	w9, [x8, #0x258]
0000000100012f84	cbz	w9, 0x10001340c
0000000100012f88	ldr	w10, [x23, #0x14]
0000000100012f8c	cmp	w9, w10
0000000100012f90	b.ne	0x10001340c
0000000100012f94	ldr	w8, [x8, #0x25c]
0000000100012f98	ldr	w9, [x23, #0x1c]
0000000100012f9c	cmp	w8, w9
0000000100012fa0	b.ne	0x10001340c
0000000100012fa4	ldrb	w8, [x20, #0x44a]
0000000100012fa8	tbnz	w8, #0x2, 0x100013cc4
0000000100012fac	adr	x1, #148563 ; literal pool for: "program"
0000000100012fb0	nop
0000000100012fb4	mov	x0, x21
0000000100012fb8	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100012fbc	cbz	x0, 0x100012fc8
0000000100012fc0	bl	0x10000d520
0000000100012fc4	str	x0, [x20, #0x410]
0000000100012fc8	adr	x1, #148543 ; literal pool for: "argv"
0000000100012fcc	nop
0000000100012fd0	mov	x0, x21
0000000100012fd4	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100012fd8	mov	x22, x0
0000000100012fdc	cbz	x22, 0x100013004
0000000100012fe0	mov	x0, x22
0000000100012fe4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100012fe8	nop
0000000100012fec	ldr	x8, #0x2d0ac ; literal pool symbol address: __xpc_type_array
0000000100012ff0	cmp	x0, x8
0000000100012ff4	b.ne	0x100013004
0000000100012ff8	mov	x0, x22
0000000100012ffc	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100013000	str	x0, [x20, #0x418]
0000000100013004	adr	x1, #148488 ; literal pool for: "cwd"
0000000100013008	nop
000000010001300c	mov	x0, x21
0000000100013010	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100013014	cbz	x0, 0x100013020
0000000100013018	bl	0x10000d520
000000010001301c	str	x0, [x20, #0x420]
0000000100013020	adr	x1, #148464 ; literal pool for: "environment"
0000000100013024	nop
0000000100013028	mov	x0, x21
000000010001302c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100013030	mov	x22, x0
0000000100013034	cbz	x22, 0x10001305c
0000000100013038	mov	x0, x22
000000010001303c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100013040	nop
0000000100013044	ldr	x8, #0x2d07c ; literal pool symbol address: __xpc_type_dictionary
0000000100013048	cmp	x0, x8
000000010001304c	b.ne	0x10001305c
0000000100013050	mov	x0, x22
0000000100013054	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100013058	str	x0, [x20, #0x428]
000000010001305c	adr	x1, #148416 ; literal pool for: "binpref"
0000000100013060	nop
0000000100013064	mov	x0, x21
0000000100013068	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
000000010001306c	str	w0, [x20, #0x430]
0000000100013070	adr	x1, #146139 ; literal pool for: "fds"
0000000100013074	nop
0000000100013078	mov	x0, x21
000000010001307c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100013080	mov	x22, x0
0000000100013084	cbz	x22, 0x1000130ac
0000000100013088	mov	x0, x22
000000010001308c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100013090	nop
0000000100013094	ldr	x8, #0x2d004 ; literal pool symbol address: __xpc_type_array
0000000100013098	cmp	x0, x8
000000010001309c	b.ne	0x1000130ac
00000001000130a0	mov	x0, x22
00000001000130a4	bl	0x100031b74 ; symbol stub for: _xpc_retain
00000001000130a8	str	x0, [x20, #0x438]
00000001000130ac	adr	x1, #148344 ; literal pool for: "endpoint"
00000001000130b0	nop
00000001000130b4	mov	x0, x21
00000001000130b8	bl	0x100031a18 ; symbol stub for: _xpc_dictionary_copy_mach_send
00000001000130bc	cbz	w0, 0x1000130c4
00000001000130c0	str	w0, [x20, #0x434]
00000001000130c4	adr	x1, #148329 ; literal pool for: "jetsam-flags"
00000001000130c8	nop
00000001000130cc	mov	x0, x21
00000001000130d0	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
00000001000130d4	tst	w0, #0xffff
00000001000130d8	b.eq	0x1000130e0
00000001000130dc	strh	w0, [x20, #0x448]
00000001000130e0	adr	x1, #148314 ; literal pool for: "jetsam-priority"
00000001000130e4	nop
00000001000130e8	mov	x0, x21
00000001000130ec	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
00000001000130f0	cmp	w0, #0x1
00000001000130f4	b.lt	0x1000130fc
00000001000130f8	str	w0, [x20, #0x440]
00000001000130fc	adr	x1, #148302 ; literal pool for: "jetsam-memlimit"
0000000100013100	nop
0000000100013104	mov	x0, x21
0000000100013108	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
000000010001310c	cbz	w0, 0x100013114
0000000100013110	str	w0, [x20, #0x444]
0000000100013114	adr	x1, #148294 ; literal pool for: "nano-allocator"
0000000100013118	nop
000000010001311c	mov	x0, x21
0000000100013120	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100013124	ldrb	w8, [x20, #0x44a]
0000000100013128	cbz	w0, 0x100013134
000000010001312c	orr	w8, w8, #0x10
0000000100013130	strb	w8, [x20, #0x44a]
0000000100013134	tbnz	w8, #0x0, 0x100013158
0000000100013138	adr	x1, #147316 ; literal pool for: "suspended"
000000010001313c	nop
0000000100013140	mov	x0, x21
0000000100013144	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100013148	ldrb	w8, [x20, #0x44a]
000000010001314c	and	w8, w8, #0xfffffffe
0000000100013150	orr	w8, w8, w0
0000000100013154	strb	w8, [x20, #0x44a]
0000000100013158	orr	w8, w8, #0x4
000000010001315c	strb	w8, [x20, #0x44a]
0000000100013160	orr	w1, wzr, #0x3
0000000100013164	mov	x0, x20
0000000100013168	mov	x2, #0x0
000000010001316c	bl	0x10001195c
0000000100013170	b	0x100014d0c
0000000100013174	mov	x0, x21
0000000100013178	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001317c	cbz	w0, 0x100013d7c
0000000100013180	mov	x0, x21
0000000100013184	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013188	mov	x21, x0
000000010001318c	mov	x0, x20
0000000100013190	bl	0x100016180
0000000100013194	mov	x20, x0
0000000100013198	ldr	w8, [x23, #0x4]
000000010001319c	cbz	w8, 0x1000131c4
00000001000131a0	orr	w1, wzr, #0x2
00000001000131a4	mov	x0, x23
00000001000131a8	bl	0x100009be8
00000001000131ac	tbnz	w0, #0x0, 0x1000131c4
00000001000131b0	adr	x1, #143194 ; literal pool for: "path"
00000001000131b4	nop
00000001000131b8	mov	x0, x21
00000001000131bc	mov	x2, #0x0
00000001000131c0	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000131c4	adr	x1, #148218 ; literal pool for: "attrs"
00000001000131c8	nop
00000001000131cc	mov	x0, x21
00000001000131d0	mov	x2, x20
00000001000131d4	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000131d8	mov	x0, x20
00000001000131dc	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000131e0	b	0x100013e68
00000001000131e4	mov	x0, x21
00000001000131e8	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
00000001000131ec	cbz	w0, 0x100013d7c
00000001000131f0	ldr	w8, [x20, #0x258]
00000001000131f4	cbz	w8, 0x100013494
00000001000131f8	ldr	w9, [x23, #0x14]
00000001000131fc	cmp	w8, w9
0000000100013200	b.ne	0x100013494
0000000100013204	ldr	w8, [x20, #0x25c]
0000000100013208	ldr	w9, [x23, #0x1c]
000000010001320c	cmp	w8, w9
0000000100013210	b.ne	0x100013494
0000000100013214	mov	x0, x20
0000000100013218	bl	0x10001873c
000000010001321c	b	0x100013f0c
0000000100013220	ldr	w8, [x20, #0x330]
0000000100013224	ldr	w9, [x23, #0x14]
0000000100013228	cmp	w8, w9
000000010001322c	b.ne	0x100013494
0000000100013230	mov	x0, x21
0000000100013234	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100013238	cbz	w0, 0x100013d7c
000000010001323c	ldr	x8, [x20, #0xe8]
0000000100013240	cmp	x8, #0x0
0000000100013244	csel	x8, x20, x8, eq
0000000100013248	ldr	x22, [x8, #0x230]
000000010001324c	mov	x0, x21
0000000100013250	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013254	mov	x21, x0
0000000100013258	cbz	x22, 0x100013e68
000000010001325c	adr	x1, #148606 ; literal pool for: "xpcservice-dict"
0000000100013260	nop
0000000100013264	mov	x0, x21
0000000100013268	mov	x2, x22
000000010001326c	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100013270	ldr	x2, [x20, #0x208]
0000000100013274	adr	x1, #148598 ; literal pool for: "identifier"
0000000100013278	nop
000000010001327c	mov	x0, x21
0000000100013280	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
0000000100013284	b	0x100013e68
0000000100013288	adr	x8, #201219
000000010001328c	nop
0000000100013290	ldrb	w8, [x8]
0000000100013294	cbz	w8, 0x1000132c8
0000000100013298	ldr	x8, [x20, #0x450]
000000010001329c	cbz	x8, 0x100013574
00000001000132a0	ldr	x0, [x20, #0xe0]
00000001000132a4	orr	w1, wzr, #0x4
00000001000132a8	mov	x2, #0x0
00000001000132ac	mov	x3, x23
00000001000132b0	bl	0x10001e958
00000001000132b4	mov	x22, x0
00000001000132b8	cbz	w22, 0x1000137ac
00000001000132bc	adr	x3, #147925 ; literal pool for: "collect service stats"
00000001000132c0	nop
00000001000132c4	b	0x1000132f4
00000001000132c8	mov	w22, #0x2d
00000001000132cc	b	0x100014d1c
00000001000132d0	ldr	x0, [x20, #0xe0]
00000001000132d4	orr	w1, wzr, #0x4
00000001000132d8	mov	x2, #0x0
00000001000132dc	mov	x3, x23
00000001000132e0	bl	0x10001e958
00000001000132e4	mov	x22, x0
00000001000132e8	cbz	w22, 0x100013504
00000001000132ec	adr	x3, #147858 ; literal pool for: "service print"
00000001000132f0	nop
00000001000132f4	mov	x2, x22
00000001000132f8	mov	x0, x20
00000001000132fc	mov	x1, x23
0000000100013300	bl	0x10001859c
0000000100013304	b	0x100014d1c
0000000100013308	mov	x0, x21
000000010001330c	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100013310	cbz	w0, 0x100013d7c
0000000100013314	orr	w1, wzr, #0x3
0000000100013318	mov	x0, x23
000000010001331c	bl	0x100009be8
0000000100013320	cbz	w0, 0x10001334c
0000000100013324	ldr	w8, [x20, #0x310]
0000000100013328	cbz	w8, 0x10001375c
000000010001332c	ldr	w8, [x20, #0x358]
0000000100013330	cbz	w8, 0x10001375c
0000000100013334	add	x22, x20, #0x358
0000000100013338	mov	x0, x22
000000010001333c	bl	0x10002cc80
0000000100013340	tbz	w0, #0x0, 0x100013c80
0000000100013344	orr	w22, wzr, #0x1
0000000100013348	b	0x100013760
000000010001334c	mov	w22, #0x90
0000000100013350	b	0x100014d1c
0000000100013354	cbz	x20, 0x10001357c
0000000100013358	ldr	x8, [x20, #0xe8]
000000010001335c	cbz	x8, 0x1000137d4
0000000100013360	mov	w8, #0x16
0000000100013364	b	0x100013b2c
0000000100013368	ldr	w8, [x23, #0x14]
000000010001336c	ldr	w9, [x20, #0x330]
0000000100013370	cmp	w8, w9
0000000100013374	b.ne	0x100013494
0000000100013378	mov	x0, x21
000000010001337c	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100013380	cbz	w0, 0x100013d7c
0000000100013384	ldr	x8, [x20, #0x298]
0000000100013388	cbz	x8, 0x100013cc4
000000010001338c	nop
0000000100013390	ldr	x0, #0x31090
0000000100013394	add	x8, x20, #0x460
0000000100013398	str	x8, [sp]
000000010001339c	adr	x2, #148252 ; literal pool for: "%s: extension checked in as alive"
00000001000133a0	nop
00000001000133a4	mov	w1, #0x0
00000001000133a8	bl	0x1000270c8
00000001000133ac	mov	w1, #0x1b
00000001000133b0	mov	x0, x20
00000001000133b4	bl	0x10000e824
00000001000133b8	ldr	x0, [x20, #0x298]
00000001000133bc	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
00000001000133c0	ldr	x0, [x20, #0x298]
00000001000133c4	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000133c8	str	xzr, [x20, #0x298]
00000001000133cc	ldr	w0, [x20, #0x330]
00000001000133d0	orr	w1, wzr, #0x8
00000001000133d4	bl	0x100031550 ; symbol stub for: _proc_clear_dirty
00000001000133d8	cbz	w0, 0x1000133fc
00000001000133dc	cmp	w0, #0x3
00000001000133e0	b.eq	0x1000133fc
00000001000133e4	sxtw	x2, w0
00000001000133e8	adr	x0, #-5696
00000001000133ec	nop
00000001000133f0	mov	x1, x20
00000001000133f4	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000133f8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000133fc	ldrh	w8, [x20, #0x354]
0000000100013400	orr	w8, w8, #0x80
0000000100013404	strh	w8, [x20, #0x354]
0000000100013408	b	0x100014d0c
000000010001340c	mov	w22, #0x8e
0000000100013410	b	0x100014d1c
0000000100013414	ldr	w8, [x20, #0x330]
0000000100013418	ldr	w9, [x23, #0x14]
000000010001341c	cmp	w8, w9
0000000100013420	b.ne	0x100013494
0000000100013424	mov	x0, x21
0000000100013428	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001342c	cbz	w0, 0x100013d7c
0000000100013430	ldr	x8, [x20, #0xe8]
0000000100013434	cmp	x8, #0x0
0000000100013438	csel	x8, x20, x8, eq
000000010001343c	ldr	x23, [x8, #0x228]
0000000100013440	mov	x0, x21
0000000100013444	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013448	mov	x20, x0
000000010001344c	cbz	x23, 0x100013464
0000000100013450	adr	x1, #147548 ; literal pool for: "bootstrap"
0000000100013454	nop
0000000100013458	mov	x0, x20
000000010001345c	mov	x2, x23
0000000100013460	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100013464	add	x1, sp, #0x90
0000000100013468	mov	x0, x22
000000010001346c	bl	0x10001df44
0000000100013470	adr	x1, #147526 ; literal pool for: "creator"
0000000100013474	nop
0000000100013478	add	x2, sp, #0x90
000000010001347c	orr	w3, wzr, #0x20
0000000100013480	mov	x0, x20
0000000100013484	bl	0x100031ad8 ; symbol stub for: _xpc_dictionary_set_data
0000000100013488	mov	w22, #0x0
000000010001348c	str	x20, [x19]
0000000100013490	b	0x100014d1c
0000000100013494	orr	w22, wzr, #0x1
0000000100013498	b	0x100014d1c
000000010001349c	mov	x0, x21
00000001000134a0	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
00000001000134a4	mov	x21, x0
00000001000134a8	cbz	x21, 0x100013d7c
00000001000134ac	ldr	w0, [x20, #0x334]
00000001000134b0	bl	0x10001802c
00000001000134b4	str	x0, [sp]
00000001000134b8	adr	x0, #139250 ; literal pool for: "%s"
00000001000134bc	nop
00000001000134c0	bl	0x10000d72c
00000001000134c4	mov	x20, x0
00000001000134c8	adr	x1, #147375 ; literal pool for: "reason"
00000001000134cc	nop
00000001000134d0	mov	x0, x21
00000001000134d4	mov	x2, x20
00000001000134d8	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
00000001000134dc	mov	x0, x20
00000001000134e0	bl	0x100031010 ; symbol stub for: _free
00000001000134e4	b	0x100013e68
00000001000134e8	mov	x0, x21
00000001000134ec	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
00000001000134f0	cbz	w0, 0x100013d7c
00000001000134f4	ldrh	w8, [x20, #0x354]
00000001000134f8	tbnz	w8, #0x4, 0x100013a1c
00000001000134fc	orr	w2, wzr, #0x2
0000000100013500	b	0x100013f00
0000000100013504	adr	x1, #147336 ; literal pool for: "fd"
0000000100013508	nop
000000010001350c	mov	x0, x21
0000000100013510	bl	0x100031a3c ; symbol stub for: _xpc_dictionary_dup_fd
0000000100013514	mov	x19, x0
0000000100013518	cmn	w19, #0x1
000000010001351c	b.eq	0x100013d7c
0000000100013520	adr	x1, #147311 ; literal pool for: "a"
0000000100013524	nop
0000000100013528	mov	x0, x19
000000010001352c	bl	0x100030fbc ; symbol stub for: _fdopen
0000000100013530	mov	x22, x0
0000000100013534	cbz	x22, 0x100013a58
0000000100013538	mov	x0, x20
000000010001353c	mov	x1, x22
0000000100013540	mov	x2, #0x0
0000000100013544	bl	0x10001651c
0000000100013548	mov	x0, x21
000000010001354c	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013550	mov	x19, x0
0000000100013554	mov	x0, x22
0000000100013558	mov	x1, x19
000000010001355c	bl	0x10002a5e0
0000000100013560	mov	x0, x19
0000000100013564	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100013568	b	0x100013f0c
000000010001356c	mov	w22, #0x83
0000000100013570	b	0x100014d1c
0000000100013574	orr	w22, wzr, #0x2
0000000100013578	b	0x100014d1c
000000010001357c	adrp	x23, 49 ; 0x100044000
0000000100013580	ldr	x0, [x23, #0x420]
0000000100013584	str	x22, [sp]
0000000100013588	adr	x2, #146671 ; literal pool for: "%s: domain attachment deferral"
000000010001358c	nop
0000000100013590	mov	w1, #0x0
0000000100013594	bl	0x1000270c8
0000000100013598	add	x1, sp, #0x80
000000010001359c	mov	x0, x21
00000001000135a0	bl	0x10001d980
00000001000135a4	mov	x19, x0
00000001000135a8	cbz	x19, 0x100013aac
00000001000135ac	ldr	x20, [x19, #0x28]!
00000001000135b0	cbz	x20, 0x100013d18
00000001000135b4	ldr	x0, [x20, #0x10]
00000001000135b8	mov	x1, x22
00000001000135bc	bl	0x100031700 ; symbol stub for: _strcmp
00000001000135c0	cbz	w0, 0x100013ccc
00000001000135c4	ldr	x20, [x20]
00000001000135c8	cbnz	x20, 0x1000135b4
00000001000135cc	b	0x100013d18
00000001000135d0	adr	x1, #146150 ; literal pool for: "kill"
00000001000135d4	nop
00000001000135d8	mov	x0, x21
00000001000135dc	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
00000001000135e0	mov	x24, x0
00000001000135e4	adr	x1, #146383 ; literal pool for: "run"
00000001000135e8	nop
00000001000135ec	mov	x0, x21
00000001000135f0	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
00000001000135f4	mov	x22, x0
00000001000135f8	adr	x1, #146367 ; literal pool for: "proxy"
00000001000135fc	nop
0000000100013600	mov	x0, x21
0000000100013604	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100013608	mov	x23, x0
000000010001360c	adr	x1, #146353 ; literal pool for: "pended"
0000000100013610	nop
0000000100013614	mov	x0, x21
0000000100013618	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001361c	eor	w8, w0, #0x1
0000000100013620	and	w10, w24, w8
0000000100013624	ldrb	w9, [x20, #0x44a]
0000000100013628	orr	w11, w9, #0x1
000000010001362c	and	w9, w9, #0xfc
0000000100013630	orr	w9, w9, #0x2
0000000100013634	tst	w23, w8
0000000100013638	csel	w9, w9, w11, ne
000000010001363c	strb	w9, [x20, #0x44a]
0000000100013640	ldr	w9, [x20, #0x330]
0000000100013644	tbnz	w10, #0x0, 0x10001398c
0000000100013648	and	w8, w23, w8
000000010001364c	cbnz	w8, 0x10001398c
0000000100013650	cbz	w9, 0x100013ac8
0000000100013654	mov	x0, x21
0000000100013658	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001365c	mov	x21, x0
0000000100013660	ldrsw	x2, [x20, #0x330]
0000000100013664	adr	x1, #144284 ; literal pool for: "pid"
0000000100013668	nop
000000010001366c	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100013670	b	0x100013e68
0000000100013674	adr	x1, #145976 ; literal pool for: "suspended"
0000000100013678	nop
000000010001367c	mov	x0, x21
0000000100013680	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100013684	mov	x22, x0
0000000100013688	adr	x1, #145966 ; literal pool for: "kill"
000000010001368c	nop
0000000100013690	mov	x0, x21
0000000100013694	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100013698	ldr	w8, [x20, #0x330]
000000010001369c	cbz	w0, 0x1000139d0
00000001000136a0	cbz	w8, 0x1000139d4
00000001000136a4	mov	x0, x20
00000001000136a8	bl	0x100015694
00000001000136ac	mov	x22, x0
00000001000136b0	cbnz	w22, 0x100014d1c
00000001000136b4	adr	x1, #145922 ; literal pool for: "kill"
00000001000136b8	nop
00000001000136bc	mov	w2, #0x0
00000001000136c0	mov	x0, x21
00000001000136c4	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000136c8	mov	w2, #0x5
00000001000136cc	b	0x100013d9c
00000001000136d0	ldr	x0, [x23, #0x420]
00000001000136d4	adr	x2, #146298 ; literal pool for: "canceling old global attachment deferral"
00000001000136d8	nop
00000001000136dc	mov	w1, #0x0
00000001000136e0	bl	0x1000270c8
00000001000136e4	mov	x0, x19
00000001000136e8	bl	0x1000186d0
00000001000136ec	ldr	x8, [x19]
00000001000136f0	cbz	x8, 0x1000136fc
00000001000136f4	ldr	x9, [x19, #0x8]
00000001000136f8	str	x9, [x8, #0x8]
00000001000136fc	ldr	x9, [x19, #0x8]
0000000100013700	str	x8, [x9]
0000000100013704	mov	x8, #-0x1
0000000100013708	stp	x8, x8, [x19]
000000010001370c	ldr	x0, [x19, #0x18]
0000000100013710	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100013714	mov	x0, x19
0000000100013718	bl	0x100031010 ; symbol stub for: _free
000000010001371c	orr	w0, wzr, #0x20
0000000100013720	bl	0x10000d408
0000000100013724	mov	x19, x0
0000000100013728	ldr	x8, [x20, #0x6e8]
000000010001372c	str	x8, [x19]
0000000100013730	cbz	x8, 0x100013738
0000000100013734	str	x19, [x8, #0x8]
0000000100013738	adr	x8, #196528
000000010001373c	nop
0000000100013740	str	x19, [x8]
0000000100013744	stp	x8, x22, [x19, #0x8]
0000000100013748	mov	x0, x21
000000010001374c	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100013750	str	x0, [x19, #0x18]
0000000100013754	str	wzr, [sp, #0x80]
0000000100013758	b	0x100012c08
000000010001375c	mov	x22, #0x0
0000000100013760	mov	x0, x21
0000000100013764	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013768	mov	x21, x0
000000010001376c	adr	x1, #146794 ; literal pool for: "termination-state"
0000000100013770	nop
0000000100013774	mov	x2, x22
0000000100013778	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001377c	cmp	x22, #0x80
0000000100013780	b.ne	0x100013e68
0000000100013784	ldr	w2, [x20, #0x35c]
0000000100013788	adr	x1, #146784 ; literal pool for: "os-namespace"
000000010001378c	nop
0000000100013790	mov	x0, x21
0000000100013794	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
0000000100013798	ldr	x2, [x20, #0x360]
000000010001379c	adr	x1, #146777 ; literal pool for: "os-code"
00000001000137a0	nop
00000001000137a4	mov	x0, x21
00000001000137a8	b	0x100013e64
00000001000137ac	mov	x0, x21
00000001000137b0	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
00000001000137b4	mov	x21, x0
00000001000137b8	cbz	x21, 0x100013d7c
00000001000137bc	ldr	x2, [x20, #0x450]
00000001000137c0	adr	x1, #146663 ; literal pool for: "runs"
00000001000137c4	nop
00000001000137c8	mov	x0, x21
00000001000137cc	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000137d0	b	0x100013e68
00000001000137d4	str	wzr, [sp, #0x80]
00000001000137d8	ldr	w8, [x20, #0x254]
00000001000137dc	cbz	w8, 0x100013888
00000001000137e0	stp	xzr, xzr, [x28, #0x8]
00000001000137e4	str	xzr, [x28]
00000001000137e8	ldr	w8, [x20, #0x258]
00000001000137ec	stp	w8, wzr, [x29, #-0x6c]
00000001000137f0	ldr	w8, [x20, #0x25c]
00000001000137f4	stur	w8, [x29, #-0x64]
00000001000137f8	adrp	x26, 49 ; 0x100044000
00000001000137fc	ldr	x22, [x26, #0x420]
0000000100013800	add	x25, x20, #0x460
0000000100013804	add	x1, sp, #0x90
0000000100013808	mov	x0, x23
000000010001380c	bl	0x1000293c0
0000000100013810	mov	x24, x0
0000000100013814	ldr	w27, [x23, #0x14]
0000000100013818	sub	x0, x29, #0x80
000000010001381c	add	x1, sp, #0x90
0000000100013820	bl	0x1000293c0
0000000100013824	ldur	w8, [x29, #-0x6c]
0000000100013828	stp	x0, x8, [sp, #0x18]
000000010001382c	stp	x24, x27, [sp, #0x8]
0000000100013830	str	x25, [sp]
0000000100013834	adr	x2, #146078 ; literal pool for: "%s: already controlled: requestor = %s.%d, controller = %s.%d"
0000000100013838	nop
000000010001383c	mov	w1, #0x0
0000000100013840	mov	x0, x22
0000000100013844	bl	0x1000270c8
0000000100013848	ldr	w8, [x20, #0x258]
000000010001384c	ldr	w9, [x23, #0x14]
0000000100013850	cmp	w8, w9
0000000100013854	b.ne	0x100013888
0000000100013858	ldr	w8, [x20, #0x25c]
000000010001385c	ldr	w9, [x23, #0x1c]
0000000100013860	cmp	w8, w9
0000000100013864	b.ne	0x100013888
0000000100013868	ldr	x0, [x26, #0x420]
000000010001386c	str	x25, [sp]
0000000100013870	adr	x2, #146080 ; literal pool for: "%s: dethroning previous controller"
0000000100013874	nop
0000000100013878	mov	w1, #0x0
000000010001387c	bl	0x1000270c8
0000000100013880	mov	x0, x20
0000000100013884	bl	0x10001873c
0000000100013888	adr	x1, #146091 ; literal pool for: "port"
000000010001388c	nop
0000000100013890	mov	x0, x21
0000000100013894	bl	0x100031a18 ; symbol stub for: _xpc_dictionary_copy_mach_send
0000000100013898	mov	x22, x0
000000010001389c	add	w8, w22, #0x1
00000001000138a0	cmp	w8, #0x1
00000001000138a4	b.ls	0x100013b08
00000001000138a8	mov	x0, x21
00000001000138ac	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
00000001000138b0	mov	x21, x0
00000001000138b4	ldr	w8, [x23, #0x14]
00000001000138b8	str	w8, [x20, #0x258]
00000001000138bc	ldr	w8, [x23, #0x1c]
00000001000138c0	str	w8, [x20, #0x25c]
00000001000138c4	str	w22, [x20, #0x254]
00000001000138c8	mov	w22, w22
00000001000138cc	bl	0x10000d8e0
00000001000138d0	mov	x3, x0
00000001000138d4	nop
00000001000138d8	ldr	x0, #0x2c770 ; literal pool symbol address: __dispatch_source_type_mach_send
00000001000138dc	orr	w2, wzr, #0x1
00000001000138e0	mov	x1, x22
00000001000138e4	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
00000001000138e8	str	x0, [x20, #0x260]
00000001000138ec	mov	x1, x20
00000001000138f0	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
00000001000138f4	ldr	x0, [x20, #0x260]
00000001000138f8	adr	x1, #20092
00000001000138fc	nop
0000000100013900	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100013904	ldr	x0, [x20, #0x260]
0000000100013908	adr	x1, #20080
000000010001390c	nop
0000000100013910	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
0000000100013914	ldr	x0, [x20, #0x260]
0000000100013918	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010001391c	ldrsw	x2, [x20, #0x330]
0000000100013920	cbz	w2, 0x100013948
0000000100013924	adr	x1, #143580 ; literal pool for: "pid"
0000000100013928	nop
000000010001392c	mov	x0, x21
0000000100013930	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100013934	adr	x1, #145950 ; literal pool for: "configurable"
0000000100013938	nop
000000010001393c	mov	w2, #0x0
0000000100013940	mov	x0, x21
0000000100013944	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
0000000100013948	str	x21, [x19]
000000010001394c	str	wzr, [sp, #0x80]
0000000100013950	b	0x100013b30
0000000100013954	cbz	x8, 0x100013ca4
0000000100013958	ldr	w9, [x20, #0x170]
000000010001395c	nop
0000000100013960	ldr	x0, #0x30ac0
0000000100013964	add	x8, x20, #0x460
0000000100013968	cmp	w9, #0x4
000000010001396c	b.lt	0x100013bd0
0000000100013970	str	x8, [sp]
0000000100013974	adr	x2, #146416 ; literal pool for: "%s: extension is being stopped"
0000000100013978	nop
000000010001397c	mov	w1, #0x0
0000000100013980	bl	0x1000270c8
0000000100013984	orr	w22, wzr, #0x7c
0000000100013988	b	0x100014d1c
000000010001398c	cbz	w9, 0x100013ac8
0000000100013990	mov	x0, x20
0000000100013994	bl	0x100015694
0000000100013998	mov	x22, x0
000000010001399c	cmp	w22, #0x25
00000001000139a0	b.eq	0x1000139a8
00000001000139a4	cbnz	w22, 0x100013ea4
00000001000139a8	adr	x1, #145429 ; literal pool for: "pended"
00000001000139ac	nop
00000001000139b0	orr	w2, wzr, #0x1
00000001000139b4	mov	x0, x21
00000001000139b8	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000139bc	mov	w2, #0x5
00000001000139c0	b	0x100013f00
00000001000139c4	adr	x2, #143855 ; literal pool for: "Failure info has no PC."
00000001000139c8	nop
00000001000139cc	b	0x100013d70
00000001000139d0	cbnz	w8, 0x100013a00
00000001000139d4	cbz	w22, 0x1000139e4
00000001000139d8	ldrb	w8, [x20, #0x44a]
00000001000139dc	orr	w8, w8, #0x1
00000001000139e0	strb	w8, [x20, #0x44a]
00000001000139e4	mov	w1, #0x9
00000001000139e8	mov	x0, x20
00000001000139ec	bl	0x100010bb8
00000001000139f0	mov	x22, x0
00000001000139f4	cmp	w22, #0x24
00000001000139f8	b.eq	0x100013efc
00000001000139fc	cbnz	w22, 0x100013e7c
0000000100013a00	mov	x0, x21
0000000100013a04	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013a08	mov	x21, x0
0000000100013a0c	ldrsw	x2, [x20, #0x330]
0000000100013a10	adr	x1, #143344 ; literal pool for: "pid"
0000000100013a14	nop
0000000100013a18	b	0x100013e94
0000000100013a1c	tbnz	w8, #0x0, 0x100013cc4
0000000100013a20	ldr	w26, [x20, #0x434]
0000000100013a24	cmp	w26, #0x0
0000000100013a28	cset	w25, ne
0000000100013a2c	ldr	x1, [x20, #0x2b8]
0000000100013a30	cbz	x1, 0x100013f5c
0000000100013a34	mov	x0, x24
0000000100013a38	bl	0x10001e2b0
0000000100013a3c	cbz	x0, 0x100013f40
0000000100013a40	bl	0x10002f2ec
0000000100013a44	mov	x23, x0
0000000100013a48	cmp	w26, #0x0
0000000100013a4c	orr	w8, wzr, #0x1
0000000100013a50	cinc	x25, x8, ne
0000000100013a54	b	0x100013f60
0000000100013a58	bl	0x100030adc ; symbol stub for: ___error
0000000100013a5c	ldrsw	x2, [x0]
0000000100013a60	cbz	w2, 0x100013a78
0000000100013a64	adr	x0, #-7356
0000000100013a68	nop
0000000100013a6c	mov	x1, x20
0000000100013a70	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100013a74	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100013a78	mov	x0, x19
0000000100013a7c	bl	0x100030c74 ; symbol stub for: _close
0000000100013a80	cmn	w0, #0x1
0000000100013a84	b.ne	0x100013aa4
0000000100013a88	bl	0x100030adc ; symbol stub for: ___error
0000000100013a8c	ldrsw	x2, [x0]
0000000100013a90	adr	x0, #-7400
0000000100013a94	nop
0000000100013a98	mov	x1, x20
0000000100013a9c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100013aa0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100013aa4	mov	w22, #0x9
0000000100013aa8	b	0x100014d1c
0000000100013aac	ldr	x0, [x23, #0x420]
0000000100013ab0	str	x22, [sp]
0000000100013ab4	adr	x2, #145378 ; literal pool for: "%s: no domain found"
0000000100013ab8	nop
0000000100013abc	mov	w1, #0x0
0000000100013ac0	bl	0x1000270c8
0000000100013ac4	b	0x100012c08
0000000100013ac8	cbz	w22, 0x100013d84
0000000100013acc	mov	w1, #0x9
0000000100013ad0	mov	x0, x20
0000000100013ad4	bl	0x100010bb8
0000000100013ad8	mov	x22, x0
0000000100013adc	cmp	w22, #0x24
0000000100013ae0	b.eq	0x100013ee8
0000000100013ae4	cbnz	w22, 0x100013f14
0000000100013ae8	mov	x0, x21
0000000100013aec	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013af0	mov	x21, x0
0000000100013af4	ldrsw	x2, [x20, #0x330]
0000000100013af8	adr	x1, #143112 ; literal pool for: "pid"
0000000100013afc	nop
0000000100013b00	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100013b04	b	0x100013e6c
0000000100013b08	nop
0000000100013b0c	ldr	x0, #0x30914
0000000100013b10	add	x8, x20, #0x460
0000000100013b14	str	x8, [sp]
0000000100013b18	adr	x2, #145440 ; literal pool for: "%s: got dead control port"
0000000100013b1c	nop
0000000100013b20	mov	w1, #0x0
0000000100013b24	bl	0x1000270c8
0000000100013b28	mov	w8, #0x39
0000000100013b2c	str	w8, [sp, #0x80]
0000000100013b30	ldrb	w8, [x20, #0x44a]
0000000100013b34	tbz	w8, #0x3, 0x100012c08
0000000100013b38	ldr	w1, [x20, #0x27c]
0000000100013b3c	str	wzr, [x20, #0x27c]
0000000100013b40	mov	x0, x20
0000000100013b44	bl	0x100010bb8
0000000100013b48	mov	x19, x0
0000000100013b4c	nop
0000000100013b50	ldr	x0, #0x308d0
0000000100013b54	add	x8, x20, #0x460
0000000100013b58	ldr	w9, [sp, #0x80]
0000000100013b5c	adr	x10, #145473 ; literal pool for: "not "
0000000100013b60	nop
0000000100013b64	adr	x11, #139029 ; literal pool for: ""
0000000100013b68	nop
0000000100013b6c	cmp	w9, #0x0
0000000100013b70	csel	x9, x11, x10, eq
0000000100013b74	stp	x9, x19, [sp, #0x8]
0000000100013b78	str	x8, [sp]
0000000100013b7c	adr	x2, #145379 ; literal pool for: "%s: controller %sattached to spawn: domain spawn response: %d"
0000000100013b80	nop
0000000100013b84	mov	w1, #0x0
0000000100013b88	bl	0x1000270c8
0000000100013b8c	cbz	w19, 0x100013bc0
0000000100013b90	cmp	w19, #0x24
0000000100013b94	b.eq	0x100013bc0
0000000100013b98	cmp	w19, #0x8b
0000000100013b9c	b.eq	0x100014d60
0000000100013ba0	mov	x0, x19
0000000100013ba4	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100013ba8	stp	x19, x0, [sp]
0000000100013bac	adr	x2, #145447 ; literal pool for: "Post-attach spawn of service failed: %d: %s"
0000000100013bb0	nop
0000000100013bb4	orr	w1, wzr, #0x3
0000000100013bb8	mov	x0, x20
0000000100013bbc	bl	0x1000118ec
0000000100013bc0	ldrb	w8, [x20, #0x44a]
0000000100013bc4	and	w8, w8, #0xfffffff7
0000000100013bc8	strb	w8, [x20, #0x44a]
0000000100013bcc	b	0x100012c08
0000000100013bd0	cbz	w22, 0x100013dac
0000000100013bd4	str	x8, [sp]
0000000100013bd8	adr	x2, #145835 ; literal pool for: "%s: extension attempting to exit cleanly"
0000000100013bdc	nop
0000000100013be0	mov	w1, #0x0
0000000100013be4	bl	0x1000270c8
0000000100013be8	bl	0x10000d8e0
0000000100013bec	mov	x3, x0
0000000100013bf0	nop
0000000100013bf4	ldr	x0, #0x2c474 ; literal pool symbol address: __dispatch_source_type_timer
0000000100013bf8	mov	x1, #0x0
0000000100013bfc	mov	x2, #0x0
0000000100013c00	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100013c04	str	x0, [x20, #0x290]
0000000100013c08	mov	w1, #0x1a
0000000100013c0c	mov	x0, x20
0000000100013c10	bl	0x10000e820
0000000100013c14	ldr	x0, [x20, #0x290]
0000000100013c18	mov	x1, x20
0000000100013c1c	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100013c20	ldr	x22, [x20, #0x290]
0000000100013c24	ldr	w8, [x20, #0x2a0]
0000000100013c28	mov	w9, #0xca00
0000000100013c2c	movk	w9, #0x3b9a, lsl #16
0000000100013c30	mul	x1, x8, x9
0000000100013c34	mov	x0, #0x0
0000000100013c38	bl	0x100030f38 ; symbol stub for: _dispatch_time
0000000100013c3c	mov	x1, x0
0000000100013c40	mov	x2, #-0x1
0000000100013c44	mov	x0, x22
0000000100013c48	mov	x3, #0x0
0000000100013c4c	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100013c50	ldr	x0, [x20, #0x290]
0000000100013c54	adr	x1, #19292
0000000100013c58	nop
0000000100013c5c	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100013c60	ldr	x0, [x20, #0x290]
0000000100013c64	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100013c68	b	0x100014d0c
0000000100013c6c	adr	x2, #143204 ; literal pool for: "Failure info has no line number."
0000000100013c70	nop
0000000100013c74	b	0x100013d70
0000000100013c78	orr	w22, wzr, #0x40
0000000100013c7c	b	0x100013e10
0000000100013c80	mov	x0, x22
0000000100013c84	bl	0x10002cb30
0000000100013c88	cbz	w0, 0x100013e74
0000000100013c8c	ldr	w8, [x20, #0x35c]
0000000100013c90	cmp	w8, #0x0
0000000100013c94	orr	w8, wzr, #0x80
0000000100013c98	orr	w9, wzr, #0x40
0000000100013c9c	csel	x22, x9, x8, eq
0000000100013ca0	b	0x100013760
0000000100013ca4	nop
0000000100013ca8	ldr	x0, #0x30778
0000000100013cac	add	x8, x20, #0x460
0000000100013cb0	str	x8, [sp]
0000000100013cb4	adr	x2, #145531 ; literal pool for: "%s: extension already interrupted clean exit attempt"
0000000100013cb8	nop
0000000100013cbc	mov	w1, #0x0
0000000100013cc0	bl	0x1000270c8
0000000100013cc4	mov	w22, #0x25
0000000100013cc8	b	0x100014d1c
0000000100013ccc	ldr	x0, [x23, #0x420]
0000000100013cd0	adr	x2, #144858 ; literal pool for: "canceling old local attachment deferral"
0000000100013cd4	nop
0000000100013cd8	mov	w1, #0x0
0000000100013cdc	bl	0x1000270c8
0000000100013ce0	mov	x0, x20
0000000100013ce4	bl	0x1000186d0
0000000100013ce8	ldr	x8, [x20]
0000000100013cec	cbz	x8, 0x100013cf8
0000000100013cf0	ldr	x9, [x20, #0x8]
0000000100013cf4	str	x9, [x8, #0x8]
0000000100013cf8	ldr	x9, [x20, #0x8]
0000000100013cfc	str	x8, [x9]
0000000100013d00	mov	x8, #-0x1
0000000100013d04	stp	x8, x8, [x20]
0000000100013d08	ldr	x0, [x20, #0x18]
0000000100013d0c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100013d10	mov	x0, x20
0000000100013d14	bl	0x100031010 ; symbol stub for: _free
0000000100013d18	orr	w0, wzr, #0x20
0000000100013d1c	bl	0x10000d408
0000000100013d20	mov	x20, x0
0000000100013d24	ldr	x8, [x19]
0000000100013d28	str	x8, [x20]
0000000100013d2c	cbz	x8, 0x100013d34
0000000100013d30	str	x20, [x8, #0x8]
0000000100013d34	str	x20, [x19]
0000000100013d38	stp	x19, x22, [x20, #0x8]
0000000100013d3c	mov	x0, x21
0000000100013d40	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100013d44	str	x0, [x20, #0x18]
0000000100013d48	b	0x100013754
0000000100013d4c	adr	x1, #145272 ; literal pool for: "deferred"
0000000100013d50	nop
0000000100013d54	orr	w2, wzr, #0x1
0000000100013d58	mov	x0, x21
0000000100013d5c	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
0000000100013d60	orr	w2, wzr, #0x4
0000000100013d64	b	0x100013f00
0000000100013d68	adr	x2, #142990 ; literal pool for: "Failure info has no image UUID."
0000000100013d6c	nop
0000000100013d70	orr	w1, wzr, #0x3
0000000100013d74	mov	x0, x20
0000000100013d78	bl	0x1000118ec
0000000100013d7c	mov	w22, #0x16
0000000100013d80	b	0x100014d1c
0000000100013d84	adr	x1, #144441 ; literal pool for: "pended"
0000000100013d88	nop
0000000100013d8c	orr	w2, wzr, #0x1
0000000100013d90	mov	x0, x21
0000000100013d94	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
0000000100013d98	orr	w2, wzr, #0x1
0000000100013d9c	mov	x0, x20
0000000100013da0	mov	x1, x21
0000000100013da4	bl	0x100018428
0000000100013da8	b	0x100014d1c
0000000100013dac	str	x8, [sp]
0000000100013db0	adr	x2, #145404 ; literal pool for: "%s: extension canceled clean exit attempt"
0000000100013db4	nop
0000000100013db8	mov	w1, #0x0
0000000100013dbc	bl	0x1000270c8
0000000100013dc0	mov	w1, #0x1a
0000000100013dc4	mov	x0, x20
0000000100013dc8	bl	0x10000e824
0000000100013dcc	ldr	x0, [x20, #0x290]
0000000100013dd0	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100013dd4	ldr	x0, [x20, #0x290]
0000000100013dd8	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100013ddc	str	xzr, [x20, #0x290]
0000000100013de0	b	0x100014d0c
0000000100013de4	mov	x0, x20
0000000100013de8	bl	0x10002cb54
0000000100013dec	cbz	w0, 0x100013e0c
0000000100013df0	mov	x0, x20
0000000100013df4	bl	0x10002cbf4
0000000100013df8	cmp	w0, #0x0
0000000100013dfc	orr	w8, wzr, #0x10
0000000100013e00	orr	w9, wzr, #0x4
0000000100013e04	csel	x22, x9, x8, ne
0000000100013e08	b	0x100013e10
0000000100013e0c	mov	x22, #0x0
0000000100013e10	mov	x0, x20
0000000100013e14	bl	0x10002cd50
0000000100013e18	tbz	w0, #0x0, 0x100013e24
0000000100013e1c	orr	w20, wzr, #0x2
0000000100013e20	b	0x100013e4c
0000000100013e24	mov	x0, x20
0000000100013e28	bl	0x10002cd7c
0000000100013e2c	tbz	w0, #0x0, 0x100013e38
0000000100013e30	orr	w20, wzr, #0x20
0000000100013e34	b	0x100013e4c
0000000100013e38	mov	x0, x20
0000000100013e3c	bl	0x10002ccec
0000000100013e40	cmp	w0, #0x0
0000000100013e44	orr	w8, wzr, #0x8
0000000100013e48	csel	x20, x8, x22, ne
0000000100013e4c	mov	x0, x21
0000000100013e50	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013e54	mov	x21, x0
0000000100013e58	adr	x1, #145013 ; literal pool for: "exitinfo"
0000000100013e5c	nop
0000000100013e60	mov	x2, x20
0000000100013e64	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
0000000100013e68	mov	w22, #0x0
0000000100013e6c	str	x21, [x19]
0000000100013e70	b	0x100014d1c
0000000100013e74	orr	w22, wzr, #0x40
0000000100013e78	b	0x100013760
0000000100013e7c	mov	x0, x21
0000000100013e80	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013e84	mov	x21, x0
0000000100013e88	sxtw	x2, w22
0000000100013e8c	adr	x1, #143919 ; literal pool for: "error"
0000000100013e90	nop
0000000100013e94	mov	x0, x21
0000000100013e98	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100013e9c	cbnz	x21, 0x100013e68
0000000100013ea0	b	0x100013f0c
0000000100013ea4	mov	x0, x20
0000000100013ea8	bl	0x10001213c
0000000100013eac	b	0x100014d1c
0000000100013eb0	sub	x8, x24, #0x72
0000000100013eb4	cmp	x8, #0x2
0000000100013eb8	b.lo	0x100014184
0000000100013ebc	cmp	x24, #0x56
0000000100013ec0	b.eq	0x100014ae0
0000000100013ec4	cmp	x24, #0x6f
0000000100013ec8	b.ne	0x100014aa4
0000000100013ecc	cmp	w26, #0x1
0000000100013ed0	b.lt	0x100014c00
0000000100013ed4	cmp	w26, #0x4b
0000000100013ed8	b.ne	0x100014c38
0000000100013edc	adr	x2, #142682 ; literal pool for: "LaunchServices returned a bundle URL that does not match with the LoginItem's known association."
0000000100013ee0	nop
0000000100013ee4	b	0x100014c54
0000000100013ee8	adr	x1, #144085 ; literal pool for: "pended"
0000000100013eec	nop
0000000100013ef0	orr	w2, wzr, #0x1
0000000100013ef4	mov	x0, x21
0000000100013ef8	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
0000000100013efc	orr	w2, wzr, #0x1
0000000100013f00	mov	x0, x20
0000000100013f04	mov	x1, x21
0000000100013f08	bl	0x100018428
0000000100013f0c	mov	w22, #0x0
0000000100013f10	b	0x100014d1c
0000000100013f14	mov	x0, x21
0000000100013f18	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013f1c	mov	x21, x0
0000000100013f20	sxtw	x2, w22
0000000100013f24	adr	x1, #143767 ; literal pool for: "error"
0000000100013f28	nop
0000000100013f2c	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100013f30	str	x21, [x19]
0000000100013f34	mov	x0, x20
0000000100013f38	bl	0x10001213c
0000000100013f3c	b	0x100013f0c
0000000100013f40	ldr	x8, [x20, #0x2b8]
0000000100013f44	str	x8, [sp]
0000000100013f48	adr	x2, #140518 ; literal pool for: "Could not find exception endpoint for service: %s"
0000000100013f4c	nop
0000000100013f50	orr	w1, wzr, #0x3
0000000100013f54	mov	x0, x20
0000000100013f58	bl	0x1000118ec
0000000100013f5c	mov	w23, #0x0
0000000100013f60	add	x1, sp, #0x80
0000000100013f64	add	x2, sp, #0x78
0000000100013f68	add	x3, sp, #0x70
0000000100013f6c	mov	x0, x24
0000000100013f70	mov	x4, x25
0000000100013f74	bl	0x10001e8ac
0000000100013f78	ldr	w2, [x20, #0x434]
0000000100013f7c	cbz	w2, 0x100013fa0
0000000100013f80	ldr	x0, [sp, #0x80]
0000000100013f84	mov	x1, #-0x1
0000000100013f88	bl	0x100031910 ; symbol stub for: _xpc_array_set_mach_send
0000000100013f8c	ldp	x9, x8, [sp, #0x70]
0000000100013f90	add	x10, x9, #0x1
0000000100013f94	str	x10, [sp, #0x70]
0000000100013f98	mov	w10, #0x81
0000000100013f9c	str	w10, [x8, x9, lsl #2]
0000000100013fa0	cbz	w23, 0x100013fc8
0000000100013fa4	ldr	x0, [sp, #0x80]
0000000100013fa8	mov	x1, #-0x1
0000000100013fac	mov	x2, x23
0000000100013fb0	bl	0x100031910 ; symbol stub for: _xpc_array_set_mach_send
0000000100013fb4	ldp	x9, x8, [sp, #0x70]
0000000100013fb8	add	x10, x9, #0x1
0000000100013fbc	str	x10, [sp, #0x70]
0000000100013fc0	orr	w10, wzr, #0x80
0000000100013fc4	str	w10, [x8, x9, lsl #2]
0000000100013fc8	mov	x0, x21
0000000100013fcc	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100013fd0	str	x0, [sp, #0x50]
0000000100013fd4	ldp	x24, x25, [sp, #0x70]
0000000100013fd8	ldr	x26, [x20, #0xe0]
0000000100013fdc	ldr	x8, [x20, #0x218]
0000000100013fe0	add	x23, x8, x24, lsl #2
0000000100013fe4	str	x23, [sp, #0x90]
0000000100013fe8	nop
0000000100013fec	ldr	x21, #0x30c24
0000000100013ff0	cbz	x21, 0x100014010
0000000100013ff4	add	x0, x21, #0x18
0000000100013ff8	bl	0x10003173c ; symbol stub for: _strlen
0000000100013ffc	add	x8, x23, x0
0000000100014000	add	x23, x8, #0x1
0000000100014004	ldr	x21, [x21]
0000000100014008	cbnz	x21, 0x100013ff4
000000010001400c	str	x23, [sp, #0x90]
0000000100014010	nop
0000000100014014	ldr	x21, #0x30bf4
0000000100014018	cbz	x21, 0x100014038
000000010001401c	add	x0, x21, #0x18
0000000100014020	bl	0x10003173c ; symbol stub for: _strlen
0000000100014024	add	x8, x23, x0
0000000100014028	add	x23, x8, #0x1
000000010001402c	ldr	x21, [x21]
0000000100014030	cbnz	x21, 0x10001401c
0000000100014034	str	x23, [sp, #0x90]
0000000100014038	ldr	x21, [x26, #0x50]
000000010001403c	cbz	x21, 0x10001405c
0000000100014040	add	x0, x21, #0x18
0000000100014044	bl	0x10003173c ; symbol stub for: _strlen
0000000100014048	add	x8, x23, x0
000000010001404c	add	x23, x8, #0x1
0000000100014050	ldr	x21, [x21]
0000000100014054	cbnz	x21, 0x100014040
0000000100014058	str	x23, [sp, #0x90]
000000010001405c	ldrb	w8, [x20, #0x44a]
0000000100014060	str	x24, [sp, #0x58]
0000000100014064	str	x26, [sp, #0x48]
0000000100014068	tbz	w8, #0x2, 0x1000141f8
000000010001406c	ldr	x24, [x20, #0x410]
0000000100014070	cbz	x24, 0x100014098
0000000100014074	ldr	x0, [x20, #0x220]
0000000100014078	bl	0x10003173c ; symbol stub for: _strlen
000000010001407c	mvn	x21, x0
0000000100014080	mov	x0, x24
0000000100014084	bl	0x10003173c ; symbol stub for: _strlen
0000000100014088	add	x8, x23, x21
000000010001408c	add	x8, x8, x0
0000000100014090	add	x23, x8, #0x1
0000000100014094	str	x23, [sp, #0x90]
0000000100014098	ldr	x24, [x20, #0x418]
000000010001409c	cbz	x24, 0x10001410c
00000001000140a0	ldr	w26, [x20, #0x174]
00000001000140a4	cbz	w26, 0x1000140c8
00000001000140a8	ldr	x21, [x20, #0x178]
00000001000140ac	ldr	x0, [x21], #0x8
00000001000140b0	bl	0x10003173c ; symbol stub for: _strlen
00000001000140b4	mvn	x8, x0
00000001000140b8	add	x23, x23, x8
00000001000140bc	subs	x26, x26, #0x1
00000001000140c0	b.ne	0x1000140ac
00000001000140c4	str	x23, [sp, #0x90]
00000001000140c8	mov	x0, x24
00000001000140cc	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
00000001000140d0	cbz	x0, 0x10001410c
00000001000140d4	mov	x24, #0x0
00000001000140d8	ldr	x0, [x20, #0x418]
00000001000140dc	mov	x1, x24
00000001000140e0	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
00000001000140e4	cbz	x0, 0x1000140f8
00000001000140e8	bl	0x10003173c ; symbol stub for: _strlen
00000001000140ec	add	x8, x23, x0
00000001000140f0	add	x23, x8, #0x1
00000001000140f4	str	x23, [sp, #0x90]
00000001000140f8	add	x24, x24, #0x1
00000001000140fc	ldr	x0, [x20, #0x418]
0000000100014100	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100014104	cmp	x24, x0
0000000100014108	b.lo	0x1000140d8
000000010001410c	ldr	x24, [x20, #0x420]
0000000100014110	cbz	x24, 0x100014140
0000000100014114	ldr	x0, [x20, #0x180]
0000000100014118	cbz	x0, 0x10001412c
000000010001411c	bl	0x10003173c ; symbol stub for: _strlen
0000000100014120	mvn	x8, x0
0000000100014124	add	x23, x23, x8
0000000100014128	str	x23, [sp, #0x90]
000000010001412c	mov	x0, x24
0000000100014130	bl	0x10003173c ; symbol stub for: _strlen
0000000100014134	add	x8, x23, x0
0000000100014138	add	x8, x8, #0x1
000000010001413c	str	x8, [sp, #0x90]
0000000100014140	ldr	x0, [x20, #0x428]
0000000100014144	cbz	x0, 0x100014158
0000000100014148	adr	x2, #17384
000000010001414c	nop
0000000100014150	add	x1, sp, #0x90
0000000100014154	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100014158	ldr	w8, [x20, #0x430]
000000010001415c	cbz	w8, 0x10001417c
0000000100014160	ldr	x8, [x20, #0x2c8]
0000000100014164	cbz	x8, 0x1000141ec
0000000100014168	ldr	x8, [x20, #0x2d0]
000000010001416c	ldr	x9, [sp, #0x90]
0000000100014170	sub	x8, x9, x8, lsl #2
0000000100014174	str	x8, [sp, #0x90]
0000000100014178	b	0x1000141f0
000000010001417c	ldr	x23, [sp, #0x90]
0000000100014180	b	0x1000141f8
0000000100014184	mov	x27, x25
0000000100014188	ldr	x8, [x20, #0xe0]
000000010001418c	ldr	w25, [x8, #0x30]
0000000100014190	mov	x0, x26
0000000100014194	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100014198	cbz	w25, 0x100014ba8
000000010001419c	ldr	x8, [x20, #0xe0]
00000001000141a0	ldr	w8, [x8, #0x30]
00000001000141a4	stp	x0, x8, [sp, #0x8]
00000001000141a8	str	x26, [sp]
00000001000141ac	adr	x2, #142196 ; literal pool for: "Could not find uid associated with service: %d: %s %u"
00000001000141b0	nop
00000001000141b4	b	0x100014bc0
00000001000141b8	adr	x2, #142382 ; literal pool for: "Program specified by service is not a Mach-O executable file."
00000001000141bc	nop
00000001000141c0	b	0x100014bf8
00000001000141c4	ldr	x8, [x20, #0xe8]
00000001000141c8	cmp	x8, #0x0
00000001000141cc	csel	x8, x20, x8, eq
00000001000141d0	ldr	w8, [x8, #0x254]
00000001000141d4	add	w8, w8, #0x1
00000001000141d8	cmp	w8, #0x2
00000001000141dc	b.lo	0x100014c60
00000001000141e0	adr	x2, #142262 ; literal pool for: "Service could not notify controller."
00000001000141e4	nop
00000001000141e8	b	0x100014c54
00000001000141ec	ldr	x8, [sp, #0x90]
00000001000141f0	add	x23, x8, #0x4
00000001000141f4	str	x23, [sp, #0x90]
00000001000141f8	ldr	x8, [x20, #0x240]
00000001000141fc	cbz	x8, 0x100014210
0000000100014200	add	x23, x23, #0x14
0000000100014204	ldr	x8, [x8]
0000000100014208	cbnz	x8, 0x100014200
000000010001420c	str	x23, [sp, #0x90]
0000000100014210	mov	x0, x23
0000000100014214	bl	0x10000d464
0000000100014218	mov	x24, x0
000000010001421c	str	wzr, [sp, #0x8c]
0000000100014220	sub	x8, x23, #0xa0
0000000100014224	str	x8, [x28]
0000000100014228	stp	w23, wzr, [x24]
000000010001422c	ldr	x3, [x20, #0x410]
0000000100014230	cbnz	x3, 0x100014238
0000000100014234	ldr	x3, [x20, #0x220]
0000000100014238	add	x1, sp, #0x8c
000000010001423c	sub	x2, x29, #0x80
0000000100014240	mov	x0, x24
0000000100014244	bl	0x10000d384
0000000100014248	ldr	x0, [x20, #0x418]
000000010001424c	cbz	x0, 0x1000142a4
0000000100014250	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100014254	str	w0, [x24, #0x8]
0000000100014258	mov	x26, #0x0
000000010001425c	cbz	w0, 0x1000142ec
0000000100014260	ldr	w8, [sp, #0x8c]
0000000100014264	str	w8, [x24, #0xc]
0000000100014268	ldr	x0, [x20, #0x418]
000000010001426c	mov	x1, x26
0000000100014270	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
0000000100014274	mov	x8, x0
0000000100014278	cbz	x8, 0x100014290
000000010001427c	add	x1, sp, #0x8c
0000000100014280	sub	x2, x29, #0x80
0000000100014284	mov	x0, x24
0000000100014288	mov	x3, x8
000000010001428c	bl	0x10000d384
0000000100014290	add	x26, x26, #0x1
0000000100014294	ldr	w8, [x24, #0x8]
0000000100014298	cmp	x26, x8
000000010001429c	b.lo	0x100014268
00000001000142a0	b	0x1000142ec
00000001000142a4	ldr	w8, [x20, #0x174]
00000001000142a8	cbz	w8, 0x1000142e4
00000001000142ac	mov	x26, #0x0
00000001000142b0	ldr	w9, [sp, #0x8c]
00000001000142b4	stp	w8, w9, [x24, #0x8]
00000001000142b8	ldr	x8, [x20, #0x178]
00000001000142bc	ldr	x3, [x8, x26, lsl #3]
00000001000142c0	add	x1, sp, #0x8c
00000001000142c4	sub	x2, x29, #0x80
00000001000142c8	mov	x0, x24
00000001000142cc	bl	0x10000d384
00000001000142d0	add	x26, x26, #0x1
00000001000142d4	ldr	w8, [x20, #0x174]
00000001000142d8	cmp	x26, x8
00000001000142dc	b.lo	0x1000142b8
00000001000142e0	b	0x1000142ec
00000001000142e4	mov	x26, #0x0
00000001000142e8	str	wzr, [x24, #0x8]
00000001000142ec	ldrh	w8, [x20, #0x308]
00000001000142f0	cbnz	w8, 0x100014324
00000001000142f4	ldr	x8, [x20, #0xe0]
00000001000142f8	ldr	x8, [x8, #0x50]
00000001000142fc	nop
0000000100014300	ldr	x9, #0x30908
0000000100014304	nop
0000000100014308	ldr	x10, #0x30908
000000010001430c	cmp	x8, #0x0
0000000100014310	ccmp	x9, #0x0, #0x0, eq
0000000100014314	ccmp	x10, #0x0, #0x0, eq
0000000100014318	b.ne	0x100014324
000000010001431c	ldr	x8, [x20, #0x428]
0000000100014320	cbz	x8, 0x100014ba0
0000000100014324	ldr	w8, [sp, #0x8c]
0000000100014328	str	w8, [x24, #0x14]
000000010001432c	ldr	x0, [x20, #0x428]
0000000100014330	cbz	x0, 0x100014354
0000000100014334	add	x8, sp, #0x8c
0000000100014338	stp	x24, x8, [sp, #0x90]
000000010001433c	sub	x8, x29, #0x80
0000000100014340	str	x8, [sp, #0xa0]
0000000100014344	adr	x2, #16712
0000000100014348	nop
000000010001434c	add	x1, sp, #0x90
0000000100014350	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100014354	nop
0000000100014358	ldr	x21, #0x308b8
000000010001435c	cbz	x21, 0x100014388
0000000100014360	add	x3, x21, #0x18
0000000100014364	add	x1, sp, #0x8c
0000000100014368	sub	x2, x29, #0x80
000000010001436c	mov	x0, x24
0000000100014370	bl	0x10000d384
0000000100014374	ldr	w8, [x24, #0x10]
0000000100014378	add	w8, w8, #0x1
000000010001437c	str	w8, [x24, #0x10]
0000000100014380	ldr	x21, [x21]
0000000100014384	cbnz	x21, 0x100014360
0000000100014388	ldr	x21, [x20, #0x300]
000000010001438c	cbz	x21, 0x1000143b8
0000000100014390	add	x3, x21, #0x18
0000000100014394	add	x1, sp, #0x8c
0000000100014398	sub	x2, x29, #0x80
000000010001439c	mov	x0, x24
00000001000143a0	bl	0x10000d384
00000001000143a4	ldr	w8, [x24, #0x10]
00000001000143a8	add	w8, w8, #0x1
00000001000143ac	str	w8, [x24, #0x10]
00000001000143b0	ldr	x21, [x21]
00000001000143b4	cbnz	x21, 0x100014390
00000001000143b8	ldr	x8, [x20, #0xe0]
00000001000143bc	ldr	x21, [x8, #0x50]
00000001000143c0	cbz	x21, 0x1000143ec
00000001000143c4	add	x3, x21, #0x18
00000001000143c8	add	x1, sp, #0x8c
00000001000143cc	sub	x2, x29, #0x80
00000001000143d0	mov	x0, x24
00000001000143d4	bl	0x10000d384
00000001000143d8	ldr	w8, [x24, #0x10]
00000001000143dc	add	w8, w8, #0x1
00000001000143e0	str	w8, [x24, #0x10]
00000001000143e4	ldr	x21, [x21]
00000001000143e8	cbnz	x21, 0x1000143c4
00000001000143ec	nop
00000001000143f0	ldr	x21, #0x30818
00000001000143f4	cbz	x21, 0x100014420
00000001000143f8	add	x3, x21, #0x18
00000001000143fc	add	x1, sp, #0x8c
0000000100014400	sub	x2, x29, #0x80
0000000100014404	mov	x0, x24
0000000100014408	bl	0x10000d384
000000010001440c	ldr	w8, [x24, #0x10]
0000000100014410	add	w8, w8, #0x1
0000000100014414	str	w8, [x24, #0x10]
0000000100014418	ldr	x21, [x21]
000000010001441c	cbnz	x21, 0x1000143f8
0000000100014420	ldr	w8, [x20, #0x430]
0000000100014424	cbz	w8, 0x100014460
0000000100014428	orr	w8, wzr, #0x1
000000010001442c	str	w8, [x24, #0x18]
0000000100014430	ldr	x8, [x20, #0x2c8]
0000000100014434	ldr	w8, [x8, x26, lsl #2]
0000000100014438	ldr	w9, [sp, #0x8c]
000000010001443c	add	x10, x24, x9
0000000100014440	stur	w8, [x10, #0x9d]
0000000100014444	add	w8, w9, #0x4
0000000100014448	str	w8, [sp, #0x8c]
000000010001444c	ldr	x8, [x28]
0000000100014450	sub	x8, x8, #0x4
0000000100014454	str	x8, [x28]
0000000100014458	ldr	x21, [sp, #0x50]
000000010001445c	b	0x1000144ac
0000000100014460	ldr	x8, [x20, #0x2d0]
0000000100014464	ldr	x21, [sp, #0x50]
0000000100014468	cbz	x8, 0x1000144a8
000000010001446c	ldr	w9, [sp, #0x8c]
0000000100014470	stp	w8, w9, [x24, #0x18]
0000000100014474	ldr	x10, [x20, #0x2c8]
0000000100014478	add	x11, x24, #0x9d
000000010001447c	ldr	x12, [x28]
0000000100014480	mov	x13, x8
0000000100014484	ldr	w14, [x10], #0x4
0000000100014488	str	w14, [x11, w9, uxtw]
000000010001448c	add	w9, w9, #0x4
0000000100014490	str	w9, [sp, #0x8c]
0000000100014494	subs	x13, x13, #0x1
0000000100014498	b.ne	0x100014484
000000010001449c	sub	x8, x12, x8, lsl #2
00000001000144a0	str	x8, [x28]
00000001000144a4	b	0x1000144ac
00000001000144a8	str	wzr, [x24, #0x1c]
00000001000144ac	ldr	x3, [x20, #0x268]
00000001000144b0	cbz	x3, 0x1000144d0
00000001000144b4	ldr	w8, [sp, #0x8c]
00000001000144b8	str	w8, [x24, #0x20]
00000001000144bc	add	x1, sp, #0x8c
00000001000144c0	sub	x2, x29, #0x80
00000001000144c4	mov	x0, x24
00000001000144c8	bl	0x10000d384
00000001000144cc	b	0x1000144d4
00000001000144d0	str	wzr, [x24, #0x20]
00000001000144d4	ldr	x3, [x20, #0x270]
00000001000144d8	cbz	x3, 0x1000144f8
00000001000144dc	ldr	w8, [sp, #0x8c]
00000001000144e0	str	w8, [x24, #0x24]
00000001000144e4	add	x1, sp, #0x8c
00000001000144e8	sub	x2, x29, #0x80
00000001000144ec	mov	x0, x24
00000001000144f0	bl	0x10000d384
00000001000144f4	b	0x1000144fc
00000001000144f8	str	wzr, [x24, #0x24]
00000001000144fc	ldrb	w8, [x20, #0x45c]
0000000100014500	tbnz	w8, #0x3, 0x10001450c
0000000100014504	mov	w26, #0x0
0000000100014508	b	0x100014518
000000010001450c	ldrh	w8, [x20, #0x278]
0000000100014510	strh	w8, [x24, #0x30]
0000000100014514	orr	w26, wzr, #0x10000
0000000100014518	ldr	x8, [x20, #0xe0]
000000010001451c	ldr	w9, [x8, #0x30]
0000000100014520	str	w9, [x24, #0x28]
0000000100014524	ldrb	w8, [x8, #0x58]
0000000100014528	and	w8, w8, #0x1
000000010001452c	ldur	w9, [x24, #0x99]
0000000100014530	bfi	w9, w8, #20, #1
0000000100014534	stur	w9, [x24, #0x99]
0000000100014538	ldr	x0, [sp, #0x48]
000000010001453c	ldr	w8, [x0, #0x34]
0000000100014540	str	w8, [x24, #0x2c]
0000000100014544	bl	0x10001dddc
0000000100014548	adr	x8, #191696
000000010001454c	nop
0000000100014550	cmp	x0, x8
0000000100014554	b.ne	0x100014564
0000000100014558	ldr	x0, [x20, #0xe0]
000000010001455c	bl	0x10001dde4
0000000100014560	stur	x0, [x24, #0x34]
0000000100014564	ldr	x3, [x20, #0x420]
0000000100014568	cbnz	x3, 0x100014574
000000010001456c	ldr	x3, [x20, #0x180]
0000000100014570	cbz	x3, 0x100014a9c
0000000100014574	ldr	w8, [sp, #0x8c]
0000000100014578	str	w8, [x24, #0x40]
000000010001457c	add	x1, sp, #0x8c
0000000100014580	sub	x2, x29, #0x80
0000000100014584	mov	x0, x24
0000000100014588	bl	0x10000d384
000000010001458c	ldr	x3, [x20, #0x188]
0000000100014590	cbz	x3, 0x1000145b0
0000000100014594	ldr	w8, [sp, #0x8c]
0000000100014598	str	w8, [x24, #0x44]
000000010001459c	add	x1, sp, #0x8c
00000001000145a0	sub	x2, x29, #0x80
00000001000145a4	mov	x0, x24
00000001000145a8	bl	0x10000d384
00000001000145ac	b	0x1000145b4
00000001000145b0	str	wzr, [x24, #0x44]
00000001000145b4	ldr	x3, [x20, #0x190]
00000001000145b8	cbz	x3, 0x1000145d8
00000001000145bc	ldr	w8, [sp, #0x8c]
00000001000145c0	str	w8, [x24, #0x48]
00000001000145c4	add	x1, sp, #0x8c
00000001000145c8	sub	x2, x29, #0x80
00000001000145cc	mov	x0, x24
00000001000145d0	bl	0x10000d384
00000001000145d4	b	0x1000145dc
00000001000145d8	str	wzr, [x24, #0x48]
00000001000145dc	ldr	x3, [x20, #0x198]
00000001000145e0	cbz	x3, 0x100014600
00000001000145e4	ldr	w8, [sp, #0x8c]
00000001000145e8	str	w8, [x24, #0x4c]
00000001000145ec	add	x1, sp, #0x8c
00000001000145f0	sub	x2, x29, #0x80
00000001000145f4	mov	x0, x24
00000001000145f8	bl	0x10000d384
00000001000145fc	b	0x100014604
0000000100014600	str	wzr, [x24, #0x4c]
0000000100014604	ldr	x3, [x20, #0x1a0]
0000000100014608	cbz	x3, 0x100014628
000000010001460c	ldr	w8, [sp, #0x8c]
0000000100014610	str	w8, [x24, #0x50]
0000000100014614	add	x1, sp, #0x8c
0000000100014618	sub	x2, x29, #0x80
000000010001461c	mov	x0, x24
0000000100014620	bl	0x10000d384
0000000100014624	b	0x10001462c
0000000100014628	str	wzr, [x24, #0x50]
000000010001462c	ldr	x3, [x20, #0x1a8]
0000000100014630	cbz	x3, 0x100014650
0000000100014634	ldr	w8, [sp, #0x8c]
0000000100014638	str	w8, [x24, #0x54]
000000010001463c	add	x1, sp, #0x8c
0000000100014640	sub	x2, x29, #0x80
0000000100014644	mov	x0, x24
0000000100014648	bl	0x10000d384
000000010001464c	b	0x100014654
0000000100014650	str	wzr, [x24, #0x54]
0000000100014654	ldr	x8, [x20, #0x2c0]
0000000100014658	stur	x8, [x24, #0x5c]
000000010001465c	ldrsh	w8, [x20, #0x448]
0000000100014660	cbnz	w8, 0x100014668
0000000100014664	ldr	w8, [x20, #0x2dc]
0000000100014668	str	w8, [x24, #0x64]
000000010001466c	ldr	w8, [x20, #0x440]
0000000100014670	tbz	w8, #0x1f, 0x100014678
0000000100014674	ldr	w8, [x20, #0x2e0]
0000000100014678	str	w8, [x24, #0x68]
000000010001467c	ldr	w8, [x20, #0x444]
0000000100014680	cbz	w8, 0x10001468c
0000000100014684	str	w8, [x24, #0x6c]
0000000100014688	b	0x100014698
000000010001468c	ldr	w8, [x20, #0x2e4]
0000000100014690	str	w8, [x24, #0x6c]
0000000100014694	ldr	w8, [x20, #0x2e8]
0000000100014698	str	w8, [x24, #0x70]
000000010001469c	ldr	w8, [x20, #0x2ec]
00000001000146a0	tbnz	w8, #0x1f, 0x1000146a8
00000001000146a4	str	w8, [x24, #0x74]
00000001000146a8	ldr	x8, [x20, #0x2f0]
00000001000146ac	str	x8, [x24, #0x78]
00000001000146b0	ldr	w8, [x20, #0x30c]
00000001000146b4	ldrb	w9, [x20, #0x30a]
00000001000146b8	cbnz	w8, 0x1000146c0
00000001000146bc	cbz	w9, 0x1000146d4
00000001000146c0	ldur	w10, [x24, #0x99]
00000001000146c4	orr	w10, w10, #0x400000
00000001000146c8	stur	w10, [x24, #0x99]
00000001000146cc	str	w8, [x24, #0x94]
00000001000146d0	strb	w9, [x24, #0x98]
00000001000146d4	ldr	w8, [x20, #0x2d8]
00000001000146d8	str	w8, [x24, #0x80]
00000001000146dc	ldr	x8, [x20, #0x240]
00000001000146e0	cbz	x8, 0x10001476c
00000001000146e4	mov	x9, #0x0
00000001000146e8	mov	x10, x8
00000001000146ec	ldr	x10, [x10]
00000001000146f0	sub	x9, x9, #0x1
00000001000146f4	cbnz	x10, 0x1000146ec
00000001000146f8	cbz	x9, 0x10001476c
00000001000146fc	neg	w9, w9
0000000100014700	ldr	w10, [sp, #0x8c]
0000000100014704	stp	w9, w10, [x24, #0x84]
0000000100014708	add	x9, x24, #0x9d
000000010001470c	ldr	x11, [x8, #0x10]
0000000100014710	str	x11, [sp, #0x90]
0000000100014714	ldr	x11, [x8, #0x18]
0000000100014718	str	x11, [sp, #0x98]
000000010001471c	ldr	w11, [x8, #0x20]
0000000100014720	strh	w11, [sp, #0xa0]
0000000100014724	ldrb	w11, [x8, #0x24]
0000000100014728	strb	w11, [sp, #0xa2]
000000010001472c	ldrb	w11, [x8, #0x25]
0000000100014730	strb	w11, [sp, #0xa3]
0000000100014734	add	x10, x9, w10, uxtw
0000000100014738	ldr	q0, [sp, #0x90]
000000010001473c	str	q0, [x10]
0000000100014740	ldr	w11, [sp, #0xa0]
0000000100014744	str	w11, [x10, #0x10]
0000000100014748	ldr	w10, [sp, #0x8c]
000000010001474c	add	w10, w10, #0x14
0000000100014750	str	w10, [sp, #0x8c]
0000000100014754	ldr	x11, [x28]
0000000100014758	sub	x11, x11, #0x14
000000010001475c	str	x11, [x28]
0000000100014760	ldr	x8, [x8]
0000000100014764	cbnz	x8, 0x10001470c
0000000100014768	b	0x100014770
000000010001476c	stp	wzr, wzr, [x24, #0x84]
0000000100014770	ldr	x9, [x20, #0x458]
0000000100014774	tbnz	w9, #0xc, 0x100014784
0000000100014778	ldrb	w8, [x20, #0x44a]
000000010001477c	and	w8, w8, #0x1
0000000100014780	b	0x100014788
0000000100014784	orr	w8, wzr, #0x1
0000000100014788	strb	w8, [x24, #0x58]
000000010001478c	ldr	x14, [sp, #0x58]
0000000100014790	str	w14, [x24, #0x90]
0000000100014794	cbz	x14, 0x1000147dc
0000000100014798	lsl	x10, x14, #2
000000010001479c	ldr	w11, [sp, #0x8c]
00000001000147a0	str	w11, [x24, #0x8c]
00000001000147a4	add	x13, x24, #0x9d
00000001000147a8	ldr	x12, [x28]
00000001000147ac	mov	x15, x11
00000001000147b0	ldr	w16, [x25], #0x4
00000001000147b4	str	w16, [x13, w15, uxtw]
00000001000147b8	add	w15, w15, #0x4
00000001000147bc	subs	x14, x14, #0x1
00000001000147c0	b.ne	0x1000147b0
00000001000147c4	ldr	x13, [sp, #0x58]
00000001000147c8	add	w11, w11, w13, lsl #2
00000001000147cc	sub	x10, x12, x10
00000001000147d0	str	w11, [sp, #0x8c]
00000001000147d4	str	x10, [x28]
00000001000147d8	b	0x1000147e0
00000001000147dc	str	wzr, [x24, #0x8c]
00000001000147e0	lsr	x10, x9, #13
00000001000147e4	ldur	w11, [x24, #0x99]
00000001000147e8	mov	w12, #0xc400
00000001000147ec	movk	w12, #0xfeff, lsl #16
00000001000147f0	and	w11, w11, w12
00000001000147f4	lsr	w12, w9, #2
00000001000147f8	ubfx	x13, x9, #4, #28
00000001000147fc	and	w13, w13, #0x20
0000000100014800	lsr	x14, x9, #40
0000000100014804	and	w14, w14, #0x40
0000000100014808	lsr	x15, x9, #25
000000010001480c	and	w15, w15, #0x1000000
0000000100014810	ubfx	x16, x9, #13, #2
0000000100014814	ldr	w17, [x20, #0x334]
0000000100014818	cmp	w17, #0xb
000000010001481c	cset	w17, eq
0000000100014820	ubfx	x0, x9, #11, #21
0000000100014824	and	w0, w0, #0x100
0000000100014828	ubfx	x1, x9, #14, #18
000000010001482c	and	w1, w1, #0x200
0000000100014830	lsr	x2, x9, #3
0000000100014834	and	w3, w2, #0x4
0000000100014838	and	w2, w2, #0x8
000000010001483c	lsl	w4, w9, #1
0000000100014840	and	w4, w4, #0x800
0000000100014844	adr	x5, #195638
0000000100014848	nop
000000010001484c	ldrb	w5, [x5]
0000000100014850	ubfx	x6, x9, #15, #17
0000000100014854	and	w6, w6, #0x2000
0000000100014858	bfi	w6, w12, #4, #1
000000010001485c	orr	w12, w6, w16
0000000100014860	orr	w12, w12, w13
0000000100014864	orr	w12, w12, w14
0000000100014868	orr	w12, w12, w15
000000010001486c	orr	w12, w12, w0
0000000100014870	orr	w12, w12, w1
0000000100014874	orr	w12, w12, w3
0000000100014878	orr	w12, w12, w2
000000010001487c	orr	w12, w12, w4
0000000100014880	orr	w11, w12, w11
0000000100014884	orr	w11, w11, w17, lsl #7
0000000100014888	orr	w11, w11, w5, lsl #12
000000010001488c	stur	w11, [x24, #0x99]
0000000100014890	ldr	x12, [x20, #0xe8]
0000000100014894	cmp	x12, #0x0
0000000100014898	csel	x12, x20, x12, eq
000000010001489c	ldr	w12, [x12, #0x254]
00000001000148a0	cbz	w12, 0x1000148ac
00000001000148a4	orr	w11, w11, #0x400
00000001000148a8	stur	w11, [x24, #0x99]
00000001000148ac	tbnz	w9, #0x1d, 0x1000148b8
00000001000148b0	ldrb	w12, [x20, #0x44a]
00000001000148b4	tbz	w12, #0x4, 0x1000148c0
00000001000148b8	orr	w11, w11, #0x80000
00000001000148bc	stur	w11, [x24, #0x99]
00000001000148c0	mov	w12, #-0xa50001
00000001000148c4	and	w11, w11, w12
00000001000148c8	and	w10, w10, #0x800000
00000001000148cc	lsr	x12, x9, #19
00000001000148d0	and	w12, w12, #0x40000
00000001000148d4	lsr	x9, x9, #22
00000001000148d8	and	w9, w9, #0x200000
00000001000148dc	orr	w10, w10, w26
00000001000148e0	orr	w10, w10, w12
00000001000148e4	orr	w9, w10, w9
00000001000148e8	orr	w9, w9, w11
00000001000148ec	stur	w9, [x24, #0x99]
00000001000148f0	ldr	x9, [x28]
00000001000148f4	ldr	w10, [sp, #0x8c]
00000001000148f8	cbnz	x9, 0x100014d6c
00000001000148fc	add	x11, x10, #0xa0
0000000100014900	cmp	x11, x23
0000000100014904	b.ne	0x100014d6c
0000000100014908	ldrh	w9, [x20, #0x354]
000000010001490c	and	w9, w9, #0xfffffffb
0000000100014910	orr	w8, w9, w8, lsl #2
0000000100014914	strh	w8, [x20, #0x354]
0000000100014918	nop
000000010001491c	ldr	x8, #0x2b714 ; literal pool symbol address: __dispatch_data_destructor_free
0000000100014920	ldr	x3, [x8]
0000000100014924	mov	x0, x24
0000000100014928	mov	x1, x23
000000010001492c	mov	x2, #0x0
0000000100014930	bl	0x100030d4c ; symbol stub for: _dispatch_data_create
0000000100014934	mov	x23, x0
0000000100014938	ldr	x0, [sp, #0x78]
000000010001493c	bl	0x100031010 ; symbol stub for: _free
0000000100014940	mov	x0, x23
0000000100014944	bl	0x1000319d0 ; symbol stub for: _xpc_data_create_with_dispatch_data
0000000100014948	mov	x24, x0
000000010001494c	mov	x0, x23
0000000100014950	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100014954	adr	x1, #139748 ; literal pool for: "blob"
0000000100014958	nop
000000010001495c	mov	x0, x21
0000000100014960	mov	x2, x24
0000000100014964	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100014968	mov	x0, x24
000000010001496c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100014970	ldr	x2, [sp, #0x80]
0000000100014974	adr	x1, #139721 ; literal pool for: "ports"
0000000100014978	nop
000000010001497c	mov	x0, x21
0000000100014980	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100014984	ldr	x0, [sp, #0x80]
0000000100014988	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001498c	cbz	w22, 0x1000149a4
0000000100014990	adr	x1, #139699 ; literal pool for: "control"
0000000100014994	nop
0000000100014998	mov	x2, x22
000000010001499c	mov	x0, x21
00000001000149a0	bl	0x100031afc ; symbol stub for: _xpc_dictionary_set_mach_send
00000001000149a4	mov	x0, #0x0
00000001000149a8	mov	x1, #0x0
00000001000149ac	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
00000001000149b0	mov	x22, x0
00000001000149b4	mov	x23, #0x0
00000001000149b8	add	x8, x20, x23, lsl #2
00000001000149bc	ldr	w2, [x8, #0x248]
00000001000149c0	cmn	w2, #0x1
00000001000149c4	b.eq	0x1000149e4
00000001000149c8	mov	x1, #-0x1
00000001000149cc	mov	x0, x22
00000001000149d0	bl	0x1000318f8 ; symbol stub for: _xpc_array_set_fd
00000001000149d4	mov	x1, #-0x1
00000001000149d8	mov	x0, x22
00000001000149dc	mov	x2, x23
00000001000149e0	bl	0x100031904 ; symbol stub for: _xpc_array_set_int64
00000001000149e4	add	x23, x23, #0x1
00000001000149e8	cmp	x23, #0x3
00000001000149ec	b.ne	0x1000149b8
00000001000149f0	ldr	x0, [x20, #0x438]
00000001000149f4	cbz	x0, 0x100014a30
00000001000149f8	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
00000001000149fc	cbz	x0, 0x100014a30
0000000100014a00	mov	x23, #0x0
0000000100014a04	ldr	x0, [x20, #0x438]
0000000100014a08	mov	x1, x23
0000000100014a0c	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100014a10	mov	x1, x0
0000000100014a14	mov	x0, x22
0000000100014a18	bl	0x1000318b0 ; symbol stub for: _xpc_array_append_value
0000000100014a1c	add	x23, x23, #0x1
0000000100014a20	ldr	x0, [x20, #0x438]
0000000100014a24	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100014a28	cmp	x23, x0
0000000100014a2c	b.lo	0x100014a04
0000000100014a30	adr	x1, #139547 ; literal pool for: "fds"
0000000100014a34	nop
0000000100014a38	mov	x0, x21
0000000100014a3c	mov	x2, x22
0000000100014a40	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100014a44	mov	x0, x22
0000000100014a48	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100014a4c	nop
0000000100014a50	ldr	x0, #0x2f9d0
0000000100014a54	add	x8, x20, #0x460
0000000100014a58	str	x8, [sp]
0000000100014a5c	adr	x2, #139507 ; literal pool for: "%s: service initialized"
0000000100014a60	nop
0000000100014a64	mov	w1, #0x0
0000000100014a68	bl	0x1000270c8
0000000100014a6c	ldrsw	x1, [x20, #0x330]
0000000100014a70	add	w0, w27, #0x4
0000000100014a74	bl	0x10000ccd0
0000000100014a78	ldrsw	x0, [x20, #0x330]
0000000100014a7c	nop
0000000100014a80	mov	x0, x20
0000000100014a84	bl	0x10001213c
0000000100014a88	mov	w22, #0x0
0000000100014a8c	ldrh	w8, [x20, #0x354]
0000000100014a90	orr	w8, w8, #0x1
0000000100014a94	strh	w8, [x20, #0x354]
0000000100014a98	b	0x100013e6c
0000000100014a9c	str	wzr, [x24, #0x40]
0000000100014aa0	b	0x10001458c
0000000100014aa4	nop
0000000100014aa8	nop
0000000100014aac	ldr	x8, #0x2ea24
0000000100014ab0	cbz	x27, 0x100014bd8
0000000100014ab4	sub	x9, x29, #0x80
0000000100014ab8	stp	x22, x23, [sp, #0x18]
0000000100014abc	stp	x9, x24, [sp, #0x28]
0000000100014ac0	adr	x9, #137371 ; literal pool for: "xpcproxy"
0000000100014ac4	nop
0000000100014ac8	adr	x2, #140366 ; literal pool for: "Service could not initialize: %s: %s: %s + %llu [%llu][%s]: 0x%llx"
0000000100014acc	nop
0000000100014ad0	stp	x8, x9, [sp, #0x8]
0000000100014ad4	orr	w1, wzr, #0x3
0000000100014ad8	str	x27, [sp]
0000000100014adc	b	0x100014c58
0000000100014ae0	str	w25, [sp, #0x58]
0000000100014ae4	ldr	x8, [x20, #0x2d0]
0000000100014ae8	cbz	x8, 0x100014c18
0000000100014aec	mov	x25, #0x0
0000000100014af0	add	x26, sp, #0x90
0000000100014af4	orr	w27, wzr, #0x80
0000000100014af8	cmp	x27, #0x2
0000000100014afc	b.lo	0x100014b74
0000000100014b00	ldr	x8, [x20, #0x2c8]
0000000100014b04	ldr	w8, [x8, x25, lsl #2]
0000000100014b08	and	w10, w8, #0xfeffffff
0000000100014b0c	sub	w11, w10, #0x1
0000000100014b10	adr	x9, #140512 ; literal pool for: "(invalid)"
0000000100014b14	nop
0000000100014b18	cmp	w11, #0x11
0000000100014b1c	b.hi	0x100014b3c
0000000100014b20	tst	w8, #0x1000000
0000000100014b24	adr	x9, #184100
0000000100014b28	nop
0000000100014b2c	adr	x11, #184244
0000000100014b30	nop
0000000100014b34	csel	x9, x11, x9, eq
0000000100014b38	ldr	x9, [x9, w10, sxtw #3]
0000000100014b3c	stp	x8, x9, [sp]
0000000100014b40	mov	x3, #-0x1
0000000100014b44	mov	w2, #0x0
0000000100014b48	mov	x0, x26
0000000100014b4c	mov	x1, x27
0000000100014b50	adr	x4, #139988 ; literal pool for: "%u:%s "
0000000100014b54	nop
0000000100014b58	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100014b5c	sxtw	x8, w0
0000000100014b60	sub	x9, x27, #0x1
0000000100014b64	cmp	x27, w0, sxtw
0000000100014b68	csel	x9, x8, x9, hi
0000000100014b6c	ldr	x8, [x20, #0x2d0]
0000000100014b70	b	0x100014b78
0000000100014b74	mov	x9, #0x0
0000000100014b78	add	x26, x26, x9
0000000100014b7c	sub	x27, x27, x9
0000000100014b80	add	x25, x25, #0x1
0000000100014b84	cmp	x25, x8
0000000100014b88	b.lo	0x100014af8
0000000100014b8c	add	x8, sp, #0x90
0000000100014b90	str	x8, [sp]
0000000100014b94	adr	x2, #139927 ; literal pool for: "Program specified by service does not contain one of the requested architectures: %s"
0000000100014b98	nop
0000000100014b9c	b	0x100014c20
0000000100014ba0	str	wzr, [x24, #0x14]
0000000100014ba4	b	0x100014420
0000000100014ba8	ldr	x8, [x20, #0x268]
0000000100014bac	ldr	x9, [x20, #0x270]
0000000100014bb0	stp	x8, x9, [sp, #0x10]
0000000100014bb4	stp	x26, x0, [sp]
0000000100014bb8	adr	x2, #139678 ; literal pool for: "Could not find user/group associated with service: %d: %s %s/%s"
0000000100014bbc	nop
0000000100014bc0	orr	w1, wzr, #0x4
0000000100014bc4	mov	x0, x20
0000000100014bc8	bl	0x1000118ec
0000000100014bcc	mov	x25, x27
0000000100014bd0	cbnz	w25, 0x100014c64
0000000100014bd4	b	0x100014c84
0000000100014bd8	sub	x9, x29, #0x80
0000000100014bdc	stp	x9, x24, [sp, #0x20]
0000000100014be0	stp	x22, x23, [sp, #0x10]
0000000100014be4	adr	x9, #137079 ; literal pool for: "xpcproxy"
0000000100014be8	nop
0000000100014bec	stp	x8, x9, [sp]
0000000100014bf0	adr	x2, #140007 ; literal pool for: "Service could not initialize: %s: %s + %llu [%llu][%s]: 0x%llx"
0000000100014bf4	nop
0000000100014bf8	orr	w1, wzr, #0x3
0000000100014bfc	b	0x100014c58
0000000100014c00	tbz	w26, #0x1f, 0x100014c60
0000000100014c04	ldr	x8, [x20, #0x220]
0000000100014c08	stp	x26, x8, [sp]
0000000100014c0c	adr	x2, #139474 ; literal pool for: "Could not resolve CFBundleIdentifier specified by service: %d: %s"
0000000100014c10	nop
0000000100014c14	b	0x100014c54
0000000100014c18	adr	x2, #139880 ; literal pool for: "Program specified by service does not contain any valid architectures for this system."
0000000100014c1c	nop
0000000100014c20	orr	w1, wzr, #0x3
0000000100014c24	mov	x0, x20
0000000100014c28	bl	0x1000118ec
0000000100014c2c	ldr	w25, [sp, #0x58]
0000000100014c30	cbnz	w25, 0x100014c64
0000000100014c34	b	0x100014c84
0000000100014c38	mov	x0, x26
0000000100014c3c	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100014c40	ldr	x8, [x20, #0x220]
0000000100014c44	stp	x0, x8, [sp, #0x8]
0000000100014c48	str	x26, [sp]
0000000100014c4c	adr	x2, #139339 ; literal pool for: "Could not find and/or execute program specified by service: %d: %s: %s"
0000000100014c50	nop
0000000100014c54	orr	w1, wzr, #0x4
0000000100014c58	mov	x0, x20
0000000100014c5c	bl	0x1000118ec
0000000100014c60	cbz	w25, 0x100014c84
0000000100014c64	adr	x2, #140021 ; literal pool for: "Service setup event to handle failure and will not launch until it fires."
0000000100014c68	nop
0000000100014c6c	mov	w1, #0x5
0000000100014c70	mov	x0, x20
0000000100014c74	bl	0x1000118ec
0000000100014c78	ldr	x8, [x20, #0x458]
0000000100014c7c	orr	x8, x8, #0x200000
0000000100014c80	str	x8, [x20, #0x458]
0000000100014c84	adr	x8, #194556
0000000100014c88	nop
0000000100014c8c	ldrb	w8, [x8]
0000000100014c90	cbz	w8, 0x100014ca0
0000000100014c94	adr	x0, #140047 ; literal pool for: "xpcproxy failed"
0000000100014c98	nop
0000000100014c9c	bl	0x100028fa4
0000000100014ca0	ldrb	w8, [x20, #0x45c]
0000000100014ca4	tbz	w8, #0x7, 0x100014cb0
0000000100014ca8	mov	x0, x20
0000000100014cac	bl	0x100015c4c
0000000100014cb0	nop
0000000100014cb4	ldr	x0, #0x2f76c
0000000100014cb8	add	x8, x20, #0x460
0000000100014cbc	nop
0000000100014cc0	nop
0000000100014cc4	ldr	x9, #0x2e80c
0000000100014cc8	sub	x10, x29, #0x80
0000000100014ccc	stp	x22, x23, [sp, #0x18]
0000000100014cd0	stp	x10, x24, [sp, #0x28]
0000000100014cd4	adr	x10, #136839 ; literal pool for: "xpcproxy"
0000000100014cd8	nop
0000000100014cdc	adr	x2, #139991 ; literal pool for: "%s: initialization failure: %s: %s + %llu [%llu][%s]: 0x%llx"
0000000100014ce0	nop
0000000100014ce4	stp	x9, x10, [sp, #0x8]
0000000100014ce8	str	x8, [sp]
0000000100014cec	mov	w1, #0x0
0000000100014cf0	bl	0x1000270c8
0000000100014cf4	orr	w1, wzr, #0x4
0000000100014cf8	mov	x0, x20
0000000100014cfc	mov	x2, x24
0000000100014d00	bl	0x10001195c
0000000100014d04	mov	x0, x20
0000000100014d08	bl	0x10001213c
0000000100014d0c	mov	x0, x21
0000000100014d10	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100014d14	mov	w22, #0x0
0000000100014d18	str	x0, [x19]
0000000100014d1c	str	w22, [sp, #0x6c]
0000000100014d20	ldr	x8, [x28, #0x28]
0000000100014d24	nop
0000000100014d28	ldr	x9, #0x2b2f0 ; literal pool symbol address: ___stack_chk_guard
0000000100014d2c	ldr	x9, [x9]
0000000100014d30	cmp	x9, x8
0000000100014d34	b.ne	0x100014d5c
0000000100014d38	mov	x0, x22
0000000100014d3c	add	sp, sp, #0x4c0
0000000100014d40	ldp	x29, x30, [sp, #0x50]
0000000100014d44	ldp	x20, x19, [sp, #0x40]
0000000100014d48	ldp	x22, x21, [sp, #0x30]
0000000100014d4c	ldp	x24, x23, [sp, #0x20]
0000000100014d50	ldp	x26, x25, [sp, #0x10]
0000000100014d54	ldp	x28, x27, [sp], #0x60
0000000100014d58	ret
0000000100014d5c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100014d60	adr	x0, #140866 ; literal pool for: "deferral event on service waiting for controller"
0000000100014d64	nop
0000000100014d68	bl	0x100028f84
0000000100014d6c	ldr	x8, [x20, #0x218]
0000000100014d70	stp	x9, x8, [sp, #0x8]
0000000100014d74	adr	x4, #138739 ; literal pool for: "failed to marshall spawnattrs: offset = %u, left = %lu, expected = %lu"
0000000100014d78	nop
0000000100014d7c	str	x10, [sp]
0000000100014d80	add	x0, sp, #0x90
0000000100014d84	orr	w1, wzr, #0x400
0000000100014d88	orr	w3, wzr, #0x400
0000000100014d8c	mov	w2, #0x0
0000000100014d90	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100014d94	add	x0, sp, #0x90
0000000100014d98	bl	0x100028f84
0000000100014d9c	.long	0xffffdce4
0000000100014da0	.long	0xffffe01c
0000000100014da4	.long	0xffffe158
0000000100014da8	.long	0xffffdfc4
0000000100014dac	.long	0xffffdd80
0000000100014db0	.long	0xffffe1cc
0000000100014db4	.long	0xffffe448
0000000100014db8	.long	0xffffe18c
0000000100014dbc	.long	0xffffe534
0000000100014dc0	.long	0xffffe4ec
0000000100014dc4	.long	0xffffdf54
0000000100014dc8	.long	0xffffdff8
0000000100014dcc	.long	0xffffe3d8
0000000100014dd0	.long	0xffffdf0c
0000000100014dd4	.long	0xffffe108
0000000100014dd8	.long	0xffffdea8
0000000100014ddc	.long	0xffffe1b4
0000000100014de0	.long	0xffffe52c
0000000100014de4	.long	0xffffe484
0000000100014de8	.long	0xffffe56c
0000000100014dec	sub	sp, sp, #0x60
0000000100014df0	stp	x26, x25, [sp, #0x10]
0000000100014df4	stp	x24, x23, [sp, #0x20]
0000000100014df8	stp	x22, x21, [sp, #0x30]
0000000100014dfc	stp	x20, x19, [sp, #0x40]
0000000100014e00	stp	x29, x30, [sp, #0x50]
0000000100014e04	add	x29, sp, #0x50
0000000100014e08	mov	x19, x3
0000000100014e0c	mov	x20, x2
0000000100014e10	mov	x22, x1
0000000100014e14	bl	0x10002d3b4
0000000100014e18	ldr	w8, [x0, #0x14]
0000000100014e1c	adr	x21, #191100
0000000100014e20	nop
0000000100014e24	str	w8, [x21, #0x110]
0000000100014e28	bl	0x10001d8e4
0000000100014e2c	str	x0, [x21, #0xe0]
0000000100014e30	mov	w8, #-0x1
0000000100014e34	str	w8, [sp, #0xc]
0000000100014e38	add	x1, sp, #0xc
0000000100014e3c	mov	x0, x20
0000000100014e40	bl	0x10001829c
0000000100014e44	mov	x21, x0
0000000100014e48	ldr	w23, [sp, #0xc]
0000000100014e4c	cmp	w23, #0x24
0000000100014e50	b.ne	0x100014e5c
0000000100014e54	mov	w23, #0x0
0000000100014e58	b	0x100015224
0000000100014e5c	cmp	w22, #0x12d
0000000100014e60	b.ne	0x100014ec4
0000000100014e64	cmp	w23, #0x87
0000000100014e68	b.ne	0x100014ec4
0000000100014e6c	adr	x21, #191020
0000000100014e70	nop
0000000100014e74	ldr	x23, [x21, #0xe0]
0000000100014e78	mov	x0, x20
0000000100014e7c	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100014e80	cbz	w0, 0x100014ef0
0000000100014e84	adr	x1, #141425 ; literal pool for: "outgsk"
0000000100014e88	nop
0000000100014e8c	mov	x0, x20
0000000100014e90	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
0000000100014e94	mov	x22, #0x0
0000000100014e98	mov	w25, #0x2d
0000000100014e9c	cmp	x0, #0x1a
0000000100014ea0	b.hi	0x100015088
0000000100014ea4	adr	x8, #1128
0000000100014ea8	nop
0000000100014eac	ldrsw	x9, [x8, x0, lsl #2]
0000000100014eb0	add	x8, x9, x8
0000000100014eb4	br	x8
0000000100014eb8	mov	x22, #0x0
0000000100014ebc	orr	w25, wzr, #0x7e
0000000100014ec0	b	0x100015088
0000000100014ec4	cbz	x21, 0x100015224
0000000100014ec8	sub	w8, w22, #0x12c
0000000100014ecc	cmp	w8, #0x9
0000000100014ed0	b.hi	0x100014ef8
0000000100014ed4	adr	x9, #1040
0000000100014ed8	nop
0000000100014edc	ldrsw	x8, [x9, x8, lsl #2]
0000000100014ee0	add	x8, x8, x9
0000000100014ee4	br	x8
0000000100014ee8	mov	w23, #0x2d
0000000100014eec	b	0x100015220
0000000100014ef0	mov	w23, #0x16
0000000100014ef4	b	0x100015220
0000000100014ef8	mov	w23, #0x21
0000000100014efc	b	0x100015220
0000000100014f00	ldr	w8, [x21, #0x110]
0000000100014f04	cbnz	w8, 0x100015044
0000000100014f08	ldr	x8, [x21, #0x458]
0000000100014f0c	ubfx	x0, x8, #9, #1
0000000100014f10	b	0x10001507c
0000000100014f14	orr	w0, wzr, #0x20
0000000100014f18	b	0x10001507c
0000000100014f1c	bl	0x1000310d0 ; symbol stub for: _getpid
0000000100014f20	sxtw	x0, w0
0000000100014f24	b	0x10001507c
0000000100014f28	ldr	w8, [x21, #0x110]
0000000100014f2c	cbnz	w8, 0x100015044
0000000100014f30	ldr	x8, [x21, #0x458]
0000000100014f34	ubfx	x0, x8, #17, #1
0000000100014f38	b	0x10001507c
0000000100014f3c	bl	0x10001d8e4
0000000100014f40	cmp	x23, x0
0000000100014f44	b.eq	0x100015050
0000000100014f48	mov	x22, #0x0
0000000100014f4c	mov	w25, #0x7d
0000000100014f50	b	0x100015088
0000000100014f54	ldr	w8, [x21, #0x110]
0000000100014f58	cbnz	w8, 0x100015044
0000000100014f5c	ldrb	w8, [x21, #0x45c]
0000000100014f60	tbnz	w8, #0x3, 0x100015068
0000000100014f64	mov	x22, #0x0
0000000100014f68	orr	w25, wzr, #0x3
0000000100014f6c	b	0x100015088
0000000100014f70	bl	0x100031124 ; symbol stub for: _getuid
0000000100014f74	mov	w0, w0
0000000100014f78	b	0x10001507c
0000000100014f7c	mov	x22, #0x0
0000000100014f80	b	0x100015084
0000000100014f84	ldr	w8, [x21, #0x110]
0000000100014f88	cbnz	w8, 0x100015044
0000000100014f8c	ldr	w8, [x21, #0x358]
0000000100014f90	cmp	w8, #0x2
0000000100014f94	b.eq	0x100015070
0000000100014f98	cbnz	w8, 0x100015078
0000000100014f9c	mov	x0, #0x0
0000000100014fa0	b	0x10001507c
0000000100014fa4	ldr	w8, [x21, #0x110]
0000000100014fa8	cbnz	w8, 0x100015044
0000000100014fac	ldr	x8, [x21, #0x458]
0000000100014fb0	ubfx	x0, x8, #3, #1
0000000100014fb4	b	0x10001507c
0000000100014fb8	ldr	w8, [x21, #0x110]
0000000100014fbc	cbnz	w8, 0x100015044
0000000100014fc0	ldr	w0, [x21, #0x2b0]
0000000100014fc4	b	0x10001507c
0000000100014fc8	ldr	w8, [x21, #0x110]
0000000100014fcc	cbnz	w8, 0x100015044
0000000100014fd0	ldr	x8, [x21, #0x458]
0000000100014fd4	ubfx	x0, x8, #12, #1
0000000100014fd8	b	0x10001507c
0000000100014fdc	ldr	w8, [x21, #0x110]
0000000100014fe0	cbnz	w8, 0x100015044
0000000100014fe4	mov	x0, #0x0
0000000100014fe8	mov	x1, #0x0
0000000100014fec	mov	x2, #0x0
0000000100014ff0	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100014ff4	mov	x22, x0
0000000100014ff8	ldr	x25, [x21, #0x300]
0000000100014ffc	cbz	x25, 0x100015088
0000000100015000	mov	w26, #0x3d
0000000100015004	add	x23, x25, #0x18
0000000100015008	mov	w1, #0x3d
000000010001500c	mov	x0, x23
0000000100015010	bl	0x100031784 ; symbol stub for: _strrchr
0000000100015014	mov	x24, x0
0000000100015018	mov	x2, x24
000000010001501c	strb	wzr, [x2], #0x1
0000000100015020	mov	x0, x22
0000000100015024	mov	x1, x23
0000000100015028	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
000000010001502c	strb	w26, [x24]
0000000100015030	ldr	x25, [x25]
0000000100015034	cbnz	x25, 0x100015004
0000000100015038	b	0x100015088
000000010001503c	ldr	w8, [x21, #0x110]
0000000100015040	cbz	w8, 0x100015060
0000000100015044	mov	x22, #0x0
0000000100015048	mov	w25, #0x87
000000010001504c	b	0x100015088
0000000100015050	adr	x0, #129755 ; literal pool for: "System"
0000000100015054	nop
0000000100015058	bl	0x100031b98 ; symbol stub for: _xpc_string_create
000000010001505c	b	0x100015080
0000000100015060	ldr	w0, [x21, #0x288]
0000000100015064	b	0x10001507c
0000000100015068	ldrh	w0, [x21, #0x278]
000000010001506c	b	0x10001507c
0000000100015070	mov	w0, #0xb
0000000100015074	b	0x10001507c
0000000100015078	ldrsw	x0, [x21, #0x374]
000000010001507c	bl	0x100031b44 ; symbol stub for: _xpc_int64_create
0000000100015080	mov	x22, x0
0000000100015084	mov	w25, #0x0
0000000100015088	adr	x1, #140916 ; literal pool for: "ingsk"
000000010001508c	nop
0000000100015090	mov	x0, x20
0000000100015094	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
0000000100015098	mov	x24, x0
000000010001509c	cbnz	w25, 0x1000150ac
00000001000150a0	cbz	x24, 0x1000150ac
00000001000150a4	ldr	w8, [x21, #0x110]
00000001000150a8	cbz	w8, 0x1000150c0
00000001000150ac	cbz	x24, 0x1000151c8
00000001000150b0	ldr	w8, [x21, #0x110]
00000001000150b4	cbz	w8, 0x1000151c8
00000001000150b8	mov	w8, #0x87
00000001000150bc	b	0x1000151cc
00000001000150c0	adr	x1, #140866 ; literal pool for: "in"
00000001000150c4	nop
00000001000150c8	mov	x0, x20
00000001000150cc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000150d0	mov	x23, x0
00000001000150d4	cbz	x23, 0x1000151c8
00000001000150d8	mov	w8, #0x2d
00000001000150dc	sub	x9, x24, #0x2
00000001000150e0	cmp	x9, #0x15
00000001000150e4	b.hi	0x1000151cc
00000001000150e8	adr	x10, #656
00000001000150ec	nop
00000001000150f0	ldrsw	x9, [x10, x9, lsl #2]
00000001000150f4	add	x9, x9, x10
00000001000150f8	br	x9
00000001000150fc	orr	w8, wzr, #0x7e
0000000100015100	b	0x1000151cc
0000000100015104	mov	x0, x23
0000000100015108	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001510c	nop
0000000100015110	ldr	x8, #0x2afc0 ; literal pool symbol address: __xpc_type_int64
0000000100015114	cmp	x0, x8
0000000100015118	b.ne	0x100015298
000000010001511c	mov	x0, x23
0000000100015120	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100015124	mov	w8, #0x0
0000000100015128	cmp	x0, #0x0
000000010001512c	cset	w9, ne
0000000100015130	ldr	x10, [x21, #0x458]
0000000100015134	bfi	x10, x9, #3, #1
0000000100015138	b	0x1000151a8
000000010001513c	mov	x0, x23
0000000100015140	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100015144	nop
0000000100015148	ldr	x8, #0x2af88 ; literal pool symbol address: __xpc_type_int64
000000010001514c	cmp	x0, x8
0000000100015150	b.ne	0x100015298
0000000100015154	ldr	x8, [x21, #0x458]
0000000100015158	orr	x8, x8, #0x800000000
000000010001515c	str	x8, [x21, #0x458]
0000000100015160	mov	x0, x23
0000000100015164	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100015168	mov	w8, #0x0
000000010001516c	strh	w0, [x21, #0x278]
0000000100015170	b	0x1000151cc
0000000100015174	mov	x0, x23
0000000100015178	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001517c	nop
0000000100015180	ldr	x8, #0x2af50 ; literal pool symbol address: __xpc_type_int64
0000000100015184	cmp	x0, x8
0000000100015188	b.eq	0x100015298
000000010001518c	mov	x0, x23
0000000100015190	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100015194	mov	w8, #0x0
0000000100015198	cmp	x0, #0x0
000000010001519c	cset	w9, ne
00000001000151a0	ldr	x10, [x21, #0x458]
00000001000151a4	bfi	x10, x9, #17, #1
00000001000151a8	str	x10, [x21, #0x458]
00000001000151ac	b	0x1000151cc
00000001000151b0	mov	x0, x23
00000001000151b4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000151b8	nop
00000001000151bc	ldr	x8, #0x2af14 ; literal pool symbol address: __xpc_type_int64
00000001000151c0	cmp	x0, x8
00000001000151c4	b.eq	0x1000152a0
00000001000151c8	mov	w8, #0x0
00000001000151cc	orr	w9, w8, w25
00000001000151d0	cbz	w9, 0x1000151ec
00000001000151d4	cmp	w8, #0x0
00000001000151d8	csel	w23, w25, w8, eq
00000001000151dc	cbz	x22, 0x100015220
00000001000151e0	mov	x0, x22
00000001000151e4	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000151e8	b	0x100015220
00000001000151ec	mov	x0, x20
00000001000151f0	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
00000001000151f4	mov	x20, x0
00000001000151f8	cbz	x22, 0x100015218
00000001000151fc	adr	x1, #140553 ; literal pool for: "out"
0000000100015200	nop
0000000100015204	mov	x0, x20
0000000100015208	mov	x2, x22
000000010001520c	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100015210	mov	x0, x22
0000000100015214	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100015218	mov	w23, #0x0
000000010001521c	str	x20, [x19]
0000000100015220	str	w23, [sp, #0xc]
0000000100015224	mov	x0, x23
0000000100015228	ldp	x29, x30, [sp, #0x50]
000000010001522c	ldp	x20, x19, [sp, #0x40]
0000000100015230	ldp	x22, x21, [sp, #0x30]
0000000100015234	ldp	x24, x23, [sp, #0x20]
0000000100015238	ldp	x26, x25, [sp, #0x10]
000000010001523c	add	sp, sp, #0x60
0000000100015240	ret
0000000100015244	mov	x0, x23
0000000100015248	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001524c	nop
0000000100015250	ldr	x8, #0x2ae80 ; literal pool symbol address: __xpc_type_int64
0000000100015254	cmp	x0, x8
0000000100015258	b.ne	0x100015298
000000010001525c	ldr	w8, [x21, #0x330]
0000000100015260	cbz	w8, 0x1000151cc
0000000100015264	ldr	x8, [x21, #0x2a8]
0000000100015268	cbnz	x8, 0x1000152d4
000000010001526c	mov	x0, x23
0000000100015270	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100015274	mov	w8, #0x0
0000000100015278	str	w0, [x21, #0x2b0]
000000010001527c	b	0x1000151cc
0000000100015280	mov	x0, x23
0000000100015284	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100015288	nop
000000010001528c	ldr	x8, #0x2ae44 ; literal pool symbol address: __xpc_type_int64
0000000100015290	cmp	x0, x8
0000000100015294	b.eq	0x1000152c0
0000000100015298	mov	w8, #0x16
000000010001529c	b	0x1000151cc
00000001000152a0	mov	x0, x23
00000001000152a4	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
00000001000152a8	cbz	x0, 0x1000151c8
00000001000152ac	mov	w8, #0x0
00000001000152b0	ldr	x9, [x21, #0x458]
00000001000152b4	orr	x9, x9, #0x200
00000001000152b8	str	x9, [x21, #0x458]
00000001000152bc	b	0x1000151cc
00000001000152c0	mov	x0, x23
00000001000152c4	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
00000001000152c8	mov	w8, #0x0
00000001000152cc	str	w0, [x21, #0x288]
00000001000152d0	b	0x1000151cc
00000001000152d4	mov	x0, #0x0
00000001000152d8	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000152dc	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000152e0	brk	#0x1
00000001000152e4	.long	0xfffffc04
00000001000152e8	.long	0xfffffb90
00000001000152ec	.long	0xfffffc04
00000001000152f0	.long	0xfffffc04
00000001000152f4	.long	0xfffffc04
00000001000152f8	.long	0xfffffc04
00000001000152fc	.long	0xfffffc04
0000000100015300	.long	0xfffffc04
0000000100015304	.long	0xfffffc04
0000000100015308	.long	0xfffffc04
000000010001530c	.long	0xfffffc70
0000000100015310	.long	0xfffffc78
0000000100015314	.long	0xfffffd7c
0000000100015318	.long	0xfffffc64
000000010001531c	.long	0xfffffc10
0000000100015320	.long	0xfffffd7c
0000000100015324	.long	0xfffffc30
0000000100015328	.long	0xfffffc98
000000010001532c	.long	0xfffffcac
0000000100015330	.long	0xfffffc90
0000000100015334	.long	0xfffffd30
0000000100015338	.long	0xfffffcd0
000000010001533c	.long	0xfffffbac
0000000100015340	.long	0xfffffc08
0000000100015344	.long	0xfffffc48
0000000100015348	.long	0xfffffc1c
000000010001534c	.long	0xfffffbf4
0000000100015350	.long	0xfffffd7c
0000000100015354	.long	0xfffffcbc
0000000100015358	.long	0xfffffd7c
000000010001535c	.long	0xfffffd7c
0000000100015360	.long	0xfffffd7c
0000000100015364	.long	0xfffffd7c
0000000100015368	.long	0xfffffd7c
000000010001536c	.long	0xfffffbac
0000000100015370	.long	0xfffffd7c
0000000100015374	.long	0xfffffbac
0000000100015378	.long	0xfffffe50
000000010001537c	.long	0xfffffe54
0000000100015380	.long	0xfffffe54
0000000100015384	.long	0xfffffe54
0000000100015388	.long	0xfffffe54
000000010001538c	.long	0xfffffd8c
0000000100015390	.long	0xfffffecc
0000000100015394	.long	0xfffffe54
0000000100015398	.long	0xffffff08
000000010001539c	.long	0xfffffe54
00000001000153a0	.long	0xfffffe54
00000001000153a4	.long	0xfffffe50
00000001000153a8	.long	0xfffffdc4
00000001000153ac	.long	0xfffffdfc
00000001000153b0	.long	0xfffffe38
00000001000153b4	.long	0xfffffd84
00000001000153b8	.long	0xfffffd84
00000001000153bc	.long	0xfffffe54
00000001000153c0	.long	0xfffffe54
00000001000153c4	.long	0xfffffe54
00000001000153c8	.long	0xfffffd84
00000001000153cc	.long	0xfffffd84
00000001000153d0	sub	sp, sp, #0x30
00000001000153d4	stp	x20, x19, [sp, #0x10]
00000001000153d8	stp	x29, x30, [sp, #0x20]
00000001000153dc	add	x29, sp, #0x20
00000001000153e0	mov	x19, x1
00000001000153e4	mov	w8, #-0x1
00000001000153e8	str	w8, [sp, #0xc]
00000001000153ec	add	x1, sp, #0xc
00000001000153f0	mov	x0, x2
00000001000153f4	bl	0x10001829c
00000001000153f8	mov	x8, x0
00000001000153fc	ldr	w0, [sp, #0xc]
0000000100015400	cmp	w0, #0x24
0000000100015404	b.ne	0x100015410
0000000100015408	mov	w0, #0x0
000000010001540c	b	0x10001543c
0000000100015410	cbz	x8, 0x10001543c
0000000100015414	sub	w8, w19, #0x1f4
0000000100015418	cmp	w8, #0x4
000000010001541c	b.hi	0x10001544c
0000000100015420	adr	x9, #52
0000000100015424	nop
0000000100015428	ldrsw	x8, [x9, x8, lsl #2]
000000010001542c	add	x8, x8, x9
0000000100015430	br	x8
0000000100015434	orr	w0, wzr, #0x7e
0000000100015438	str	w0, [sp, #0xc]
000000010001543c	ldp	x29, x30, [sp, #0x20]
0000000100015440	ldp	x20, x19, [sp, #0x10]
0000000100015444	add	sp, sp, #0x30
0000000100015448	ret
000000010001544c	mov	w0, #0x21
0000000100015450	b	0x100015438
0000000100015454	.long	0xffffffe0
0000000100015458	.long	0xffffffe0
000000010001545c	.long	0xffffffe0
0000000100015460	.long	0xffffffe0
0000000100015464	.long	0xffffffe0
0000000100015468	ldr	w8, [x0, #0x110]
000000010001546c	cbnz	w8, 0x10001547c
0000000100015470	ldrb	w8, [x0, #0x45d]
0000000100015474	ubfx	w0, w8, #4, #1
0000000100015478	ret
000000010001547c	stp	x29, x30, [sp, #-0x10]!
0000000100015480	mov	x29, sp
0000000100015484	adr	x0, #121659 ; literal pool for: "unmanaged service given to service interface"
0000000100015488	nop
000000010001548c	bl	0x100028f84
0000000100015490	sub	sp, sp, #0x20
0000000100015494	stp	x29, x30, [sp, #0x10]
0000000100015498	add	x29, sp, #0x10
000000010001549c	stur	w0, [x29, #-0x4]
00000001000154a0	sub	x0, x29, #0x4
00000001000154a4	orr	w1, wzr, #0x4
00000001000154a8	bl	0x10000d840
00000001000154ac	mov	x8, #0x1353
00000001000154b0	movk	x8, #0xb78c, lsl #16
00000001000154b4	movk	x8, #0xcfb2, lsl #32
00000001000154b8	movk	x8, #0x3521, lsl #48
00000001000154bc	umulh	x8, x0, x8
00000001000154c0	sub	x9, x0, x8
00000001000154c4	add	x8, x8, x9, lsr #1
00000001000154c8	lsr	x8, x8, #5
00000001000154cc	mov	w9, #0x35
00000001000154d0	msub	x8, x8, x9, x0
00000001000154d4	adr	x9, #188956
00000001000154d8	nop
00000001000154dc	ldr	x0, [x9, x8, lsl #3]
00000001000154e0	cbz	x0, 0x1000154fc
00000001000154e4	ldur	w8, [x29, #-0x4]
00000001000154e8	ldr	w9, [x0, #0x330]
00000001000154ec	cmp	w9, w8
00000001000154f0	b.eq	0x1000154fc
00000001000154f4	ldr	x0, [x0, #0x8]
00000001000154f8	cbnz	x0, 0x1000154e8
00000001000154fc	ldp	x29, x30, [sp, #0x10]
0000000100015500	add	sp, sp, #0x20
0000000100015504	ret
0000000100015508	stp	x20, x19, [sp, #-0x20]!
000000010001550c	stp	x29, x30, [sp, #0x10]
0000000100015510	add	x29, sp, #0x10
0000000100015514	mov	x19, x0
0000000100015518	ldr	w8, [x19, #0x110]
000000010001551c	cbnz	w8, 0x100015568
0000000100015520	ldr	w8, [x19, #0x330]
0000000100015524	cbnz	w8, 0x10001555c
0000000100015528	ldrb	w8, [x19, #0x134]
000000010001552c	tbnz	w8, #0x4, 0x10001555c
0000000100015530	mov	x0, x19
0000000100015534	bl	0x100011a98
0000000100015538	cbz	w0, 0x10001555c
000000010001553c	ldr	x8, [x19, #0x458]
0000000100015540	and	x8, x8, #0xffffffffffbfffff
0000000100015544	str	x8, [x19, #0x458]
0000000100015548	mov	x1, x0
000000010001554c	mov	x0, x19
0000000100015550	ldp	x29, x30, [sp, #0x10]
0000000100015554	ldp	x20, x19, [sp], #0x20
0000000100015558	b	0x100010bb8
000000010001555c	ldp	x29, x30, [sp, #0x10]
0000000100015560	ldp	x20, x19, [sp], #0x20
0000000100015564	ret
0000000100015568	adr	x0, #121431 ; literal pool for: "unmanaged service given to service interface"
000000010001556c	nop
0000000100015570	bl	0x100028f84
0000000100015574	sub	sp, sp, #0x40
0000000100015578	stp	x22, x21, [sp, #0x10]
000000010001557c	stp	x20, x19, [sp, #0x20]
0000000100015580	stp	x29, x30, [sp, #0x30]
0000000100015584	add	x29, sp, #0x30
0000000100015588	mov	x20, x1
000000010001558c	mov	x19, x0
0000000100015590	ldr	w8, [x19, #0x110]
0000000100015594	cbnz	w8, 0x10001567c
0000000100015598	cmp	w20, #0xb
000000010001559c	b.ne	0x1000155d8
00000001000155a0	ldr	x8, [x19, #0x458]
00000001000155a4	tbz	w8, #0x15, 0x100015688
00000001000155a8	add	x21, x19, #0x458
00000001000155ac	and	x8, x8, #0xffffffffffdfffff
00000001000155b0	str	x8, [x19, #0x458]
00000001000155b4	nop
00000001000155b8	ldr	x0, #0x2ee68
00000001000155bc	add	x8, x19, #0x460
00000001000155c0	str	x8, [sp]
00000001000155c4	adr	x2, #133602 ; literal pool for: "%s: retry launch"
00000001000155c8	nop
00000001000155cc	mov	w1, #0x0
00000001000155d0	bl	0x1000270c8
00000001000155d4	b	0x100015610
00000001000155d8	ldr	w8, [x19, #0x170]
00000001000155dc	cmp	w8, #0x1
00000001000155e0	b.ne	0x10001560c
00000001000155e4	nop
00000001000155e8	ldr	x0, #0x2ee38
00000001000155ec	add	x8, x19, #0x460
00000001000155f0	str	x8, [sp]
00000001000155f4	adr	x2, #133571 ; literal pool for: "%s: launch already in progress"
00000001000155f8	nop
00000001000155fc	mov	w1, #0x0
0000000100015600	bl	0x1000270c8
0000000100015604	mov	w0, #0x24
0000000100015608	b	0x10001564c
000000010001560c	add	x21, x19, #0x458
0000000100015610	ldrb	w8, [x21, #0x2]
0000000100015614	tbnz	w8, #0x5, 0x100015628
0000000100015618	ldr	w8, [x19, #0x330]
000000010001561c	cbz	w8, 0x100015660
0000000100015620	mov	w0, #0x25
0000000100015624	b	0x10001564c
0000000100015628	nop
000000010001562c	ldr	x0, #0x2edf4
0000000100015630	add	x8, x19, #0x460
0000000100015634	str	x8, [sp]
0000000100015638	adr	x2, #133534 ; literal pool for: "%s: attempt to launch while in penalty box"
000000010001563c	nop
0000000100015640	mov	w1, #0x0
0000000100015644	bl	0x1000270c8
0000000100015648	mov	w0, #0x8b
000000010001564c	ldp	x29, x30, [sp, #0x30]
0000000100015650	ldp	x20, x19, [sp, #0x20]
0000000100015654	ldp	x22, x21, [sp, #0x10]
0000000100015658	add	sp, sp, #0x40
000000010001565c	ret
0000000100015660	mov	x1, x20
0000000100015664	mov	x0, x19
0000000100015668	ldp	x29, x30, [sp, #0x30]
000000010001566c	ldp	x20, x19, [sp, #0x20]
0000000100015670	ldp	x22, x21, [sp, #0x10]
0000000100015674	add	sp, sp, #0x40
0000000100015678	b	0x100010bb8
000000010001567c	adr	x0, #121155 ; literal pool for: "unmanaged service given to service interface"
0000000100015680	nop
0000000100015684	bl	0x100028f84
0000000100015688	adr	x0, #133360 ; literal pool for: "retry launch on service that was not deferred"
000000010001568c	nop
0000000100015690	bl	0x100028f84
0000000100015694	sub	sp, sp, #0x40
0000000100015698	stp	x22, x21, [sp, #0x10]
000000010001569c	stp	x20, x19, [sp, #0x20]
00000001000156a0	stp	x29, x30, [sp, #0x30]
00000001000156a4	add	x29, sp, #0x30
00000001000156a8	mov	x19, x0
00000001000156ac	ldr	w8, [x19, #0x110]
00000001000156b0	cbnz	w8, 0x100015898
00000001000156b4	ldrb	w8, [x19, #0x134]
00000001000156b8	tbz	w8, #0x4, 0x1000156e4
00000001000156bc	ldr	x20, [x19, #0xa0]
00000001000156c0	cbz	x20, 0x1000156e4
00000001000156c4	ldr	x21, [x20, #0x8]
00000001000156c8	mov	x0, x20
00000001000156cc	bl	0x1000282a8
00000001000156d0	mov	w1, #0x0
00000001000156d4	mov	x0, x20
00000001000156d8	bl	0x10000e4a4
00000001000156dc	mov	x20, x21
00000001000156e0	cbnz	x21, 0x1000156c4
00000001000156e4	ldr	w8, [x19, #0x170]
00000001000156e8	cmp	w8, #0x1
00000001000156ec	b.ne	0x10001573c
00000001000156f0	str	wzr, [x19, #0x170]
00000001000156f4	ldrb	w8, [x19, #0x45a]
00000001000156f8	tbnz	w8, #0x5, 0x1000157a8
00000001000156fc	ldr	x8, [x19, #0x280]
0000000100015700	cbz	x8, 0x1000157fc
0000000100015704	orr	w1, wzr, #0x18
0000000100015708	mov	x0, x19
000000010001570c	bl	0x10000e824
0000000100015710	ldr	x0, [x19, #0x280]
0000000100015714	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100015718	str	xzr, [x19, #0x280]
000000010001571c	str	wzr, [x19, #0x27c]
0000000100015720	nop
0000000100015724	ldr	x0, #0x2ecfc
0000000100015728	add	x8, x19, #0x460
000000010001572c	str	x8, [sp]
0000000100015730	adr	x2, #133361 ; literal pool for: "%s: canceling throttled spawn"
0000000100015734	nop
0000000100015738	b	0x1000157f4
000000010001573c	ldr	w9, [x19, #0x330]
0000000100015740	cbz	w9, 0x100015814
0000000100015744	cmp	w8, #0x6
0000000100015748	b.ne	0x10001583c
000000010001574c	ldr	x8, [x19, #0x1d8]
0000000100015750	ldr	x1, [x19, #0x200]
0000000100015754	mov	x0, x19
0000000100015758	blr	x8
000000010001575c	mov	x20, x0
0000000100015760	nop
0000000100015764	ldr	x0, #0x2ecbc
0000000100015768	add	x8, x19, #0x460
000000010001576c	cbz	w20, 0x100015858
0000000100015770	stp	x8, x20, [sp]
0000000100015774	adr	x2, #133396 ; literal pool for: "%s: cannot abandon languishing service: %d"
0000000100015778	nop
000000010001577c	mov	w1, #0x0
0000000100015780	bl	0x1000270c8
0000000100015784	mov	x0, x20
0000000100015788	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010001578c	stp	x20, x0, [sp]
0000000100015790	adr	x2, #133411 ; literal pool for: "Cannot abandon languishing service: %d: %s"
0000000100015794	nop
0000000100015798	orr	w1, wzr, #0x4
000000010001579c	mov	x0, x19
00000001000157a0	bl	0x1000118ec
00000001000157a4	b	0x100015880
00000001000157a8	ldr	x20, [x19, #0x98]
00000001000157ac	cbz	x20, 0x1000157dc
00000001000157b0	ldr	x21, [x20, #0x8]
00000001000157b4	mov	x0, x20
00000001000157b8	bl	0x100028778
00000001000157bc	cbz	w0, 0x1000157d4
00000001000157c0	mov	x0, x20
00000001000157c4	bl	0x100028784
00000001000157c8	mov	w1, #0x0
00000001000157cc	mov	x0, x20
00000001000157d0	bl	0x10000e4a4
00000001000157d4	mov	x20, x21
00000001000157d8	cbnz	x21, 0x1000157b0
00000001000157dc	nop
00000001000157e0	ldr	x0, #0x2ec40
00000001000157e4	add	x8, x19, #0x460
00000001000157e8	str	x8, [sp]
00000001000157ec	adr	x2, #133141 ; literal pool for: "%s: canceling penalty-box spawn"
00000001000157f0	nop
00000001000157f4	mov	w1, #0x0
00000001000157f8	bl	0x1000270c8
00000001000157fc	mov	w20, #0x59
0000000100015800	orr	w1, wzr, #0x1
0000000100015804	mov	w2, #0x59
0000000100015808	mov	x0, x19
000000010001580c	bl	0x10001195c
0000000100015810	b	0x100015880
0000000100015814	nop
0000000100015818	ldr	x0, #0x2ec08
000000010001581c	add	x8, x19, #0x460
0000000100015820	str	x8, [sp]
0000000100015824	adr	x2, #133147 ; literal pool for: "%s: service not running, not stopping"
0000000100015828	nop
000000010001582c	mov	w1, #0x0
0000000100015830	bl	0x1000270c8
0000000100015834	mov	w20, #0x25
0000000100015838	b	0x100015880
000000010001583c	mov	w1, #0x0
0000000100015840	mov	x0, x19
0000000100015844	ldp	x29, x30, [sp, #0x30]
0000000100015848	ldp	x20, x19, [sp, #0x20]
000000010001584c	ldp	x22, x21, [sp, #0x10]
0000000100015850	add	sp, sp, #0x40
0000000100015854	b	0x1000158a4
0000000100015858	str	x8, [sp]
000000010001585c	adr	x2, #133129 ; literal pool for: "%s: abandoning languishing service"
0000000100015860	nop
0000000100015864	mov	w1, #0x0
0000000100015868	bl	0x1000270c8
000000010001586c	ldrh	w8, [x19, #0x354]
0000000100015870	orr	w8, w8, #0x20
0000000100015874	strh	w8, [x19, #0x354]
0000000100015878	mov	x0, x19
000000010001587c	bl	0x1000121ec
0000000100015880	mov	x0, x20
0000000100015884	ldp	x29, x30, [sp, #0x30]
0000000100015888	ldp	x20, x19, [sp, #0x20]
000000010001588c	ldp	x22, x21, [sp, #0x10]
0000000100015890	add	sp, sp, #0x40
0000000100015894	ret
0000000100015898	adr	x0, #120615 ; literal pool for: "unmanaged service given to service interface"
000000010001589c	nop
00000001000158a0	bl	0x100028f84
00000001000158a4	sub	sp, sp, #0xa0
00000001000158a8	stp	x24, x23, [sp, #0x60]
00000001000158ac	stp	x22, x21, [sp, #0x70]
00000001000158b0	stp	x20, x19, [sp, #0x80]
00000001000158b4	stp	x29, x30, [sp, #0x90]
00000001000158b8	add	x29, sp, #0x90
00000001000158bc	mov	x20, x1
00000001000158c0	mov	x19, x0
00000001000158c4	nop
00000001000158c8	ldr	x8, #0x2a750 ; literal pool symbol address: ___stack_chk_guard
00000001000158cc	ldr	x8, [x8]
00000001000158d0	stur	x8, [x29, #-0x38]
00000001000158d4	ldr	w8, [x19, #0x170]
00000001000158d8	cmp	w8, #0x4
00000001000158dc	b.lt	0x100015908
00000001000158e0	nop
00000001000158e4	ldr	x0, #0x2eb3c
00000001000158e8	add	x8, x19, #0x460
00000001000158ec	str	x8, [sp]
00000001000158f0	adr	x2, #138777 ; literal pool for: "%s: service already stopped"
00000001000158f4	nop
00000001000158f8	mov	w1, #0x0
00000001000158fc	bl	0x1000270c8
0000000100015900	mov	w20, #0x25
0000000100015904	b	0x100015bdc
0000000100015908	ldrb	w8, [x19, #0x354]
000000010001590c	tbnz	w8, #0x1, 0x1000159a4
0000000100015910	ldr	w0, [x19, #0x330]
0000000100015914	add	x1, sp, #0x18
0000000100015918	bl	0x10003158c ; symbol stub for: _proc_terminate
000000010001591c	ldr	w0, [x19, #0x330]
0000000100015920	mov	w20, #0x9
0000000100015924	mov	w1, #0x9
0000000100015928	bl	0x1000311a8 ; symbol stub for: _kill
000000010001592c	cbz	w0, 0x1000159b8
0000000100015930	bl	0x100030adc ; symbol stub for: ___error
0000000100015934	ldrsw	x20, [x0]
0000000100015938	nop
000000010001593c	ldr	x21, #0x2eae4
0000000100015940	add	x22, x19, #0x460
0000000100015944	mov	x0, x20
0000000100015948	bl	0x100031724 ; symbol stub for: _strerror
000000010001594c	stp	x20, x0, [sp, #0x8]
0000000100015950	str	x22, [sp]
0000000100015954	adr	x2, #138799 ; literal pool for: "%s: could not kill trampoline: %d: %s"
0000000100015958	nop
000000010001595c	mov	w1, #0x0
0000000100015960	mov	x0, x21
0000000100015964	bl	0x1000270c8
0000000100015968	cbz	w20, 0x100015aa0
000000010001596c	cmp	w20, #0x3
0000000100015970	b.ne	0x1000159fc
0000000100015974	ldr	w0, [x19, #0x330]
0000000100015978	add	x1, sp, #0x18
000000010001597c	bl	0x100029340
0000000100015980	mov	x20, x0
0000000100015984	cbz	w20, 0x100015bdc
0000000100015988	sxtw	x2, w20
000000010001598c	adr	x0, #-15332
0000000100015990	nop
0000000100015994	mov	x1, x19
0000000100015998	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001599c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000159a0	b	0x100015bdc
00000001000159a4	cbz	w20, 0x1000159e0
00000001000159a8	adr	x2, #138621 ; literal pool for: "force-kill"
00000001000159ac	nop
00000001000159b0	mov	x1, x20
00000001000159b4	b	0x100015a30
00000001000159b8	str	w20, [x19, #0x34c]
00000001000159bc	nop
00000001000159c0	ldr	x20, #0x2ea60
00000001000159c4	add	x21, x19, #0x460
00000001000159c8	mov	w0, #0x9
00000001000159cc	bl	0x10003179c ; symbol stub for: _strsignal
00000001000159d0	stp	x21, x0, [sp]
00000001000159d4	adr	x2, #138709 ; literal pool for: "%s: signaled trampline: %s"
00000001000159d8	nop
00000001000159dc	b	0x100015a94
00000001000159e0	ldrb	w8, [x19, #0x45e]
00000001000159e4	tbnz	w8, #0x0, 0x100015a20
00000001000159e8	ldr	w0, [x19, #0x330]
00000001000159ec	add	x1, x19, #0x34c
00000001000159f0	bl	0x10003158c ; symbol stub for: _proc_terminate
00000001000159f4	mov	x21, x0
00000001000159f8	b	0x100015a40
00000001000159fc	adr	x0, #-15444
0000000100015a00	nop
0000000100015a04	mov	x1, x19
0000000100015a08	mov	x2, x20
0000000100015a0c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100015a10	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100015a14	neg	w8, w20
0000000100015a18	str	w8, [x19, #0x34c]
0000000100015a1c	b	0x100015bdc
0000000100015a20	adr	x2, #138512 ; literal pool for: "requested SIGTERM"
0000000100015a24	nop
0000000100015a28	orr	w20, wzr, #0xf
0000000100015a2c	orr	w1, wzr, #0xf
0000000100015a30	mov	x0, x19
0000000100015a34	bl	0x1000188a8
0000000100015a38	mov	x21, x0
0000000100015a3c	str	w20, [x19, #0x34c]
0000000100015a40	nop
0000000100015a44	ldr	x20, #0x2e9dc
0000000100015a48	add	x22, x19, #0x460
0000000100015a4c	cbz	w21, 0x100015a80
0000000100015a50	mov	x0, x21
0000000100015a54	bl	0x100031724 ; symbol stub for: _strerror
0000000100015a58	stp	x21, x0, [sp, #0x8]
0000000100015a5c	str	x22, [sp]
0000000100015a60	adr	x2, #138466 ; literal pool for: "%s: could not terminate service: %d: %s"
0000000100015a64	nop
0000000100015a68	mov	w1, #0x0
0000000100015a6c	mov	x0, x20
0000000100015a70	bl	0x1000270c8
0000000100015a74	mov	w8, #0x9
0000000100015a78	str	w8, [x19, #0x34c]
0000000100015a7c	b	0x100015aa0
0000000100015a80	ldr	w0, [x19, #0x34c]
0000000100015a84	bl	0x10003179c ; symbol stub for: _strsignal
0000000100015a88	stp	x22, x0, [sp]
0000000100015a8c	adr	x2, #138462 ; literal pool for: "%s: signaled service: %s"
0000000100015a90	nop
0000000100015a94	mov	w1, #0x0
0000000100015a98	mov	x0, x20
0000000100015a9c	bl	0x1000270c8
0000000100015aa0	ldr	x8, [x19, #0x340]
0000000100015aa4	cbnz	x8, 0x100015c14
0000000100015aa8	bl	0x10000d8e0
0000000100015aac	mov	x3, x0
0000000100015ab0	nop
0000000100015ab4	ldr	x0, #0x2a5b4 ; literal pool symbol address: __dispatch_source_type_timer
0000000100015ab8	mov	x1, #0x0
0000000100015abc	mov	x2, #0x0
0000000100015ac0	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100015ac4	str	x0, [x19, #0x340]
0000000100015ac8	ldr	w0, [x19, #0x34c]
0000000100015acc	cmp	w0, #0x6
0000000100015ad0	b.eq	0x100015b04
0000000100015ad4	cmp	w0, #0xf
0000000100015ad8	b.eq	0x100015b04
0000000100015adc	cmp	w0, #0x9
0000000100015ae0	b.ne	0x100015b28
0000000100015ae4	mov	w8, #0x5
0000000100015ae8	str	w8, [x19, #0x170]
0000000100015aec	nop
0000000100015af0	nop
0000000100015af4	ldrsw	x22, 0x100043504
0000000100015af8	adr	x20, #11912
0000000100015afc	nop
0000000100015b00	b	0x100015b54
0000000100015b04	orr	w8, wzr, #0x4
0000000100015b08	str	w8, [x19, #0x170]
0000000100015b0c	ldr	w8, [x19, #0x288]
0000000100015b10	cmp	w0, #0x6
0000000100015b14	mov	w9, #0xa
0000000100015b18	csel	x22, x9, x8, eq
0000000100015b1c	adr	x20, #12384
0000000100015b20	nop
0000000100015b24	b	0x100015b54
0000000100015b28	bl	0x10003179c ; symbol stub for: _strsignal
0000000100015b2c	str	x0, [sp]
0000000100015b30	adr	x2, #138430 ; literal pool for: "Service was sent unexpected signal: %s"
0000000100015b34	nop
0000000100015b38	orr	w1, wzr, #0x4
0000000100015b3c	mov	x0, x19
0000000100015b40	bl	0x1000118ec
0000000100015b44	ldr	w0, [x19, #0x34c]
0000000100015b48	adr	x20, #11832
0000000100015b4c	nop
0000000100015b50	orr	w22, wzr, #0x1
0000000100015b54	nop
0000000100015b58	ldr	x21, #0x2e8c8
0000000100015b5c	add	x23, x19, #0x460
0000000100015b60	bl	0x10003179c ; symbol stub for: _strsignal
0000000100015b64	stp	x22, x0, [sp, #0x8]
0000000100015b68	str	x23, [sp]
0000000100015b6c	adr	x2, #138409 ; literal pool for: "%s: scheduling cleanup in %llu sec after sending %s"
0000000100015b70	nop
0000000100015b74	mov	w1, #0x0
0000000100015b78	mov	x0, x21
0000000100015b7c	bl	0x1000270c8
0000000100015b80	mov	w1, #0x19
0000000100015b84	mov	x0, x19
0000000100015b88	bl	0x10000e820
0000000100015b8c	ldr	x0, [x19, #0x340]
0000000100015b90	mov	x1, x19
0000000100015b94	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100015b98	ldr	x0, [x19, #0x340]
0000000100015b9c	mov	x1, x20
0000000100015ba0	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100015ba4	ldr	x20, [x19, #0x340]
0000000100015ba8	mov	w8, #0xca00
0000000100015bac	movk	w8, #0x3b9a, lsl #16
0000000100015bb0	mul	x1, x22, x8
0000000100015bb4	mov	x0, #0x0
0000000100015bb8	bl	0x100030f38 ; symbol stub for: _dispatch_time
0000000100015bbc	mov	x1, x0
0000000100015bc0	mov	x2, #-0x1
0000000100015bc4	mov	x0, x20
0000000100015bc8	mov	x3, #0x0
0000000100015bcc	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100015bd0	ldr	x0, [x19, #0x340]
0000000100015bd4	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100015bd8	mov	w20, #0x0
0000000100015bdc	ldur	x8, [x29, #-0x38]
0000000100015be0	nop
0000000100015be4	ldr	x9, #0x2a434 ; literal pool symbol address: ___stack_chk_guard
0000000100015be8	ldr	x9, [x9]
0000000100015bec	cmp	x9, x8
0000000100015bf0	b.ne	0x100015c10
0000000100015bf4	mov	x0, x20
0000000100015bf8	ldp	x29, x30, [sp, #0x90]
0000000100015bfc	ldp	x20, x19, [sp, #0x80]
0000000100015c00	ldp	x22, x21, [sp, #0x70]
0000000100015c04	ldp	x24, x23, [sp, #0x60]
0000000100015c08	add	sp, sp, #0xa0
0000000100015c0c	ret
0000000100015c10	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100015c14	adr	x0, #138160 ; literal pool for: "tried to overwrite service timeout_source"
0000000100015c18	nop
0000000100015c1c	bl	0x100028f84
0000000100015c20	ldr	w8, [x0, #0x110]
0000000100015c24	cbnz	w8, 0x100015c38
0000000100015c28	ldrb	w8, [x0, #0x45c]
0000000100015c2c	tbnz	w8, #0x7, 0x100015c34
0000000100015c30	ret
0000000100015c34	b	0x100015c4c
0000000100015c38	stp	x29, x30, [sp, #-0x10]!
0000000100015c3c	mov	x29, sp
0000000100015c40	adr	x0, #119679 ; literal pool for: "unmanaged service given to service interface"
0000000100015c44	nop
0000000100015c48	bl	0x100028f84
0000000100015c4c	sub	sp, sp, #0x50
0000000100015c50	stp	x24, x23, [sp, #0x10]
0000000100015c54	stp	x22, x21, [sp, #0x20]
0000000100015c58	stp	x20, x19, [sp, #0x30]
0000000100015c5c	stp	x29, x30, [sp, #0x40]
0000000100015c60	add	x29, sp, #0x40
0000000100015c64	mov	x19, x0
0000000100015c68	ldr	x20, [x19, #0xa8]
0000000100015c6c	cbz	x20, 0x100015ca8
0000000100015c70	add	x22, x19, #0x460
0000000100015c74	adrp	x23, 47 ; 0x100044000
0000000100015c78	adr	x21, #138912 ; literal pool for: "%s: draining messages from %s"
0000000100015c7c	nop
0000000100015c80	ldr	x0, [x23, #0x420]
0000000100015c84	add	x8, x20, #0x88
0000000100015c88	stp	x22, x8, [sp]
0000000100015c8c	mov	w1, #0x0
0000000100015c90	mov	x2, x21
0000000100015c94	bl	0x1000270c8
0000000100015c98	mov	x0, x20
0000000100015c9c	bl	0x10002f804
0000000100015ca0	ldr	x20, [x20, #0x8]
0000000100015ca4	cbnz	x20, 0x100015c80
0000000100015ca8	ldr	x20, [x19, #0xc8]
0000000100015cac	cbz	x20, 0x100015ce8
0000000100015cb0	add	x21, x19, #0x460
0000000100015cb4	adrp	x22, 47 ; 0x100044000
0000000100015cb8	adr	x19, #138848 ; literal pool for: "%s: draining messages from %s"
0000000100015cbc	nop
0000000100015cc0	ldr	x0, [x22, #0x420]
0000000100015cc4	add	x8, x20, #0x88
0000000100015cc8	stp	x21, x8, [sp]
0000000100015ccc	mov	w1, #0x0
0000000100015cd0	mov	x2, x19
0000000100015cd4	bl	0x1000270c8
0000000100015cd8	mov	x0, x20
0000000100015cdc	bl	0x10002f804
0000000100015ce0	ldr	x20, [x20, #0x8]
0000000100015ce4	cbnz	x20, 0x100015cc0
0000000100015ce8	ldp	x29, x30, [sp, #0x40]
0000000100015cec	ldp	x20, x19, [sp, #0x30]
0000000100015cf0	ldp	x22, x21, [sp, #0x20]
0000000100015cf4	ldp	x24, x23, [sp, #0x10]
0000000100015cf8	add	sp, sp, #0x50
0000000100015cfc	ret
0000000100015d00	stp	x20, x19, [sp, #-0x20]!
0000000100015d04	stp	x29, x30, [sp, #0x10]
0000000100015d08	add	x29, sp, #0x10
0000000100015d0c	mov	x19, x0
0000000100015d10	ldr	w8, [x19, #0x2b0]
0000000100015d14	cbz	w8, 0x100015d98
0000000100015d18	ldr	x8, [x19, #0x2a8]
0000000100015d1c	cbnz	x8, 0x100015da4
0000000100015d20	bl	0x10000d8e0
0000000100015d24	mov	x3, x0
0000000100015d28	nop
0000000100015d2c	ldr	x0, #0x2a33c ; literal pool symbol address: __dispatch_source_type_timer
0000000100015d30	mov	x1, #0x0
0000000100015d34	mov	x2, #0x0
0000000100015d38	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100015d3c	str	x0, [x19, #0x2a8]
0000000100015d40	mov	x1, x19
0000000100015d44	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100015d48	ldr	x20, [x19, #0x2a8]
0000000100015d4c	ldr	w8, [x19, #0x2b0]
0000000100015d50	mov	w9, #0xca00
0000000100015d54	movk	w9, #0x3b9a, lsl #16
0000000100015d58	mul	x1, x8, x9
0000000100015d5c	mov	x0, #0x0
0000000100015d60	bl	0x100030f38 ; symbol stub for: _dispatch_time
0000000100015d64	mov	x1, x0
0000000100015d68	mov	x2, #-0x1
0000000100015d6c	mov	x0, x20
0000000100015d70	mov	x3, #0x0
0000000100015d74	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100015d78	ldr	x0, [x19, #0x2a8]
0000000100015d7c	adr	x1, #56
0000000100015d80	nop
0000000100015d84	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100015d88	ldr	x0, [x19, #0x2a8]
0000000100015d8c	ldp	x29, x30, [sp, #0x10]
0000000100015d90	ldp	x20, x19, [sp], #0x20
0000000100015d94	b	0x100030d1c ; symbol stub for: _dispatch_activate
0000000100015d98	ldp	x29, x30, [sp, #0x10]
0000000100015d9c	ldp	x20, x19, [sp], #0x20
0000000100015da0	ret
0000000100015da4	mov	x0, #0x0
0000000100015da8	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100015dac	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100015db0	brk	#0x1
0000000100015db4	sub	sp, sp, #0x30
0000000100015db8	stp	x20, x19, [sp, #0x10]
0000000100015dbc	stp	x29, x30, [sp, #0x20]
0000000100015dc0	add	x29, sp, #0x20
0000000100015dc4	mov	x19, x0
0000000100015dc8	orr	w1, wzr, #0xc
0000000100015dcc	bl	0x100010bb8
0000000100015dd0	mov	x20, x0
0000000100015dd4	nop
0000000100015dd8	ldr	x0, #0x2e648
0000000100015ddc	add	x8, x19, #0x460
0000000100015de0	stp	x8, x20, [sp]
0000000100015de4	adr	x2, #138578 ; literal pool for: "%s: interval event: domain response: %d"
0000000100015de8	nop
0000000100015dec	mov	w1, #0x0
0000000100015df0	bl	0x1000270c8
0000000100015df4	cbz	w20, 0x100015e28
0000000100015df8	cmp	w20, #0x24
0000000100015dfc	b.eq	0x100015e28
0000000100015e00	cmp	w20, #0x7c
0000000100015e04	b.eq	0x100015e28
0000000100015e08	mov	x0, x20
0000000100015e0c	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100015e10	stp	x20, x0, [sp]
0000000100015e14	adr	x2, #138570 ; literal pool for: "Interval spawn of service failed: %d: %s"
0000000100015e18	nop
0000000100015e1c	orr	w1, wzr, #0x3
0000000100015e20	mov	x0, x19
0000000100015e24	bl	0x1000118ec
0000000100015e28	ldp	x29, x30, [sp, #0x20]
0000000100015e2c	ldp	x20, x19, [sp, #0x10]
0000000100015e30	add	sp, sp, #0x30
0000000100015e34	ret
0000000100015e38	stp	x20, x19, [sp, #-0x20]!
0000000100015e3c	stp	x29, x30, [sp, #0x10]
0000000100015e40	add	x29, sp, #0x10
0000000100015e44	mov	x19, x0
0000000100015e48	ldr	w8, [x19, #0x2b0]
0000000100015e4c	cbz	w8, 0x100015e68
0000000100015e50	ldr	x0, [x19, #0x2a8]
0000000100015e54	cbz	x0, 0x100015e74
0000000100015e58	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100015e5c	ldr	x0, [x19, #0x2a8]
0000000100015e60	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100015e64	str	xzr, [x19, #0x2a8]
0000000100015e68	ldp	x29, x30, [sp, #0x10]
0000000100015e6c	ldp	x20, x19, [sp], #0x20
0000000100015e70	ret
0000000100015e74	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100015e78	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100015e7c	brk	#0x1
0000000100015e80	stp	x20, x19, [sp, #-0x20]!
0000000100015e84	stp	x29, x30, [sp, #0x10]
0000000100015e88	add	x29, sp, #0x10
0000000100015e8c	mov	x19, x0
0000000100015e90	ldr	x0, [x19, #0x2a8]
0000000100015e94	cbz	x0, 0x100015ea8
0000000100015e98	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100015e9c	ldr	x0, [x19, #0x2a8]
0000000100015ea0	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100015ea4	str	xzr, [x19, #0x2a8]
0000000100015ea8	ldp	x29, x30, [sp, #0x10]
0000000100015eac	ldp	x20, x19, [sp], #0x20
0000000100015eb0	ret
0000000100015eb4	ldr	w8, [x0, #0x110]
0000000100015eb8	cbnz	w8, 0x100015ec4
0000000100015ebc	add	x0, x0, #0x140
0000000100015ec0	ret
0000000100015ec4	stp	x29, x30, [sp, #-0x10]!
0000000100015ec8	mov	x29, sp
0000000100015ecc	adr	x0, #119027 ; literal pool for: "unmanaged service given to service interface"
0000000100015ed0	nop
0000000100015ed4	bl	0x100028f84
0000000100015ed8	ldr	w8, [x0, #0x110]
0000000100015edc	cbnz	w8, 0x100015ee8
0000000100015ee0	ldr	w0, [x0, #0x330]
0000000100015ee4	ret
0000000100015ee8	stp	x29, x30, [sp, #-0x10]!
0000000100015eec	mov	x29, sp
0000000100015ef0	adr	x0, #118991 ; literal pool for: "unmanaged service given to service interface"
0000000100015ef4	nop
0000000100015ef8	bl	0x100028f84
0000000100015efc	stp	x22, x21, [sp, #-0x30]!
0000000100015f00	stp	x20, x19, [sp, #0x10]
0000000100015f04	stp	x29, x30, [sp, #0x20]
0000000100015f08	add	x29, sp, #0x20
0000000100015f0c	mov	x20, x0
0000000100015f10	ldr	w8, [x20, #0x110]
0000000100015f14	cbnz	w8, 0x100016174
0000000100015f18	mov	x0, #0x0
0000000100015f1c	mov	x1, #0x0
0000000100015f20	mov	x2, #0x0
0000000100015f24	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100015f28	mov	x19, x0
0000000100015f2c	add	x2, x20, #0x460
0000000100015f30	adr	x1, #119124 ; literal pool for: "Label"
0000000100015f34	nop
0000000100015f38	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
0000000100015f3c	ldr	x8, [x20, #0x458]
0000000100015f40	tst	x8, #0x8
0000000100015f44	cset	w2, eq
0000000100015f48	adr	x1, #121093 ; literal pool for: "OnDemand"
0000000100015f4c	nop
0000000100015f50	mov	x0, x19
0000000100015f54	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
0000000100015f58	ldr	x0, [x20, #0xe0]
0000000100015f5c	bl	0x10001dddc
0000000100015f60	adr	x8, #184440
0000000100015f64	nop
0000000100015f68	cmp	x0, x8
0000000100015f6c	b.eq	0x100015fa4
0000000100015f70	adr	x8, #184568
0000000100015f74	nop
0000000100015f78	cmp	x0, x8
0000000100015f7c	b.eq	0x100015fb8
0000000100015f80	adr	x8, #184696
0000000100015f84	nop
0000000100015f88	cmp	x0, x8
0000000100015f8c	b.ne	0x100015fd0
0000000100015f90	adr	x1, #122738 ; literal pool for: "LimitLoadToSessionType"
0000000100015f94	nop
0000000100015f98	adr	x2, #131398 ; literal pool for: "Aqua"
0000000100015f9c	nop
0000000100015fa0	b	0x100015fc8
0000000100015fa4	adr	x1, #122718 ; literal pool for: "LimitLoadToSessionType"
0000000100015fa8	nop
0000000100015fac	adr	x2, #125823 ; literal pool for: "System"
0000000100015fb0	nop
0000000100015fb4	b	0x100015fc8
0000000100015fb8	adr	x1, #122698 ; literal pool for: "LimitLoadToSessionType"
0000000100015fbc	nop
0000000100015fc0	adr	x2, #118710 ; literal pool for: "Background"
0000000100015fc4	nop
0000000100015fc8	mov	x0, x19
0000000100015fcc	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
0000000100015fd0	add	x21, x20, #0x358
0000000100015fd4	mov	x0, x21
0000000100015fd8	bl	0x10002cd50
0000000100015fdc	cbz	w0, 0x100015ff0
0000000100015fe0	adr	x1, #131331 ; literal pool for: "LastExitStatus"
0000000100015fe4	nop
0000000100015fe8	orr	x2, xzr, #0x7fffffffffffffff
0000000100015fec	b	0x100016008
0000000100015ff0	mov	x0, x21
0000000100015ff4	bl	0x10002cb30
0000000100015ff8	cbz	w0, 0x100016010
0000000100015ffc	ldrsw	x2, [x20, #0x374]
0000000100016000	adr	x1, #131299 ; literal pool for: "LastExitStatus"
0000000100016004	nop
0000000100016008	mov	x0, x19
000000010001600c	b	0x100016020
0000000100016010	adr	x1, #131283 ; literal pool for: "LastExitStatus"
0000000100016014	nop
0000000100016018	mov	x0, x19
000000010001601c	mov	x2, #0x0
0000000100016020	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100016024	ldrsw	x2, [x20, #0x330]
0000000100016028	cbz	w2, 0x10001603c
000000010001602c	adr	x1, #131270 ; literal pool for: "PID"
0000000100016030	nop
0000000100016034	mov	x0, x19
0000000100016038	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010001603c	ldr	x2, [x20, #0x188]
0000000100016040	cbz	x2, 0x100016054
0000000100016044	adr	x1, #122659 ; literal pool for: "StandardInPath"
0000000100016048	nop
000000010001604c	mov	x0, x19
0000000100016050	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
0000000100016054	ldr	x2, [x20, #0x190]
0000000100016058	cbz	x2, 0x10001606c
000000010001605c	adr	x1, #122601 ; literal pool for: "StandardOutPath"
0000000100016060	nop
0000000100016064	mov	x0, x19
0000000100016068	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
000000010001606c	ldr	x2, [x20, #0x198]
0000000100016070	cbz	x2, 0x100016084
0000000100016074	adr	x1, #122593 ; literal pool for: "StandardErrorPath"
0000000100016078	nop
000000010001607c	mov	x0, x19
0000000100016080	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
0000000100016084	ldr	x8, [x20, #0x458]
0000000100016088	tbz	w8, #0x9, 0x1000160a4
000000010001608c	adr	x1, #121294 ; literal pool for: "EnableTransactions"
0000000100016090	nop
0000000100016094	orr	w2, wzr, #0x1
0000000100016098	mov	x0, x19
000000010001609c	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000160a0	ldr	x8, [x20, #0x458]
00000001000160a4	tbz	w8, #0xf, 0x1000160d4
00000001000160a8	adr	x1, #123239 ; literal pool for: "inetdCompatibility"
00000001000160ac	nop
00000001000160b0	orr	w2, wzr, #0x1
00000001000160b4	mov	x0, x19
00000001000160b8	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000160bc	ldr	x8, [x20, #0x458]
00000001000160c0	ubfx	x2, x8, #16, #1
00000001000160c4	adr	x1, #123781 ; literal pool for: "Wait"
00000001000160c8	nop
00000001000160cc	mov	x0, x19
00000001000160d0	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000160d4	adr	x1, #121818 ; literal pool for: "TimeOut"
00000001000160d8	nop
00000001000160dc	orr	w2, wzr, #0x1e
00000001000160e0	mov	x0, x19
00000001000160e4	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
00000001000160e8	ldr	x2, [x20, #0x220]
00000001000160ec	adr	x1, #118567 ; literal pool for: "Program"
00000001000160f0	nop
00000001000160f4	mov	x0, x19
00000001000160f8	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
00000001000160fc	ldr	w8, [x20, #0x174]
0000000100016100	cbz	w8, 0x100016160
0000000100016104	mov	x0, #0x0
0000000100016108	mov	x1, #0x0
000000010001610c	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
0000000100016110	mov	x21, x0
0000000100016114	ldr	w8, [x20, #0x174]
0000000100016118	cbz	w8, 0x100016144
000000010001611c	mov	x22, #0x0
0000000100016120	ldr	x8, [x20, #0x178]
0000000100016124	ldr	x2, [x8, x22, lsl #3]
0000000100016128	mov	x1, #-0x1
000000010001612c	mov	x0, x21
0000000100016130	bl	0x10003191c ; symbol stub for: _xpc_array_set_string
0000000100016134	add	x22, x22, #0x1
0000000100016138	ldr	w8, [x20, #0x174]
000000010001613c	cmp	x22, x8
0000000100016140	b.lo	0x100016120
0000000100016144	adr	x1, #118487 ; literal pool for: "ProgramArguments"
0000000100016148	nop
000000010001614c	mov	x0, x19
0000000100016150	mov	x2, x21
0000000100016154	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100016158	mov	x0, x21
000000010001615c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100016160	mov	x0, x19
0000000100016164	ldp	x29, x30, [sp, #0x20]
0000000100016168	ldp	x20, x19, [sp, #0x10]
000000010001616c	ldp	x22, x21, [sp], #0x30
0000000100016170	ret
0000000100016174	adr	x0, #118347 ; literal pool for: "unmanaged service given to service interface"
0000000100016178	nop
000000010001617c	bl	0x100028f84
0000000100016180	stp	x20, x19, [sp, #-0x20]!
0000000100016184	stp	x29, x30, [sp, #0x10]
0000000100016188	add	x29, sp, #0x10
000000010001618c	mov	x20, x0
0000000100016190	ldr	w8, [x20, #0x110]
0000000100016194	cbnz	w8, 0x1000162a0
0000000100016198	mov	x0, #0x0
000000010001619c	mov	x1, #0x0
00000001000161a0	mov	x2, #0x0
00000001000161a4	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
00000001000161a8	mov	x19, x0
00000001000161ac	ldr	x8, [x20, #0x458]
00000001000161b0	ubfx	x2, x8, #37, #1
00000001000161b4	adr	x1, #130882 ; literal pool for: "extension"
00000001000161b8	nop
00000001000161bc	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000161c0	nop
00000001000161c4	ldr	x8, #0x29f54 ; literal pool symbol address: _launch_extension_property_xpc_bundle
00000001000161c8	ldr	x1, [x8]
00000001000161cc	ldr	x8, [x20, #0x458]
00000001000161d0	ubfx	x2, x8, #2, #1
00000001000161d4	mov	x0, x19
00000001000161d8	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
00000001000161dc	ldr	x2, [x20, #0x208]
00000001000161e0	cbz	x2, 0x1000161f4
00000001000161e4	adr	x1, #130844 ; literal pool for: "bundle-id"
00000001000161e8	nop
00000001000161ec	mov	x0, x19
00000001000161f0	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
00000001000161f4	nop
00000001000161f8	ldr	x8, #0x29f18 ; literal pool symbol address: _launch_extension_property_pid
00000001000161fc	ldr	x1, [x8]
0000000100016200	ldrsw	x2, [x20, #0x330]
0000000100016204	mov	x0, x19
0000000100016208	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010001620c	ldr	x2, [x20, #0x138]
0000000100016210	ldrb	w8, [x2]
0000000100016214	cmp	w8, #0x2f
0000000100016218	b.ne	0x10001622c
000000010001621c	adr	x1, #130798 ; literal pool for: "path"
0000000100016220	nop
0000000100016224	mov	x0, x19
0000000100016228	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
000000010001622c	ldr	x20, [x20, #0xe0]
0000000100016230	mov	x0, x20
0000000100016234	bl	0x10001dddc
0000000100016238	adr	x8, #184288
000000010001623c	nop
0000000100016240	cmp	x0, x8
0000000100016244	b.ne	0x100016290
0000000100016248	mov	x0, x20
000000010001624c	bl	0x10001dde4
0000000100016250	mov	x20, x0
0000000100016254	bl	0x100015490
0000000100016258	cbz	x0, 0x100016278
000000010001625c	ldr	x2, [x0, #0x208]
0000000100016260	cbz	x2, 0x100016278
0000000100016264	nop
0000000100016268	ldr	x8, #0x29e98 ; literal pool symbol address: _launch_extension_property_host_bundle_id
000000010001626c	ldr	x1, [x8]
0000000100016270	mov	x0, x19
0000000100016274	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
0000000100016278	nop
000000010001627c	ldr	x8, #0x29e8c ; literal pool symbol address: _launch_extension_property_host_pid
0000000100016280	ldr	x1, [x8]
0000000100016284	sxtw	x2, w20
0000000100016288	mov	x0, x19
000000010001628c	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100016290	mov	x0, x19
0000000100016294	ldp	x29, x30, [sp, #0x10]
0000000100016298	ldp	x20, x19, [sp], #0x20
000000010001629c	ret
00000001000162a0	adr	x0, #118047 ; literal pool for: "unmanaged service given to service interface"
00000001000162a4	nop
00000001000162a8	bl	0x100028f84
00000001000162ac	ldr	w8, [x0, #0x110]
00000001000162b0	cbnz	w8, 0x1000162bc
00000001000162b4	ldr	x0, [x0, #0x220]
00000001000162b8	ret
00000001000162bc	stp	x29, x30, [sp, #-0x10]!
00000001000162c0	mov	x29, sp
00000001000162c4	adr	x0, #118011 ; literal pool for: "unmanaged service given to service interface"
00000001000162c8	nop
00000001000162cc	bl	0x100028f84
00000001000162d0	stp	x22, x21, [sp, #-0x30]!
00000001000162d4	stp	x20, x19, [sp, #0x10]
00000001000162d8	stp	x29, x30, [sp, #0x20]
00000001000162dc	add	x29, sp, #0x20
00000001000162e0	ldr	w8, [x0, #0x110]
00000001000162e4	cbnz	w8, 0x100016354
00000001000162e8	ldr	x8, [x0, #0x320]
00000001000162ec	cbz	x8, 0x1000162fc
00000001000162f0	ldrh	w9, [x0, #0x34a]
00000001000162f4	cmp	w9, #0x1
00000001000162f8	b.hi	0x100016340
00000001000162fc	ldr	x21, [x0, #0x458]
0000000100016300	ldr	x19, [x0, #0x220]
0000000100016304	mov	w1, #0x2f
0000000100016308	mov	x0, x19
000000010001630c	bl	0x100031784 ; symbol stub for: _strrchr
0000000100016310	mov	x20, x0
0000000100016314	tbnz	w21, #0x2, 0x100016324
0000000100016318	cmp	x20, #0x0
000000010001631c	csel	x19, x20, x19, ne
0000000100016320	b	0x10001633c
0000000100016324	cbz	x20, 0x10001633c
0000000100016328	mov	w1, #0x2e
000000010001632c	mov	x0, x20
0000000100016330	bl	0x100031784 ; symbol stub for: _strrchr
0000000100016334	cmp	x0, #0x0
0000000100016338	csel	x19, x20, x0, eq
000000010001633c	add	x8, x19, #0x1
0000000100016340	mov	x0, x8
0000000100016344	ldp	x29, x30, [sp, #0x20]
0000000100016348	ldp	x20, x19, [sp, #0x10]
000000010001634c	ldp	x22, x21, [sp], #0x30
0000000100016350	ret
0000000100016354	adr	x0, #117867 ; literal pool for: "unmanaged service given to service interface"
0000000100016358	nop
000000010001635c	bl	0x100028f84
0000000100016360	ldr	w8, [x0, #0x110]
0000000100016364	cbnz	w8, 0x100016370
0000000100016368	ldr	x0, [x0, #0x210]
000000010001636c	ret
0000000100016370	stp	x29, x30, [sp, #-0x10]!
0000000100016374	mov	x29, sp
0000000100016378	adr	x0, #117831 ; literal pool for: "unmanaged service given to service interface"
000000010001637c	nop
0000000100016380	bl	0x100028f84
0000000100016384	ldr	w8, [x0, #0x110]
0000000100016388	cbnz	w8, 0x100016394
000000010001638c	ldr	x0, [x0, #0x208]
0000000100016390	ret
0000000100016394	stp	x29, x30, [sp, #-0x10]!
0000000100016398	mov	x29, sp
000000010001639c	adr	x0, #117795 ; literal pool for: "unmanaged service given to service interface"
00000001000163a0	nop
00000001000163a4	bl	0x100028f84
00000001000163a8	ldr	w8, [x0, #0x110]
00000001000163ac	cbnz	w8, 0x1000163b8
00000001000163b0	add	x0, x0, #0x160
00000001000163b4	ret
00000001000163b8	stp	x29, x30, [sp, #-0x10]!
00000001000163bc	mov	x29, sp
00000001000163c0	adr	x0, #117759 ; literal pool for: "unmanaged service given to service interface"
00000001000163c4	nop
00000001000163c8	bl	0x100028f84
00000001000163cc	add	x0, x0, #0x358
00000001000163d0	ret
00000001000163d4	ldr	w8, [x0, #0x110]
00000001000163d8	cbnz	w8, 0x1000163f4
00000001000163dc	ldrh	w8, [x0, #0x45a]
00000001000163e0	and	w8, w8, #0x1
00000001000163e4	strb	w8, [x1]
00000001000163e8	ldrb	w8, [x0, #0x459]
00000001000163ec	lsr	w0, w8, #7
00000001000163f0	ret
00000001000163f4	stp	x29, x30, [sp, #-0x10]!
00000001000163f8	mov	x29, sp
00000001000163fc	adr	x0, #117699 ; literal pool for: "unmanaged service given to service interface"
0000000100016400	nop
0000000100016404	bl	0x100028f84
0000000100016408	ldr	w8, [x0, #0x110]
000000010001640c	cbnz	w8, 0x10001641c
0000000100016410	ldrb	w8, [x0, #0x354]
0000000100016414	ubfx	w0, w8, #1, #1
0000000100016418	ret
000000010001641c	stp	x29, x30, [sp, #-0x10]!
0000000100016420	mov	x29, sp
0000000100016424	adr	x0, #117659 ; literal pool for: "unmanaged service given to service interface"
0000000100016428	nop
000000010001642c	bl	0x100028f84
0000000100016430	ldr	w8, [x0, #0x110]
0000000100016434	cbnz	w8, 0x100016444
0000000100016438	ldrb	w8, [x0, #0x45d]
000000010001643c	ubfx	w0, w8, #3, #1
0000000100016440	ret
0000000100016444	stp	x29, x30, [sp, #-0x10]!
0000000100016448	mov	x29, sp
000000010001644c	adr	x0, #117619 ; literal pool for: "unmanaged service given to service interface"
0000000100016450	nop
0000000100016454	bl	0x100028f84
0000000100016458	ldrb	w8, [x0, #0x45d]
000000010001645c	lsr	w0, w8, #7
0000000100016460	ret
0000000100016464	sub	sp, sp, #0x50
0000000100016468	stp	x24, x23, [sp, #0x10]
000000010001646c	stp	x22, x21, [sp, #0x20]
0000000100016470	stp	x20, x19, [sp, #0x30]
0000000100016474	stp	x29, x30, [sp, #0x40]
0000000100016478	add	x29, sp, #0x40
000000010001647c	mov	x21, x1
0000000100016480	mov	x20, x0
0000000100016484	add	x19, x21, #0x1
0000000100016488	adr	x2, #130183 ; literal pool for: "pending global attachments = {"
000000010001648c	nop
0000000100016490	mov	x1, x19
0000000100016494	bl	0x10002a548
0000000100016498	nop
000000010001649c	ldr	x23, #0x2d24c
00000001000164a0	cbz	x23, 0x1000164d0
00000001000164a4	add	x21, x21, #0x2
00000001000164a8	adr	x22, #126978 ; literal pool for: "%s"
00000001000164ac	nop
00000001000164b0	ldr	x8, [x23, #0x10]
00000001000164b4	str	x8, [sp]
00000001000164b8	mov	x0, x20
00000001000164bc	mov	x1, x21
00000001000164c0	mov	x2, x22
00000001000164c4	bl	0x10002a548
00000001000164c8	ldr	x23, [x23]
00000001000164cc	cbnz	x23, 0x1000164b0
00000001000164d0	adr	x2, #127155 ; literal pool for: "}"
00000001000164d4	nop
00000001000164d8	mov	x0, x20
00000001000164dc	mov	x1, x19
00000001000164e0	bl	0x10002a548
00000001000164e4	ldp	x29, x30, [sp, #0x40]
00000001000164e8	ldp	x20, x19, [sp, #0x30]
00000001000164ec	ldp	x22, x21, [sp, #0x20]
00000001000164f0	ldp	x24, x23, [sp, #0x10]
00000001000164f4	add	sp, sp, #0x50
00000001000164f8	ret
00000001000164fc	ldr	w8, [x0, #0x110]
0000000100016500	cbnz	w8, 0x100016508
0000000100016504	b	0x10001651c
0000000100016508	stp	x29, x30, [sp, #-0x10]!
000000010001650c	mov	x29, sp
0000000100016510	adr	x0, #117423 ; literal pool for: "unmanaged service given to service interface"
0000000100016514	nop
0000000100016518	bl	0x100028f84
000000010001651c	sub	sp, sp, #0x1c0
0000000100016520	stp	x28, x27, [sp, #0x160]
0000000100016524	stp	x26, x25, [sp, #0x170]
0000000100016528	stp	x24, x23, [sp, #0x180]
000000010001652c	stp	x22, x21, [sp, #0x190]
0000000100016530	stp	x20, x19, [sp, #0x1a0]
0000000100016534	stp	x29, x30, [sp, #0x1b0]
0000000100016538	add	x29, sp, #0x1b0
000000010001653c	mov	x27, x2
0000000100016540	mov	x20, x1
0000000100016544	mov	x22, x0
0000000100016548	nop
000000010001654c	ldr	x8, #0x29acc ; literal pool symbol address: ___stack_chk_guard
0000000100016550	ldr	x8, [x8]
0000000100016554	stur	x8, [x29, #-0x58]
0000000100016558	add	x8, x22, #0x460
000000010001655c	str	x8, [sp]
0000000100016560	adr	x2, #136743 ; literal pool for: "%s = {"
0000000100016564	nop
0000000100016568	mov	x0, x20
000000010001656c	mov	x1, x27
0000000100016570	bl	0x10002a548
0000000100016574	add	x28, x27, #0x1
0000000100016578	ldrsh	x8, [x22, #0x114]
000000010001657c	str	x8, [sp]
0000000100016580	adr	x2, #136718 ; literal pool for: "active count = %d"
0000000100016584	nop
0000000100016588	mov	x0, x20
000000010001658c	mov	x1, x28
0000000100016590	bl	0x10002a548
0000000100016594	ldr	x8, [x22, #0x138]
0000000100016598	cbz	x8, 0x1000165b4
000000010001659c	str	x8, [sp]
00000001000165a0	adr	x2, #128028 ; literal pool for: "path = %s"
00000001000165a4	nop
00000001000165a8	mov	x0, x20
00000001000165ac	mov	x1, x28
00000001000165b0	bl	0x10002a548
00000001000165b4	ldrsw	x8, [x22, #0x170]
00000001000165b8	adr	x9, #177600
00000001000165bc	nop
00000001000165c0	ldr	x8, [x9, x8, lsl #3]
00000001000165c4	str	x8, [sp]
00000001000165c8	adr	x2, #136664 ; literal pool for: "state = %s"
00000001000165cc	nop
00000001000165d0	mov	x0, x20
00000001000165d4	mov	x1, x28
00000001000165d8	bl	0x10002a548
00000001000165dc	ldr	x8, [x22, #0x208]
00000001000165e0	cbz	x8, 0x1000165fc
00000001000165e4	str	x8, [sp]
00000001000165e8	adr	x2, #136643 ; literal pool for: "bundle id = %s"
00000001000165ec	nop
00000001000165f0	mov	x0, x20
00000001000165f4	mov	x1, x28
00000001000165f8	bl	0x10002a548
00000001000165fc	ldrb	w8, [x22, #0x45c]
0000000100016600	tbz	w8, #0x5, 0x100016620
0000000100016604	ldr	x8, [x22, #0x210]
0000000100016608	str	x8, [sp]
000000010001660c	adr	x2, #136622 ; literal pool for: "extension point = %s"
0000000100016610	nop
0000000100016614	mov	x0, x20
0000000100016618	mov	x1, x28
000000010001661c	bl	0x10002a548
0000000100016620	ldr	w8, [x22, #0x258]
0000000100016624	cbz	w8, 0x100016660
0000000100016628	movi.16b	v0, #0x0
000000010001662c	stur	q0, [sp, #0x48]
0000000100016630	stur	q0, [sp, #0x38]
0000000100016634	str	w8, [sp, #0x4c]
0000000100016638	add	x0, sp, #0x38
000000010001663c	add	x1, sp, #0x58
0000000100016640	bl	0x1000293c0
0000000100016644	ldr	w8, [x22, #0x258]
0000000100016648	stp	x0, x8, [sp]
000000010001664c	adr	x2, #136579 ; literal pool for: "controller = %s.%d"
0000000100016650	nop
0000000100016654	mov	x0, x20
0000000100016658	mov	x1, x28
000000010001665c	bl	0x10002a548
0000000100016660	mov	x0, x20
0000000100016664	bl	0x10002a5c4
0000000100016668	ldr	x8, [x22, #0x220]
000000010001666c	str	x8, [sp]
0000000100016670	adr	x2, #136562 ; literal pool for: "program = %s"
0000000100016674	nop
0000000100016678	mov	x0, x20
000000010001667c	mov	x1, x28
0000000100016680	bl	0x10002a548
0000000100016684	ldr	x8, [x22, #0x410]
0000000100016688	cbz	x8, 0x1000166a4
000000010001668c	add	x1, x27, #0x2
0000000100016690	str	x8, [sp]
0000000100016694	adr	x2, #136539 ; literal pool for: "+ %s"
0000000100016698	nop
000000010001669c	mov	x0, x20
00000001000166a0	bl	0x10002a548
00000001000166a4	ldr	w8, [x22, #0x174]
00000001000166a8	cbnz	w8, 0x1000166b4
00000001000166ac	ldr	x8, [x22, #0x418]
00000001000166b0	cbz	x8, 0x1000167b4
00000001000166b4	adr	x2, #136512 ; literal pool for: "arguments = {"
00000001000166b8	nop
00000001000166bc	mov	x0, x20
00000001000166c0	mov	x1, x28
00000001000166c4	bl	0x10002a548
00000001000166c8	ldr	w8, [x22, #0x174]
00000001000166cc	cbz	w8, 0x10001670c
00000001000166d0	mov	x19, #0x0
00000001000166d4	add	x23, x27, #0x2
00000001000166d8	adr	x24, #126418 ; literal pool for: "%s"
00000001000166dc	nop
00000001000166e0	ldr	x8, [x22, #0x178]
00000001000166e4	ldr	x8, [x8, x19, lsl #3]
00000001000166e8	str	x8, [sp]
00000001000166ec	mov	x0, x20
00000001000166f0	mov	x1, x23
00000001000166f4	mov	x2, x24
00000001000166f8	bl	0x10002a548
00000001000166fc	add	x19, x19, #0x1
0000000100016700	ldr	w8, [x22, #0x174]
0000000100016704	cmp	x19, x8
0000000100016708	b.lo	0x1000166e0
000000010001670c	adr	x2, #126583 ; literal pool for: "}"
0000000100016710	nop
0000000100016714	mov	x0, x20
0000000100016718	mov	x1, x28
000000010001671c	bl	0x10002a548
0000000100016720	ldr	x8, [x22, #0x418]
0000000100016724	cbz	x8, 0x1000167ac
0000000100016728	mov	x0, x20
000000010001672c	bl	0x10002a5c4
0000000100016730	adr	x2, #136402 ; literal pool for: "controller-supplied arguments = {"
0000000100016734	nop
0000000100016738	mov	x0, x20
000000010001673c	mov	x1, x28
0000000100016740	bl	0x10002a548
0000000100016744	ldr	x0, [x22, #0x418]
0000000100016748	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001674c	cbz	x0, 0x100016798
0000000100016750	mov	x23, #0x0
0000000100016754	add	x24, x27, #0x2
0000000100016758	adr	x25, #126290 ; literal pool for: "%s"
000000010001675c	nop
0000000100016760	ldr	x0, [x22, #0x418]
0000000100016764	mov	x1, x23
0000000100016768	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010001676c	cbz	x0, 0x100016784
0000000100016770	str	x0, [sp]
0000000100016774	mov	x0, x20
0000000100016778	mov	x1, x24
000000010001677c	mov	x2, x25
0000000100016780	bl	0x10002a548
0000000100016784	add	x23, x23, #0x1
0000000100016788	ldr	x0, [x22, #0x418]
000000010001678c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100016790	cmp	x23, x0
0000000100016794	b.lo	0x100016760
0000000100016798	adr	x2, #126443 ; literal pool for: "}"
000000010001679c	nop
00000001000167a0	mov	x0, x20
00000001000167a4	mov	x1, x28
00000001000167a8	bl	0x10002a548
00000001000167ac	mov	x0, x20
00000001000167b0	bl	0x10002a5c4
00000001000167b4	ldr	x8, [x22, #0x180]
00000001000167b8	cbnz	x8, 0x1000167c4
00000001000167bc	ldr	x9, [x22, #0x420]
00000001000167c0	cbz	x9, 0x100016814
00000001000167c4	adr	x9, #136311 ; literal pool for: "(unspecified)"
00000001000167c8	nop
00000001000167cc	cmp	x8, #0x0
00000001000167d0	csel	x8, x9, x8, eq
00000001000167d4	str	x8, [sp]
00000001000167d8	adr	x2, #136268 ; literal pool for: "working directory = %s"
00000001000167dc	nop
00000001000167e0	mov	x0, x20
00000001000167e4	mov	x1, x28
00000001000167e8	bl	0x10002a548
00000001000167ec	ldr	x8, [x22, #0x420]
00000001000167f0	cbz	x8, 0x10001680c
00000001000167f4	add	x1, x27, #0x2
00000001000167f8	str	x8, [sp]
00000001000167fc	adr	x2, #136179 ; literal pool for: "+ %s"
0000000100016800	nop
0000000100016804	mov	x0, x20
0000000100016808	bl	0x10002a548
000000010001680c	mov	x0, x20
0000000100016810	bl	0x10002a5c4
0000000100016814	ldr	x8, [x22, #0x188]
0000000100016818	cbz	x8, 0x100016834
000000010001681c	str	x8, [sp]
0000000100016820	adr	x2, #136233 ; literal pool for: "stdin path = %s"
0000000100016824	nop
0000000100016828	mov	x0, x20
000000010001682c	mov	x1, x28
0000000100016830	bl	0x10002a548
0000000100016834	ldr	x8, [x22, #0x190]
0000000100016838	cbz	x8, 0x100016854
000000010001683c	str	x8, [sp]
0000000100016840	adr	x2, #136217 ; literal pool for: "stdout path = %s"
0000000100016844	nop
0000000100016848	mov	x0, x20
000000010001684c	mov	x1, x28
0000000100016850	bl	0x10002a548
0000000100016854	ldr	x8, [x22, #0x198]
0000000100016858	cbz	x8, 0x100016874
000000010001685c	str	x8, [sp]
0000000100016860	adr	x2, #136202 ; literal pool for: "stderr path = %s"
0000000100016864	nop
0000000100016868	mov	x0, x20
000000010001686c	mov	x1, x28
0000000100016870	bl	0x10002a548
0000000100016874	ldr	x8, [x22, #0x1a0]
0000000100016878	cbz	x8, 0x100016894
000000010001687c	str	x8, [sp]
0000000100016880	adr	x2, #136187 ; literal pool for: "container id = %s"
0000000100016884	nop
0000000100016888	mov	x0, x20
000000010001688c	mov	x1, x28
0000000100016890	bl	0x10002a548
0000000100016894	ldr	x8, [x22, #0x1a8]
0000000100016898	cbz	x8, 0x1000168b4
000000010001689c	str	x8, [sp]
00000001000168a0	adr	x2, #136173 ; literal pool for: "sandbox profile = %s"
00000001000168a4	nop
00000001000168a8	mov	x0, x20
00000001000168ac	mov	x1, x28
00000001000168b0	bl	0x10002a548
00000001000168b4	ldr	x8, [x22, #0x428]
00000001000168b8	cbz	x8, 0x10001690c
00000001000168bc	adr	x2, #136166 ; literal pool for: "controller-supplied environment = {"
00000001000168c0	nop
00000001000168c4	mov	x0, x20
00000001000168c8	mov	x1, x28
00000001000168cc	bl	0x10002a548
00000001000168d0	stp	x20, xzr, [sp, #0x58]
00000001000168d4	add	x8, x27, #0x2
00000001000168d8	str	x8, [sp, #0x68]
00000001000168dc	ldr	x0, [x22, #0x428]
00000001000168e0	adr	x2, #9352
00000001000168e4	nop
00000001000168e8	add	x1, sp, #0x58
00000001000168ec	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
00000001000168f0	adr	x2, #126099 ; literal pool for: "}"
00000001000168f4	nop
00000001000168f8	mov	x0, x20
00000001000168fc	mov	x1, x28
0000000100016900	bl	0x10002a548
0000000100016904	mov	x0, x20
0000000100016908	bl	0x10002a5c4
000000010001690c	adrp	x19, 46 ; 0x100044000
0000000100016910	ldr	x8, [x19, #0xc10]
0000000100016914	cbz	x8, 0x10001696c
0000000100016918	adr	x2, #136110 ; literal pool for: "global environment = {"
000000010001691c	nop
0000000100016920	mov	x0, x20
0000000100016924	mov	x1, x28
0000000100016928	bl	0x10002a548
000000010001692c	ldr	x23, [x19, #0xc10]
0000000100016930	cbz	x23, 0x100016950
0000000100016934	add	x24, x27, #0x2
0000000100016938	mov	x0, x23
000000010001693c	mov	x1, x24
0000000100016940	mov	x2, x20
0000000100016944	bl	0x10000e610
0000000100016948	ldr	x23, [x23]
000000010001694c	cbnz	x23, 0x100016938
0000000100016950	adr	x2, #126003 ; literal pool for: "}"
0000000100016954	nop
0000000100016958	mov	x0, x20
000000010001695c	mov	x1, x28
0000000100016960	bl	0x10002a548
0000000100016964	mov	x0, x20
0000000100016968	bl	0x10002a5c4
000000010001696c	ldr	x8, [x22, #0xe0]
0000000100016970	ldr	x8, [x8, #0x50]
0000000100016974	cbz	x8, 0x1000169d0
0000000100016978	adr	x2, #136037 ; literal pool for: "inherited environment = {"
000000010001697c	nop
0000000100016980	mov	x0, x20
0000000100016984	mov	x1, x28
0000000100016988	bl	0x10002a548
000000010001698c	ldr	x8, [x22, #0xe0]
0000000100016990	ldr	x23, [x8, #0x50]
0000000100016994	cbz	x23, 0x1000169b4
0000000100016998	add	x24, x27, #0x2
000000010001699c	mov	x0, x23
00000001000169a0	mov	x1, x24
00000001000169a4	mov	x2, x20
00000001000169a8	bl	0x10000e610
00000001000169ac	ldr	x23, [x23]
00000001000169b0	cbnz	x23, 0x10001699c
00000001000169b4	adr	x2, #125903 ; literal pool for: "}"
00000001000169b8	nop
00000001000169bc	mov	x0, x20
00000001000169c0	mov	x1, x28
00000001000169c4	bl	0x10002a548
00000001000169c8	mov	x0, x20
00000001000169cc	bl	0x10002a5c4
00000001000169d0	adrp	x19, 46 ; 0x100044000
00000001000169d4	ldr	x8, [x19, #0xc08]
00000001000169d8	cbz	x8, 0x100016a30
00000001000169dc	adr	x2, #135963 ; literal pool for: "default environment = {"
00000001000169e0	nop
00000001000169e4	mov	x0, x20
00000001000169e8	mov	x1, x28
00000001000169ec	bl	0x10002a548
00000001000169f0	ldr	x23, [x19, #0xc08]
00000001000169f4	cbz	x23, 0x100016a14
00000001000169f8	add	x24, x27, #0x2
00000001000169fc	mov	x0, x23
0000000100016a00	mov	x1, x24
0000000100016a04	mov	x2, x20
0000000100016a08	bl	0x10000e610
0000000100016a0c	ldr	x23, [x23]
0000000100016a10	cbnz	x23, 0x1000169fc
0000000100016a14	adr	x2, #125807 ; literal pool for: "}"
0000000100016a18	nop
0000000100016a1c	mov	x0, x20
0000000100016a20	mov	x1, x28
0000000100016a24	bl	0x10002a548
0000000100016a28	mov	x0, x20
0000000100016a2c	bl	0x10002a5c4
0000000100016a30	ldrh	w8, [x22, #0x308]
0000000100016a34	cbz	w8, 0x100016a8c
0000000100016a38	adr	x2, #135895 ; literal pool for: "environment = {"
0000000100016a3c	nop
0000000100016a40	mov	x0, x20
0000000100016a44	mov	x1, x28
0000000100016a48	bl	0x10002a548
0000000100016a4c	ldr	x23, [x22, #0x300]
0000000100016a50	cbz	x23, 0x100016a70
0000000100016a54	add	x24, x27, #0x2
0000000100016a58	mov	x0, x23
0000000100016a5c	mov	x1, x24
0000000100016a60	mov	x2, x20
0000000100016a64	bl	0x10000e610
0000000100016a68	ldr	x23, [x23]
0000000100016a6c	cbnz	x23, 0x100016a58
0000000100016a70	adr	x2, #125715 ; literal pool for: "}"
0000000100016a74	nop
0000000100016a78	mov	x0, x20
0000000100016a7c	mov	x1, x28
0000000100016a80	bl	0x10002a548
0000000100016a84	mov	x0, x20
0000000100016a88	bl	0x10002a5c4
0000000100016a8c	add	x19, x22, #0x458
0000000100016a90	ldr	x8, [x22, #0xe0]
0000000100016a94	add	x8, x8, #0x3a8
0000000100016a98	str	x8, [sp]
0000000100016a9c	adr	x2, #135811 ; literal pool for: "domain = %s"
0000000100016aa0	nop
0000000100016aa4	mov	x0, x20
0000000100016aa8	mov	x1, x28
0000000100016aac	bl	0x10002a548
0000000100016ab0	ldr	x8, [x22, #0x268]
0000000100016ab4	cbz	x8, 0x100016adc
0000000100016ab8	str	x8, [sp]
0000000100016abc	adr	x2, #135791 ; literal pool for: "username = %s"
0000000100016ac0	nop
0000000100016ac4	mov	x0, x20
0000000100016ac8	mov	x1, x28
0000000100016acc	bl	0x10002a548
0000000100016ad0	ldr	x8, [x22, #0x270]
0000000100016ad4	cbnz	x8, 0x100016ae4
0000000100016ad8	b	0x100016afc
0000000100016adc	ldr	x8, [x22, #0x270]
0000000100016ae0	cbz	x8, 0x100016b04
0000000100016ae4	str	x8, [sp]
0000000100016ae8	adr	x2, #135761 ; literal pool for: "group = %s"
0000000100016aec	nop
0000000100016af0	mov	x0, x20
0000000100016af4	mov	x1, x28
0000000100016af8	bl	0x10002a548
0000000100016afc	mov	x0, x20
0000000100016b00	bl	0x10002a5c4
0000000100016b04	ldrb	w8, [x19, #0x4]
0000000100016b08	tbz	w8, #0x3, 0x100016b28
0000000100016b0c	ldrh	w8, [x22, #0x278]
0000000100016b10	str	x8, [sp]
0000000100016b14	adr	x2, #135728 ; literal pool for: "umask = %o"
0000000100016b18	nop
0000000100016b1c	mov	x0, x20
0000000100016b20	mov	x1, x28
0000000100016b24	bl	0x10002a548
0000000100016b28	ldr	w8, [x22, #0x28c]
0000000100016b2c	str	x8, [sp]
0000000100016b30	adr	x2, #135711 ; literal pool for: "minimum runtime = %u"
0000000100016b34	nop
0000000100016b38	mov	x0, x20
0000000100016b3c	mov	x1, x28
0000000100016b40	bl	0x10002a548
0000000100016b44	ldr	w8, [x22, #0x288]
0000000100016b48	str	x8, [sp]
0000000100016b4c	adr	x2, #135704 ; literal pool for: "exit timeout = %u"
0000000100016b50	nop
0000000100016b54	mov	x0, x20
0000000100016b58	mov	x1, x28
0000000100016b5c	bl	0x10002a548
0000000100016b60	ldrb	w8, [x22, #0x45c]
0000000100016b64	tbz	w8, #0x5, 0x100016bbc
0000000100016b68	ldr	w8, [x22, #0x2a0]
0000000100016b6c	str	x8, [sp]
0000000100016b70	adr	x2, #135686 ; literal pool for: "voluntary exit timeout = %u"
0000000100016b74	nop
0000000100016b78	mov	x0, x20
0000000100016b7c	mov	x1, x28
0000000100016b80	bl	0x10002a548
0000000100016b84	adr	x8, #186700
0000000100016b88	nop
0000000100016b8c	ldrb	w8, [x8]
0000000100016b90	cbz	w8, 0x100016ba8
0000000100016b94	ldr	w8, [x22, #0x2a4]
0000000100016b98	str	x8, [sp]
0000000100016b9c	adr	x2, #135670 ; literal pool for: "launch watchdog timeout = %u"
0000000100016ba0	nop
0000000100016ba4	b	0x100016bb0
0000000100016ba8	adr	x2, #135687 ; literal pool for: "launch watchdog timeout = (globally disabled)"
0000000100016bac	nop
0000000100016bb0	mov	x0, x20
0000000100016bb4	mov	x1, x28
0000000100016bb8	bl	0x10002a548
0000000100016bbc	str	x19, [sp, #0x28]
0000000100016bc0	ldr	x8, [x22, #0x2b8]
0000000100016bc4	cbz	x8, 0x100016be0
0000000100016bc8	str	x8, [sp]
0000000100016bcc	adr	x2, #135697 ; literal pool for: "exception handler endpoint = %s"
0000000100016bd0	nop
0000000100016bd4	mov	x0, x20
0000000100016bd8	mov	x1, x28
0000000100016bdc	bl	0x10002a548
0000000100016be0	ldr	w8, [x22, #0x310]
0000000100016be4	str	x8, [sp]
0000000100016be8	adr	x2, #135701 ; literal pool for: "runs = %u"
0000000100016bec	nop
0000000100016bf0	mov	x0, x20
0000000100016bf4	mov	x1, x28
0000000100016bf8	bl	0x10002a548
0000000100016bfc	ldr	w8, [x22, #0x314]
0000000100016c00	str	x8, [sp]
0000000100016c04	adr	x2, #135683 ; literal pool for: "successive crashes = %u"
0000000100016c08	nop
0000000100016c0c	mov	x0, x20
0000000100016c10	mov	x1, x28
0000000100016c14	bl	0x10002a548
0000000100016c18	ldr	w8, [x22, #0x330]
0000000100016c1c	cbz	w8, 0x100016d5c
0000000100016c20	str	x8, [sp]
0000000100016c24	adr	x2, #135675 ; literal pool for: "pid = %d"
0000000100016c28	nop
0000000100016c2c	mov	x0, x20
0000000100016c30	mov	x1, x28
0000000100016c34	bl	0x10002a548
0000000100016c38	ldr	w0, [x22, #0x334]
0000000100016c3c	bl	0x10001802c
0000000100016c40	str	x0, [sp]
0000000100016c44	adr	x2, #135652 ; literal pool for: "immediate reason = %s"
0000000100016c48	nop
0000000100016c4c	mov	x0, x20
0000000100016c50	mov	x1, x28
0000000100016c54	bl	0x10002a548
0000000100016c58	ldrh	w8, [x22, #0x348]
0000000100016c5c	str	x8, [sp]
0000000100016c60	adr	x2, #135646 ; literal pool for: "forks = %hu"
0000000100016c64	nop
0000000100016c68	mov	x0, x20
0000000100016c6c	mov	x1, x28
0000000100016c70	bl	0x10002a548
0000000100016c74	ldrh	w8, [x22, #0x34a]
0000000100016c78	str	x8, [sp]
0000000100016c7c	adr	x2, #135630 ; literal pool for: "execs = %hu"
0000000100016c80	nop
0000000100016c84	mov	x0, x20
0000000100016c88	mov	x1, x28
0000000100016c8c	bl	0x10002a548
0000000100016c90	ldrh	w8, [x22, #0x354]
0000000100016c94	adr	x19, #126454 ; literal pool for: "1"
0000000100016c98	nop
0000000100016c9c	adr	x21, #126448 ; literal pool for: "0"
0000000100016ca0	nop
0000000100016ca4	tst	w8, #0x1
0000000100016ca8	csel	x8, x21, x19, eq
0000000100016cac	str	x8, [sp]
0000000100016cb0	adr	x2, #135590 ; literal pool for: "initialized = %s"
0000000100016cb4	nop
0000000100016cb8	mov	x0, x20
0000000100016cbc	mov	x1, x28
0000000100016cc0	bl	0x10002a548
0000000100016cc4	ldrh	w8, [x22, #0x354]
0000000100016cc8	tst	w8, #0x2
0000000100016ccc	csel	x8, x21, x19, eq
0000000100016cd0	str	x8, [sp]
0000000100016cd4	adr	x2, #135571 ; literal pool for: "trampolined = %s"
0000000100016cd8	nop
0000000100016cdc	mov	x0, x20
0000000100016ce0	mov	x1, x28
0000000100016ce4	bl	0x10002a548
0000000100016ce8	ldrh	w8, [x22, #0x354]
0000000100016cec	tst	w8, #0x4
0000000100016cf0	csel	x8, x21, x19, eq
0000000100016cf4	str	x8, [sp]
0000000100016cf8	adr	x2, #135552 ; literal pool for: "started suspended = %s"
0000000100016cfc	nop
0000000100016d00	mov	x0, x20
0000000100016d04	mov	x1, x28
0000000100016d08	bl	0x10002a548
0000000100016d0c	ldrh	w8, [x22, #0x354]
0000000100016d10	tst	w8, #0x8
0000000100016d14	csel	x8, x21, x19, eq
0000000100016d18	str	x8, [sp]
0000000100016d1c	adr	x2, #135539 ; literal pool for: "proxy started suspended = %s"
0000000100016d20	nop
0000000100016d24	mov	x0, x20
0000000100016d28	mov	x1, x28
0000000100016d2c	bl	0x10002a548
0000000100016d30	ldrb	w8, [x22, #0x45c]
0000000100016d34	tbz	w8, #0x5, 0x100016d5c
0000000100016d38	ldrh	w8, [x22, #0x354]
0000000100016d3c	tst	w8, #0x80
0000000100016d40	csel	x8, x21, x19, eq
0000000100016d44	str	x8, [sp]
0000000100016d48	adr	x2, #135524 ; literal pool for: "extension alive = %s"
0000000100016d4c	nop
0000000100016d50	mov	x0, x20
0000000100016d54	mov	x1, x28
0000000100016d58	bl	0x10002a548
0000000100016d5c	add	x23, x22, #0x358
0000000100016d60	ldr	w8, [x22, #0x358]
0000000100016d64	cmp	w8, #0x2
0000000100016d68	b.eq	0x100016d84
0000000100016d6c	cmp	w8, #0x1
0000000100016d70	b.eq	0x100016d90
0000000100016d74	cbnz	w8, 0x100016d9c
0000000100016d78	adr	x2, #135497 ; literal pool for: "last exit code = (never exited)"
0000000100016d7c	nop
0000000100016d80	b	0x100016dc0
0000000100016d84	adr	x2, #135546 ; literal pool for: "last exit code = (failed reap)"
0000000100016d88	nop
0000000100016d8c	b	0x100016dc0
0000000100016d90	adr	x2, #135505 ; literal pool for: "last exit code = (abandoned)"
0000000100016d94	nop
0000000100016d98	b	0x100016dc0
0000000100016d9c	mov	x0, x23
0000000100016da0	bl	0x10002cb54
0000000100016da4	cbz	w0, 0x100017ca8
0000000100016da8	mov	x0, x23
0000000100016dac	bl	0x10002cba0
0000000100016db0	bl	0x10003179c ; symbol stub for: _strsignal
0000000100016db4	str	x0, [sp]
0000000100016db8	adr	x2, #135525 ; literal pool for: "last terminating signal = %s"
0000000100016dbc	nop
0000000100016dc0	mov	x0, x20
0000000100016dc4	mov	x1, x28
0000000100016dc8	bl	0x10002a548
0000000100016dcc	mov	x0, x23
0000000100016dd0	bl	0x10002ccec
0000000100016dd4	cbz	w0, 0x100016e08
0000000100016dd8	mov	x0, x23
0000000100016ddc	bl	0x10002c9d4
0000000100016de0	adr	x8, #122085 ; literal pool for: "(unknown)"
0000000100016de4	nop
0000000100016de8	cmp	x0, #0x0
0000000100016dec	csel	x8, x8, x0, eq
0000000100016df0	str	x8, [sp]
0000000100016df4	adr	x2, #135601 ; literal pool for: "last jetsam exit details = %s"
0000000100016df8	nop
0000000100016dfc	mov	x0, x20
0000000100016e00	mov	x1, x28
0000000100016e04	bl	0x10002a548
0000000100016e08	mov	x0, x20
0000000100016e0c	bl	0x10002a5c4
0000000100016e10	ldr	x8, [x22, #0x238]
0000000100016e14	cbz	x8, 0x100016e98
0000000100016e18	adr	x2, #135595 ; literal pool for: "semaphores = {"
0000000100016e1c	nop
0000000100016e20	mov	x0, x20
0000000100016e24	mov	x1, x28
0000000100016e28	bl	0x10002a548
0000000100016e2c	ldr	x19, [x22, #0x238]
0000000100016e30	cbz	x19, 0x100016e7c
0000000100016e34	add	x23, x27, #0x2
0000000100016e38	add	x21, sp, #0x58
0000000100016e3c	adr	x24, #135574 ; literal pool for: "%s%s => %u"
0000000100016e40	nop
0000000100016e44	add	x0, sp, #0x58
0000000100016e48	orr	w2, wzr, #0x100
0000000100016e4c	mov	w1, #0x0
0000000100016e50	bl	0x100031340 ; symbol stub for: _memset
0000000100016e54	ldr	x8, [x19, #0x18]
0000000100016e58	ldrb	w9, [x19, #0x20]
0000000100016e5c	stp	x21, x9, [sp, #0x8]
0000000100016e60	str	x8, [sp]
0000000100016e64	mov	x0, x20
0000000100016e68	mov	x1, x23
0000000100016e6c	mov	x2, x24
0000000100016e70	bl	0x10002a548
0000000100016e74	ldr	x19, [x19]
0000000100016e78	cbnz	x19, 0x100016e44
0000000100016e7c	adr	x2, #124679 ; literal pool for: "}"
0000000100016e80	nop
0000000100016e84	mov	x0, x20
0000000100016e88	mov	x1, x28
0000000100016e8c	bl	0x10002a548
0000000100016e90	mov	x0, x20
0000000100016e94	bl	0x10002a5c4
0000000100016e98	adr	x2, #135493 ; literal pool for: "event triggers = {"
0000000100016e9c	nop
0000000100016ea0	mov	x0, x20
0000000100016ea4	mov	x1, x28
0000000100016ea8	bl	0x10002a548
0000000100016eac	ldr	x23, [x22, #0x98]
0000000100016eb0	cbz	x23, 0x100016ed0
0000000100016eb4	add	x24, x27, #0x2
0000000100016eb8	mov	x0, x23
0000000100016ebc	mov	x1, x20
0000000100016ec0	mov	x2, x24
0000000100016ec4	bl	0x100028538
0000000100016ec8	ldr	x23, [x23, #0x8]
0000000100016ecc	cbnz	x23, 0x100016eb8
0000000100016ed0	adr	x2, #124595 ; literal pool for: "}"
0000000100016ed4	nop
0000000100016ed8	mov	x0, x20
0000000100016edc	mov	x1, x28
0000000100016ee0	bl	0x10002a548
0000000100016ee4	mov	x0, x20
0000000100016ee8	bl	0x10002a5c4
0000000100016eec	adr	x2, #135428 ; literal pool for: "endpoints = {"
0000000100016ef0	nop
0000000100016ef4	mov	x0, x20
0000000100016ef8	mov	x1, x28
0000000100016efc	bl	0x10002a548
0000000100016f00	ldr	x23, [x22, #0xa8]
0000000100016f04	cbz	x23, 0x100016f24
0000000100016f08	add	x24, x27, #0x2
0000000100016f0c	mov	x0, x23
0000000100016f10	mov	x1, x20
0000000100016f14	mov	x2, x24
0000000100016f18	bl	0x10002f360
0000000100016f1c	ldr	x23, [x23, #0x8]
0000000100016f20	cbnz	x23, 0x100016f0c
0000000100016f24	adr	x2, #124511 ; literal pool for: "}"
0000000100016f28	nop
0000000100016f2c	mov	x0, x20
0000000100016f30	mov	x1, x28
0000000100016f34	bl	0x10002a548
0000000100016f38	mov	x0, x20
0000000100016f3c	bl	0x10002a5c4
0000000100016f40	adr	x2, #135358 ; literal pool for: "dynamic endpoints = {"
0000000100016f44	nop
0000000100016f48	mov	x0, x20
0000000100016f4c	mov	x1, x28
0000000100016f50	bl	0x10002a548
0000000100016f54	ldr	x23, [x22, #0xb0]
0000000100016f58	cbz	x23, 0x100016f78
0000000100016f5c	add	x24, x27, #0x2
0000000100016f60	mov	x0, x23
0000000100016f64	mov	x1, x20
0000000100016f68	mov	x2, x24
0000000100016f6c	bl	0x10002f360
0000000100016f70	ldr	x23, [x23, #0x8]
0000000100016f74	cbnz	x23, 0x100016f60
0000000100016f78	adr	x2, #124427 ; literal pool for: "}"
0000000100016f7c	nop
0000000100016f80	mov	x0, x20
0000000100016f84	mov	x1, x28
0000000100016f88	bl	0x10002a548
0000000100016f8c	mov	x0, x20
0000000100016f90	bl	0x10002a5c4
0000000100016f94	adr	x2, #135296 ; literal pool for: "pid-local endpoints = {"
0000000100016f98	nop
0000000100016f9c	mov	x0, x20
0000000100016fa0	mov	x1, x28
0000000100016fa4	bl	0x10002a548
0000000100016fa8	ldr	x23, [x22, #0xb8]
0000000100016fac	cbz	x23, 0x100016fcc
0000000100016fb0	add	x24, x27, #0x2
0000000100016fb4	mov	x0, x23
0000000100016fb8	mov	x1, x20
0000000100016fbc	mov	x2, x24
0000000100016fc0	bl	0x10002f360
0000000100016fc4	ldr	x23, [x23, #0x8]
0000000100016fc8	cbnz	x23, 0x100016fb4
0000000100016fcc	adr	x2, #124343 ; literal pool for: "}"
0000000100016fd0	nop
0000000100016fd4	mov	x0, x20
0000000100016fd8	mov	x1, x28
0000000100016fdc	bl	0x10002a548
0000000100016fe0	mov	x0, x20
0000000100016fe4	bl	0x10002a5c4
0000000100016fe8	adr	x2, #135236 ; literal pool for: "instance-specific endpoints = {"
0000000100016fec	nop
0000000100016ff0	mov	x0, x20
0000000100016ff4	mov	x1, x28
0000000100016ff8	bl	0x10002a548
0000000100016ffc	ldr	x23, [x22, #0xc8]
0000000100017000	cbz	x23, 0x100017020
0000000100017004	add	x24, x27, #0x2
0000000100017008	mov	x0, x23
000000010001700c	mov	x1, x20
0000000100017010	mov	x2, x24
0000000100017014	bl	0x10002f360
0000000100017018	ldr	x23, [x23, #0x8]
000000010001701c	cbnz	x23, 0x100017008
0000000100017020	adr	x2, #124259 ; literal pool for: "}"
0000000100017024	nop
0000000100017028	mov	x0, x20
000000010001702c	mov	x1, x28
0000000100017030	bl	0x10002a548
0000000100017034	mov	x0, x20
0000000100017038	bl	0x10002a5c4
000000010001703c	adr	x2, #135184 ; literal pool for: "event channels = {"
0000000100017040	nop
0000000100017044	mov	x0, x20
0000000100017048	mov	x1, x28
000000010001704c	bl	0x10002a548
0000000100017050	ldr	x23, [x22, #0xc0]
0000000100017054	cbz	x23, 0x100017074
0000000100017058	add	x24, x27, #0x2
000000010001705c	mov	x0, x23
0000000100017060	mov	x1, x20
0000000100017064	mov	x2, x24
0000000100017068	bl	0x10002f360
000000010001706c	ldr	x23, [x23, #0x8]
0000000100017070	cbnz	x23, 0x10001705c
0000000100017074	adr	x2, #124175 ; literal pool for: "}"
0000000100017078	nop
000000010001707c	mov	x0, x20
0000000100017080	mov	x1, x28
0000000100017084	bl	0x10002a548
0000000100017088	mov	x0, x20
000000010001708c	bl	0x10002a5c4
0000000100017090	adr	x2, #125384 ; literal pool for: "sockets = {"
0000000100017094	nop
0000000100017098	mov	x0, x20
000000010001709c	mov	x1, x28
00000001000170a0	bl	0x10002a548
00000001000170a4	ldr	x23, [x22, #0xd0]
00000001000170a8	cbz	x23, 0x1000170c8
00000001000170ac	add	x24, x27, #0x2
00000001000170b0	mov	x0, x23
00000001000170b4	mov	x1, x20
00000001000170b8	mov	x2, x24
00000001000170bc	bl	0x100010530
00000001000170c0	ldr	x23, [x23, #0x8]
00000001000170c4	cbnz	x23, 0x1000170b0
00000001000170c8	adr	x2, #124091 ; literal pool for: "}"
00000001000170cc	nop
00000001000170d0	mov	x0, x20
00000001000170d4	mov	x1, x28
00000001000170d8	bl	0x10002a548
00000001000170dc	mov	x0, x20
00000001000170e0	bl	0x10002a5c4
00000001000170e4	ldr	w21, [x22, #0x2c0]
00000001000170e8	lsr	w19, w21, #8
00000001000170ec	cmp	w21, #0x6ff
00000001000170f0	ccmp	w19, #0x0, #0x4, ls
00000001000170f4	b.eq	0x10001711c
00000001000170f8	adr	x8, #174792
00000001000170fc	nop
0000000100017100	ldr	x8, [x8, w19, uxtw #3]
0000000100017104	str	x8, [sp]
0000000100017108	adr	x2, #134999 ; literal pool for: "spawn type = %s"
000000010001710c	nop
0000000100017110	mov	x0, x20
0000000100017114	mov	x1, x28
0000000100017118	bl	0x10002a548
000000010001711c	cmp	w21, #0x5ff
0000000100017120	b.hi	0x100017150
0000000100017124	cbz	w19, 0x100017150
0000000100017128	ldr	w8, [x22, #0x2c4]
000000010001712c	adr	x9, #174796
0000000100017130	nop
0000000100017134	ldr	x8, [x9, x8, lsl #3]
0000000100017138	str	x8, [sp]
000000010001713c	adr	x2, #134963 ; literal pool for: "spawn role = %s"
0000000100017140	nop
0000000100017144	mov	x0, x20
0000000100017148	mov	x1, x28
000000010001714c	bl	0x10002a548
0000000100017150	ldr	x8, [x22, #0x2d0]
0000000100017154	cbnz	x8, 0x100017160
0000000100017158	ldr	w8, [x22, #0x430]
000000010001715c	cbz	w8, 0x100017264
0000000100017160	adr	x2, #134943 ; literal pool for: "binary order preference = {"
0000000100017164	nop
0000000100017168	mov	x0, x20
000000010001716c	mov	x1, x28
0000000100017170	bl	0x10002a548
0000000100017174	ldr	x8, [x22, #0x2d0]
0000000100017178	cbz	x8, 0x1000171f0
000000010001717c	mov	x19, #0x0
0000000100017180	add	x23, x27, #0x2
0000000100017184	adr	x21, #130668 ; literal pool for: "(invalid)"
0000000100017188	nop
000000010001718c	adr	x25, #174268
0000000100017190	nop
0000000100017194	adr	x26, #174412
0000000100017198	nop
000000010001719c	adr	x24, #123662 ; literal pool for: "%s"
00000001000171a0	nop
00000001000171a4	ldr	x8, [x22, #0x2c8]
00000001000171a8	ldr	w10, [x8, x19, lsl #2]
00000001000171ac	and	w8, w10, #0xfeffffff
00000001000171b0	sub	w11, w8, #0x1
00000001000171b4	mov	x9, x21
00000001000171b8	cmp	w11, #0x11
00000001000171bc	b.hi	0x1000171cc
00000001000171c0	tst	w10, #0x1000000
00000001000171c4	csel	x9, x26, x25, eq
00000001000171c8	ldr	x9, [x9, w8, sxtw #3]
00000001000171cc	str	x9, [sp]
00000001000171d0	mov	x0, x20
00000001000171d4	mov	x1, x23
00000001000171d8	mov	x2, x24
00000001000171dc	bl	0x10002a548
00000001000171e0	add	x19, x19, #0x1
00000001000171e4	ldr	x8, [x22, #0x2d0]
00000001000171e8	cmp	x19, x8
00000001000171ec	b.lo	0x1000171a4
00000001000171f0	ldr	w8, [x22, #0x430]
00000001000171f4	cbz	w8, 0x100017248
00000001000171f8	add	x1, x27, #0x2
00000001000171fc	and	w9, w8, #0xfeffffff
0000000100017200	sub	w10, w9, #0x1
0000000100017204	cmp	w10, #0x11
0000000100017208	b.hi	0x10001722c
000000010001720c	adr	x10, #174140
0000000100017210	nop
0000000100017214	adr	x11, #174284
0000000100017218	nop
000000010001721c	tst	w8, #0x1000000
0000000100017220	csel	x8, x11, x10, eq
0000000100017224	ldr	x8, [x8, w9, sxtw #3]
0000000100017228	b	0x100017234
000000010001722c	adr	x8, #130500 ; literal pool for: "(invalid)"
0000000100017230	nop
0000000100017234	str	x8, [sp]
0000000100017238	adr	x2, #133559 ; literal pool for: "+ %s"
000000010001723c	nop
0000000100017240	mov	x0, x20
0000000100017244	bl	0x10002a548
0000000100017248	adr	x2, #123707 ; literal pool for: "}"
000000010001724c	nop
0000000100017250	mov	x0, x20
0000000100017254	mov	x1, x28
0000000100017258	bl	0x10002a548
000000010001725c	mov	x0, x20
0000000100017260	bl	0x10002a5c4
0000000100017264	ldr	w8, [x22, #0x2e0]
0000000100017268	str	x8, [sp]
000000010001726c	adr	x2, #134703 ; literal pool for: "jetsam priority = %d"
0000000100017270	nop
0000000100017274	mov	x0, x20
0000000100017278	mov	x1, x28
000000010001727c	bl	0x10002a548
0000000100017280	ldr	w8, [x22, #0x440]
0000000100017284	tbnz	w8, #0x1f, 0x1000172a0
0000000100017288	str	x8, [sp]
000000010001728c	adr	x2, #134692 ; literal pool for: "+ %d"
0000000100017290	nop
0000000100017294	mov	x0, x20
0000000100017298	mov	x1, x28
000000010001729c	bl	0x10002a548
00000001000172a0	ldr	w8, [x22, #0x2e4]
00000001000172a4	cmp	w8, #0x1
00000001000172a8	b.lt	0x1000172d8
00000001000172ac	ldr	w9, [x22, #0x2dc]
00000001000172b0	adr	x10, #134702 ; literal pool for: "hard"
00000001000172b4	nop
00000001000172b8	adr	x11, #134699 ; literal pool for: "soft"
00000001000172bc	nop
00000001000172c0	tst	w9, #0x4
00000001000172c4	csel	x9, x11, x10, eq
00000001000172c8	stp	x9, x8, [sp]
00000001000172cc	adr	x2, #134633 ; literal pool for: "jetsam memory limit (active, %s) = %d MB"
00000001000172d0	nop
00000001000172d4	b	0x1000172e4
00000001000172d8	cbz	w8, 0x100017c40
00000001000172dc	adr	x2, #134668 ; literal pool for: "jetsam memory limit (active) = (unlimited)"
00000001000172e0	nop
00000001000172e4	mov	x0, x20
00000001000172e8	mov	x1, x28
00000001000172ec	bl	0x10002a548
00000001000172f0	ldr	w8, [x22, #0x444]
00000001000172f4	cmp	w8, #0x1
00000001000172f8	b.lt	0x100017318
00000001000172fc	str	x8, [sp]
0000000100017300	adr	x2, #134675 ; literal pool for: "+ %d MB"
0000000100017304	nop
0000000100017308	mov	x0, x20
000000010001730c	mov	x1, x28
0000000100017310	bl	0x10002a548
0000000100017314	b	0x10001731c
0000000100017318	tbnz	w8, #0x1f, 0x100017c68
000000010001731c	ldr	w8, [x22, #0x2e8]
0000000100017320	cmp	w8, #0x1
0000000100017324	b.lt	0x100017354
0000000100017328	ldr	w9, [x22, #0x2dc]
000000010001732c	adr	x10, #134578 ; literal pool for: "hard"
0000000100017330	nop
0000000100017334	adr	x11, #134575 ; literal pool for: "soft"
0000000100017338	nop
000000010001733c	tst	w9, #0x8
0000000100017340	csel	x9, x11, x10, eq
0000000100017344	stp	x9, x8, [sp]
0000000100017348	adr	x2, #134625 ; literal pool for: "jetsam memory limit (inactive, %s) = %d MB"
000000010001734c	nop
0000000100017350	b	0x100017360
0000000100017354	cbz	w8, 0x100017c74
0000000100017358	adr	x2, #134652 ; literal pool for: "jetsam memory limit (inactive) = (unlimited)"
000000010001735c	nop
0000000100017360	mov	x0, x20
0000000100017364	mov	x1, x28
0000000100017368	bl	0x10002a548
000000010001736c	ldr	w8, [x22, #0x444]
0000000100017370	cmp	w8, #0x1
0000000100017374	b.lt	0x100017394
0000000100017378	str	x8, [sp]
000000010001737c	adr	x2, #134551 ; literal pool for: "+ %d MB"
0000000100017380	nop
0000000100017384	mov	x0, x20
0000000100017388	mov	x1, x28
000000010001738c	bl	0x10002a548
0000000100017390	b	0x100017398
0000000100017394	tbnz	w8, #0x1f, 0x100017c9c
0000000100017398	mov	x0, x22
000000010001739c	bl	0x100017d38
00000001000173a0	str	x0, [sp]
00000001000173a4	adr	x2, #134621 ; literal pool for: "jetsamproperties category = %s"
00000001000173a8	nop
00000001000173ac	mov	x0, x20
00000001000173b0	mov	x1, x28
00000001000173b4	bl	0x10002a548
00000001000173b8	ldrb	w8, [x22, #0x45d]
00000001000173bc	tbz	w8, #0x5, 0x1000173d4
00000001000173c0	adr	x2, #134624 ; literal pool for: "submitted job. ignore execute allowed"
00000001000173c4	nop
00000001000173c8	mov	x0, x20
00000001000173cc	mov	x1, x28
00000001000173d0	bl	0x10002a548
00000001000173d4	ldr	w8, [x22, #0x2ec]
00000001000173d8	cbz	w8, 0x1000173f4
00000001000173dc	str	x8, [sp]
00000001000173e0	adr	x2, #134630 ; literal pool for: "jetsam thread limit = %d"
00000001000173e4	nop
00000001000173e8	mov	x0, x20
00000001000173ec	mov	x1, x28
00000001000173f0	bl	0x10002a548
00000001000173f4	ldr	x8, [x22, #0x2f0]
00000001000173f8	cbz	x8, 0x100017414
00000001000173fc	str	x8, [sp]
0000000100017400	adr	x2, #134623 ; literal pool for: "jetsam address limit = %llu"
0000000100017404	nop
0000000100017408	mov	x0, x20
000000010001740c	mov	x1, x28
0000000100017410	bl	0x10002a548
0000000100017414	ldrb	w8, [x22, #0x30a]
0000000100017418	ldr	w9, [x22, #0x30c]
000000010001741c	str	x27, [sp, #0x30]
0000000100017420	cbnz	w8, 0x100017434
0000000100017424	cbnz	w9, 0x100017434
0000000100017428	adr	x2, #134641 ; literal pool for: "cpumon = default"
000000010001742c	nop
0000000100017430	b	0x100017440
0000000100017434	stp	x8, x9, [sp]
0000000100017438	adr	x2, #134595 ; literal pool for: "cpumon = %d%% over %u seconds"
000000010001743c	nop
0000000100017440	mov	x0, x20
0000000100017444	mov	x1, x28
0000000100017448	bl	0x10002a548
000000010001744c	ldr	x8, [x22, #0x240]
0000000100017450	cbz	x8, 0x100017594
0000000100017454	adr	x2, #134614 ; literal pool for: "resource limits = {"
0000000100017458	nop
000000010001745c	mov	x0, x20
0000000100017460	str	x28, [sp, #0x20]
0000000100017464	mov	x1, x28
0000000100017468	bl	0x10002a548
000000010001746c	ldr	x19, [x22, #0x240]
0000000100017470	cbz	x19, 0x100017574
0000000100017474	ldr	x8, [sp, #0x30]
0000000100017478	add	x23, x8, #0x2
000000010001747c	orr	x28, xzr, #0x7fffffffffffffff
0000000100017480	adr	x24, #134590 ; literal pool for: "(infinity)"
0000000100017484	nop
0000000100017488	add	x21, sp, #0x58
000000010001748c	adr	x25, #134605 ; literal pool for: "%s (hard) => %s"
0000000100017490	nop
0000000100017494	adr	x26, #123057 ; literal pool for: "%llu"
0000000100017498	nop
000000010001749c	adr	x27, #134573 ; literal pool for: "%s (soft) => %s"
00000001000174a0	nop
00000001000174a4	ldrb	w8, [x19, #0x25]
00000001000174a8	cbz	w8, 0x100017508
00000001000174ac	ldr	x8, [x19, #0x10]
00000001000174b0	cmp	x8, x28
00000001000174b4	b.ne	0x1000174d0
00000001000174b8	add	x0, sp, #0x58
00000001000174bc	orr	w1, wzr, #0x40
00000001000174c0	orr	w3, wzr, #0x40
00000001000174c4	mov	w2, #0x0
00000001000174c8	mov	x4, x24
00000001000174cc	b	0x1000174e8
00000001000174d0	str	x8, [sp]
00000001000174d4	add	x0, sp, #0x58
00000001000174d8	orr	w1, wzr, #0x40
00000001000174dc	orr	w3, wzr, #0x40
00000001000174e0	mov	w2, #0x0
00000001000174e4	mov	x4, x26
00000001000174e8	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
00000001000174ec	ldr	w0, [x19, #0x20]
00000001000174f0	bl	0x100029818
00000001000174f4	stp	x0, x21, [sp]
00000001000174f8	mov	x0, x20
00000001000174fc	mov	x1, x23
0000000100017500	mov	x2, x27
0000000100017504	bl	0x10002a548
0000000100017508	ldrb	w8, [x19, #0x24]
000000010001750c	cbz	w8, 0x10001756c
0000000100017510	ldr	x8, [x19, #0x18]
0000000100017514	cmp	x8, x28
0000000100017518	b.ne	0x100017534
000000010001751c	add	x0, sp, #0x58
0000000100017520	orr	w1, wzr, #0x40
0000000100017524	orr	w3, wzr, #0x40
0000000100017528	mov	w2, #0x0
000000010001752c	mov	x4, x24
0000000100017530	b	0x10001754c
0000000100017534	str	x8, [sp]
0000000100017538	add	x0, sp, #0x58
000000010001753c	orr	w1, wzr, #0x40
0000000100017540	orr	w3, wzr, #0x40
0000000100017544	mov	w2, #0x0
0000000100017548	mov	x4, x26
000000010001754c	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100017550	ldr	w0, [x19, #0x20]
0000000100017554	bl	0x100029818
0000000100017558	stp	x0, x21, [sp]
000000010001755c	mov	x0, x20
0000000100017560	mov	x1, x23
0000000100017564	mov	x2, x25
0000000100017568	bl	0x10002a548
000000010001756c	ldr	x19, [x19]
0000000100017570	cbnz	x19, 0x1000174a4
0000000100017574	adr	x2, #122895 ; literal pool for: "}"
0000000100017578	nop
000000010001757c	mov	x0, x20
0000000100017580	ldr	x28, [sp, #0x20]
0000000100017584	mov	x1, x28
0000000100017588	bl	0x10002a548
000000010001758c	mov	x0, x20
0000000100017590	bl	0x10002a5c4
0000000100017594	ldr	w8, [x22, #0x2b0]
0000000100017598	cbz	w8, 0x1000175b4
000000010001759c	str	x8, [sp]
00000001000175a0	adr	x2, #134345 ; literal pool for: "run interval = %u seconds"
00000001000175a4	nop
00000001000175a8	mov	x0, x20
00000001000175ac	mov	x1, x28
00000001000175b0	bl	0x10002a548
00000001000175b4	mov	x0, x20
00000001000175b8	bl	0x10002a5c4
00000001000175bc	adr	x2, #134343 ; literal pool for: "properties = {"
00000001000175c0	nop
00000001000175c4	mov	x0, x20
00000001000175c8	mov	x1, x28
00000001000175cc	bl	0x10002a548
00000001000175d0	ldp	x21, x19, [sp, #0x28]
00000001000175d4	add	x22, x19, #0x2
00000001000175d8	ldr	x8, [x21]
00000001000175dc	adr	x24, #124078 ; literal pool for: "1"
00000001000175e0	nop
00000001000175e4	adr	x25, #124072 ; literal pool for: "0"
00000001000175e8	nop
00000001000175ec	tst	x8, #0x1
00000001000175f0	csel	x8, x25, x24, eq
00000001000175f4	adr	x9, #134310 ; literal pool for: "partial import"
00000001000175f8	nop
00000001000175fc	stp	x9, x8, [sp]
0000000100017600	adr	x23, #134290 ; literal pool for: "%s = %s"
0000000100017604	nop
0000000100017608	mov	x0, x20
000000010001760c	mov	x1, x22
0000000100017610	mov	x2, x23
0000000100017614	bl	0x10002a548
0000000100017618	ldr	x8, [x21]
000000010001761c	tst	x8, #0x2
0000000100017620	csel	x8, x25, x24, eq
0000000100017624	adr	x9, #134277 ; literal pool for: "launchd bundle"
0000000100017628	nop
000000010001762c	stp	x9, x8, [sp]
0000000100017630	mov	x0, x20
0000000100017634	mov	x1, x22
0000000100017638	mov	x2, x23
000000010001763c	bl	0x10002a548
0000000100017640	ldr	x8, [x21]
0000000100017644	tst	x8, #0x4
0000000100017648	csel	x8, x25, x24, eq
000000010001764c	adr	x9, #134252 ; literal pool for: "xpc bundle"
0000000100017650	nop
0000000100017654	stp	x9, x8, [sp]
0000000100017658	mov	x0, x20
000000010001765c	mov	x1, x22
0000000100017660	mov	x2, x23
0000000100017664	bl	0x10002a548
0000000100017668	ldr	x8, [x21]
000000010001766c	tst	x8, #0x8
0000000100017670	csel	x8, x25, x24, eq
0000000100017674	adr	x9, #134223 ; literal pool for: "keepalive"
0000000100017678	nop
000000010001767c	stp	x9, x8, [sp]
0000000100017680	mov	x0, x20
0000000100017684	mov	x1, x22
0000000100017688	mov	x2, x23
000000010001768c	bl	0x10002a548
0000000100017690	ldr	x8, [x21]
0000000100017694	tst	x8, #0x10
0000000100017698	csel	x8, x25, x24, eq
000000010001769c	adr	x9, #134193 ; literal pool for: "runatload"
00000001000176a0	nop
00000001000176a4	stp	x9, x8, [sp]
00000001000176a8	mov	x0, x20
00000001000176ac	mov	x1, x22
00000001000176b0	mov	x2, x23
00000001000176b4	bl	0x10002a548
00000001000176b8	ldr	x8, [x21]
00000001000176bc	tst	x8, #0x20
00000001000176c0	csel	x8, x25, x24, eq
00000001000176c4	adr	x9, #134163 ; literal pool for: "low priority i/o"
00000001000176c8	nop
00000001000176cc	stp	x9, x8, [sp]
00000001000176d0	mov	x0, x20
00000001000176d4	mov	x1, x22
00000001000176d8	mov	x2, x23
00000001000176dc	bl	0x10002a548
00000001000176e0	ldr	x8, [x21]
00000001000176e4	tst	x8, #0x40
00000001000176e8	csel	x8, x25, x24, eq
00000001000176ec	adr	x9, #134140 ; literal pool for: "low priority background i/o"
00000001000176f0	nop
00000001000176f4	stp	x9, x8, [sp]
00000001000176f8	mov	x0, x20
00000001000176fc	mov	x1, x22
0000000100017700	mov	x2, x23
0000000100017704	bl	0x10002a548
0000000100017708	ldr	x8, [x21]
000000010001770c	tst	x8, #0x80
0000000100017710	csel	x8, x25, x24, eq
0000000100017714	adr	x9, #134128 ; literal pool for: "exception handler"
0000000100017718	nop
000000010001771c	stp	x9, x8, [sp]
0000000100017720	mov	x0, x20
0000000100017724	mov	x1, x22
0000000100017728	mov	x2, x23
000000010001772c	bl	0x10002a548
0000000100017730	ldr	x8, [x21]
0000000100017734	tst	x8, #0x100
0000000100017738	csel	x8, x25, x24, eq
000000010001773c	adr	x9, #134106 ; literal pool for: "multiple instances"
0000000100017740	nop
0000000100017744	stp	x9, x8, [sp]
0000000100017748	mov	x0, x20
000000010001774c	mov	x1, x22
0000000100017750	mov	x2, x23
0000000100017754	bl	0x10002a548
0000000100017758	ldr	x8, [x21]
000000010001775c	tst	x8, #0x200
0000000100017760	csel	x8, x25, x24, eq
0000000100017764	adr	x9, #134085 ; literal pool for: "supports transactions"
0000000100017768	nop
000000010001776c	stp	x9, x8, [sp]
0000000100017770	mov	x0, x20
0000000100017774	mov	x1, x22
0000000100017778	mov	x2, x23
000000010001777c	bl	0x10002a548
0000000100017780	ldr	x8, [x21]
0000000100017784	tst	x8, #0x400
0000000100017788	csel	x8, x25, x24, eq
000000010001778c	adr	x9, #134067 ; literal pool for: "supports pressured exit"
0000000100017790	nop
0000000100017794	stp	x9, x8, [sp]
0000000100017798	mov	x0, x20
000000010001779c	mov	x1, x22
00000001000177a0	mov	x2, x23
00000001000177a4	bl	0x10002a548
00000001000177a8	ldr	x8, [x21]
00000001000177ac	tst	x8, #0x2000000000000
00000001000177b0	csel	x8, x25, x24, eq
00000001000177b4	adr	x9, #134051 ; literal pool for: "supports idle hysteresis"
00000001000177b8	nop
00000001000177bc	stp	x9, x8, [sp]
00000001000177c0	mov	x0, x20
00000001000177c4	mov	x1, x22
00000001000177c8	mov	x2, x23
00000001000177cc	bl	0x10002a548
00000001000177d0	ldr	x8, [x21]
00000001000177d4	tst	x8, #0x800
00000001000177d8	csel	x8, x25, x24, eq
00000001000177dc	adr	x9, #134036 ; literal pool for: "enter kdp before kill"
00000001000177e0	nop
00000001000177e4	stp	x9, x8, [sp]
00000001000177e8	mov	x0, x20
00000001000177ec	mov	x1, x22
00000001000177f0	mov	x2, x23
00000001000177f4	bl	0x10002a548
00000001000177f8	ldr	x8, [x21]
00000001000177fc	tst	x8, #0x1000
0000000100017800	csel	x8, x25, x24, eq
0000000100017804	adr	x9, #134018 ; literal pool for: "wait for debugger"
0000000100017808	nop
000000010001780c	stp	x9, x8, [sp]
0000000100017810	mov	x0, x20
0000000100017814	mov	x1, x22
0000000100017818	mov	x2, x23
000000010001781c	bl	0x10002a548
0000000100017820	ldr	x8, [x21]
0000000100017824	tst	x8, #0x2000
0000000100017828	csel	x8, x25, x24, eq
000000010001782c	adr	x9, #125226 ; literal pool for: "app"
0000000100017830	nop
0000000100017834	stp	x9, x8, [sp]
0000000100017838	mov	x0, x20
000000010001783c	mov	x1, x22
0000000100017840	mov	x2, x23
0000000100017844	bl	0x10002a548
0000000100017848	ldr	x8, [x21]
000000010001784c	tst	x8, #0x4000
0000000100017850	csel	x8, x25, x24, eq
0000000100017854	adr	x9, #125175 ; literal pool for: "system app"
0000000100017858	nop
000000010001785c	stp	x9, x8, [sp]
0000000100017860	mov	x0, x20
0000000100017864	mov	x1, x22
0000000100017868	mov	x2, x23
000000010001786c	bl	0x10002a548
0000000100017870	ldr	x8, [x21]
0000000100017874	tst	x8, #0x8000
0000000100017878	csel	x8, x25, x24, eq
000000010001787c	adr	x9, #133916 ; literal pool for: "inetd-compatible"
0000000100017880	nop
0000000100017884	stp	x9, x8, [sp]
0000000100017888	mov	x0, x20
000000010001788c	mov	x1, x22
0000000100017890	mov	x2, x23
0000000100017894	bl	0x10002a548
0000000100017898	ldr	x8, [x21]
000000010001789c	tst	x8, #0x10000
00000001000178a0	csel	x8, x25, x24, eq
00000001000178a4	adr	x9, #133893 ; literal pool for: "inetd listener"
00000001000178a8	nop
00000001000178ac	stp	x9, x8, [sp]
00000001000178b0	mov	x0, x20
00000001000178b4	mov	x1, x22
00000001000178b8	mov	x2, x23
00000001000178bc	bl	0x10002a548
00000001000178c0	ldr	x8, [x21]
00000001000178c4	tst	x8, #0x20000
00000001000178c8	csel	x8, x25, x24, eq
00000001000178cc	adr	x9, #133868 ; literal pool for: "abandon process group"
00000001000178d0	nop
00000001000178d4	stp	x9, x8, [sp]
00000001000178d8	mov	x0, x20
00000001000178dc	mov	x1, x22
00000001000178e0	mov	x2, x23
00000001000178e4	bl	0x10002a548
00000001000178e8	ldr	x8, [x21]
00000001000178ec	tst	x8, #0x80000
00000001000178f0	csel	x8, x25, x24, eq
00000001000178f4	adr	x9, #125226 ; literal pool for: "one-shot"
00000001000178f8	nop
00000001000178fc	stp	x9, x8, [sp]
0000000100017900	mov	x0, x20
0000000100017904	mov	x1, x22
0000000100017908	mov	x2, x23
000000010001790c	bl	0x10002a548
0000000100017910	ldr	x8, [x21]
0000000100017914	tst	x8, #0x100000
0000000100017918	csel	x8, x25, x24, eq
000000010001791c	adr	x9, #133810 ; literal pool for: "event monitor"
0000000100017920	nop
0000000100017924	stp	x9, x8, [sp]
0000000100017928	mov	x0, x20
000000010001792c	mov	x1, x22
0000000100017930	mov	x2, x23
0000000100017934	bl	0x10002a548
0000000100017938	ldr	x8, [x21]
000000010001793c	tst	x8, #0x200000
0000000100017940	csel	x8, x25, x24, eq
0000000100017944	adr	x9, #133784 ; literal pool for: "penalty box"
0000000100017948	nop
000000010001794c	stp	x9, x8, [sp]
0000000100017950	mov	x0, x20
0000000100017954	mov	x1, x22
0000000100017958	mov	x2, x23
000000010001795c	bl	0x10002a548
0000000100017960	ldr	x8, [x21]
0000000100017964	tst	x8, #0x400000
0000000100017968	csel	x8, x25, x24, eq
000000010001796c	adr	x9, #133756 ; literal pool for: "pended non-demand spawn"
0000000100017970	nop
0000000100017974	stp	x9, x8, [sp]
0000000100017978	mov	x0, x20
000000010001797c	mov	x1, x22
0000000100017980	mov	x2, x23
0000000100017984	bl	0x10002a548
0000000100017988	ldr	x8, [x21]
000000010001798c	tst	x8, #0x800000
0000000100017990	csel	x8, x25, x24, eq
0000000100017994	adr	x9, #133740 ; literal pool for: "role account"
0000000100017998	nop
000000010001799c	stp	x9, x8, [sp]
00000001000179a0	mov	x0, x20
00000001000179a4	mov	x1, x22
00000001000179a8	mov	x2, x23
00000001000179ac	bl	0x10002a548
00000001000179b0	ldr	x8, [x21]
00000001000179b4	tst	x8, #0x1000000
00000001000179b8	csel	x8, x25, x24, eq
00000001000179bc	adr	x9, #133713 ; literal pool for: "launch only once"
00000001000179c0	nop
00000001000179c4	stp	x9, x8, [sp]
00000001000179c8	mov	x0, x20
00000001000179cc	mov	x1, x22
00000001000179d0	mov	x2, x23
00000001000179d4	bl	0x10002a548
00000001000179d8	ldr	x8, [x21]
00000001000179dc	tst	x8, #0x2000000
00000001000179e0	csel	x8, x25, x24, eq
00000001000179e4	adr	x9, #124946 ; literal pool for: "system support"
00000001000179e8	nop
00000001000179ec	stp	x9, x8, [sp]
00000001000179f0	mov	x0, x20
00000001000179f4	mov	x1, x22
00000001000179f8	mov	x2, x23
00000001000179fc	bl	0x10002a548
0000000100017a00	ldr	x8, [x21]
0000000100017a04	tst	x8, #0x4000000
0000000100017a08	csel	x8, x25, x24, eq
0000000100017a0c	adr	x9, #133650 ; literal pool for: "app-like"
0000000100017a10	nop
0000000100017a14	stp	x9, x8, [sp]
0000000100017a18	mov	x0, x20
0000000100017a1c	mov	x1, x22
0000000100017a20	mov	x2, x23
0000000100017a24	bl	0x10002a548
0000000100017a28	ldr	x8, [x21]
0000000100017a2c	tst	x8, #0x10000000
0000000100017a30	csel	x8, x25, x24, eq
0000000100017a34	adr	x9, #133619 ; literal pool for: "inferred program"
0000000100017a38	nop
0000000100017a3c	stp	x9, x8, [sp]
0000000100017a40	mov	x0, x20
0000000100017a44	mov	x1, x22
0000000100017a48	mov	x2, x23
0000000100017a4c	bl	0x10002a548
0000000100017a50	ldr	x8, [x21]
0000000100017a54	tst	x8, #0x100000000
0000000100017a58	csel	x8, x25, x24, eq
0000000100017a5c	adr	x9, #133596 ; literal pool for: "ios home screen app"
0000000100017a60	nop
0000000100017a64	stp	x9, x8, [sp]
0000000100017a68	mov	x0, x20
0000000100017a6c	mov	x1, x22
0000000100017a70	mov	x2, x23
0000000100017a74	bl	0x10002a548
0000000100017a78	ldr	x8, [x21]
0000000100017a7c	tst	x8, #0x200000000
0000000100017a80	csel	x8, x25, x24, eq
0000000100017a84	adr	x9, #133576 ; literal pool for: "abandon coalition"
0000000100017a88	nop
0000000100017a8c	stp	x9, x8, [sp]
0000000100017a90	mov	x0, x20
0000000100017a94	mov	x1, x22
0000000100017a98	mov	x2, x23
0000000100017a9c	bl	0x10002a548
0000000100017aa0	ldr	x8, [x21]
0000000100017aa4	tst	x8, #0x1000000000
0000000100017aa8	csel	x8, x25, x24, eq
0000000100017aac	adr	x9, #133554 ; literal pool for: "high bits aslr"
0000000100017ab0	nop
0000000100017ab4	stp	x9, x8, [sp]
0000000100017ab8	mov	x0, x20
0000000100017abc	mov	x1, x22
0000000100017ac0	mov	x2, x23
0000000100017ac4	bl	0x10002a548
0000000100017ac8	ldr	x8, [x21]
0000000100017acc	tst	x8, #0x2000000000
0000000100017ad0	csel	x8, x25, x24, eq
0000000100017ad4	adr	x9, #124450 ; literal pool for: "extension"
0000000100017ad8	nop
0000000100017adc	stp	x9, x8, [sp]
0000000100017ae0	mov	x0, x20
0000000100017ae4	mov	x1, x22
0000000100017ae8	mov	x2, x23
0000000100017aec	bl	0x10002a548
0000000100017af0	ldr	x8, [x21]
0000000100017af4	tst	x8, #0x20000000
0000000100017af8	csel	x8, x25, x24, eq
0000000100017afc	adr	x9, #133489 ; literal pool for: "nano allocator"
0000000100017b00	nop
0000000100017b04	stp	x9, x8, [sp]
0000000100017b08	mov	x0, x20
0000000100017b0c	mov	x1, x22
0000000100017b10	mov	x2, x23
0000000100017b14	bl	0x10002a548
0000000100017b18	ldr	x8, [x21]
0000000100017b1c	tst	x8, #0x400000000
0000000100017b20	csel	x8, x25, x24, eq
0000000100017b24	adr	x9, #133464 ; literal pool for: "no initgroups"
0000000100017b28	nop
0000000100017b2c	stp	x9, x8, [sp]
0000000100017b30	mov	x0, x20
0000000100017b34	mov	x1, x22
0000000100017b38	mov	x2, x23
0000000100017b3c	bl	0x10002a548
0000000100017b40	ldr	x8, [x21]
0000000100017b44	tst	x8, #0x20000000000
0000000100017b48	csel	x8, x25, x24, eq
0000000100017b4c	adr	x9, #133438 ; literal pool for: "endpoints initialized"
0000000100017b50	nop
0000000100017b54	stp	x9, x8, [sp]
0000000100017b58	mov	x0, x20
0000000100017b5c	mov	x1, x22
0000000100017b60	mov	x2, x23
0000000100017b64	bl	0x10002a548
0000000100017b68	ldr	x8, [x21]
0000000100017b6c	tst	x8, #0x80000000000
0000000100017b70	csel	x8, x25, x24, eq
0000000100017b74	adr	x9, #133420 ; literal pool for: "platform binary"
0000000100017b78	nop
0000000100017b7c	stp	x9, x8, [sp]
0000000100017b80	mov	x0, x20
0000000100017b84	mov	x1, x22
0000000100017b88	mov	x2, x23
0000000100017b8c	bl	0x10002a548
0000000100017b90	ldr	x8, [x21]
0000000100017b94	tst	x8, #0x800000000000
0000000100017b98	csel	x8, x25, x24, eq
0000000100017b9c	adr	x9, #133396 ; literal pool for: "disallow all lookups"
0000000100017ba0	nop
0000000100017ba4	stp	x9, x8, [sp]
0000000100017ba8	mov	x0, x20
0000000100017bac	mov	x1, x22
0000000100017bb0	mov	x2, x23
0000000100017bb4	bl	0x10002a548
0000000100017bb8	ldrb	w8, [x21, #0x6]
0000000100017bbc	tbz	w8, #0x0, 0x100017be0
0000000100017bc0	adr	x8, #133381 ; literal pool for: "always sigterm on shutdown"
0000000100017bc4	nop
0000000100017bc8	stp	x8, x24, [sp]
0000000100017bcc	adr	x2, #132806 ; literal pool for: "%s = %s"
0000000100017bd0	nop
0000000100017bd4	mov	x0, x20
0000000100017bd8	mov	x1, x22
0000000100017bdc	bl	0x10002a548
0000000100017be0	adr	x22, #121251 ; literal pool for: "}"
0000000100017be4	nop
0000000100017be8	mov	x0, x20
0000000100017bec	mov	x1, x28
0000000100017bf0	mov	x2, x22
0000000100017bf4	bl	0x10002a548
0000000100017bf8	mov	x0, x20
0000000100017bfc	mov	x1, x19
0000000100017c00	mov	x2, x22
0000000100017c04	bl	0x10002a548
0000000100017c08	ldur	x8, [x29, #-0x58]
0000000100017c0c	nop
0000000100017c10	ldr	x9, #0x28408 ; literal pool symbol address: ___stack_chk_guard
0000000100017c14	ldr	x9, [x9]
0000000100017c18	cmp	x9, x8
0000000100017c1c	b.ne	0x100017d34
0000000100017c20	ldp	x29, x30, [sp, #0x1b0]
0000000100017c24	ldp	x20, x19, [sp, #0x1a0]
0000000100017c28	ldp	x22, x21, [sp, #0x190]
0000000100017c2c	ldp	x24, x23, [sp, #0x180]
0000000100017c30	ldp	x26, x25, [sp, #0x170]
0000000100017c34	ldp	x28, x27, [sp, #0x160]
0000000100017c38	add	sp, sp, #0x1c0
0000000100017c3c	ret
0000000100017c40	ldr	w8, [x22, #0x2dc]
0000000100017c44	adr	x9, #132250 ; literal pool for: "hard"
0000000100017c48	nop
0000000100017c4c	adr	x10, #132247 ; literal pool for: "soft"
0000000100017c50	nop
0000000100017c54	tst	w8, #0x4
0000000100017c58	csel	x8, x10, x9, eq
0000000100017c5c	mov	w9, #-0x1
0000000100017c60	stp	x8, x9, [sp]
0000000100017c64	b	0x1000172cc
0000000100017c68	adr	x2, #132275 ; literal pool for: "+ (unlimited)"
0000000100017c6c	nop
0000000100017c70	b	0x100017308
0000000100017c74	ldr	w8, [x22, #0x2dc]
0000000100017c78	adr	x9, #132198 ; literal pool for: "hard"
0000000100017c7c	nop
0000000100017c80	adr	x10, #132195 ; literal pool for: "soft"
0000000100017c84	nop
0000000100017c88	tst	w8, #0x8
0000000100017c8c	csel	x8, x10, x9, eq
0000000100017c90	mov	w9, #-0x1
0000000100017c94	stp	x8, x9, [sp]
0000000100017c98	b	0x100017348
0000000100017c9c	adr	x2, #132223 ; literal pool for: "+ (unlimited)"
0000000100017ca0	nop
0000000100017ca4	b	0x100017384
0000000100017ca8	mov	x0, x23
0000000100017cac	bl	0x10002cc80
0000000100017cb0	cbz	w0, 0x100017ce4
0000000100017cb4	mov	x0, x23
0000000100017cb8	bl	0x10002ccac
0000000100017cbc	sub	w8, w0, #0x40
0000000100017cc0	cmp	w8, #0xe
0000000100017cc4	b.hi	0x100017cfc
0000000100017cc8	adr	x9, #171872
0000000100017ccc	nop
0000000100017cd0	ldr	x8, [x9, w8, sxtw #3]
0000000100017cd4	stp	x0, x8, [sp]
0000000100017cd8	adr	x2, #131682 ; literal pool for: "last exit code = %d: %s"
0000000100017cdc	nop
0000000100017ce0	b	0x100016dc0
0000000100017ce4	mov	x0, x23
0000000100017ce8	bl	0x10002cd8c
0000000100017cec	cbz	w0, 0x100017d0c
0000000100017cf0	adr	x2, #131702 ; literal pool for: "last exit code = (extension watchdogged)"
0000000100017cf4	nop
0000000100017cf8	b	0x100016dc0
0000000100017cfc	str	x0, [sp]
0000000100017d00	adr	x2, #131666 ; literal pool for: "last exit code = %d"
0000000100017d04	nop
0000000100017d08	b	0x100016dc0
0000000100017d0c	mov	x0, x23
0000000100017d10	bl	0x10002c9d4
0000000100017d14	adr	x8, #118193 ; literal pool for: "(unknown)"
0000000100017d18	nop
0000000100017d1c	cmp	x0, #0x0
0000000100017d20	csel	x8, x8, x0, eq
0000000100017d24	str	x8, [sp]
0000000100017d28	adr	x2, #131687 ; literal pool for: "last exit reason = %s"
0000000100017d2c	nop
0000000100017d30	b	0x100016dc0
0000000100017d34	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100017d38	ldr	x8, [x0, #0x458]
0000000100017d3c	tbnz	x8, #0x25, 0x100017d70
0000000100017d40	tbnz	w8, #0x2, 0x100017d7c
0000000100017d44	adr	x9, #123911 ; literal pool for: "system app"
0000000100017d48	nop
0000000100017d4c	adr	x10, #123914 ; literal pool for: "app"
0000000100017d50	nop
0000000100017d54	adr	x11, #123910 ; literal pool for: "daemon"
0000000100017d58	nop
0000000100017d5c	tst	x8, #0x2000
0000000100017d60	csel	x10, x11, x10, eq
0000000100017d64	tst	w8, #0x4000
0000000100017d68	csel	x0, x9, x10, ne
0000000100017d6c	ret
0000000100017d70	adr	x0, #123782 ; literal pool for: "extension"
0000000100017d74	nop
0000000100017d78	ret
0000000100017d7c	stp	x20, x19, [sp, #-0x20]!
0000000100017d80	stp	x29, x30, [sp, #0x10]
0000000100017d84	add	x29, sp, #0x10
0000000100017d88	ldr	x19, [x0, #0xe0]
0000000100017d8c	bl	0x10001d8e4
0000000100017d90	adr	x8, #123824 ; literal pool for: "xpcservice"
0000000100017d94	nop
0000000100017d98	adr	x9, #123798 ; literal pool for: "system xpcservice"
0000000100017d9c	nop
0000000100017da0	cmp	x19, x0
0000000100017da4	csel	x0, x9, x8, eq
0000000100017da8	ldp	x29, x30, [sp, #0x10]
0000000100017dac	ldp	x20, x19, [sp], #0x20
0000000100017db0	ret
0000000100017db4	sub	sp, sp, #0x40
0000000100017db8	stp	x22, x21, [sp, #0x10]
0000000100017dbc	stp	x20, x19, [sp, #0x20]
0000000100017dc0	stp	x29, x30, [sp, #0x30]
0000000100017dc4	add	x29, sp, #0x30
0000000100017dc8	mov	x19, x1
0000000100017dcc	add	x20, x2, #0x1
0000000100017dd0	add	x21, x0, #0x460
0000000100017dd4	bl	0x100017d38
0000000100017dd8	stp	x21, x0, [sp]
0000000100017ddc	adr	x2, #123781 ; literal pool for: "%s : %s"
0000000100017de0	nop
0000000100017de4	mov	x0, x19
0000000100017de8	mov	x1, x20
0000000100017dec	bl	0x10002a548
0000000100017df0	ldp	x29, x30, [sp, #0x30]
0000000100017df4	ldp	x20, x19, [sp, #0x20]
0000000100017df8	ldp	x22, x21, [sp, #0x10]
0000000100017dfc	add	sp, sp, #0x40
0000000100017e00	ret
0000000100017e04	sub	sp, sp, #0x80
0000000100017e08	stp	x22, x21, [sp, #0x50]
0000000100017e0c	stp	x20, x19, [sp, #0x60]
0000000100017e10	stp	x29, x30, [sp, #0x70]
0000000100017e14	add	x29, sp, #0x70
0000000100017e18	mov	x19, x2
0000000100017e1c	mov	x20, x1
0000000100017e20	mov	x21, x0
0000000100017e24	nop
0000000100017e28	ldr	x8, #0x281f0 ; literal pool symbol address: ___stack_chk_guard
0000000100017e2c	ldr	x8, [x8]
0000000100017e30	stur	x8, [x29, #-0x28]
0000000100017e34	ldr	w8, [x21, #0x110]
0000000100017e38	cbnz	w8, 0x100017fdc
0000000100017e3c	ldr	w8, [x21, #0x330]
0000000100017e40	cbz	w8, 0x100017e54
0000000100017e44	adr	x4, #118291 ; literal pool for: "%d"
0000000100017e48	nop
0000000100017e4c	str	x8, [sp]
0000000100017e50	b	0x100017e70
0000000100017e54	ldrb	w8, [x21, #0x45a]
0000000100017e58	tbnz	w8, #0x6, 0x100017e68
0000000100017e5c	adr	x4, #121904 ; literal pool for: "0"
0000000100017e60	nop
0000000100017e64	b	0x100017e70
0000000100017e68	adr	x4, #123649 ; literal pool for: "(dp)"
0000000100017e6c	nop
0000000100017e70	add	x0, sp, #0x30
0000000100017e74	orr	w1, wzr, #0x18
0000000100017e78	orr	w3, wzr, #0x18
0000000100017e7c	mov	w2, #0x0
0000000100017e80	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100017e84	ldr	w8, [x21, #0x358]
0000000100017e88	cmp	w8, #0x2
0000000100017e8c	b.eq	0x100017eb4
0000000100017e90	cmp	w8, #0x1
0000000100017e94	b.eq	0x100017ea8
0000000100017e98	cbnz	w8, 0x100017f30
0000000100017e9c	adr	x8, #123602 ; literal pool for: "-"
0000000100017ea0	nop
0000000100017ea4	b	0x100017ebc
0000000100017ea8	adr	x8, #123592 ; literal pool for: "(ab)"
0000000100017eac	nop
0000000100017eb0	b	0x100017ebc
0000000100017eb4	adr	x8, #123585 ; literal pool for: "(fr)"
0000000100017eb8	nop
0000000100017ebc	adr	x4, #120302 ; literal pool for: "%s"
0000000100017ec0	nop
0000000100017ec4	str	x8, [sp]
0000000100017ec8	add	x0, sp, #0x18
0000000100017ecc	orr	w1, wzr, #0x18
0000000100017ed0	orr	w3, wzr, #0x18
0000000100017ed4	mov	w2, #0x0
0000000100017ed8	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100017edc	add	x8, x21, #0x460
0000000100017ee0	str	x8, [sp, #0x10]
0000000100017ee4	add	x8, sp, #0x18
0000000100017ee8	add	x9, sp, #0x30
0000000100017eec	stp	x9, x8, [sp]
0000000100017ef0	adr	x2, #123554 ; literal pool for: "%8s %6s \t%s"
0000000100017ef4	nop
0000000100017ef8	mov	x0, x20
0000000100017efc	mov	x1, x19
0000000100017f00	bl	0x10002a548
0000000100017f04	ldur	x8, [x29, #-0x28]
0000000100017f08	nop
0000000100017f0c	ldr	x9, #0x2810c ; literal pool symbol address: ___stack_chk_guard
0000000100017f10	ldr	x9, [x9]
0000000100017f14	cmp	x9, x8
0000000100017f18	b.ne	0x100017fd8
0000000100017f1c	ldp	x29, x30, [sp, #0x70]
0000000100017f20	ldp	x20, x19, [sp, #0x60]
0000000100017f24	ldp	x22, x21, [sp, #0x50]
0000000100017f28	add	sp, sp, #0x80
0000000100017f2c	ret
0000000100017f30	add	x22, x21, #0x358
0000000100017f34	mov	x0, x22
0000000100017f38	bl	0x10002cc80
0000000100017f3c	cbz	w0, 0x100017f54
0000000100017f40	mov	x0, x22
0000000100017f44	bl	0x10002ccac
0000000100017f48	adr	x4, #118031 ; literal pool for: "%d"
0000000100017f4c	nop
0000000100017f50	b	0x100017f70
0000000100017f54	mov	x0, x22
0000000100017f58	bl	0x10002cb54
0000000100017f5c	cbz	w0, 0x100017f78
0000000100017f60	mov	x0, x22
0000000100017f64	bl	0x10002cba0
0000000100017f68	adr	x4, #123410 ; literal pool for: "-%d"
0000000100017f6c	nop
0000000100017f70	str	x0, [sp]
0000000100017f74	b	0x100017ec8
0000000100017f78	mov	x0, x22
0000000100017f7c	bl	0x10002ccec
0000000100017f80	cbz	w0, 0x100017f9c
0000000100017f84	mov	x0, x22
0000000100017f88	bl	0x10002cd2c
0000000100017f8c	cbz	w0, 0x100017fb4
0000000100017f90	adr	x8, #123374 ; literal pool for: "(pe)"
0000000100017f94	nop
0000000100017f98	b	0x100017ebc
0000000100017f9c	mov	x0, x22
0000000100017fa0	bl	0x10002cd7c
0000000100017fa4	cbz	w0, 0x100017fc0
0000000100017fa8	adr	x8, #123360 ; literal pool for: "(cs)"
0000000100017fac	nop
0000000100017fb0	b	0x100017ebc
0000000100017fb4	adr	x8, #123343 ; literal pool for: "(jt)"
0000000100017fb8	nop
0000000100017fbc	b	0x100017ebc
0000000100017fc0	mov	x0, x22
0000000100017fc4	bl	0x10002cd50
0000000100017fc8	cbz	w0, 0x100017edc
0000000100017fcc	adr	x8, #123329 ; literal pool for: "(fp)"
0000000100017fd0	nop
0000000100017fd4	b	0x100017ebc
0000000100017fd8	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100017fdc	adr	x0, #110563 ; literal pool for: "unmanaged service given to service interface"
0000000100017fe0	nop
0000000100017fe4	bl	0x100028f84
0000000100017fe8	stp	x20, x19, [sp, #-0x20]!
0000000100017fec	stp	x29, x30, [sp, #0x10]
0000000100017ff0	add	x29, sp, #0x10
0000000100017ff4	mov	x20, x1
0000000100017ff8	ldr	x19, [x0, #0xa0]
0000000100017ffc	cbz	x19, 0x10001801c
0000000100018000	mov	x0, x19
0000000100018004	bl	0x100028290
0000000100018008	mov	x1, x20
000000010001800c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100018010	cbz	w0, 0x10001801c
0000000100018014	ldr	x19, [x19, #0x8]
0000000100018018	cbnz	x19, 0x100018000
000000010001801c	mov	x0, x19
0000000100018020	ldp	x29, x30, [sp, #0x10]
0000000100018024	ldp	x20, x19, [sp], #0x20
0000000100018028	ret
000000010001802c	cmp	w0, #0x10
0000000100018030	b.hs	0x100018044
0000000100018034	adr	x8, #170388
0000000100018038	nop
000000010001803c	ldr	x0, [x8, w0, sxtw #3]
0000000100018040	ret
0000000100018044	stp	x29, x30, [sp, #-0x10]!
0000000100018048	mov	x29, sp
000000010001804c	mov	x0, #0x0
0000000100018050	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100018054	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100018058	brk	#0x1
000000010001805c	stp	x22, x21, [sp, #-0x30]!
0000000100018060	stp	x20, x19, [sp, #0x10]
0000000100018064	stp	x29, x30, [sp, #0x20]
0000000100018068	add	x29, sp, #0x20
000000010001806c	mov	x19, x0
0000000100018070	ldr	x20, [x19, #0x28]
0000000100018074	ldr	x21, [x19, #0x18]
0000000100018078	ldr	w0, [x19, #0x10]
000000010001807c	mov	x1, x21
0000000100018080	bl	0x10002def4
0000000100018084	mov	x0, x21
0000000100018088	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001808c	mov	w1, #0x15
0000000100018090	mov	x0, x20
0000000100018094	bl	0x10000e4a4
0000000100018098	mov	x0, x19
000000010001809c	ldp	x29, x30, [sp, #0x20]
00000001000180a0	ldp	x20, x19, [sp, #0x10]
00000001000180a4	ldp	x22, x21, [sp], #0x30
00000001000180a8	b	0x100031010 ; symbol stub for: _free
00000001000180ac	sub	sp, sp, #0x40
00000001000180b0	stp	x22, x21, [sp, #0x10]
00000001000180b4	stp	x20, x19, [sp, #0x20]
00000001000180b8	stp	x29, x30, [sp, #0x30]
00000001000180bc	add	x29, sp, #0x30
00000001000180c0	mov	x20, x2
00000001000180c4	mov	x19, x0
00000001000180c8	ldr	w8, [x19, #0x28c]
00000001000180cc	sub	x22, x8, x1
00000001000180d0	stp	x1, x22, [sp]
00000001000180d4	adr	x2, #124049 ; literal pool for: "Service only ran for %llu seconds. Pushing respawn out by %llu seconds."
00000001000180d8	nop
00000001000180dc	mov	w1, #0x5
00000001000180e0	bl	0x1000118ec
00000001000180e4	bl	0x10000d8e0
00000001000180e8	mov	x3, x0
00000001000180ec	nop
00000001000180f0	ldr	x0, #0x27f78 ; literal pool symbol address: __dispatch_source_type_timer
00000001000180f4	mov	x1, #0x0
00000001000180f8	mov	x2, #0x0
00000001000180fc	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100018100	mov	x21, x0
0000000100018104	str	x21, [x19, #0x280]
0000000100018108	mov	w8, #0xca00
000000010001810c	movk	w8, #0x3b9a, lsl #16
0000000100018110	mul	x1, x22, x8
0000000100018114	mov	x0, #0x0
0000000100018118	bl	0x100030f38 ; symbol stub for: _dispatch_time
000000010001811c	mov	x1, x0
0000000100018120	mov	x2, #-0x1
0000000100018124	mov	x0, x21
0000000100018128	mov	x3, #0x0
000000010001812c	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100018130	orr	w1, wzr, #0x18
0000000100018134	mov	x0, x19
0000000100018138	bl	0x10000e820
000000010001813c	ldr	x0, [x19, #0x280]
0000000100018140	mov	x1, x19
0000000100018144	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100018148	ldr	x0, [x19, #0x280]
000000010001814c	adr	x1, #96
0000000100018150	nop
0000000100018154	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100018158	ldr	x0, [x19, #0x280]
000000010001815c	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100018160	str	xzr, [x19, #0x318]
0000000100018164	str	w20, [x19, #0x27c]
0000000100018168	mov	w1, #0x0
000000010001816c	mov	x0, x19
0000000100018170	mov	x2, #0x0
0000000100018174	bl	0x10001195c
0000000100018178	nop
000000010001817c	ldr	x0, #0x2c2a4
0000000100018180	add	x8, x19, #0x460
0000000100018184	stp	x8, x22, [sp]
0000000100018188	adr	x2, #123941 ; literal pool for: "%s: service throttled by %llu seconds"
000000010001818c	nop
0000000100018190	mov	w1, #0x0
0000000100018194	bl	0x1000270c8
0000000100018198	ldp	x29, x30, [sp, #0x30]
000000010001819c	ldp	x20, x19, [sp, #0x20]
00000001000181a0	ldp	x22, x21, [sp, #0x10]
00000001000181a4	add	sp, sp, #0x40
00000001000181a8	ret
00000001000181ac	sub	sp, sp, #0x30
00000001000181b0	stp	x20, x19, [sp, #0x10]
00000001000181b4	stp	x29, x30, [sp, #0x20]
00000001000181b8	add	x29, sp, #0x20
00000001000181bc	mov	x19, x0
00000001000181c0	orr	w1, wzr, #0x18
00000001000181c4	bl	0x10000e824
00000001000181c8	ldr	x0, [x19, #0x280]
00000001000181cc	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000181d0	str	xzr, [x19, #0x280]
00000001000181d4	ldr	x8, [x19, #0x458]
00000001000181d8	orr	x8, x8, #0x40000
00000001000181dc	str	x8, [x19, #0x458]
00000001000181e0	ldr	w1, [x19, #0x27c]
00000001000181e4	str	wzr, [x19, #0x27c]
00000001000181e8	mov	x0, x19
00000001000181ec	bl	0x100010bb8
00000001000181f0	mov	x20, x0
00000001000181f4	nop
00000001000181f8	ldr	x0, #0x2c228
00000001000181fc	add	x8, x19, #0x460
0000000100018200	stp	x8, x20, [sp]
0000000100018204	adr	x2, #123855 ; literal pool for: "%s: deferred event: domain spawn response: %d"
0000000100018208	nop
000000010001820c	mov	w1, #0x0
0000000100018210	bl	0x1000270c8
0000000100018214	cbz	w20, 0x100018248
0000000100018218	cmp	w20, #0x24
000000010001821c	b.eq	0x100018248
0000000100018220	cmp	w20, #0x8b
0000000100018224	b.eq	0x100018258
0000000100018228	mov	x0, x20
000000010001822c	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100018230	stp	x20, x0, [sp]
0000000100018234	adr	x2, #123894 ; literal pool for: "Deferred spawn of service failed: %d: %s"
0000000100018238	nop
000000010001823c	orr	w1, wzr, #0x3
0000000100018240	mov	x0, x19
0000000100018244	bl	0x1000118ec
0000000100018248	ldp	x29, x30, [sp, #0x20]
000000010001824c	ldp	x20, x19, [sp, #0x10]
0000000100018250	add	sp, sp, #0x30
0000000100018254	ret
0000000100018258	adr	x0, #123817 ; literal pool for: "deferral event on service in penalty box"
000000010001825c	nop
0000000100018260	bl	0x100028f84
0000000100018264	ldr	x0, [x0]
0000000100018268	ldrh	w8, [x0, #0x354]
000000010001826c	tbnz	w8, #0x4, 0x100018284
0000000100018270	orr	w8, w8, #0x10
0000000100018274	strh	w8, [x0, #0x354]
0000000100018278	orr	w1, wzr, #0x2
000000010001827c	mov	x2, #0x0
0000000100018280	b	0x10001195c
0000000100018284	stp	x29, x30, [sp, #-0x10]!
0000000100018288	mov	x29, sp
000000010001828c	adr	x0, #123847 ; literal pool for: "proc source registration handler invoked twice"
0000000100018290	nop
0000000100018294	bl	0x100028f84
0000000100018298	b	0x10000e470
000000010001829c	sub	sp, sp, #0x50
00000001000182a0	stp	x22, x21, [sp, #0x20]
00000001000182a4	stp	x20, x19, [sp, #0x30]
00000001000182a8	stp	x29, x30, [sp, #0x40]
00000001000182ac	add	x29, sp, #0x40
00000001000182b0	mov	x19, x1
00000001000182b4	mov	x21, x0
00000001000182b8	adr	x1, #125033 ; literal pool for: "self"
00000001000182bc	nop
00000001000182c0	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
00000001000182c4	cbz	w0, 0x1000182fc
00000001000182c8	mov	x1, sp
00000001000182cc	mov	x0, x21
00000001000182d0	bl	0x100031a60 ; symbol stub for: _xpc_dictionary_get_audit_token
00000001000182d4	ldr	w0, [sp, #0x14]
00000001000182d8	bl	0x100015490
00000001000182dc	mov	x20, x0
00000001000182e0	cbz	x20, 0x10001835c
00000001000182e4	ldr	x0, [x20, #0xe0]
00000001000182e8	mov	x1, x21
00000001000182ec	bl	0x10001dda4
00000001000182f0	tbnz	w0, #0x0, 0x100018390
00000001000182f4	mov	w8, #0x24
00000001000182f8	b	0x100018360
00000001000182fc	adr	x1, #124970 ; literal pool for: "service-port"
0000000100018300	nop
0000000100018304	mov	x0, x21
0000000100018308	bl	0x100031a18 ; symbol stub for: _xpc_dictionary_copy_mach_send
000000010001830c	mov	x22, x0
0000000100018310	add	w8, w22, #0x1
0000000100018314	cmp	w8, #0x2
0000000100018318	b.lo	0x100018334
000000010001831c	mov	x0, x22
0000000100018320	bl	0x10001d7f0
0000000100018324	cbz	x0, 0x10001836c
0000000100018328	bl	0x10002f310
000000010001832c	mov	x20, x0
0000000100018330	b	0x100018378
0000000100018334	adr	x1, #124620 ; literal pool for: "pid"
0000000100018338	nop
000000010001833c	mov	x0, x21
0000000100018340	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
0000000100018344	cbz	w0, 0x1000183a8
0000000100018348	bl	0x100015490
000000010001834c	mov	x20, x0
0000000100018350	cbnz	x20, 0x100018390
0000000100018354	mov	w8, #0x71
0000000100018358	b	0x100018364
000000010001835c	mov	w8, #0x87
0000000100018360	mov	x20, #0x0
0000000100018364	str	w8, [x19]
0000000100018368	b	0x100018390
000000010001836c	mov	x20, #0x0
0000000100018370	mov	w8, #0x87
0000000100018374	str	w8, [x19]
0000000100018378	mov	x0, x22
000000010001837c	bl	0x10000888c
0000000100018380	cbz	w0, 0x100018390
0000000100018384	sxtw	x0, w0
0000000100018388	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010001838c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100018390	mov	x0, x20
0000000100018394	ldp	x29, x30, [sp, #0x40]
0000000100018398	ldp	x20, x19, [sp, #0x30]
000000010001839c	ldp	x22, x21, [sp, #0x20]
00000001000183a0	add	sp, sp, #0x50
00000001000183a4	ret
00000001000183a8	mov	x0, x21
00000001000183ac	mov	x1, x19
00000001000183b0	bl	0x10001d980
00000001000183b4	mov	x22, x0
00000001000183b8	cbz	x22, 0x100018408
00000001000183bc	mov	x0, x22
00000001000183c0	mov	x1, x21
00000001000183c4	bl	0x10001dda4
00000001000183c8	tbz	w0, #0x0, 0x100018410
00000001000183cc	adr	x1, #124775 ; literal pool for: "name"
00000001000183d0	nop
00000001000183d4	mov	x0, x21
00000001000183d8	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
00000001000183dc	mov	x21, x0
00000001000183e0	cbz	x21, 0x10001841c
00000001000183e4	mov	x0, x22
00000001000183e8	mov	x1, x21
00000001000183ec	bl	0x10001e1b8
00000001000183f0	mov	x20, x0
00000001000183f4	cbnz	x20, 0x100018390
00000001000183f8	mov	x0, x22
00000001000183fc	mov	x1, x21
0000000100018400	bl	0x10001e230
0000000100018404	b	0x10001834c
0000000100018408	mov	x20, #0x0
000000010001840c	b	0x100018390
0000000100018410	mov	x20, #0x0
0000000100018414	mov	w8, #0x24
0000000100018418	b	0x100018364
000000010001841c	mov	x20, #0x0
0000000100018420	mov	w8, #0x16
0000000100018424	b	0x100018364
0000000100018428	stp	x22, x21, [sp, #-0x30]!
000000010001842c	stp	x20, x19, [sp, #0x10]
0000000100018430	stp	x29, x30, [sp, #0x20]
0000000100018434	add	x29, sp, #0x20
0000000100018438	mov	x20, x2
000000010001843c	mov	x21, x1
0000000100018440	mov	x22, x0
0000000100018444	orr	w0, wzr, #0x30
0000000100018448	bl	0x10000d408
000000010001844c	mov	x19, x0
0000000100018450	mov	x0, x21
0000000100018454	bl	0x100031b74 ; symbol stub for: _xpc_retain
0000000100018458	str	x0, [x19, #0x18]
000000010001845c	str	w20, [x19, #0x20]
0000000100018460	add	x8, x22, #0x1c0
0000000100018464	ldr	x9, [x22, #0x1c0]
0000000100018468	str	x9, [x19]
000000010001846c	cbz	x9, 0x100018474
0000000100018470	str	x19, [x9, #0x8]
0000000100018474	str	x19, [x8]
0000000100018478	str	x8, [x19, #0x8]
000000010001847c	ldp	x29, x30, [sp, #0x20]
0000000100018480	ldp	x20, x19, [sp, #0x10]
0000000100018484	ldp	x22, x21, [sp], #0x30
0000000100018488	ret
000000010001848c	stp	x24, x23, [sp, #-0x40]!
0000000100018490	stp	x22, x21, [sp, #0x10]
0000000100018494	stp	x20, x19, [sp, #0x20]
0000000100018498	stp	x29, x30, [sp, #0x30]
000000010001849c	add	x29, sp, #0x30
00000001000184a0	mov	x22, x1
00000001000184a4	mov	x23, x0
00000001000184a8	ldp	x19, x20, [x2]
00000001000184ac	ldr	x21, [x2, #0x10]
00000001000184b0	mov	x0, x22
00000001000184b4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000184b8	nop
00000001000184bc	ldr	x8, #0x27c24 ; literal pool symbol address: __xpc_type_string
00000001000184c0	cmp	x0, x8
00000001000184c4	b.ne	0x10001851c
00000001000184c8	mov	x0, x19
00000001000184cc	mov	x1, x20
00000001000184d0	mov	x2, x21
00000001000184d4	mov	x3, x23
00000001000184d8	bl	0x10000d324
00000001000184dc	adr	x3, #124626 ; literal pool for: "="
00000001000184e0	nop
00000001000184e4	mov	x0, x19
00000001000184e8	mov	x1, x20
00000001000184ec	mov	x2, x21
00000001000184f0	bl	0x10000d324
00000001000184f4	mov	x0, x22
00000001000184f8	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
00000001000184fc	mov	x3, x0
0000000100018500	mov	x0, x19
0000000100018504	mov	x1, x20
0000000100018508	mov	x2, x21
000000010001850c	bl	0x10000d384
0000000100018510	ldr	w8, [x19, #0x10]
0000000100018514	add	w8, w8, #0x1
0000000100018518	str	w8, [x19, #0x10]
000000010001851c	ldp	x29, x30, [sp, #0x30]
0000000100018520	ldp	x20, x19, [sp, #0x20]
0000000100018524	ldp	x22, x21, [sp, #0x10]
0000000100018528	ldp	x24, x23, [sp], #0x40
000000010001852c	ret
0000000100018530	stp	x22, x21, [sp, #-0x30]!
0000000100018534	stp	x20, x19, [sp, #0x10]
0000000100018538	stp	x29, x30, [sp, #0x20]
000000010001853c	add	x29, sp, #0x20
0000000100018540	mov	x19, x2
0000000100018544	mov	x20, x1
0000000100018548	mov	x21, x0
000000010001854c	mov	x0, x20
0000000100018550	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100018554	nop
0000000100018558	ldr	x8, #0x27b88 ; literal pool symbol address: __xpc_type_string
000000010001855c	cmp	x0, x8
0000000100018560	b.ne	0x10001858c
0000000100018564	mov	x0, x21
0000000100018568	bl	0x10003173c ; symbol stub for: _strlen
000000010001856c	mov	x21, x0
0000000100018570	mov	x0, x20
0000000100018574	bl	0x100031ba4 ; symbol stub for: _xpc_string_get_length
0000000100018578	ldr	x8, [x19]
000000010001857c	add	x9, x21, x0
0000000100018580	add	x8, x9, x8
0000000100018584	add	x8, x8, #0x2
0000000100018588	str	x8, [x19]
000000010001858c	ldp	x29, x30, [sp, #0x20]
0000000100018590	ldp	x20, x19, [sp, #0x10]
0000000100018594	ldp	x22, x21, [sp], #0x30
0000000100018598	ret
000000010001859c	sub	sp, sp, #0xf0
00000001000185a0	stp	x26, x25, [sp, #0xa0]
00000001000185a4	stp	x24, x23, [sp, #0xb0]
00000001000185a8	stp	x22, x21, [sp, #0xc0]
00000001000185ac	stp	x20, x19, [sp, #0xd0]
00000001000185b0	stp	x29, x30, [sp, #0xe0]
00000001000185b4	add	x29, sp, #0xe0
00000001000185b8	mov	x19, x3
00000001000185bc	mov	x20, x2
00000001000185c0	mov	x21, x1
00000001000185c4	mov	x23, x0
00000001000185c8	nop
00000001000185cc	ldr	x8, #0x27a4c ; literal pool symbol address: ___stack_chk_guard
00000001000185d0	ldr	x8, [x8]
00000001000185d4	stur	x8, [x29, #-0x48]
00000001000185d8	cmp	w20, #0x7c
00000001000185dc	b.eq	0x100018698
00000001000185e0	cmp	w20, #0x9a
00000001000185e4	b.ne	0x1000185f4
00000001000185e8	mov	w24, #0x3
00000001000185ec	movk	w24, #0x1, lsl #16
00000001000185f0	b	0x1000185f8
00000001000185f4	orr	w24, wzr, #0x3
00000001000185f8	add	x1, sp, #0x58
00000001000185fc	mov	x0, x21
0000000100018600	bl	0x1000293c0
0000000100018604	mov	x22, x0
0000000100018608	ldr	w25, [x21, #0x14]
000000010001860c	mov	x0, x20
0000000100018610	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100018614	ldp	w8, w9, [x21, #0xc]
0000000100018618	ldp	w10, w11, [x21, #0x4]
000000010001861c	ldr	w12, [x21, #0x18]
0000000100018620	stp	x11, x12, [sp, #0x40]
0000000100018624	stp	x10, x9, [sp, #0x30]
0000000100018628	stp	x0, x8, [sp, #0x20]
000000010001862c	adr	x2, #125589 ; literal pool for: "Caller not allowed to perform action: %s.%d, action = %s, code = %d: %s, uid = %u, euid = %u, gid = %u, egid = %u, asid = %u"
0000000100018630	nop
0000000100018634	stp	x19, x20, [sp, #0x10]
0000000100018638	stp	x22, x25, [sp]
000000010001863c	mov	x1, x24
0000000100018640	mov	x0, x23
0000000100018644	bl	0x1000118ec
0000000100018648	nop
000000010001864c	ldr	x24, #0x2bdd4
0000000100018650	add	x23, x23, #0x460
0000000100018654	ldr	w25, [x21, #0x14]
0000000100018658	mov	x0, x20
000000010001865c	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100018660	ldp	w8, w9, [x21, #0xc]
0000000100018664	ldp	w10, w11, [x21, #0x4]
0000000100018668	ldr	w12, [x21, #0x18]
000000010001866c	stp	x11, x12, [sp, #0x48]
0000000100018670	stp	x10, x9, [sp, #0x38]
0000000100018674	stp	x0, x8, [sp, #0x28]
0000000100018678	stp	x19, x20, [sp, #0x18]
000000010001867c	adr	x2, #125634 ; literal pool for: "%s: violation: %s.%d, action = %s, code = %d: %s, uid = %u, euid = %u, gid = %u, egid = %u, asid = %u"
0000000100018680	nop
0000000100018684	stp	x22, x25, [sp, #0x8]
0000000100018688	str	x23, [sp]
000000010001868c	mov	w1, #0x0
0000000100018690	mov	x0, x24
0000000100018694	bl	0x1000270c8
0000000100018698	ldur	x8, [x29, #-0x48]
000000010001869c	nop
00000001000186a0	ldr	x9, #0x27978 ; literal pool symbol address: ___stack_chk_guard
00000001000186a4	ldr	x9, [x9]
00000001000186a8	cmp	x9, x8
00000001000186ac	b.ne	0x1000186cc
00000001000186b0	ldp	x29, x30, [sp, #0xe0]
00000001000186b4	ldp	x20, x19, [sp, #0xd0]
00000001000186b8	ldp	x22, x21, [sp, #0xc0]
00000001000186bc	ldp	x24, x23, [sp, #0xb0]
00000001000186c0	ldp	x26, x25, [sp, #0xa0]
00000001000186c4	add	sp, sp, #0xf0
00000001000186c8	ret
00000001000186cc	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
00000001000186d0	stp	x20, x19, [sp, #-0x20]!
00000001000186d4	stp	x29, x30, [sp, #0x10]
00000001000186d8	add	x29, sp, #0x10
00000001000186dc	ldr	x0, [x0, #0x18]
00000001000186e0	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
00000001000186e4	mov	x19, x0
00000001000186e8	cbz	x19, 0x100018730
00000001000186ec	adr	x1, #125391 ; literal pool for: "error"
00000001000186f0	nop
00000001000186f4	mov	w2, #0x59
00000001000186f8	mov	x0, x19
00000001000186fc	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100018700	mov	x0, x19
0000000100018704	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
0000000100018708	orr	w8, w0, #0x20
000000010001870c	cmp	w8, #0x20
0000000100018710	b.eq	0x100018720
0000000100018714	sxtw	x0, w0
0000000100018718	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010001871c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100018720	mov	x0, x19
0000000100018724	ldp	x29, x30, [sp, #0x10]
0000000100018728	ldp	x20, x19, [sp], #0x20
000000010001872c	b	0x100031b68 ; symbol stub for: _xpc_release
0000000100018730	ldp	x29, x30, [sp, #0x10]
0000000100018734	ldp	x20, x19, [sp], #0x20
0000000100018738	ret
000000010001873c	stp	x20, x19, [sp, #-0x20]!
0000000100018740	stp	x29, x30, [sp, #0x10]
0000000100018744	add	x29, sp, #0x10
0000000100018748	mov	x19, x0
000000010001874c	str	xzr, [x19, #0x258]
0000000100018750	str	wzr, [x19, #0x254]
0000000100018754	ldrb	w8, [x19, #0x44a]
0000000100018758	tbz	w8, #0x2, 0x100018764
000000010001875c	mov	x0, x19
0000000100018760	bl	0x10001213c
0000000100018764	mov	x0, x19
0000000100018768	ldp	x29, x30, [sp, #0x10]
000000010001876c	ldp	x20, x19, [sp], #0x20
0000000100018770	b	0x100003a54
0000000100018774	b	0x10001873c
0000000100018778	stp	x20, x19, [sp, #-0x20]!
000000010001877c	stp	x29, x30, [sp, #0x10]
0000000100018780	add	x29, sp, #0x10
0000000100018784	mov	x19, x0
0000000100018788	bl	0x100030ed8 ; symbol stub for: _dispatch_source_get_handle
000000010001878c	bl	0x10000888c
0000000100018790	cbz	w0, 0x1000187a0
0000000100018794	sxtw	x0, w0
0000000100018798	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010001879c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000187a0	mov	x0, x19
00000001000187a4	ldp	x29, x30, [sp, #0x10]
00000001000187a8	ldp	x20, x19, [sp], #0x20
00000001000187ac	b	0x100030e60 ; symbol stub for: _dispatch_release
00000001000187b0	sub	sp, sp, #0x30
00000001000187b4	stp	x20, x19, [sp, #0x10]
00000001000187b8	stp	x29, x30, [sp, #0x20]
00000001000187bc	add	x29, sp, #0x20
00000001000187c0	mov	x19, x0
00000001000187c4	mov	w1, #0x1a
00000001000187c8	bl	0x10000e824
00000001000187cc	ldr	x0, [x19, #0x290]
00000001000187d0	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
00000001000187d4	ldr	x0, [x19, #0x290]
00000001000187d8	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000187dc	str	xzr, [x19, #0x290]
00000001000187e0	ldr	w0, [x19, #0x330]
00000001000187e4	bl	0x100029854
00000001000187e8	cbz	w0, 0x100018810
00000001000187ec	nop
00000001000187f0	ldr	x0, #0x2bc30
00000001000187f4	add	x8, x19, #0x460
00000001000187f8	str	x8, [sp]
00000001000187fc	adr	x2, #126426 ; literal pool for: "%s: extension is being debugged; not timing out exit"
0000000100018800	nop
0000000100018804	mov	w1, #0x0
0000000100018808	bl	0x1000270c8
000000010001880c	b	0x100018898
0000000100018810	adr	x2, #126459 ; literal pool for: "Extension remained dirty for too long after trying to exit. Killing."
0000000100018814	nop
0000000100018818	orr	w1, wzr, #0x4
000000010001881c	mov	x0, x19
0000000100018820	bl	0x1000118ec
0000000100018824	nop
0000000100018828	ldr	x0, #0x2bbf8
000000010001882c	add	x8, x19, #0x460
0000000100018830	str	x8, [sp]
0000000100018834	adr	x2, #126492 ; literal pool for: "%s: extension timed out trying to exit; killing"
0000000100018838	nop
000000010001883c	mov	w1, #0x0
0000000100018840	bl	0x1000270c8
0000000100018844	mov	w1, #0x9
0000000100018848	mov	x0, x19
000000010001884c	bl	0x1000158a4
0000000100018850	mov	x20, x0
0000000100018854	cmp	w20, #0x25
0000000100018858	b.hi	0x100018878
000000010001885c	mov	w8, w20
0000000100018860	orr	w9, wzr, #0x1
0000000100018864	lsl	x8, x9, x8
0000000100018868	mov	x9, #0x2000000020
000000010001886c	movk	x9, #0x9
0000000100018870	tst	x8, x9
0000000100018874	b.ne	0x100018898
0000000100018878	mov	x0, x20
000000010001887c	bl	0x100031724 ; symbol stub for: _strerror
0000000100018880	stp	x20, x0, [sp]
0000000100018884	adr	x2, #126460 ; literal pool for: "Failed to kill extension. It may linger forever: %d: %s"
0000000100018888	nop
000000010001888c	orr	w1, wzr, #0x4
0000000100018890	mov	x0, x19
0000000100018894	bl	0x1000118ec
0000000100018898	ldp	x29, x30, [sp, #0x20]
000000010001889c	ldp	x20, x19, [sp, #0x10]
00000001000188a0	add	sp, sp, #0x30
00000001000188a4	ret
00000001000188a8	sub	sp, sp, #0x60
00000001000188ac	stp	x24, x23, [sp, #0x20]
00000001000188b0	stp	x22, x21, [sp, #0x30]
00000001000188b4	stp	x20, x19, [sp, #0x40]
00000001000188b8	stp	x29, x30, [sp, #0x50]
00000001000188bc	add	x29, sp, #0x50
00000001000188c0	mov	x20, x2
00000001000188c4	mov	x22, x1
00000001000188c8	mov	x19, x0
00000001000188cc	ldr	w0, [x19, #0x330]
00000001000188d0	bl	0x1000311a8 ; symbol stub for: _kill
00000001000188d4	nop
00000001000188d8	ldr	x21, #0x2bb48
00000001000188dc	add	x23, x19, #0x460
00000001000188e0	cbz	w0, 0x100018940
00000001000188e4	bl	0x100030adc ; symbol stub for: ___error
00000001000188e8	ldr	w22, [x0]
00000001000188ec	bl	0x100030adc ; symbol stub for: ___error
00000001000188f0	ldr	w0, [x0]
00000001000188f4	bl	0x100031724 ; symbol stub for: _strerror
00000001000188f8	stp	x22, x0, [sp, #0x10]
00000001000188fc	stp	x23, x20, [sp]
0000000100018900	adr	x2, #126793 ; literal pool for: "%s: could not signal service for %s: %d: %s"
0000000100018904	nop
0000000100018908	mov	w1, #0x0
000000010001890c	mov	x0, x21
0000000100018910	bl	0x1000270c8
0000000100018914	bl	0x100030adc ; symbol stub for: ___error
0000000100018918	ldrsw	x2, [x0]
000000010001891c	cbz	w2, 0x100018934
0000000100018920	adr	x0, #-27512
0000000100018924	nop
0000000100018928	mov	x1, x19
000000010001892c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100018930	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100018934	bl	0x100030adc ; symbol stub for: ___error
0000000100018938	ldr	w0, [x0]
000000010001893c	b	0x100018968
0000000100018940	mov	x0, x22
0000000100018944	bl	0x10003179c ; symbol stub for: _strsignal
0000000100018948	stp	x22, x0, [sp, #0x10]
000000010001894c	stp	x23, x20, [sp]
0000000100018950	adr	x2, #126757 ; literal pool for: "%s: signaled service for %s: %d: %s"
0000000100018954	nop
0000000100018958	mov	w1, #0x0
000000010001895c	mov	x0, x21
0000000100018960	bl	0x1000270c8
0000000100018964	mov	w0, #0x0
0000000100018968	ldp	x29, x30, [sp, #0x50]
000000010001896c	ldp	x20, x19, [sp, #0x40]
0000000100018970	ldp	x22, x21, [sp, #0x30]
0000000100018974	ldp	x24, x23, [sp, #0x20]
0000000100018978	add	sp, sp, #0x60
000000010001897c	ret
0000000100018980	sub	sp, sp, #0x90
0000000100018984	stp	x22, x21, [sp, #0x60]
0000000100018988	stp	x20, x19, [sp, #0x70]
000000010001898c	stp	x29, x30, [sp, #0x80]
0000000100018990	add	x29, sp, #0x80
0000000100018994	mov	x19, x0
0000000100018998	nop
000000010001899c	ldr	x8, #0x2767c ; literal pool symbol address: ___stack_chk_guard
00000001000189a0	ldr	x8, [x8]
00000001000189a4	stur	x8, [x29, #-0x28]
00000001000189a8	adrp	x20, 44 ; 0x100044000
00000001000189ac	ldr	x0, [x20, #0x420]
00000001000189b0	add	x22, x19, #0x460
00000001000189b4	adr	x21, #174928
00000001000189b8	nop
00000001000189bc	ldr	w8, [x21]
00000001000189c0	stp	x22, x8, [sp]
00000001000189c4	adr	x2, #126677 ; literal pool for: "%s: exceeded sigkill timeout: %u"
00000001000189c8	nop
00000001000189cc	mov	w1, #0x0
00000001000189d0	bl	0x1000270c8
00000001000189d4	ldr	w8, [x21]
00000001000189d8	str	x8, [sp]
00000001000189dc	adr	x2, #126686 ; literal pool for: "Service did not exit %u seconds after SIGKILL."
00000001000189e0	nop
00000001000189e4	orr	w1, wzr, #0x4
00000001000189e8	mov	x0, x19
00000001000189ec	bl	0x1000118ec
00000001000189f0	ldr	w0, [x19, #0x330]
00000001000189f4	add	x1, sp, #0x18
00000001000189f8	bl	0x100029340
00000001000189fc	cbz	w0, 0x100018a14
0000000100018a00	sxtw	x0, w0
0000000100018a04	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100018a08	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100018a0c	ldr	x0, [x20, #0x420]
0000000100018a10	b	0x100018a3c
0000000100018a14	ldr	w8, [sp, #0x24]
0000000100018a18	ldr	x0, [x20, #0x420]
0000000100018a1c	cmp	w8, #0x5
0000000100018a20	b.ne	0x100018a3c
0000000100018a24	str	x22, [sp]
0000000100018a28	adr	x2, #126657 ; literal pool for: "%s: service is already a zombie"
0000000100018a2c	nop
0000000100018a30	mov	w1, #0x0
0000000100018a34	bl	0x1000270c8
0000000100018a38	b	0x100018b44
0000000100018a3c	str	x22, [sp]
0000000100018a40	adr	x2, #126665 ; literal pool for: "%s: service is still not a zombie, abandoning"
0000000100018a44	nop
0000000100018a48	mov	w1, #0x0
0000000100018a4c	bl	0x1000270c8
0000000100018a50	ldr	x8, [x19, #0x1d8]
0000000100018a54	ldr	x1, [x19, #0x200]
0000000100018a58	mov	x0, x19
0000000100018a5c	blr	x8
0000000100018a60	mov	x21, x0
0000000100018a64	ldr	x20, [x20, #0x420]
0000000100018a68	cbz	w21, 0x100018ac0
0000000100018a6c	mov	x0, x21
0000000100018a70	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100018a74	stp	x21, x0, [sp, #0x8]
0000000100018a78	str	x22, [sp]
0000000100018a7c	adr	x2, #126723 ; literal pool for: "%s: cannot safely abandon: %d: %s"
0000000100018a80	nop
0000000100018a84	mov	w1, #0x0
0000000100018a88	mov	x0, x20
0000000100018a8c	bl	0x1000270c8
0000000100018a90	adr	x2, #126737 ; literal pool for: "Cannot safely abandon service instance. Leaving it to languish. This may lead to deadlocks."
0000000100018a94	nop
0000000100018a98	orr	w1, wzr, #0x4
0000000100018a9c	mov	x0, x19
0000000100018aa0	bl	0x1000118ec
0000000100018aa4	orr	w8, wzr, #0x6
0000000100018aa8	str	w8, [x19, #0x170]
0000000100018aac	orr	w1, wzr, #0x6
0000000100018ab0	mov	x0, x19
0000000100018ab4	mov	x2, #0x0
0000000100018ab8	bl	0x10001195c
0000000100018abc	b	0x100018b4c
0000000100018ac0	str	x22, [sp]
0000000100018ac4	adr	x2, #126579 ; literal pool for: "%s: abandoning"
0000000100018ac8	nop
0000000100018acc	mov	w1, #0x0
0000000100018ad0	mov	x0, x20
0000000100018ad4	bl	0x1000270c8
0000000100018ad8	adr	x2, #126574 ; literal pool for: "Abandoning service instance. This may lead to deadlocks."
0000000100018adc	nop
0000000100018ae0	orr	w1, wzr, #0x4
0000000100018ae4	mov	x0, x19
0000000100018ae8	bl	0x1000118ec
0000000100018aec	ldrsw	x20, [x19, #0x330]
0000000100018af0	mov	x0, #0x0
0000000100018af4	mov	x1, #0x0
0000000100018af8	bl	0x100030d64 ; symbol stub for: _dispatch_get_global_queue
0000000100018afc	mov	x3, x0
0000000100018b00	nop
0000000100018b04	ldr	x0, #0x2754c ; literal pool symbol address: __dispatch_source_type_proc
0000000100018b08	orr	w2, wzr, #0x80000000
0000000100018b0c	mov	x1, x20
0000000100018b10	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100018b14	mov	x20, x0
0000000100018b18	mov	x1, x20
0000000100018b1c	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100018b20	adr	x1, #468
0000000100018b24	nop
0000000100018b28	mov	x0, x20
0000000100018b2c	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100018b30	mov	x0, x20
0000000100018b34	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100018b38	ldrh	w8, [x19, #0x354]
0000000100018b3c	orr	w8, w8, #0x20
0000000100018b40	strh	w8, [x19, #0x354]
0000000100018b44	mov	x0, x19
0000000100018b48	bl	0x1000121ec
0000000100018b4c	ldur	x8, [x29, #-0x28]
0000000100018b50	nop
0000000100018b54	ldr	x9, #0x274c4 ; literal pool symbol address: ___stack_chk_guard
0000000100018b58	ldr	x9, [x9]
0000000100018b5c	cmp	x9, x8
0000000100018b60	b.ne	0x100018b78
0000000100018b64	ldp	x29, x30, [sp, #0x80]
0000000100018b68	ldp	x20, x19, [sp, #0x70]
0000000100018b6c	ldp	x22, x21, [sp, #0x60]
0000000100018b70	add	sp, sp, #0x90
0000000100018b74	ret
0000000100018b78	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100018b7c	sub	sp, sp, #0x60
0000000100018b80	stp	x24, x23, [sp, #0x20]
0000000100018b84	stp	x22, x21, [sp, #0x30]
0000000100018b88	stp	x20, x19, [sp, #0x40]
0000000100018b8c	stp	x29, x30, [sp, #0x50]
0000000100018b90	add	x29, sp, #0x50
0000000100018b94	mov	x19, x0
0000000100018b98	nop
0000000100018b9c	nop
0000000100018ba0	ldrsw	x21, 0x100043504
0000000100018ba4	ldr	w8, [x19, #0x288]
0000000100018ba8	ldr	w9, [x19, #0x34c]
0000000100018bac	cmp	w9, #0x6
0000000100018bb0	mov	w9, #0xa
0000000100018bb4	csel	w22, w9, w8, eq
0000000100018bb8	adr	x8, #126583 ; literal pool for: "SIGTERM"
0000000100018bbc	nop
0000000100018bc0	adr	x9, #126583 ; literal pool for: "SIGABRT"
0000000100018bc4	nop
0000000100018bc8	csel	x24, x9, x8, eq
0000000100018bcc	stp	x22, x24, [sp]
0000000100018bd0	adr	x2, #126575 ; literal pool for: "Service did not exit %u seconds after %s. Sending SIGKILL."
0000000100018bd4	nop
0000000100018bd8	orr	w1, wzr, #0x4
0000000100018bdc	bl	0x1000118ec
0000000100018be0	adrp	x20, 44 ; 0x100044000
0000000100018be4	ldr	x0, [x20, #0x420]
0000000100018be8	add	x23, x19, #0x460
0000000100018bec	stp	x24, x22, [sp, #0x8]
0000000100018bf0	str	x23, [sp]
0000000100018bf4	adr	x2, #126598 ; literal pool for: "%s: exceeded %s timeout: %u"
0000000100018bf8	nop
0000000100018bfc	mov	w1, #0x0
0000000100018c00	bl	0x1000270c8
0000000100018c04	ldr	w0, [x19, #0x330]
0000000100018c08	mov	w22, #0x9
0000000100018c0c	mov	w1, #0x9
0000000100018c10	bl	0x1000311a8 ; symbol stub for: _kill
0000000100018c14	cbz	w0, 0x100018c94
0000000100018c18	bl	0x100030adc ; symbol stub for: ___error
0000000100018c1c	ldr	w8, [x0]
0000000100018c20	cmp	w8, #0x3
0000000100018c24	b.ne	0x100018c34
0000000100018c28	adr	x2, #126574 ; literal pool for: "Disregard that. The service just snuck in under the wire."
0000000100018c2c	nop
0000000100018c30	b	0x100018c54
0000000100018c34	bl	0x100030adc ; symbol stub for: ___error
0000000100018c38	ldr	w24, [x0]
0000000100018c3c	bl	0x100030adc ; symbol stub for: ___error
0000000100018c40	ldr	w0, [x0]
0000000100018c44	bl	0x100031724 ; symbol stub for: _strerror
0000000100018c48	stp	x24, x0, [sp]
0000000100018c4c	adr	x2, #126596 ; literal pool for: "Could not send SIGKILL to service: %d: %s"
0000000100018c50	nop
0000000100018c54	orr	w1, wzr, #0x4
0000000100018c58	mov	x0, x19
0000000100018c5c	bl	0x1000118ec
0000000100018c60	ldr	x20, [x20, #0x420]
0000000100018c64	bl	0x100030adc ; symbol stub for: ___error
0000000100018c68	ldr	w24, [x0]
0000000100018c6c	bl	0x100030adc ; symbol stub for: ___error
0000000100018c70	ldr	w0, [x0]
0000000100018c74	bl	0x100031724 ; symbol stub for: _strerror
0000000100018c78	stp	x24, x0, [sp, #0x8]
0000000100018c7c	str	x23, [sp]
0000000100018c80	adr	x2, #126586 ; literal pool for: "%s: could not sigkill: %d: %s"
0000000100018c84	nop
0000000100018c88	mov	w1, #0x0
0000000100018c8c	mov	x0, x20
0000000100018c90	bl	0x1000270c8
0000000100018c94	mov	w8, #0x5
0000000100018c98	str	w8, [x19, #0x170]
0000000100018c9c	ldr	x20, [x19, #0x340]
0000000100018ca0	mov	w8, #0xca00
0000000100018ca4	movk	w8, #0x3b9a, lsl #16
0000000100018ca8	mul	x1, x21, x8
0000000100018cac	mov	x0, #0x0
0000000100018cb0	bl	0x100030f38 ; symbol stub for: _dispatch_time
0000000100018cb4	mov	x1, x0
0000000100018cb8	mov	x2, #-0x1
0000000100018cbc	mov	x0, x20
0000000100018cc0	mov	x3, #0x0
0000000100018cc4	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100018cc8	ldr	x0, [x19, #0x340]
0000000100018ccc	adr	x1, #-844
0000000100018cd0	nop
0000000100018cd4	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100018cd8	str	w22, [x19, #0x34c]
0000000100018cdc	ldp	x29, x30, [sp, #0x50]
0000000100018ce0	ldp	x20, x19, [sp, #0x40]
0000000100018ce4	ldp	x22, x21, [sp, #0x30]
0000000100018ce8	ldp	x24, x23, [sp, #0x20]
0000000100018cec	add	sp, sp, #0x60
0000000100018cf0	ret
0000000100018cf4	sub	sp, sp, #0x40
0000000100018cf8	stp	x20, x19, [sp, #0x20]
0000000100018cfc	stp	x29, x30, [sp, #0x30]
0000000100018d00	add	x29, sp, #0x30
0000000100018d04	mov	x19, x0
0000000100018d08	bl	0x100030ed8 ; symbol stub for: _dispatch_source_get_handle
0000000100018d0c	stur	wzr, [x29, #-0x14]
0000000100018d10	sub	x1, x29, #0x14
0000000100018d14	mov	w2, #0x0
0000000100018d18	bl	0x1000318a4 ; symbol stub for: _waitpid
0000000100018d1c	cmn	w0, #0x1
0000000100018d20	b.ne	0x100018d50
0000000100018d24	bl	0x100030adc ; symbol stub for: ___error
0000000100018d28	ldr	w20, [x0]
0000000100018d2c	bl	0x100030adc ; symbol stub for: ___error
0000000100018d30	ldr	w0, [x0]
0000000100018d34	bl	0x100031724 ; symbol stub for: _strerror
0000000100018d38	stp	x20, x0, [sp]
0000000100018d3c	adr	x2, #126145 ; literal pool for: "Could not reap abandoned service instance: %d: %s"
0000000100018d40	nop
0000000100018d44	orr	w1, wzr, #0x3
0000000100018d48	mov	x0, #0x0
0000000100018d4c	bl	0x100029dbc
0000000100018d50	mov	x0, x19
0000000100018d54	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100018d58	ldp	x29, x30, [sp, #0x30]
0000000100018d5c	ldp	x20, x19, [sp, #0x20]
0000000100018d60	add	sp, sp, #0x40
0000000100018d64	ret
0000000100018d68	sub	sp, sp, #0x40
0000000100018d6c	stp	x22, x21, [sp, #0x10]
0000000100018d70	stp	x20, x19, [sp, #0x20]
0000000100018d74	stp	x29, x30, [sp, #0x30]
0000000100018d78	add	x29, sp, #0x30
0000000100018d7c	mov	x22, x1
0000000100018d80	mov	x21, x0
0000000100018d84	ldr	x19, [x2]
0000000100018d88	ldr	x20, [x2, #0x10]
0000000100018d8c	mov	x0, x22
0000000100018d90	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100018d94	nop
0000000100018d98	ldr	x8, #0x27348 ; literal pool symbol address: __xpc_type_string
0000000100018d9c	cmp	x0, x8
0000000100018da0	b.ne	0x100018dc4
0000000100018da4	mov	x0, x22
0000000100018da8	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100018dac	stp	x21, x0, [sp]
0000000100018db0	adr	x2, #117065 ; literal pool for: "%s => %s"
0000000100018db4	nop
0000000100018db8	mov	x0, x19
0000000100018dbc	mov	x1, x20
0000000100018dc0	bl	0x10002a548
0000000100018dc4	ldp	x29, x30, [sp, #0x30]
0000000100018dc8	ldp	x20, x19, [sp, #0x20]
0000000100018dcc	ldp	x22, x21, [sp, #0x10]
0000000100018dd0	add	sp, sp, #0x40
0000000100018dd4	ret
0000000100018dd8	mov	x0, #0x0
0000000100018ddc	ret
0000000100018de0	sub	sp, sp, #0x60
0000000100018de4	stp	x24, x23, [sp, #0x20]
0000000100018de8	stp	x22, x21, [sp, #0x30]
0000000100018dec	stp	x20, x19, [sp, #0x40]
0000000100018df0	stp	x29, x30, [sp, #0x50]
0000000100018df4	add	x29, sp, #0x50
0000000100018df8	mov	x19, x0
0000000100018dfc	adr	x20, #177700
0000000100018e00	nop
0000000100018e04	ldr	x0, [x20]
0000000100018e08	add	x22, x19, #0x3a8
0000000100018e0c	str	x22, [sp]
0000000100018e10	adr	x2, #129775 ; literal pool for: "%s: cleaning up"
0000000100018e14	nop
0000000100018e18	mov	w1, #0x0
0000000100018e1c	bl	0x1000270c8
0000000100018e20	bl	0x100030634
0000000100018e24	adrp	x21, 43 ; 0x100043000
0000000100018e28	ldrb	w8, [x21, #0xd28]
0000000100018e2c	cmp	w8, #0x1
0000000100018e30	b.ne	0x100018e60
0000000100018e34	adrp	x8, 43 ; 0x100043000
0000000100018e38	ldrb	w8, [x8, #0xd29]
0000000100018e3c	cmp	w8, #0x1
0000000100018e40	b.ne	0x100018e60
0000000100018e44	mov	w8, #0x5
0000000100018e48	movk	w8, #0x1, lsl #16
0000000100018e4c	sub	w1, w8, #0x1
0000000100018e50	adr	x2, #129727 ; literal pool for: "Could not cleanly tear down userspace. Will force a full hardware reboot."
0000000100018e54	nop
0000000100018e58	mov	x0, x19
0000000100018e5c	bl	0x100019bfc
0000000100018e60	bl	0x100031220 ; symbol stub for: _mach_host_self
0000000100018e64	mov	w1, #0x0
0000000100018e68	bl	0x10002af74
0000000100018e6c	nop
0000000100018e70	nop
0000000100018e74	ldr	w0, 0x100044430
0000000100018e78	mov	w2, #0x507
0000000100018e7c	movk	w2, #0x7, lsl #16
0000000100018e80	mov	w1, #0x0
0000000100018e84	bl	0x1000088a4
0000000100018e88	cbnz	w0, 0x100018f50
0000000100018e8c	ldr	x20, [x20]
0000000100018e90	ldr	x0, [x19, #0xe8]
0000000100018e94	ldr	w23, [x19, #0x90]
0000000100018e98	bl	0x100008730
0000000100018e9c	mov	x24, #0x34db
0000000100018ea0	movk	x24, #0xd7b6, lsl #16
0000000100018ea4	movk	x24, #0xde82, lsl #32
0000000100018ea8	movk	x24, #0x431b, lsl #48
0000000100018eac	umulh	x8, x0, x24
0000000100018eb0	lsr	x8, x8, #18
0000000100018eb4	stp	x23, x8, [sp, #0x8]
0000000100018eb8	str	x22, [sp]
0000000100018ebc	adr	x2, #129693 ; literal pool for: "%s: shutting down system: flags = 0x%x, time = %llu ms"
0000000100018ec0	nop
0000000100018ec4	mov	w1, #0x0
0000000100018ec8	mov	x0, x20
0000000100018ecc	bl	0x1000270c8
0000000100018ed0	ldr	x0, [x19, #0xe8]
0000000100018ed4	bl	0x100008730
0000000100018ed8	umulh	x8, x0, x24
0000000100018edc	lsr	x8, x8, #18
0000000100018ee0	str	x8, [sp]
0000000100018ee4	adr	x2, #129708 ; literal pool for: "Userspace teardown took: %llu ms"
0000000100018ee8	nop
0000000100018eec	mov	w1, #0x5
0000000100018ef0	movk	w1, #0x1, lsl #16
0000000100018ef4	mov	x0, x19
0000000100018ef8	bl	0x100019bfc
0000000100018efc	ldr	w8, [x19, #0x90]
0000000100018f00	str	x8, [sp]
0000000100018f04	adr	x2, #129709 ; literal pool for: "Will be calling reboot(2) with flags: 0x%x"
0000000100018f08	nop
0000000100018f0c	mov	w1, #0x5
0000000100018f10	movk	w1, #0x1, lsl #16
0000000100018f14	mov	x0, x19
0000000100018f18	bl	0x100019bfc
0000000100018f1c	bl	0x100027478
0000000100018f20	bl	0x10000a250
0000000100018f24	bl	0x100029c78
0000000100018f28	ldrb	w8, [x21, #0xd28]
0000000100018f2c	adrp	x9, 43 ; 0x100043000
0000000100018f30	ldrb	w9, [x9, #0xd29]
0000000100018f34	cmp	w9, #0x0
0000000100018f38	orr	w9, wzr, #0x4
0000000100018f3c	csinc	w9, w9, wzr, eq
0000000100018f40	cmp	w8, #0x0
0000000100018f44	csinc	w0, w9, wzr, ne
0000000100018f48	ldr	w1, [x19, #0x90]
0000000100018f4c	bl	0x10002ba34
0000000100018f50	sxtw	x0, w0
0000000100018f54	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100018f58	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100018f5c	brk	#0x1
0000000100018f60	sub	sp, sp, #0x50
0000000100018f64	stp	x22, x21, [sp, #0x20]
0000000100018f68	stp	x20, x19, [sp, #0x30]
0000000100018f6c	stp	x29, x30, [sp, #0x40]
0000000100018f70	add	x29, sp, #0x40
0000000100018f74	mov	x21, x6
0000000100018f78	mov	x22, x5
0000000100018f7c	mov	x19, x4
0000000100018f80	mov	x20, x2
0000000100018f84	sub	w8, w1, #0x1
0000000100018f88	cmp	w8, #0x4
0000000100018f8c	b.hi	0x100019160
0000000100018f90	adr	x9, #552
0000000100018f94	nop
0000000100018f98	ldrsw	x8, [x9, x8, lsl #2]
0000000100018f9c	add	x8, x8, x9
0000000100018fa0	br	x8
0000000100018fa4	ldr	w8, [x19, #0x4]
0000000100018fa8	cmp	w8, #0x0
0000000100018fac	b	0x100019190
0000000100018fb0	tbz	w20, #0x3, 0x100019004
0000000100018fb4	nop
0000000100018fb8	ldr	x8, #0x27050 ; literal pool symbol address: _SANDBOX_CHECK_NO_REPORT
0000000100018fbc	ldr	w2, [x8]
0000000100018fc0	ldr	q0, [x19, #0x10]
0000000100018fc4	str	q0, [sp, #0x10]
0000000100018fc8	ldr	q0, [x19]
0000000100018fcc	str	q0, [sp]
0000000100018fd0	adr	x1, #129726 ; literal pool for: "forbidden-launchd-control"
0000000100018fd4	nop
0000000100018fd8	mov	x0, sp
0000000100018fdc	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
0000000100018fe0	cbz	w0, 0x100019004
0000000100018fe4	orr	w1, wzr, #0x3
0000000100018fe8	mov	x0, x19
0000000100018fec	bl	0x100009be8
0000000100018ff0	tbnz	w0, #0x0, 0x100019004
0000000100018ff4	orr	w1, wzr, #0x4
0000000100018ff8	mov	x0, x19
0000000100018ffc	bl	0x100009be8
0000000100019000	cbz	w0, 0x100019160
0000000100019004	cbz	x22, 0x100019014
0000000100019008	mov	x0, x22
000000010001900c	bl	0x10001ec48
0000000100019010	tbnz	w0, #0x0, 0x100019124
0000000100019014	ldr	w8, [x19, #0x4]
0000000100019018	cbnz	w8, 0x100019160
000000010001901c	orr	w1, wzr, #0x3
0000000100019020	mov	x0, x19
0000000100019024	bl	0x100009be8
0000000100019028	tbnz	w0, #0x0, 0x100019124
000000010001902c	orr	w1, wzr, #0x4
0000000100019030	mov	x0, x19
0000000100019034	bl	0x100009be8
0000000100019038	tbnz	w0, #0x0, 0x100019124
000000010001903c	ldr	q0, [x19, #0x10]
0000000100019040	str	q0, [sp, #0x10]
0000000100019044	ldr	q0, [x19]
0000000100019048	str	q0, [sp]
000000010001904c	adr	x1, #129698 ; literal pool for: "job-creation"
0000000100019050	nop
0000000100019054	mov	x0, sp
0000000100019058	mov	w2, #0x0
000000010001905c	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
0000000100019060	mov	x8, x0
0000000100019064	mov	w0, #0x0
0000000100019068	cbnz	w8, 0x10001919c
000000010001906c	cbz	x22, 0x10001919c
0000000100019070	ldr	w8, [x21, #0x10]
0000000100019074	cbnz	w8, 0x100019088
0000000100019078	ldrb	w8, [x21, #0x4]
000000010001907c	mov	w9, #0x12
0000000100019080	tst	w8, w9
0000000100019084	b.eq	0x1000191b0
0000000100019088	orr	w8, wzr, #0x1
000000010001908c	tst	x20, #0x10
0000000100019090	cset	w9, eq
0000000100019094	tst	w9, w8
0000000100019098	mov	w8, #0x7a
000000010001909c	csel	w0, w8, wzr, ne
00000001000190a0	b	0x10001919c
00000001000190a4	tbz	w20, #0x3, 0x1000190f8
00000001000190a8	nop
00000001000190ac	ldr	x8, #0x26f5c ; literal pool symbol address: _SANDBOX_CHECK_NO_REPORT
00000001000190b0	ldr	w2, [x8]
00000001000190b4	ldr	q0, [x19, #0x10]
00000001000190b8	str	q0, [sp, #0x10]
00000001000190bc	ldr	q0, [x19]
00000001000190c0	str	q0, [sp]
00000001000190c4	adr	x1, #129482 ; literal pool for: "forbidden-launchd-control"
00000001000190c8	nop
00000001000190cc	mov	x0, sp
00000001000190d0	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
00000001000190d4	cbz	w0, 0x1000190f8
00000001000190d8	orr	w1, wzr, #0x3
00000001000190dc	mov	x0, x19
00000001000190e0	bl	0x100009be8
00000001000190e4	tbnz	w0, #0x0, 0x1000190f8
00000001000190e8	orr	w1, wzr, #0x4
00000001000190ec	mov	x0, x19
00000001000190f0	bl	0x100009be8
00000001000190f4	cbz	w0, 0x100019160
00000001000190f8	tbnz	w20, #0x2, 0x100019198
00000001000190fc	ldr	w8, [x19, #0x4]
0000000100019100	cbz	w8, 0x100019124
0000000100019104	orr	w1, wzr, #0x3
0000000100019108	mov	x0, x19
000000010001910c	bl	0x100009be8
0000000100019110	tbnz	w0, #0x0, 0x100019124
0000000100019114	orr	w1, wzr, #0x4
0000000100019118	mov	x0, x19
000000010001911c	bl	0x100009be8
0000000100019120	cbz	w0, 0x100019160
0000000100019124	mov	w0, #0x0
0000000100019128	b	0x10001919c
000000010001912c	tbz	w20, #0x3, 0x100019168
0000000100019130	nop
0000000100019134	ldr	x8, #0x26ed4 ; literal pool symbol address: _SANDBOX_CHECK_NO_REPORT
0000000100019138	ldr	w2, [x8]
000000010001913c	ldr	q0, [x19, #0x10]
0000000100019140	str	q0, [sp, #0x10]
0000000100019144	ldr	q0, [x19]
0000000100019148	str	q0, [sp]
000000010001914c	adr	x1, #129346 ; literal pool for: "forbidden-launchd-control"
0000000100019150	nop
0000000100019154	mov	x0, sp
0000000100019158	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
000000010001915c	cbz	w0, 0x100019168
0000000100019160	orr	w0, wzr, #0x1
0000000100019164	b	0x10001919c
0000000100019168	ldr	q0, [x19, #0x10]
000000010001916c	str	q0, [sp, #0x10]
0000000100019170	ldr	q0, [x19]
0000000100019174	str	q0, [sp]
0000000100019178	adr	x1, #129411 ; literal pool for: "process-info-pidinfo"
000000010001917c	nop
0000000100019180	mov	x0, sp
0000000100019184	mov	w2, #0x0
0000000100019188	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
000000010001918c	cmp	w0, #0x0
0000000100019190	cset	w0, ne
0000000100019194	b	0x10001919c
0000000100019198	mov	w0, #0x7d
000000010001919c	ldp	x29, x30, [sp, #0x40]
00000001000191a0	ldp	x20, x19, [sp, #0x30]
00000001000191a4	ldp	x22, x21, [sp, #0x20]
00000001000191a8	add	sp, sp, #0x50
00000001000191ac	ret
00000001000191b0	mov	w8, #0x0
00000001000191b4	b	0x10001908c
00000001000191b8	.long	0xfffffdec
00000001000191bc	.long	0xfffffdf8
00000001000191c0	.long	0xfffffeec
00000001000191c4	.long	0xffffff74
00000001000191c8	.long	0xffffff6c
00000001000191cc	ldr	w0, [x0, #0x4]
00000001000191d0	ret
00000001000191d4	sub	sp, sp, #0x30
00000001000191d8	stp	x20, x19, [sp, #0x10]
00000001000191dc	stp	x29, x30, [sp, #0x20]
00000001000191e0	add	x29, sp, #0x20
00000001000191e4	mov	x19, x0
00000001000191e8	nop
00000001000191ec	nop
00000001000191f0	ldr	x0, #0x2b230
00000001000191f4	add	x8, x19, #0x3a8
00000001000191f8	str	x8, [sp]
00000001000191fc	adr	x2, #128771 ; literal pool for: "%s: cleaning up"
0000000100019200	nop
0000000100019204	mov	w1, #0x0
0000000100019208	bl	0x1000270c8
000000010001920c	ldr	x8, [x19, #0x18]
0000000100019210	cbz	x8, 0x10001921c
0000000100019214	ldr	x9, [x19, #0x20]
0000000100019218	str	x9, [x8, #0x20]
000000010001921c	ldr	x9, [x19, #0x20]
0000000100019220	str	x8, [x9]
0000000100019224	mov	x8, #-0x1
0000000100019228	stp	x8, x8, [x19, #0x18]
000000010001922c	orr	w1, wzr, #0x2
0000000100019230	mov	x0, x19
0000000100019234	bl	0x10000e3f4
0000000100019238	bl	0x10000d8e0
000000010001923c	adr	x2, #22596
0000000100019240	nop
0000000100019244	mov	x1, x19
0000000100019248	ldp	x29, x30, [sp, #0x20]
000000010001924c	ldp	x20, x19, [sp, #0x10]
0000000100019250	add	sp, sp, #0x30
0000000100019254	b	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100019258	sub	sp, sp, #0x60
000000010001925c	stp	x24, x23, [sp, #0x20]
0000000100019260	stp	x22, x21, [sp, #0x30]
0000000100019264	stp	x20, x19, [sp, #0x40]
0000000100019268	stp	x29, x30, [sp, #0x50]
000000010001926c	add	x29, sp, #0x50
0000000100019270	mov	x23, x6
0000000100019274	mov	x21, x5
0000000100019278	mov	x19, x4
000000010001927c	mov	x20, x3
0000000100019280	mov	x22, x2
0000000100019284	cmp	w1, #0x5
0000000100019288	b.hi	0x100019438
000000010001928c	mov	w8, w1
0000000100019290	adr	x9, #568
0000000100019294	nop
0000000100019298	ldrsw	x8, [x9, x8, lsl #2]
000000010001929c	add	x8, x8, x9
00000001000192a0	br	x8
00000001000192a4	orr	w1, wzr, #0xf
00000001000192a8	mov	x0, x19
00000001000192ac	bl	0x100009be8
00000001000192b0	tbnz	w0, #0x0, 0x1000193e8
00000001000192b4	orr	w1, wzr, #0x10
00000001000192b8	mov	x0, x19
00000001000192bc	bl	0x100009be8
00000001000192c0	tbnz	w0, #0x0, 0x1000193e8
00000001000192c4	mov	w0, #0x2d
00000001000192c8	b	0x1000194b0
00000001000192cc	tbz	w22, #0x3, 0x100019300
00000001000192d0	nop
00000001000192d4	ldr	x8, #0x26d34 ; literal pool symbol address: _SANDBOX_CHECK_NO_REPORT
00000001000192d8	ldr	w2, [x8]
00000001000192dc	ldr	q0, [x19, #0x10]
00000001000192e0	str	q0, [sp, #0x10]
00000001000192e4	ldr	q0, [x19]
00000001000192e8	str	q0, [sp]
00000001000192ec	adr	x1, #128930 ; literal pool for: "forbidden-launchd-control"
00000001000192f0	nop
00000001000192f4	mov	x0, sp
00000001000192f8	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
00000001000192fc	cbnz	w0, 0x100019438
0000000100019300	ldr	w8, [x19, #0xc]
0000000100019304	cmp	x8, x20
0000000100019308	b.ne	0x100019454
000000010001930c	cbz	x21, 0x100019484
0000000100019310	ldr	w8, [x23, #0x10]
0000000100019314	cbnz	w8, 0x100019328
0000000100019318	ldrb	w9, [x23, #0x4]
000000010001931c	mov	w10, #0x12
0000000100019320	tst	w9, w10
0000000100019324	b.eq	0x1000193e8
0000000100019328	cmp	x8, x20
000000010001932c	b.ne	0x10001947c
0000000100019330	ldrb	w8, [x23, #0x4]
0000000100019334	tbnz	w8, #0x1, 0x10001947c
0000000100019338	tbz	w22, #0x8, 0x10001937c
000000010001933c	nop
0000000100019340	ldr	x1, #0x2a9f0
0000000100019344	cbz	x1, 0x10001937c
0000000100019348	mov	x0, x21
000000010001934c	bl	0x10000d7a4
0000000100019350	cbz	w0, 0x10001937c
0000000100019354	adr	x1, #128956 ; literal pool for: "/Contents/Info.plist"
0000000100019358	nop
000000010001935c	mov	x0, x21
0000000100019360	bl	0x10000d7e4
0000000100019364	cbz	w0, 0x10001937c
0000000100019368	adr	x1, #128957 ; literal pool for: "/Contents/XPCServices/"
000000010001936c	nop
0000000100019370	mov	x0, x21
0000000100019374	bl	0x1000317a8 ; symbol stub for: _strstr
0000000100019378	cbnz	x0, 0x1000193e8
000000010001937c	nop
0000000100019380	ldr	x8, #0x26c88 ; literal pool symbol address: _SANDBOX_CHECK_NO_REPORT
0000000100019384	ldr	w2, [x8]
0000000100019388	ldr	q0, [x19, #0x10]
000000010001938c	str	q0, [sp, #0x10]
0000000100019390	ldr	q0, [x19]
0000000100019394	str	q0, [sp]
0000000100019398	adr	x1, #128758 ; literal pool for: "forbidden-launchd-control"
000000010001939c	nop
00000001000193a0	mov	x0, sp
00000001000193a4	b	0x1000194a4
00000001000193a8	tbz	w22, #0x3, 0x1000193dc
00000001000193ac	nop
00000001000193b0	ldr	x8, #0x26c58 ; literal pool symbol address: _SANDBOX_CHECK_NO_REPORT
00000001000193b4	ldr	w2, [x8]
00000001000193b8	ldr	q0, [x19, #0x10]
00000001000193bc	str	q0, [sp, #0x10]
00000001000193c0	ldr	q0, [x19]
00000001000193c4	str	q0, [sp]
00000001000193c8	adr	x1, #128710 ; literal pool for: "forbidden-launchd-control"
00000001000193cc	nop
00000001000193d0	mov	x0, sp
00000001000193d4	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
00000001000193d8	cbnz	w0, 0x100019438
00000001000193dc	ldr	w8, [x19, #0xc]
00000001000193e0	cmp	x8, x20
00000001000193e4	b.ne	0x100019454
00000001000193e8	mov	w0, #0x0
00000001000193ec	b	0x1000194b0
00000001000193f0	tbz	w22, #0x3, 0x100019424
00000001000193f4	nop
00000001000193f8	ldr	x8, #0x26c10 ; literal pool symbol address: _SANDBOX_CHECK_NO_REPORT
00000001000193fc	ldr	w2, [x8]
0000000100019400	ldr	q0, [x19, #0x10]
0000000100019404	str	q0, [sp, #0x10]
0000000100019408	ldr	q0, [x19]
000000010001940c	str	q0, [sp]
0000000100019410	adr	x1, #128638 ; literal pool for: "forbidden-launchd-control"
0000000100019414	nop
0000000100019418	mov	x0, sp
000000010001941c	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
0000000100019420	cbnz	w0, 0x100019438
0000000100019424	ldr	w8, [x19, #0xc]
0000000100019428	cmp	x8, x20
000000010001942c	b.eq	0x100019460
0000000100019430	ldr	w8, [x19, #0x4]
0000000100019434	cbz	w8, 0x100019460
0000000100019438	orr	w0, wzr, #0x1
000000010001943c	b	0x1000194b0
0000000100019440	ldr	w8, [x19, #0xc]
0000000100019444	cmp	x8, x20
0000000100019448	mov	w8, #0x90
000000010001944c	csel	w0, wzr, w8, eq
0000000100019450	b	0x1000194b0
0000000100019454	ldr	w8, [x19, #0x4]
0000000100019458	cmp	w8, #0x0
000000010001945c	b	0x1000194ac
0000000100019460	ldr	q0, [x19, #0x10]
0000000100019464	str	q0, [sp, #0x10]
0000000100019468	ldr	q0, [x19]
000000010001946c	str	q0, [sp]
0000000100019470	adr	x1, #128651 ; literal pool for: "process-info-pidinfo"
0000000100019474	nop
0000000100019478	b	0x10001949c
000000010001947c	mov	w0, #0x7a
0000000100019480	b	0x1000194b0
0000000100019484	ldr	q0, [x19, #0x10]
0000000100019488	str	q0, [sp, #0x10]
000000010001948c	ldr	q0, [x19]
0000000100019490	str	q0, [sp]
0000000100019494	adr	x1, #128602 ; literal pool for: "job-creation"
0000000100019498	nop
000000010001949c	mov	x0, sp
00000001000194a0	mov	w2, #0x0
00000001000194a4	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
00000001000194a8	cmp	w0, #0x0
00000001000194ac	cset	w0, ne
00000001000194b0	ldp	x29, x30, [sp, #0x50]
00000001000194b4	ldp	x20, x19, [sp, #0x40]
00000001000194b8	ldp	x22, x21, [sp, #0x30]
00000001000194bc	ldp	x24, x23, [sp, #0x20]
00000001000194c0	add	sp, sp, #0x60
00000001000194c4	ret
00000001000194c8	.long	0xfffffddc
00000001000194cc	.long	0xfffffdfc
00000001000194d0	.long	0xfffffe04
00000001000194d4	.long	0xfffffee0
00000001000194d8	.long	0xffffff28
00000001000194dc	.long	0xffffff78
00000001000194e0	ldrsw	x0, [x0, #0x18]
00000001000194e4	ret
00000001000194e8	b	0x1000191d4
00000001000194ec	mov	w0, #0x2d
00000001000194f0	ret
00000001000194f4	ldrsw	x0, [x0, #0x18]
00000001000194f8	ret
00000001000194fc	sub	sp, sp, #0x30
0000000100019500	stp	x20, x19, [sp, #0x10]
0000000100019504	stp	x29, x30, [sp, #0x20]
0000000100019508	add	x29, sp, #0x20
000000010001950c	mov	x19, x0
0000000100019510	nop
0000000100019514	nop
0000000100019518	ldr	x0, #0x2af08
000000010001951c	add	x8, x19, #0x3a8
0000000100019520	str	x8, [sp]
0000000100019524	adr	x2, #127963 ; literal pool for: "%s: cleaning up"
0000000100019528	nop
000000010001952c	mov	w1, #0x0
0000000100019530	bl	0x1000270c8
0000000100019534	ldr	x8, [x19, #0x18]
0000000100019538	cbz	x8, 0x100019544
000000010001953c	ldr	x9, [x19, #0x20]
0000000100019540	str	x9, [x8, #0x20]
0000000100019544	ldr	x9, [x19, #0x20]
0000000100019548	str	x8, [x9]
000000010001954c	mov	x8, #-0x1
0000000100019550	stp	x8, x8, [x19, #0x18]
0000000100019554	orr	w1, wzr, #0x2
0000000100019558	mov	x0, x19
000000010001955c	bl	0x10000e3f4
0000000100019560	bl	0x10000d8e0
0000000100019564	adr	x2, #21788
0000000100019568	nop
000000010001956c	mov	x1, x19
0000000100019570	ldp	x29, x30, [sp, #0x20]
0000000100019574	ldp	x20, x19, [sp, #0x10]
0000000100019578	add	sp, sp, #0x30
000000010001957c	b	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100019580	sub	sp, sp, #0x50
0000000100019584	stp	x22, x21, [sp, #0x20]
0000000100019588	stp	x20, x19, [sp, #0x30]
000000010001958c	stp	x29, x30, [sp, #0x40]
0000000100019590	add	x29, sp, #0x40
0000000100019594	mov	x21, x6
0000000100019598	mov	x22, x5
000000010001959c	mov	x19, x4
00000001000195a0	mov	x20, x3
00000001000195a4	cmp	w1, #0x5
00000001000195a8	b.hi	0x10001967c
00000001000195ac	mov	w8, w1
00000001000195b0	adr	x9, #284
00000001000195b4	nop
00000001000195b8	ldrsw	x8, [x9, x8, lsl #2]
00000001000195bc	add	x8, x8, x9
00000001000195c0	br	x8
00000001000195c4	ldrsw	x8, [x19, #0x18]
00000001000195c8	cmp	x8, x20
00000001000195cc	b	0x1000196ac
00000001000195d0	ldr	q0, [x19, #0x10]
00000001000195d4	str	q0, [sp, #0x10]
00000001000195d8	ldr	q0, [x19]
00000001000195dc	str	q0, [sp]
00000001000195e0	adr	x1, #128270 ; literal pool for: "job-creation"
00000001000195e4	nop
00000001000195e8	mov	x0, sp
00000001000195ec	mov	w2, #0x0
00000001000195f0	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
00000001000195f4	cbnz	w0, 0x10001967c
00000001000195f8	b	0x1000195c4
00000001000195fc	mov	w0, #0x7d
0000000100019600	b	0x1000196b0
0000000100019604	ldr	q0, [x19, #0x10]
0000000100019608	str	q0, [sp, #0x10]
000000010001960c	ldr	q0, [x19]
0000000100019610	str	q0, [sp]
0000000100019614	adr	x1, #128218 ; literal pool for: "job-creation"
0000000100019618	nop
000000010001961c	mov	x0, sp
0000000100019620	mov	w2, #0x0
0000000100019624	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
0000000100019628	cbnz	w0, 0x10001967c
000000010001962c	cbz	x22, 0x1000196c4
0000000100019630	ldrsw	x8, [x19, #0x18]
0000000100019634	cmp	x8, x20
0000000100019638	b.ne	0x10001967c
000000010001963c	mov	x0, x22
0000000100019640	bl	0x10001ec48
0000000100019644	cbz	w0, 0x1000196c4
0000000100019648	ldr	w8, [x21, #0x10]
000000010001964c	mov	w0, #0x7a
0000000100019650	cbnz	w8, 0x1000196b0
0000000100019654	ldrb	w8, [x21, #0x4]
0000000100019658	mov	w9, #0x12
000000010001965c	tst	w8, w9
0000000100019660	csel	w0, wzr, w0, eq
0000000100019664	b	0x1000196b0
0000000100019668	ldrsw	x8, [x19, #0x18]
000000010001966c	cmp	x8, x20
0000000100019670	b.eq	0x100019684
0000000100019674	ldr	w8, [x19, #0x4]
0000000100019678	cbz	w8, 0x100019684
000000010001967c	orr	w0, wzr, #0x1
0000000100019680	b	0x1000196b0
0000000100019684	ldr	q0, [x19, #0x10]
0000000100019688	str	q0, [sp, #0x10]
000000010001968c	ldr	q0, [x19]
0000000100019690	str	q0, [sp]
0000000100019694	adr	x1, #128103 ; literal pool for: "process-info-pidinfo"
0000000100019698	nop
000000010001969c	mov	x0, sp
00000001000196a0	mov	w2, #0x0
00000001000196a4	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
00000001000196a8	cmp	w0, #0x0
00000001000196ac	cset	w0, ne
00000001000196b0	ldp	x29, x30, [sp, #0x40]
00000001000196b4	ldp	x20, x19, [sp, #0x30]
00000001000196b8	ldp	x22, x21, [sp, #0x20]
00000001000196bc	add	sp, sp, #0x50
00000001000196c0	ret
00000001000196c4	orr	w0, wzr, #0x7f
00000001000196c8	b	0x1000196b0
00000001000196cc	.long	0xffffff04
00000001000196d0	.long	0xffffff30
00000001000196d4	.long	0xffffff38
00000001000196d8	.long	0xfffffef8
00000001000196dc	.long	0xffffff9c
00000001000196e0	.long	0xfffffef8
00000001000196e4	ldrsw	x0, [x0, #0x14]
00000001000196e8	ret
00000001000196ec	sub	sp, sp, #0x30
00000001000196f0	stp	x20, x19, [sp, #0x10]
00000001000196f4	stp	x29, x30, [sp, #0x20]
00000001000196f8	add	x29, sp, #0x20
00000001000196fc	mov	x19, x0
0000000100019700	nop
0000000100019704	nop
0000000100019708	ldr	x0, #0x2ad18
000000010001970c	add	x8, x19, #0x3a8
0000000100019710	str	x8, [sp]
0000000100019714	adr	x2, #127467 ; literal pool for: "%s: cleaning up"
0000000100019718	nop
000000010001971c	mov	w1, #0x0
0000000100019720	bl	0x1000270c8
0000000100019724	ldr	x8, [x19, #0xb0]
0000000100019728	cbz	x8, 0x100019768
000000010001972c	orr	w0, wzr, #0x30
0000000100019730	bl	0x10000d464
0000000100019734	mov	x20, x0
0000000100019738	nop
000000010001973c	nop
0000000100019740	ldr	w8, 0x100044430
0000000100019744	str	w8, [x20, #0x10]
0000000100019748	ldr	x8, [x19, #0xb0]
000000010001974c	str	x8, [x20, #0x18]
0000000100019750	str	xzr, [x19, #0xb0]
0000000100019754	bl	0x10000d8e0
0000000100019758	adr	x2, #21692
000000010001975c	nop
0000000100019760	mov	x1, x20
0000000100019764	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100019768	ldr	x8, [x19, #0x18]
000000010001976c	cbz	x8, 0x100019778
0000000100019770	ldr	x9, [x19, #0x20]
0000000100019774	str	x9, [x8, #0x20]
0000000100019778	ldr	x9, [x19, #0x20]
000000010001977c	str	x8, [x9]
0000000100019780	mov	x8, #-0x1
0000000100019784	stp	x8, x8, [x19, #0x18]
0000000100019788	orr	w1, wzr, #0x2
000000010001978c	mov	x0, x19
0000000100019790	bl	0x10000e3f4
0000000100019794	bl	0x10000d8e0
0000000100019798	adr	x2, #21224
000000010001979c	nop
00000001000197a0	mov	x1, x19
00000001000197a4	ldp	x29, x30, [sp, #0x20]
00000001000197a8	ldp	x20, x19, [sp, #0x10]
00000001000197ac	add	sp, sp, #0x30
00000001000197b0	b	0x100030d34 ; symbol stub for: _dispatch_async_f
00000001000197b4	sub	sp, sp, #0x50
00000001000197b8	stp	x22, x21, [sp, #0x20]
00000001000197bc	stp	x20, x19, [sp, #0x30]
00000001000197c0	stp	x29, x30, [sp, #0x40]
00000001000197c4	add	x29, sp, #0x40
00000001000197c8	mov	x22, x6
00000001000197cc	mov	x21, x5
00000001000197d0	mov	x19, x4
00000001000197d4	mov	x20, x0
00000001000197d8	cmp	w1, #0x5
00000001000197dc	b.hi	0x1000198c0
00000001000197e0	mov	w8, w1
00000001000197e4	adr	x9, #424
00000001000197e8	nop
00000001000197ec	ldrsw	x8, [x9, x8, lsl #2]
00000001000197f0	add	x8, x8, x9
00000001000197f4	br	x8
00000001000197f8	ldrsw	x8, [x19, #0x14]
00000001000197fc	cmp	x8, x3
0000000100019800	b.eq	0x100019868
0000000100019804	mov	w1, #0xd
0000000100019808	mov	x0, x19
000000010001980c	bl	0x100009be8
0000000100019810	tbnz	w0, #0x0, 0x100019868
0000000100019814	orr	w1, wzr, #0x2
0000000100019818	mov	x0, x19
000000010001981c	b	0x1000198e0
0000000100019820	mov	w0, #0x7d
0000000100019824	b	0x1000198f0
0000000100019828	cbz	x21, 0x1000198ec
000000010001982c	tbnz	w2, #0x0, 0x100019868
0000000100019830	mov	x0, x21
0000000100019834	bl	0x10001ec48
0000000100019838	cbz	w0, 0x100019904
000000010001983c	ldr	w8, [x22, #0x10]
0000000100019840	mov	w0, #0x7a
0000000100019844	cbnz	w8, 0x1000198f0
0000000100019848	ldrb	w8, [x22, #0x4]
000000010001984c	mov	w9, #0x12
0000000100019850	tst	w8, w9
0000000100019854	csel	w0, wzr, w0, eq
0000000100019858	b	0x1000198f0
000000010001985c	ldrsw	x8, [x19, #0x14]
0000000100019860	cmp	x8, x3
0000000100019864	b.ne	0x1000198d8
0000000100019868	mov	w0, #0x0
000000010001986c	b	0x1000198f0
0000000100019870	ldrsw	x8, [x19, #0x14]
0000000100019874	cmp	x8, x3
0000000100019878	b.eq	0x100019894
000000010001987c	ldr	w8, [x19, #0x4]
0000000100019880	cbz	w8, 0x100019894
0000000100019884	cbz	x20, 0x1000198c0
0000000100019888	ldr	w9, [x20, #0x30]
000000010001988c	cmp	w8, w9
0000000100019890	b.ne	0x1000198c0
0000000100019894	ldr	q0, [x19, #0x10]
0000000100019898	str	q0, [sp, #0x10]
000000010001989c	ldr	q0, [x19]
00000001000198a0	str	q0, [sp]
00000001000198a4	adr	x1, #127575 ; literal pool for: "process-info-pidinfo"
00000001000198a8	nop
00000001000198ac	mov	x0, sp
00000001000198b0	mov	w2, #0x0
00000001000198b4	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
00000001000198b8	cmp	w0, #0x0
00000001000198bc	b	0x1000198d0
00000001000198c0	orr	w0, wzr, #0x1
00000001000198c4	b	0x1000198f0
00000001000198c8	ldrsw	x8, [x19, #0x14]
00000001000198cc	cmp	x8, x3
00000001000198d0	cset	w0, ne
00000001000198d4	b	0x1000198f0
00000001000198d8	mov	x0, x19
00000001000198dc	mov	x1, #0x0
00000001000198e0	bl	0x100009be8
00000001000198e4	eor	w0, w0, #0x1
00000001000198e8	b	0x1000198f0
00000001000198ec	mov	w0, #0x93
00000001000198f0	ldp	x29, x30, [sp, #0x40]
00000001000198f4	ldp	x20, x19, [sp, #0x30]
00000001000198f8	ldp	x22, x21, [sp, #0x20]
00000001000198fc	add	sp, sp, #0x50
0000000100019900	ret
0000000100019904	cbz	x20, 0x100019968
0000000100019908	ldr	x0, [x20, #0xc8]
000000010001990c	cbz	x0, 0x100019930
0000000100019910	orr	w1, wzr, #0x2
0000000100019914	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
0000000100019918	mov	x8, x0
000000010001991c	cbz	x8, 0x100019930
0000000100019920	mov	x0, x21
0000000100019924	mov	x1, x8
0000000100019928	bl	0x10000d7a4
000000010001992c	tbnz	w0, #0x0, 0x100019868
0000000100019930	ldrsw	x8, [x19, #0x14]
0000000100019934	ldr	x9, [x20, #0x68]
0000000100019938	cmp	x9, x8
000000010001993c	b.ne	0x100019970
0000000100019940	mov	x0, x19
0000000100019944	mov	x1, #0x0
0000000100019948	bl	0x100009be8
000000010001994c	tbnz	w0, #0x0, 0x100019868
0000000100019950	orr	w1, wzr, #0x1
0000000100019954	mov	x0, x19
0000000100019958	bl	0x100009be8
000000010001995c	cmp	w0, #0x0
0000000100019960	mov	w8, #0x93
0000000100019964	b	0x100019984
0000000100019968	mov	w0, #0x83
000000010001996c	b	0x1000198f0
0000000100019970	orr	w1, wzr, #0x2
0000000100019974	mov	x0, x19
0000000100019978	bl	0x100009be8
000000010001997c	cmp	w0, #0x0
0000000100019980	mov	w8, #0x90
0000000100019984	csel	w0, wzr, w8, ne
0000000100019988	b	0x1000198f0
000000010001998c	.long	0xfffffe6c
0000000100019990	.long	0xfffffe94
0000000100019994	.long	0xfffffe9c
0000000100019998	.long	0xfffffed0
000000010001999c	.long	0xfffffee4
00000001000199a0	.long	0xffffff3c
00000001000199a4	stp	x24, x23, [sp, #-0x40]!
00000001000199a8	stp	x22, x21, [sp, #0x10]
00000001000199ac	stp	x20, x19, [sp, #0x20]
00000001000199b0	stp	x29, x30, [sp, #0x30]
00000001000199b4	add	x29, sp, #0x30
00000001000199b8	mov	x19, x0
00000001000199bc	nop
00000001000199c0	ldr	x8, #0x2a338
00000001000199c4	cmp	x8, x19
00000001000199c8	b.eq	0x100019b74
00000001000199cc	mov	x8, #0x0
00000001000199d0	add	x9, x19, x8, lsl #3
00000001000199d4	ldr	x9, [x9, #0x128]
00000001000199d8	cbnz	x9, 0x100019b50
00000001000199dc	add	x8, x8, #0x1
00000001000199e0	cmp	x8, #0x16
00000001000199e4	b.ls	0x1000199d0
00000001000199e8	ldr	x1, [x19, #0x48]
00000001000199ec	cbz	x1, 0x100019a04
00000001000199f0	ldr	x20, [x1]
00000001000199f4	mov	x0, x19
00000001000199f8	bl	0x100019b90
00000001000199fc	mov	x1, x20
0000000100019a00	cbnz	x20, 0x1000199f0
0000000100019a04	ldr	x8, [x19, #0x18]
0000000100019a08	cmn	x8, #0x1
0000000100019a0c	b.ne	0x100019b5c
0000000100019a10	ldr	x8, [x19, #0x20]
0000000100019a14	cmn	x8, #0x1
0000000100019a18	b.ne	0x100019b5c
0000000100019a1c	ldr	x8, [x19, #0x8]
0000000100019a20	cmn	x8, #0x1
0000000100019a24	b.ne	0x100019b68
0000000100019a28	ldr	x8, [x19, #0x10]
0000000100019a2c	cmn	x8, #0x1
0000000100019a30	b.ne	0x100019b68
0000000100019a34	ldr	x20, [x19, #0x50]
0000000100019a38	cbz	x20, 0x100019aa0
0000000100019a3c	mov	x9, x20
0000000100019a40	ldr	x8, [x9], #0x8
0000000100019a44	cbz	x8, 0x100019a88
0000000100019a48	mov	x21, #-0x1
0000000100019a4c	mov	x10, x20
0000000100019a50	mov	x0, x20
0000000100019a54	mov	x20, x8
0000000100019a58	ldr	x11, [x9]
0000000100019a5c	mov	x22, x20
0000000100019a60	str	x11, [x22, #0x8]!
0000000100019a64	ldr	x9, [x9]
0000000100019a68	str	x8, [x9]
0000000100019a6c	str	x21, [x10]
0000000100019a70	str	x21, [x0, #0x8]
0000000100019a74	bl	0x10000e704
0000000100019a78	ldr	x8, [x20]
0000000100019a7c	mov	x9, x22
0000000100019a80	mov	x10, x20
0000000100019a84	cbnz	x8, 0x100019a50
0000000100019a88	ldr	x9, [x9]
0000000100019a8c	str	x8, [x9]
0000000100019a90	mov	x8, #-0x1
0000000100019a94	stp	x8, x8, [x20]
0000000100019a98	mov	x0, x20
0000000100019a9c	bl	0x10000e704
0000000100019aa0	ldr	x20, [x19, #0x28]
0000000100019aa4	cbz	x20, 0x100019b00
0000000100019aa8	mov	x21, #-0x1
0000000100019aac	adr	x22, #174468
0000000100019ab0	nop
0000000100019ab4	ldr	x23, [x20]
0000000100019ab8	ldrb	w8, [x19, #0x3a1]
0000000100019abc	tbz	w8, #0x0, 0x100019acc
0000000100019ac0	ldr	w0, [x22]
0000000100019ac4	ldr	x1, [x20, #0x18]
0000000100019ac8	bl	0x10002e418
0000000100019acc	ldr	x0, [x20, #0x18]
0000000100019ad0	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100019ad4	ldr	x8, [x20]
0000000100019ad8	cbz	x8, 0x100019ae4
0000000100019adc	ldr	x9, [x20, #0x8]
0000000100019ae0	str	x9, [x8, #0x8]
0000000100019ae4	ldp	x8, x9, [x20]
0000000100019ae8	str	x8, [x9]
0000000100019aec	stp	x21, x21, [x20]
0000000100019af0	mov	x0, x20
0000000100019af4	bl	0x100031010 ; symbol stub for: _free
0000000100019af8	mov	x20, x23
0000000100019afc	cbnz	x23, 0x100019ab4
0000000100019b00	ldr	x0, [x19, #0x110]
0000000100019b04	bl	0x100031010 ; symbol stub for: _free
0000000100019b08	ldr	x0, [x19, #0xd0]
0000000100019b0c	cbz	x0, 0x100019b14
0000000100019b10	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100019b14	ldr	x0, [x19, #0xc8]
0000000100019b18	cbz	x0, 0x100019b20
0000000100019b1c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100019b20	ldr	x0, [x19, #0x380]
0000000100019b24	cbz	x0, 0x100019b30
0000000100019b28	mov	w1, #0x0
0000000100019b2c	bl	0x10000e4a4
0000000100019b30	ldr	w0, [x19, #0x78]
0000000100019b34	bl	0x10000888c
0000000100019b38	cbnz	w0, 0x100019b80
0000000100019b3c	ldp	x29, x30, [sp, #0x30]
0000000100019b40	ldp	x20, x19, [sp, #0x20]
0000000100019b44	ldp	x22, x21, [sp, #0x10]
0000000100019b48	ldp	x24, x23, [sp], #0x40
0000000100019b4c	ret
0000000100019b50	adr	x0, #125923 ; literal pool for: "domain deallocated with services"
0000000100019b54	nop
0000000100019b58	bl	0x100028f84
0000000100019b5c	adr	x0, #125944 ; literal pool for: "domain disposal while still in the domains list"
0000000100019b60	nop
0000000100019b64	bl	0x100028f84
0000000100019b68	adr	x0, #125980 ; literal pool for: "domain disposal while still in the children list"
0000000100019b6c	nop
0000000100019b70	bl	0x100028f84
0000000100019b74	adr	x0, #125861 ; literal pool for: "system domain deallocated"
0000000100019b78	nop
0000000100019b7c	bl	0x100028f84
0000000100019b80	sxtw	x0, w0
0000000100019b84	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100019b88	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100019b8c	brk	#0x1
0000000100019b90	ldr	x8, [x0, #0x40]
0000000100019b94	sub	x8, x8, #0x1
0000000100019b98	str	x8, [x0, #0x40]
0000000100019b9c	ldr	x8, [x1]
0000000100019ba0	cbz	x8, 0x100019bac
0000000100019ba4	ldr	x9, [x1, #0x8]
0000000100019ba8	str	x9, [x8, #0x8]
0000000100019bac	ldr	x9, [x1, #0x8]
0000000100019bb0	str	x8, [x9]
0000000100019bb4	mov	x8, #-0x1
0000000100019bb8	stp	x8, x8, [x1]
0000000100019bbc	mov	x0, x1
0000000100019bc0	b	0x10000e7e4
0000000100019bc4	sub	sp, sp, #0x20
0000000100019bc8	stp	x29, x30, [sp, #0x10]
0000000100019bcc	add	x29, sp, #0x10
0000000100019bd0	mov	x8, x1
0000000100019bd4	str	x2, [sp]
0000000100019bd8	adr	x2, #112850 ; literal pool for: "%s"
0000000100019bdc	nop
0000000100019be0	orr	w1, wzr, #0x3
0000000100019be4	mov	x0, x8
0000000100019be8	bl	0x100019bfc
0000000100019bec	orr	w0, wzr, #0x1
0000000100019bf0	ldp	x29, x30, [sp, #0x10]
0000000100019bf4	add	sp, sp, #0x20
0000000100019bf8	ret
0000000100019bfc	sub	sp, sp, #0x40
0000000100019c00	stp	x22, x21, [sp, #0x10]
0000000100019c04	stp	x20, x19, [sp, #0x20]
0000000100019c08	stp	x29, x30, [sp, #0x30]
0000000100019c0c	add	x29, sp, #0x30
0000000100019c10	mov	x19, x2
0000000100019c14	mov	x20, x1
0000000100019c18	add	x1, x0, #0x3a8
0000000100019c1c	mov	w2, #0x0
0000000100019c20	mov	x0, #0x0
0000000100019c24	bl	0x100029d50
0000000100019c28	mov	x21, x0
0000000100019c2c	add	x8, x29, #0x10
0000000100019c30	str	x8, [sp, #0x8]
0000000100019c34	add	x3, x29, #0x10
0000000100019c38	mov	x1, x20
0000000100019c3c	mov	x2, x19
0000000100019c40	bl	0x100029de4
0000000100019c44	mov	w1, #0x0
0000000100019c48	mov	x0, x21
0000000100019c4c	bl	0x10000e4a4
0000000100019c50	ldp	x29, x30, [sp, #0x30]
0000000100019c54	ldp	x20, x19, [sp, #0x20]
0000000100019c58	ldp	x22, x21, [sp, #0x10]
0000000100019c5c	add	sp, sp, #0x40
0000000100019c60	ret
0000000100019c64	mov	w0, #0xc02d
0000000100019c68	ret
0000000100019c6c	mov	w0, #0xc02d
0000000100019c70	ret
0000000100019c74	mov	w0, #0xc02d
0000000100019c78	ret
0000000100019c7c	mov	w0, #0xc02d
0000000100019c80	ret
0000000100019c84	mov	w0, #0xc02d
0000000100019c88	ret
0000000100019c8c	mov	w0, #0xc02d
0000000100019c90	ret
0000000100019c94	mov	w0, #0xc02d
0000000100019c98	ret
0000000100019c9c	mov	w0, #0xc02d
0000000100019ca0	ret
0000000100019ca4	mov	w0, #0xc02d
0000000100019ca8	ret
0000000100019cac	mov	w0, #0xc02d
0000000100019cb0	ret
0000000100019cb4	mov	w0, #0xc02d
0000000100019cb8	ret
0000000100019cbc	mov	w0, #0xc02d
0000000100019cc0	ret
0000000100019cc4	mov	w0, #0xc02d
0000000100019cc8	ret
0000000100019ccc	mov	w0, #0xc02d
0000000100019cd0	ret
0000000100019cd4	mov	w0, #0xc02d
0000000100019cd8	ret
0000000100019cdc	mov	w0, #0xc02d
0000000100019ce0	ret
0000000100019ce4	mov	w0, #0xc02d
0000000100019ce8	ret
0000000100019cec	mov	w0, #0xc02d
0000000100019cf0	ret
0000000100019cf4	mov	w0, #0x2d
0000000100019cf8	ret
0000000100019cfc	mov	w0, #0xc02d
0000000100019d00	ret
0000000100019d04	mov	w0, #0xc02d
0000000100019d08	ret
0000000100019d0c	mov	w0, #0xc02d
0000000100019d10	ret
0000000100019d14	mov	w0, #0xc02d
0000000100019d18	ret
0000000100019d1c	mov	w0, #0xc02d
0000000100019d20	ret
0000000100019d24	mov	w0, #0xc02d
0000000100019d28	ret
0000000100019d2c	mov	w0, #0xc02d
0000000100019d30	ret
0000000100019d34	mov	w0, #0xc02d
0000000100019d38	ret
0000000100019d3c	mov	w0, #0xc02d
0000000100019d40	ret
0000000100019d44	mov	w0, #0xc02d
0000000100019d48	ret
0000000100019d4c	mov	w0, #0xc02d
0000000100019d50	ret
0000000100019d54	mov	w0, #0xc02d
0000000100019d58	ret
0000000100019d5c	sub	sp, sp, #0x120
0000000100019d60	stp	x28, x27, [sp, #0xe0]
0000000100019d64	stp	x22, x21, [sp, #0xf0]
0000000100019d68	stp	x20, x19, [sp, #0x100]
0000000100019d6c	stp	x29, x30, [sp, #0x110]
0000000100019d70	add	x29, sp, #0x110
0000000100019d74	mov	x20, x1
0000000100019d78	bl	0x10002d3b4
0000000100019d7c	ldr	w8, [x0, #0x14]
0000000100019d80	cbnz	w8, 0x100019d94
0000000100019d84	ldr	w8, [x0, #0xc]
0000000100019d88	cbnz	w8, 0x100019d94
0000000100019d8c	ldr	w8, [x0, #0x1c]
0000000100019d90	cbz	w8, 0x100019dc8
0000000100019d94	nop
0000000100019d98	ldr	x0, #0x29f60
0000000100019d9c	adr	x2, #125465 ; literal pool for: "Dropping coalition notification from unknown source"
0000000100019da0	nop
0000000100019da4	orr	w1, wzr, #0x3
0000000100019da8	bl	0x100019bfc
0000000100019dac	mov	w0, #0x5
0000000100019db0	ldp	x29, x30, [sp, #0x110]
0000000100019db4	ldp	x20, x19, [sp, #0x100]
0000000100019db8	ldp	x22, x21, [sp, #0xf0]
0000000100019dbc	ldp	x28, x27, [sp, #0xe0]
0000000100019dc0	add	sp, sp, #0x120
0000000100019dc4	ret
0000000100019dc8	nop
0000000100019dcc	ldr	x19, #0x29f34
0000000100019dd0	cbz	x19, 0x100019de8
0000000100019dd4	ldr	x8, [x19, #0x118]
0000000100019dd8	cmp	x8, x20
0000000100019ddc	b.eq	0x100019e24
0000000100019de0	ldr	x19, [x19, #0x68]
0000000100019de4	cbnz	x19, 0x100019dd4
0000000100019de8	nop
0000000100019dec	ldr	x19, #0x29f1c
0000000100019df0	cbz	x19, 0x100019e08
0000000100019df4	ldr	x8, [x19, #0x120]
0000000100019df8	cmp	x8, x20
0000000100019dfc	b.eq	0x100019eb0
0000000100019e00	ldr	x19, [x19, #0x88]
0000000100019e04	cbnz	x19, 0x100019df4
0000000100019e08	adr	x8, #173694
0000000100019e0c	nop
0000000100019e10	ldrb	w8, [x8]
0000000100019e14	cbnz	w8, 0x100019fb4
0000000100019e18	adr	x0, #125393 ; literal pool for: "notification received for coalition not in list"
0000000100019e1c	nop
0000000100019e20	bl	0x100028f84
0000000100019e24	add	x1, sp, #0x8
0000000100019e28	mov	w2, #0xd8
0000000100019e2c	mov	x0, x20
0000000100019e30	bl	0x100030c98 ; symbol stub for: _coalition_info_resource_usage
0000000100019e34	cmn	w0, #0x1
0000000100019e38	b.ne	0x100019e58
0000000100019e3c	bl	0x100030adc ; symbol stub for: ___error
0000000100019e40	ldrsw	x2, [x0]
0000000100019e44	adr	x0, #-32924
0000000100019e48	nop
0000000100019e4c	mov	x1, x19
0000000100019e50	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100019e54	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100019e58	adrp	x8, 42 ; 0x100043000
0000000100019e5c	ldr	x21, [x8, #0xd38]
0000000100019e60	cbz	x21, 0x100019e9c
0000000100019e64	str	xzr, [x8, #0xd38]
0000000100019e68	add	x2, sp, #0x8
0000000100019e6c	mov	x0, x19
0000000100019e70	mov	x1, x20
0000000100019e74	mov	x3, x21
0000000100019e78	bl	0x10001edf4
0000000100019e7c	mov	x0, x21
0000000100019e80	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
0000000100019e84	mov	x22, x0
0000000100019e88	mov	x0, x21
0000000100019e8c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100019e90	cbz	w22, 0x100019f3c
0000000100019e94	cmp	w22, #0x20
0000000100019e98	b.ne	0x100019f24
0000000100019e9c	add	x2, sp, #0x8
0000000100019ea0	mov	x0, x19
0000000100019ea4	mov	x1, x20
0000000100019ea8	bl	0x10001ee84
0000000100019eac	b	0x100019f3c
0000000100019eb0	mov	w1, #0x0
0000000100019eb4	mov	x0, x20
0000000100019eb8	bl	0x100030cbc ; symbol stub for: _coalition_reap
0000000100019ebc	cmn	w0, #0x1
0000000100019ec0	b.ne	0x100019ee0
0000000100019ec4	bl	0x100030adc ; symbol stub for: ___error
0000000100019ec8	ldrsw	x2, [x0]
0000000100019ecc	adr	x0, #-33060
0000000100019ed0	nop
0000000100019ed4	mov	x1, x19
0000000100019ed8	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100019edc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100019ee0	ldr	x8, [x19, #0x78]
0000000100019ee4	cbz	x8, 0x100019ef0
0000000100019ee8	ldr	x9, [x19, #0x80]
0000000100019eec	str	x9, [x8, #0x80]
0000000100019ef0	ldr	x9, [x19, #0x80]
0000000100019ef4	str	x8, [x9]
0000000100019ef8	mov	x8, #-0x1
0000000100019efc	stp	x8, x8, [x19, #0x78]
0000000100019f00	ldr	x9, [x19, #0x88]
0000000100019f04	cbz	x9, 0x100019f10
0000000100019f08	ldr	x10, [x19, #0x90]
0000000100019f0c	str	x10, [x9, #0x90]
0000000100019f10	ldr	x10, [x19, #0x90]
0000000100019f14	str	x9, [x10]
0000000100019f18	stp	x8, x8, [x19, #0x88]
0000000100019f1c	mov	w1, #0x1d
0000000100019f20	b	0x100019fac
0000000100019f24	sxtw	x2, w22
0000000100019f28	adr	x0, #-33152
0000000100019f2c	nop
0000000100019f30	mov	x1, x19
0000000100019f34	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100019f38	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100019f3c	mov	w1, #0x0
0000000100019f40	mov	x0, x20
0000000100019f44	bl	0x100030cbc ; symbol stub for: _coalition_reap
0000000100019f48	cmn	w0, #0x1
0000000100019f4c	b.ne	0x100019f6c
0000000100019f50	bl	0x100030adc ; symbol stub for: ___error
0000000100019f54	ldrsw	x2, [x0]
0000000100019f58	adr	x0, #-33200
0000000100019f5c	nop
0000000100019f60	mov	x1, x19
0000000100019f64	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100019f68	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100019f6c	ldr	x8, [x19, #0x58]
0000000100019f70	cbz	x8, 0x100019f7c
0000000100019f74	ldr	x9, [x19, #0x60]
0000000100019f78	str	x9, [x8, #0x60]
0000000100019f7c	ldr	x9, [x19, #0x60]
0000000100019f80	str	x8, [x9]
0000000100019f84	mov	x8, #-0x1
0000000100019f88	stp	x8, x8, [x19, #0x58]
0000000100019f8c	ldr	x9, [x19, #0x68]
0000000100019f90	cbz	x9, 0x100019f9c
0000000100019f94	ldr	x10, [x19, #0x70]
0000000100019f98	str	x10, [x9, #0x70]
0000000100019f9c	ldr	x10, [x19, #0x70]
0000000100019fa0	str	x9, [x10]
0000000100019fa4	stp	x8, x8, [x19, #0x68]
0000000100019fa8	orr	w1, wzr, #0x1c
0000000100019fac	mov	x0, x19
0000000100019fb0	bl	0x10000e4a4
0000000100019fb4	mov	w0, #0x0
0000000100019fb8	b	0x100019db0
0000000100019fbc	stp	x20, x19, [sp, #-0x20]!
0000000100019fc0	stp	x29, x30, [sp, #0x10]
0000000100019fc4	add	x29, sp, #0x10
0000000100019fc8	adr	x0, #167952
0000000100019fcc	nop
0000000100019fd0	adr	x5, #173280
0000000100019fd4	nop
0000000100019fd8	mov	w4, #0x0
0000000100019fdc	mov	x1, #0x0
0000000100019fe0	mov	x2, #0x0
0000000100019fe4	bl	0x10001a088
0000000100019fe8	adrp	x19, 42 ; 0x100043000
0000000100019fec	str	x0, [x19, #0xcf8]
0000000100019ff0	adr	x1, #1640
0000000100019ff4	nop
0000000100019ff8	orr	w0, wzr, #0x3
0000000100019ffc	bl	0x10002d3e8
000000010001a000	adr	x1, #11652
000000010001a004	nop
000000010001a008	mov	w0, #0x5
000000010001a00c	bl	0x10002d3e8
000000010001a010	adr	x1, #12776
000000010001a014	nop
000000010001a018	orr	w0, wzr, #0x7
000000010001a01c	bl	0x10002d3e8
000000010001a020	adr	x0, #-54256
000000010001a024	nop
000000010001a028	mov	w1, #0x830
000000010001a02c	bl	0x10002d55c
000000010001a030	adr	x0, #-53988
000000010001a034	nop
000000010001a038	mov	w1, #0x2c
000000010001a03c	bl	0x10002d55c
000000010001a040	bl	0x100031220 ; symbol stub for: _mach_host_self
000000010001a044	nop
000000010001a048	nop
000000010001a04c	ldr	w2, 0x100044430
000000010001a050	mov	w1, #0x16
000000010001a054	bl	0x100031178 ; symbol stub for: _host_set_special_port
000000010001a058	cbz	w0, 0x10001a07c
000000010001a05c	ldr	x1, [x19, #0xcf8]
000000010001a060	sxtw	x2, w0
000000010001a064	adr	x0, #-1184
000000010001a068	nop
000000010001a06c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001a070	ldp	x29, x30, [sp, #0x10]
000000010001a074	ldp	x20, x19, [sp], #0x20
000000010001a078	b	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001a07c	ldp	x29, x30, [sp, #0x10]
000000010001a080	ldp	x20, x19, [sp], #0x20
000000010001a084	ret
000000010001a088	stp	x28, x27, [sp, #-0x60]!
000000010001a08c	stp	x26, x25, [sp, #0x10]
000000010001a090	stp	x24, x23, [sp, #0x20]
000000010001a094	stp	x22, x21, [sp, #0x30]
000000010001a098	stp	x20, x19, [sp, #0x40]
000000010001a09c	stp	x29, x30, [sp, #0x50]
000000010001a0a0	add	x29, sp, #0x50
000000010001a0a4	sub	sp, sp, #0x280
000000010001a0a8	mov	x22, x5
000000010001a0ac	mov	x24, x4
000000010001a0b0	mov	x19, x2
000000010001a0b4	mov	x21, x1
000000010001a0b8	mov	x23, x0
000000010001a0bc	nop
000000010001a0c0	ldr	x8, #0x25f58 ; literal pool symbol address: ___stack_chk_guard
000000010001a0c4	ldr	x8, [x8]
000000010001a0c8	stur	x8, [x29, #-0x58]
000000010001a0cc	adr	x27, #168268
000000010001a0d0	nop
000000010001a0d4	cmp	x23, x27
000000010001a0d8	ccmp	x21, #0x0, #0x0, eq
000000010001a0dc	b.eq	0x10001a630
000000010001a0e0	ldr	x0, [x23, #0x80]
000000010001a0e4	bl	0x10003173c ; symbol stub for: _strlen
000000010001a0e8	mov	x20, x0
000000010001a0ec	sub	x0, x29, #0xd8
000000010001a0f0	orr	w2, wzr, #0x80
000000010001a0f4	mov	w1, #0x0
000000010001a0f8	bl	0x100031340 ; symbol stub for: _memset
000000010001a0fc	cbz	x19, 0x10001a134
000000010001a100	adr	x4, #124731 ; literal pool for: ".%s"
000000010001a104	nop
000000010001a108	str	x19, [sp]
000000010001a10c	sub	x0, x29, #0xd8
000000010001a110	orr	w1, wzr, #0x80
000000010001a114	orr	w3, wzr, #0x80
000000010001a118	mov	w2, #0x0
000000010001a11c	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010001a120	mov	x0, x19
000000010001a124	bl	0x10003173c ; symbol stub for: _strlen
000000010001a128	add	x8, x20, x0
000000010001a12c	add	x25, x8, #0x16
000000010001a130	b	0x10001a148
000000010001a134	add	x25, x20, #0x15
000000010001a138	adr	x8, #167584
000000010001a13c	nop
000000010001a140	cmp	x23, x8
000000010001a144	b.eq	0x10001a374
000000010001a148	adr	x4, #124663 ; literal pool for: ".%lu"
000000010001a14c	nop
000000010001a150	str	x21, [sp]
000000010001a154	sub	x0, x29, #0xed
000000010001a158	mov	w1, #0x15
000000010001a15c	mov	w3, #0x15
000000010001a160	mov	w2, #0x0
000000010001a164	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010001a168	mov	x0, x25
000000010001a16c	bl	0x10000e86c
000000010001a170	mov	x19, x0
000000010001a174	str	x23, [x19, #0x60]
000000010001a178	mov	x26, x19
000000010001a17c	str	x21, [x26, #0x68]!
000000010001a180	add	x20, x19, #0x3a8
000000010001a184	ldr	x8, [x23, #0x80]
000000010001a188	sub	x9, x29, #0xed
000000010001a18c	str	x9, [sp, #0x10]
000000010001a190	sub	x9, x29, #0xd8
000000010001a194	adr	x4, #124592 ; literal pool for: "%s%s%s"
000000010001a198	nop
000000010001a19c	stp	x8, x9, [sp]
000000010001a1a0	mov	x3, #-0x1
000000010001a1a4	mov	w2, #0x0
000000010001a1a8	mov	x0, x20
000000010001a1ac	mov	x1, x25
000000010001a1b0	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010001a1b4	ldr	q0, [x22]
000000010001a1b8	str	q0, [x19, #0xf0]
000000010001a1bc	ldr	q0, [x22, #0x10]
000000010001a1c0	str	q0, [x19, #0x100]
000000010001a1c4	orr	w1, wzr, #0x8
000000010001a1c8	mov	x0, x26
000000010001a1cc	bl	0x10000d840
000000010001a1d0	mov	x8, #0x8ba3
000000010001a1d4	movk	x8, #0xba2e, lsl #16
000000010001a1d8	movk	x8, #0xa2e8, lsl #32
000000010001a1dc	movk	x8, #0x2e8b, lsl #48
000000010001a1e0	umulh	x8, x0, x8
000000010001a1e4	lsr	x8, x8, #1
000000010001a1e8	mov	w9, #0xb
000000010001a1ec	msub	x8, x8, x9, x0
000000010001a1f0	ldr	x9, [x19, #0x60]
000000010001a1f4	add	x8, x9, x8, lsl #3
000000010001a1f8	ldr	x9, [x8]
000000010001a1fc	str	x9, [x19, #0x18]
000000010001a200	cbz	x9, 0x10001a20c
000000010001a204	add	x10, x19, #0x18
000000010001a208	str	x10, [x9, #0x20]
000000010001a20c	str	x19, [x8]
000000010001a210	str	x8, [x19, #0x20]
000000010001a214	cbz	w24, 0x10001a21c
000000010001a218	str	w24, [x19, #0x7c]
000000010001a21c	ldr	w0, [x22, #0x14]
000000010001a220	bl	0x100015490
000000010001a224	cbz	x0, 0x10001a230
000000010001a228	add	x8, x0, #0xe0
000000010001a22c	b	0x10001a248
000000010001a230	ldr	w1, [x22, #0x4]
000000010001a234	adr	x0, #167476
000000010001a238	nop
000000010001a23c	bl	0x10001d8f0
000000010001a240	adr	x8, #170680
000000010001a244	nop
000000010001a248	ldr	x25, [x8]
000000010001a24c	add	x1, sp, #0x1a0
000000010001a250	mov	x0, x22
000000010001a254	bl	0x1000293c0
000000010001a258	bl	0x10000d520
000000010001a25c	str	x0, [x19, #0x110]
000000010001a260	adr	x26, #167432
000000010001a264	nop
000000010001a268	cmp	x23, x26
000000010001a26c	b.ne	0x10001a298
000000010001a270	ldr	w24, [x19, #0x68]
000000010001a274	mov	x0, x24
000000010001a278	bl	0x10001d620
000000010001a27c	stp	w24, w0, [x19, #0x30]
000000010001a280	ldrh	w8, [x19, #0x3a0]
000000010001a284	orr	w8, w8, #0x1000
000000010001a288	strh	w8, [x19, #0x3a0]
000000010001a28c	ldrb	w8, [x19, #0x58]
000000010001a290	orr	w8, w8, #0x1
000000010001a294	strb	w8, [x19, #0x58]
000000010001a298	ldr	x8, [x19, #0x60]
000000010001a29c	ldrb	w8, [x8, #0x88]
000000010001a2a0	tbz	w8, #0x1, 0x10001a2b8
000000010001a2a4	nop
000000010001a2a8	nop
000000010001a2ac	ldr	x1, #0x2a1b4
000000010001a2b0	mov	x0, x19
000000010001a2b4	bl	0x10001d6e4
000000010001a2b8	cmp	x23, x27
000000010001a2bc	b.eq	0x10001a2f8
000000010001a2c0	orr	w1, wzr, #0xc
000000010001a2c4	mov	x0, x19
000000010001a2c8	bl	0x10001d898
000000010001a2cc	adr	x8, #167180
000000010001a2d0	nop
000000010001a2d4	cmp	x23, x8
000000010001a2d8	b.ne	0x10001a438
000000010001a2dc	ldr	w8, [x19, #0x98]
000000010001a2e0	add	w8, w8, #0x1
000000010001a2e4	str	w8, [x19, #0x98]
000000010001a2e8	ldrh	w8, [x19, #0x3a0]
000000010001a2ec	orr	w8, w8, #0x80
000000010001a2f0	strh	w8, [x19, #0x3a0]
000000010001a2f4	b	0x10001a488
000000010001a2f8	ldr	w8, [x22, #0x4]
000000010001a2fc	adrp	x23, 41 ; 0x100043000
000000010001a300	cbnz	w8, 0x10001a310
000000010001a304	ldr	x9, [x23, #0xcf8]
000000010001a308	cmp	x25, x9
000000010001a30c	b.eq	0x10001a320
000000010001a310	str	w8, [x19, #0x30]
000000010001a314	ldrb	w8, [x19, #0x58]
000000010001a318	orr	w8, w8, #0x1
000000010001a31c	strb	w8, [x19, #0x58]
000000010001a320	add	x8, sp, #0x48
000000010001a324	orr	x0, x8, #0x4
000000010001a328	mov	w1, #0x154
000000010001a32c	bl	0x100030c2c ; symbol stub for: _bzero
000000010001a330	orr	w8, wzr, #0x1
000000010001a334	str	w8, [sp, #0x48]
000000010001a338	ldr	w0, [x22, #0x14]
000000010001a33c	add	x1, sp, #0x48
000000010001a340	bl	0x1000311d8 ; symbol stub for: _kpersona_pidinfo
000000010001a344	mov	x22, x0
000000010001a348	cbz	w22, 0x10001a37c
000000010001a34c	bl	0x100030adc ; symbol stub for: ___error
000000010001a350	ldr	w8, [x0]
000000010001a354	cmp	w8, #0x3
000000010001a358	b.ne	0x10001a388
000000010001a35c	cmn	w22, #0x1
000000010001a360	b.ne	0x10001a3a0
000000010001a364	ldr	x8, [x23, #0xcf8]
000000010001a368	ldr	w8, [x8, #0x34]
000000010001a36c	cbnz	w8, 0x10001a390
000000010001a370	b	0x10001a3a0
000000010001a374	sturb	wzr, [x29, #-0xed]
000000010001a378	b	0x10001a168
000000010001a37c	ldr	w8, [sp, #0x4c]
000000010001a380	str	w8, [x19, #0x34]
000000010001a384	b	0x10001a3a0
000000010001a388	cmn	w22, #0x1
000000010001a38c	b.ne	0x10001a3a0
000000010001a390	bl	0x100030adc ; symbol stub for: ___error
000000010001a394	ldrsw	x0, [x0]
000000010001a398	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010001a39c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001a3a0	orr	w1, wzr, #0xc
000000010001a3a4	mov	x0, x19
000000010001a3a8	bl	0x10001d898
000000010001a3ac	ldr	w8, [x19, #0x98]
000000010001a3b0	add	w8, w8, #0x1
000000010001a3b4	str	w8, [x19, #0x98]
000000010001a3b8	add	x1, sp, #0x48
000000010001a3bc	mov	x0, x21
000000010001a3c0	bl	0x100029380
000000010001a3c4	cmp	w0, #0x3
000000010001a3c8	b.eq	0x10001a3f4
000000010001a3cc	cbnz	w0, 0x10001a3dc
000000010001a3d0	ldr	x8, [sp, #0xe0]
000000010001a3d4	str	x8, [x19, #0x70]
000000010001a3d8	b	0x10001a3f4
000000010001a3dc	sxtw	x2, w0
000000010001a3e0	adr	x0, #-2076
000000010001a3e4	nop
000000010001a3e8	mov	x1, x19
000000010001a3ec	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001a3f0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001a3f4	add	x1, sp, #0x20
000000010001a3f8	mov	x0, x21
000000010001a3fc	bl	0x100029408
000000010001a400	cmp	w0, #0x3
000000010001a404	b.eq	0x10001a438
000000010001a408	cbnz	w0, 0x10001a420
000000010001a40c	ldr	x8, [sp, #0x20]
000000010001a410	str	x8, [x19, #0x390]
000000010001a414	ldr	x8, [sp, #0x28]
000000010001a418	str	x8, [x19, #0x398]
000000010001a41c	b	0x10001a438
000000010001a420	sxtw	x2, w0
000000010001a424	adr	x0, #-2144
000000010001a428	nop
000000010001a42c	mov	x1, x19
000000010001a430	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001a434	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001a438	nop
000000010001a43c	ldr	x21, #0x298bc
000000010001a440	str	x21, [x19, #0xc0]
000000010001a444	add	x8, x21, #0x118
000000010001a448	ldr	x9, [x21, #0x118]
000000010001a44c	str	x9, [x19, #0x8]
000000010001a450	cbz	x9, 0x10001a45c
000000010001a454	add	x10, x19, #0x8
000000010001a458	str	x10, [x9, #0x10]
000000010001a45c	str	x19, [x21, #0x118]
000000010001a460	str	x8, [x19, #0x10]
000000010001a464	orr	w1, wzr, #0x3
000000010001a468	mov	x0, x19
000000010001a46c	bl	0x10000e3f4
000000010001a470	orr	w1, wzr, #0x4
000000010001a474	mov	x0, x21
000000010001a478	bl	0x10001d898
000000010001a47c	mov	w1, #0x0
000000010001a480	mov	x0, x19
000000010001a484	bl	0x10000e4a4
000000010001a488	mov	w8, #-0x1
000000010001a48c	str	w8, [sp, #0x48]
000000010001a490	ldr	x8, [x19, #0x60]
000000010001a494	adr	x21, #166724
000000010001a498	nop
000000010001a49c	cmp	x8, x21
000000010001a4a0	b.eq	0x10001a4dc
000000010001a4a4	cmp	x8, x26
000000010001a4a8	b.eq	0x10001a4fc
000000010001a4ac	cmp	x8, x27
000000010001a4b0	b.ne	0x10001a4fc
000000010001a4b4	ldr	w1, [x19, #0x7c]
000000010001a4b8	cbnz	w1, 0x10001a4f4
000000010001a4bc	nop
000000010001a4c0	ldr	x8, #0x25c60 ; literal pool symbol address: _mach_task_self_
000000010001a4c4	ldr	w0, [x8]
000000010001a4c8	ldr	w1, [x19, #0x68]
000000010001a4cc	add	x2, sp, #0x48
000000010001a4d0	bl	0x100031808 ; symbol stub for: _task_name_for_pid
000000010001a4d4	ldr	w1, [sp, #0x48]
000000010001a4d8	b	0x10001a4f4
000000010001a4dc	mov	w0, #0x33
000000010001a4e0	orr	w1, wzr, #0x6
000000010001a4e4	mov	x2, x19
000000010001a4e8	bl	0x1000087d4
000000010001a4ec	str	w0, [sp, #0x48]
000000010001a4f0	mov	x1, x0
000000010001a4f4	mov	x0, x19
000000010001a4f8	bl	0x100026928
000000010001a4fc	ldr	x8, [x19, #0x60]
000000010001a500	cmp	x8, x21
000000010001a504	b.eq	0x10001a554
000000010001a508	adr	x9, #167040
000000010001a50c	nop
000000010001a510	cmp	x8, x9
000000010001a514	b.eq	0x10001a554
000000010001a518	ldrb	w9, [x8, #0x88]
000000010001a51c	tbnz	w9, #0x0, 0x10001a59c
000000010001a520	cmp	x8, x27
000000010001a524	b.ne	0x10001a5d0
000000010001a528	cbz	x25, 0x10001a63c
000000010001a52c	ldr	x8, [x25, #0x48]
000000010001a530	ldr	w2, [x8, #0x10]
000000010001a534	orr	w3, wzr, #0x4
000000010001a538	mov	x0, x19
000000010001a53c	mov	x1, #0x0
000000010001a540	bl	0x1000224d0
000000010001a544	cbnz	w0, 0x10001a648
000000010001a548	adr	x21, #171752
000000010001a54c	nop
000000010001a550	b	0x10001a570
000000010001a554	adr	x21, #171740
000000010001a558	nop
000000010001a55c	ldr	w2, [x21]
000000010001a560	orr	w3, wzr, #0x4
000000010001a564	mov	x0, x19
000000010001a568	mov	x1, #0x0
000000010001a56c	bl	0x1000224d0
000000010001a570	ldr	w0, [x21]
000000010001a574	bl	0x10000886c
000000010001a578	cbz	w0, 0x10001a594
000000010001a57c	sxtw	x2, w0
000000010001a580	adr	x0, #-2492
000000010001a584	nop
000000010001a588	mov	x1, x19
000000010001a58c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001a590	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001a594	ldr	w21, [x21]
000000010001a598	b	0x10001a5cc
000000010001a59c	mov	w0, #0x33
000000010001a5a0	orr	w1, wzr, #0x80
000000010001a5a4	mov	x2, x19
000000010001a5a8	bl	0x1000087d4
000000010001a5ac	mov	x21, x0
000000010001a5b0	mov	x1, x19
000000010001a5b4	bl	0x10002d624
000000010001a5b8	orr	w3, wzr, #0x4
000000010001a5bc	mov	x2, x21
000000010001a5c0	mov	x0, x19
000000010001a5c4	mov	x1, #0x0
000000010001a5c8	bl	0x1000224d0
000000010001a5cc	str	w21, [x19, #0x78]
000000010001a5d0	nop
000000010001a5d4	nop
000000010001a5d8	ldr	x0, #0x29e48
000000010001a5dc	str	x20, [sp]
000000010001a5e0	adr	x2, #123499 ; literal pool for: "%s: created"
000000010001a5e4	nop
000000010001a5e8	mov	w1, #0x0
000000010001a5ec	bl	0x1000270c8
000000010001a5f0	ldur	x8, [x29, #-0x58]
000000010001a5f4	nop
000000010001a5f8	ldr	x9, #0x25a20 ; literal pool symbol address: ___stack_chk_guard
000000010001a5fc	ldr	x9, [x9]
000000010001a600	cmp	x9, x8
000000010001a604	b.ne	0x10001a62c
000000010001a608	mov	x0, x19
000000010001a60c	add	sp, sp, #0x280
000000010001a610	ldp	x29, x30, [sp, #0x50]
000000010001a614	ldp	x20, x19, [sp, #0x40]
000000010001a618	ldp	x22, x21, [sp, #0x30]
000000010001a61c	ldp	x24, x23, [sp, #0x20]
000000010001a620	ldp	x26, x25, [sp, #0x10]
000000010001a624	ldp	x28, x27, [sp], #0x60
000000010001a628	ret
000000010001a62c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010001a630	adr	x0, #123369 ; literal pool for: "Can't create PID domain for PID 0"
000000010001a634	nop
000000010001a638	bl	0x100028f84
000000010001a63c	adr	x0, #135749 ; literal pool for: "user cannot create its own domain"
000000010001a640	nop
000000010001a644	bl	0x100028f84
000000010001a648	sxtw	x0, w0
000000010001a64c	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001a650	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001a654	brk	#0x1
000000010001a658	stp	x28, x27, [sp, #-0x60]!
000000010001a65c	stp	x26, x25, [sp, #0x10]
000000010001a660	stp	x24, x23, [sp, #0x20]
000000010001a664	stp	x22, x21, [sp, #0x30]
000000010001a668	stp	x20, x19, [sp, #0x40]
000000010001a66c	stp	x29, x30, [sp, #0x50]
000000010001a670	add	x29, sp, #0x50
000000010001a674	sub	sp, sp, #0x4a0
000000010001a678	mov	x20, x3
000000010001a67c	mov	x21, x2
000000010001a680	mov	x23, x1
000000010001a684	add	x28, sp, #0x50
000000010001a688	nop
000000010001a68c	ldr	x8, #0x2598c ; literal pool symbol address: ___stack_chk_guard
000000010001a690	ldr	x8, [x8]
000000010001a694	str	x8, [x28]
000000010001a698	str	wzr, [sp, #0x5c]
000000010001a69c	add	x1, sp, #0x5c
000000010001a6a0	mov	x0, x21
000000010001a6a4	bl	0x10001d980
000000010001a6a8	mov	x19, x0
000000010001a6ac	cbz	x19, 0x10001a6e0
000000010001a6b0	bl	0x10002d3b4
000000010001a6b4	mov	x22, x0
000000010001a6b8	sub	w8, w23, #0x320
000000010001a6bc	cmp	w8, #0x26
000000010001a6c0	b.hi	0x10001b330
000000010001a6c4	adr	x9, #9764
000000010001a6c8	nop
000000010001a6cc	ldrsw	x8, [x9, x8, lsl #2]
000000010001a6d0	add	x8, x8, x9
000000010001a6d4	br	x8
000000010001a6d8	mov	w23, #0x2d
000000010001a6dc	b	0x10001c920
000000010001a6e0	ldr	w23, [sp, #0x5c]
000000010001a6e4	b	0x10001c924
000000010001a6e8	mov	w23, #0x8e
000000010001a6ec	b	0x10001c920
000000010001a6f0	nop
000000010001a6f4	ldr	x8, #0x29604
000000010001a6f8	cmp	x8, x19
000000010001a6fc	b.ne	0x10001b3f8
000000010001a700	orr	w1, wzr, #0x4
000000010001a704	orr	w2, wzr, #0x80
000000010001a708	mov	x0, x19
000000010001a70c	mov	x3, x22
000000010001a710	mov	x4, #0x0
000000010001a714	mov	x5, #0x0
000000010001a718	bl	0x10001e964
000000010001a71c	mov	x23, x0
000000010001a720	cbz	w23, 0x10001ba64
000000010001a724	adr	x3, #133895 ; literal pool for: "dump jetsam property category"
000000010001a728	nop
000000010001a72c	b	0x10001bf8c
000000010001a730	str	xzr, [sp, #0x98]
000000010001a734	nop
000000010001a738	ldr	x8, #0x295c0
000000010001a73c	cmp	x8, x19
000000010001a740	b.ne	0x10001b3f8
000000010001a744	mov	x0, x21
000000010001a748	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001a74c	cbz	w0, 0x10001c91c
000000010001a750	orr	w1, wzr, #0x4
000000010001a754	orr	w2, wzr, #0x80
000000010001a758	mov	x0, x19
000000010001a75c	mov	x3, x22
000000010001a760	mov	x4, #0x0
000000010001a764	mov	x5, #0x0
000000010001a768	bl	0x10001e964
000000010001a76c	mov	x23, x0
000000010001a770	cbz	w23, 0x10001bdac
000000010001a774	adr	x3, #133767 ; literal pool for: "dump state"
000000010001a778	nop
000000010001a77c	mov	x2, x23
000000010001a780	mov	x0, x19
000000010001a784	mov	x1, x22
000000010001a788	bl	0x10001dc6c
000000010001a78c	mov	x22, #0x0
000000010001a790	b	0x10001cabc
000000010001a794	adrp	x23, 41 ; 0x100043000
000000010001a798	ldr	x8, [x23, #0xcf8]
000000010001a79c	cmp	x8, x19
000000010001a7a0	b.ne	0x10001b3f8
000000010001a7a4	mov	x0, x21
000000010001a7a8	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001a7ac	cbz	w0, 0x10001c91c
000000010001a7b0	adr	x1, #122549 ; literal pool for: "uid"
000000010001a7b4	nop
000000010001a7b8	mov	x0, x21
000000010001a7bc	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001a7c0	ldr	x8, [x23, #0xcf8]
000000010001a7c4	ldrb	w8, [x8, #0x3a0]
000000010001a7c8	tbnz	w8, #0x0, 0x10001bd58
000000010001a7cc	and	x24, x0, #0xffffffff
000000010001a7d0	adr	x8, #166040
000000010001a7d4	nop
000000010001a7d8	ldr	x8, [x8, #0x68]
000000010001a7dc	mov	w1, #0x0
000000010001a7e0	mov	x0, #0x0
000000010001a7e4	mov	x2, #0x0
000000010001a7e8	mov	x3, x24
000000010001a7ec	mov	x4, x22
000000010001a7f0	mov	x5, #0x0
000000010001a7f4	mov	x6, #0x0
000000010001a7f8	blr	x8
000000010001a7fc	mov	x23, x0
000000010001a800	cbnz	w23, 0x10001bd5c
000000010001a804	adr	x0, #165988
000000010001a808	nop
000000010001a80c	mov	x1, x24
000000010001a810	bl	0x10001d8f0
000000010001a814	mov	x22, x0
000000010001a818	cbz	x22, 0x10001bb04
000000010001a81c	ldrh	w8, [x22, #0xa4]
000000010001a820	cbz	w8, 0x10001ca0c
000000010001a824	ldr	w1, [x19, #0x78]
000000010001a828	mov	w3, #0x0
000000010001a82c	mov	x0, x22
000000010001a830	b	0x10001bb20
000000010001a834	orr	w1, wzr, #0x4
000000010001a838	mov	w2, #0x88
000000010001a83c	mov	x0, x19
000000010001a840	mov	x3, x22
000000010001a844	mov	x4, #0x0
000000010001a848	mov	x5, #0x0
000000010001a84c	bl	0x10001e964
000000010001a850	mov	x23, x0
000000010001a854	cbz	w23, 0x10001b4c4
000000010001a858	adr	x3, #131265 ; literal pool for: "get domain environment"
000000010001a85c	nop
000000010001a860	b	0x10001bf8c
000000010001a864	nop
000000010001a868	ldr	x8, #0x29490
000000010001a86c	cmp	x8, x19
000000010001a870	b.ne	0x10001b3f8
000000010001a874	mov	x0, x21
000000010001a878	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001a87c	cbz	w0, 0x10001c91c
000000010001a880	orr	w1, wzr, #0x2
000000010001a884	mov	x0, x22
000000010001a888	bl	0x100009be8
000000010001a88c	tbz	w0, #0x0, 0x10001bd68
000000010001a890	adr	x1, #115363 ; literal pool for: "name"
000000010001a894	nop
000000010001a898	mov	x0, x21
000000010001a89c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001a8a0	mov	x20, x0
000000010001a8a4	cbz	x20, 0x10001c91c
000000010001a8a8	nop
000000010001a8ac	nop
000000010001a8b0	ldr	x23, #0x29b70
000000010001a8b4	add	x24, x19, #0x3a8
000000010001a8b8	add	x1, sp, #0x98
000000010001a8bc	mov	x0, x22
000000010001a8c0	bl	0x1000293c0
000000010001a8c4	ldr	w8, [sp, #0x98]
000000010001a8c8	stp	x8, x20, [sp, #0x18]
000000010001a8cc	adr	x8, #133174 ; literal pool for: "remove all extension instances"
000000010001a8d0	nop
000000010001a8d4	str	x24, [sp, #0x48]
000000010001a8d8	str	x24, [sp]
000000010001a8dc	stp	x8, x0, [sp, #0x8]
000000010001a8e0	adr	x2, #133115 ; literal pool for: "%s: %s: caller = %s.%d, extension = %s"
000000010001a8e4	nop
000000010001a8e8	mov	w1, #0x0
000000010001a8ec	mov	x0, x23
000000010001a8f0	bl	0x1000270c8
000000010001a8f4	mov	x0, x21
000000010001a8f8	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001a8fc	mov	x22, x0
000000010001a900	bl	0x100030d70 ; symbol stub for: _dispatch_group_create
000000010001a904	mov	x21, x0
000000010001a908	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
000000010001a90c	orr	w1, wzr, #0x10
000000010001a910	mov	x0, x19
000000010001a914	mov	x2, x21
000000010001a918	str	x22, [sp, #0x40]
000000010001a91c	mov	x3, x22
000000010001a920	bl	0x10000e39c
000000010001a924	mov	x23, x0
000000010001a928	bl	0x10000d8e0
000000010001a92c	mov	x1, x0
000000010001a930	adr	x3, #44400
000000010001a934	nop
000000010001a938	mov	x0, x21
000000010001a93c	mov	x2, x23
000000010001a940	bl	0x100030da0 ; symbol stub for: _dispatch_group_notify_f
000000010001a944	mov	x24, #0x0
000000010001a948	mov	x23, #0x0
000000010001a94c	mov	x22, #0x0
000000010001a950	adr	x25, #-35752
000000010001a954	nop
000000010001a958	adr	x8, #166080
000000010001a95c	nop
000000010001a960	ldr	x26, [x8, x24, lsl #3]
000000010001a964	cbnz	x26, 0x10001a974
000000010001a968	b	0x10001aa24
000000010001a96c	str	x21, [x27, #0x128]
000000010001a970	b	0x10001aa18
000000010001a974	mov	x0, x26
000000010001a978	mov	x1, x20
000000010001a97c	bl	0x10001e1b8
000000010001a980	mov	x27, x0
000000010001a984	cbz	x27, 0x10001aa1c
000000010001a988	ldr	x0, [x27, #0xe0]
000000010001a98c	mov	x1, x27
000000010001a990	bl	0x100021964
000000010001a994	cbz	w0, 0x10001aa14
000000010001a998	cmp	w0, #0x24
000000010001a99c	b.ne	0x10001aa00
000000010001a9a0	mov	x0, x21
000000010001a9a4	bl	0x100030e78 ; symbol stub for: _dispatch_retain
000000010001a9a8	mov	x0, x21
000000010001a9ac	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
000000010001a9b0	ldr	x8, [x27, #0x128]
000000010001a9b4	cbz	x8, 0x10001a96c
000000010001a9b8	nop
000000010001a9bc	nop
000000010001a9c0	ldr	x0, #0x29a60
000000010001a9c4	add	x8, x27, #0x460
000000010001a9c8	str	x8, [sp]
000000010001a9cc	mov	w1, #0x0
000000010001a9d0	adr	x2, #132945 ; literal pool for: "%s: an extension-removal request is already in flight; chaining"
000000010001a9d4	nop
000000010001a9d8	bl	0x1000270c8
000000010001a9dc	ldr	x27, [x27, #0x128]
000000010001a9e0	bl	0x10000d8e0
000000010001a9e4	mov	x1, x0
000000010001a9e8	mov	x0, x27
000000010001a9ec	mov	x2, x21
000000010001a9f0	adr	x3, #44368
000000010001a9f4	nop
000000010001a9f8	bl	0x100030da0 ; symbol stub for: _dispatch_group_notify_f
000000010001a9fc	b	0x10001aa18
000000010001aa00	sxtw	x2, w0
000000010001aa04	mov	x0, x25
000000010001aa08	mov	x1, x27
000000010001aa0c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001aa10	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001aa14	add	x22, x22, #0x1
000000010001aa18	add	x23, x23, #0x1
000000010001aa1c	ldr	x26, [x26, #0x18]
000000010001aa20	cbnz	x26, 0x10001a974
000000010001aa24	add	x24, x24, #0x1
000000010001aa28	cmp	x24, #0xb
000000010001aa2c	b.ne	0x10001a958
000000010001aa30	cbnz	x23, 0x10001cc48
000000010001aa34	mov	x0, x19
000000010001aa38	mov	x1, x20
000000010001aa3c	bl	0x10001e1b8
000000010001aa40	mov	x23, x0
000000010001aa44	cbz	x23, 0x10001ca7c
000000010001aa48	mov	x0, x19
000000010001aa4c	mov	x1, x23
000000010001aa50	bl	0x100021964
000000010001aa54	cmp	w0, #0x24
000000010001aa58	b.ne	0x10001cad4
000000010001aa5c	mov	x0, x21
000000010001aa60	bl	0x100030e78 ; symbol stub for: _dispatch_retain
000000010001aa64	mov	x0, x21
000000010001aa68	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
000000010001aa6c	ldr	x8, [x23, #0x128]
000000010001aa70	cbz	x8, 0x10001cc40
000000010001aa74	nop
000000010001aa78	nop
000000010001aa7c	ldr	x0, #0x299a4
000000010001aa80	add	x8, x23, #0x460
000000010001aa84	str	x8, [sp]
000000010001aa88	adr	x2, #132761 ; literal pool for: "%s: an extension-removal request is already in flight; chaining"
000000010001aa8c	nop
000000010001aa90	mov	w1, #0x0
000000010001aa94	bl	0x1000270c8
000000010001aa98	ldr	x19, [x23, #0x128]
000000010001aa9c	bl	0x10000d8e0
000000010001aaa0	mov	x1, x0
000000010001aaa4	adr	x3, #44188
000000010001aaa8	nop
000000010001aaac	mov	x0, x19
000000010001aab0	mov	x2, x21
000000010001aab4	bl	0x100030da0 ; symbol stub for: _dispatch_group_notify_f
000000010001aab8	b	0x10001cc44
000000010001aabc	orr	w1, wzr, #0x3
000000010001aac0	mov	w2, #0x88
000000010001aac4	mov	x0, x19
000000010001aac8	mov	x3, x22
000000010001aacc	mov	x4, #0x0
000000010001aad0	mov	x5, #0x0
000000010001aad4	bl	0x10001e964
000000010001aad8	mov	x23, x0
000000010001aadc	cbz	w23, 0x10001b50c
000000010001aae0	adr	x3, #130336 ; literal pool for: "service stop"
000000010001aae4	nop
000000010001aae8	b	0x10001bf8c
000000010001aaec	orr	w1, wzr, #0x2
000000010001aaf0	mov	x0, x22
000000010001aaf4	bl	0x100009be8
000000010001aaf8	tbz	w0, #0x0, 0x10001b4b0
000000010001aafc	ldr	x8, [x19, #0x60]
000000010001ab00	adr	x9, #165656
000000010001ab04	nop
000000010001ab08	cmp	x8, x9
000000010001ab0c	b.ne	0x10001b3f8
000000010001ab10	mov	x0, x21
000000010001ab14	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001ab18	cbz	w0, 0x10001c91c
000000010001ab1c	adr	x1, #112110 ; literal pool for: "path"
000000010001ab20	nop
000000010001ab24	mov	x0, x21
000000010001ab28	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001ab2c	mov	x24, x0
000000010001ab30	cbz	x24, 0x10001c91c
000000010001ab34	adr	x1, #132164 ; literal pool for: "overlay"
000000010001ab38	nop
000000010001ab3c	mov	x0, x21
000000010001ab40	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001ab44	mov	x23, x0
000000010001ab48	mov	x0, x21
000000010001ab4c	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001ab50	mov	x20, x0
000000010001ab54	mov	x0, #0x0
000000010001ab58	mov	x1, #0x0
000000010001ab5c	mov	x2, #0x0
000000010001ab60	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010001ab64	mov	x21, x0
000000010001ab68	orr	w2, wzr, #0x2
000000010001ab6c	mov	x1, x24
000000010001ab70	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001ab74	cbz	x23, 0x10001ab90
000000010001ab78	mov	x0, x23
000000010001ab7c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001ab80	nop
000000010001ab84	ldr	x26, #0x2553c ; literal pool symbol address: __xpc_type_dictionary
000000010001ab88	cmp	x0, x26
000000010001ab8c	b.eq	0x10001c860
000000010001ab90	nop
000000010001ab94	nop
000000010001ab98	ldr	x25, #0x29888
000000010001ab9c	add	x26, x19, #0x3a8
000000010001aba0	add	x1, sp, #0x98
000000010001aba4	mov	x0, x22
000000010001aba8	bl	0x1000293c0
000000010001abac	adr	x8, #132277 ; literal pool for: "NULL"
000000010001abb0	nop
000000010001abb4	adr	x9, #132252 ; literal pool for: "not a dictionary"
000000010001abb8	nop
000000010001abbc	cmp	x23, #0x0
000000010001abc0	csel	x8, x9, x8, ne
000000010001abc4	ldr	w9, [sp, #0x98]
000000010001abc8	stp	x24, x8, [sp, #0x20]
000000010001abcc	stp	x0, x9, [sp, #0x10]
000000010001abd0	adr	x8, #132091 ; literal pool for: "add extension instance"
000000010001abd4	nop
000000010001abd8	stp	x26, x8, [sp]
000000010001abdc	adr	x2, #132234 ; literal pool for: "%s: %s: caller = %s.%d, extension path = %s, overlay = %s (this request will probably not succeed)"
000000010001abe0	nop
000000010001abe4	mov	w1, #0x0
000000010001abe8	mov	x0, x25
000000010001abec	bl	0x1000270c8
000000010001abf0	mov	w6, #0x5000
000000010001abf4	mov	w1, #0x0
000000010001abf8	mov	x0, x19
000000010001abfc	mov	x2, x20
000000010001ac00	mov	x3, x21
000000010001ac04	mov	x4, x23
000000010001ac08	mov	x5, x22
000000010001ac0c	bl	0x10001f08c
000000010001ac10	mov	x0, x21
000000010001ac14	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001ac18	mov	x0, x20
000000010001ac1c	b	0x10001c6b4
000000010001ac20	ldr	x8, [x19, #0x60]
000000010001ac24	adr	x9, #165364
000000010001ac28	nop
000000010001ac2c	cmp	x8, x9
000000010001ac30	orr	w8, wzr, #0x80
000000010001ac34	csel	x2, xzr, x8, eq
000000010001ac38	orr	w1, wzr, #0x3
000000010001ac3c	mov	x0, x19
000000010001ac40	mov	x3, x22
000000010001ac44	mov	x4, #0x0
000000010001ac48	mov	x5, #0x0
000000010001ac4c	bl	0x10001e964
000000010001ac50	mov	x23, x0
000000010001ac54	cbz	w23, 0x10001b560
000000010001ac58	adr	x3, #129926 ; literal pool for: "kill service"
000000010001ac5c	nop
000000010001ac60	b	0x10001bf8c
000000010001ac64	mov	x0, x21
000000010001ac68	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001ac6c	cbz	w0, 0x10001c91c
000000010001ac70	bl	0x10002d3d8
000000010001ac74	ldr	w0, [x22, #0x14]
000000010001ac78	bl	0x100015490
000000010001ac7c	cbz	x0, 0x10001ac88
000000010001ac80	bl	0x100016458
000000010001ac84	tbnz	w0, #0x0, 0x10001bb04
000000010001ac88	adr	x1, #116130 ; literal pool for: "type"
000000010001ac8c	nop
000000010001ac90	mov	x0, x21
000000010001ac94	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001ac98	cmp	x0, #0x7
000000010001ac9c	b.eq	0x10001b9c4
000000010001aca0	ldp	x8, x3, [x19, #0x60]
000000010001aca4	ldr	x8, [x8, #0x68]
000000010001aca8	mov	w1, #0x5
000000010001acac	mov	x0, x19
000000010001acb0	mov	x2, #0x0
000000010001acb4	mov	x4, x22
000000010001acb8	mov	x5, #0x0
000000010001acbc	mov	x6, #0x0
000000010001acc0	blr	x8
000000010001acc4	mov	x23, x0
000000010001acc8	cbz	w23, 0x10001b9c4
000000010001accc	adr	x3, #128254 ; literal pool for: "endpoint lookup"
000000010001acd0	nop
000000010001acd4	b	0x10001bf8c
000000010001acd8	adr	x1, #129498 ; literal pool for: "names"
000000010001acdc	nop
000000010001ace0	mov	x0, x21
000000010001ace4	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001ace8	mov	x24, x0
000000010001acec	cbz	x24, 0x10001c91c
000000010001acf0	mov	x0, x24
000000010001acf4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001acf8	nop
000000010001acfc	ldr	x8, #0x2539c ; literal pool symbol address: __xpc_type_array
000000010001ad00	cmp	x0, x8
000000010001ad04	b.ne	0x10001c91c
000000010001ad08	orr	w1, wzr, #0x3
000000010001ad0c	orr	w2, wzr, #0x80
000000010001ad10	mov	x0, x19
000000010001ad14	mov	x3, x22
000000010001ad18	mov	x4, #0x0
000000010001ad1c	mov	x5, #0x0
000000010001ad20	bl	0x10001e964
000000010001ad24	mov	x23, x0
000000010001ad28	cmp	w23, #0x1
000000010001ad2c	b.ne	0x10001bb40
000000010001ad30	nop
000000010001ad34	ldr	x8, #0x28fc4
000000010001ad38	cmp	x8, x19
000000010001ad3c	b.ne	0x10001bb40
000000010001ad40	mov	x0, x22
000000010001ad44	mov	x1, x24
000000010001ad48	bl	0x100024414
000000010001ad4c	tbnz	w0, #0x0, 0x10001bb60
000000010001ad50	orr	w23, wzr, #0x1
000000010001ad54	b	0x10001bb44
000000010001ad58	ldr	x8, [x19, #0x60]
000000010001ad5c	adr	x9, #165052
000000010001ad60	nop
000000010001ad64	cmp	x8, x9
000000010001ad68	b.ne	0x10001c91c
000000010001ad6c	ldr	x1, [x19, #0x68]
000000010001ad70	mov	w0, #0x10
000000010001ad74	movk	w0, #0x2200, lsl #16
000000010001ad78	bl	0x10000ccd0
000000010001ad7c	ldr	x0, [x19, #0x68]
000000010001ad80	nop
000000010001ad84	ldr	w8, [x22, #0x1c]
000000010001ad88	ldr	w9, [x19, #0x10c]
000000010001ad8c	ldr	w10, [x22, #0x14]
000000010001ad90	ldr	w11, [x19, #0x104]
000000010001ad94	cmp	w8, w9
000000010001ad98	b.gt	0x10001ba10
000000010001ad9c	cmp	w10, w11
000000010001ada0	b.ne	0x10001ba10
000000010001ada4	ldr	x8, [x19, #0xd0]
000000010001ada8	cbz	x8, 0x10001be74
000000010001adac	nop
000000010001adb0	nop
000000010001adb4	ldr	x0, #0x2966c
000000010001adb8	add	x8, x19, #0x3a8
000000010001adbc	str	x8, [sp]
000000010001adc0	adr	x2, #127900 ; literal pool for: "%s: domain already initialized"
000000010001adc4	nop
000000010001adc8	mov	w1, #0x0
000000010001adcc	bl	0x1000270c8
000000010001add0	b	0x10001b8c0
000000010001add4	orr	w1, wzr, #0x3
000000010001add8	mov	w2, #0x88
000000010001addc	mov	x0, x19
000000010001ade0	mov	x3, x22
000000010001ade4	mov	x4, #0x0
000000010001ade8	mov	x5, #0x0
000000010001adec	bl	0x10001e964
000000010001adf0	mov	x23, x0
000000010001adf4	cbz	w23, 0x10001b5e8
000000010001adf8	adr	x3, #129530 ; literal pool for: "start service"
000000010001adfc	nop
000000010001ae00	b	0x10001bf8c
000000010001ae04	ldr	x8, [x19, #0x60]
000000010001ae08	adr	x9, #164880
000000010001ae0c	nop
000000010001ae10	cmp	x8, x9
000000010001ae14	b.ne	0x10001c91c
000000010001ae18	mov	x0, x21
000000010001ae1c	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001ae20	cbz	w0, 0x10001c91c
000000010001ae24	ldrh	w8, [x19, #0x3a0]
000000010001ae28	tbz	w8, #0x4, 0x10001ba5c
000000010001ae2c	tst	w8, #0x3
000000010001ae30	b.ne	0x10001b1dc
000000010001ae34	mov	x0, x19
000000010001ae38	mov	x1, x21
000000010001ae3c	mov	x2, x22
000000010001ae40	bl	0x10001ef08
000000010001ae44	mov	x22, x0
000000010001ae48	cmp	w22, #0x24
000000010001ae4c	b.eq	0x10001c6b8
000000010001ae50	mov	x0, x21
000000010001ae54	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001ae58	mov	x19, x0
000000010001ae5c	mov	w23, #0x0
000000010001ae60	cbz	w22, 0x10001b2a8
000000010001ae64	cmp	w22, #0x25
000000010001ae68	b.eq	0x10001b2a8
000000010001ae6c	cmp	w22, #0x7c
000000010001ae70	b.eq	0x10001b2a8
000000010001ae74	sxtw	x2, w22
000000010001ae78	adr	x1, #115267 ; literal pool for: "error"
000000010001ae7c	nop
000000010001ae80	mov	x0, x19
000000010001ae84	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010001ae88	mov	x23, x22
000000010001ae8c	b	0x10001b2a8
000000010001ae90	ldrb	w8, [x19, #0x3a0]
000000010001ae94	tst	w8, #0x3
000000010001ae98	b.ne	0x10001b1dc
000000010001ae9c	ldr	w8, [x19, #0x98]
000000010001aea0	cbz	w8, 0x10001bab8
000000010001aea4	mov	x0, x21
000000010001aea8	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001aeac	mov	x21, x0
000000010001aeb0	cbz	x21, 0x10001c91c
000000010001aeb4	mov	x0, x19
000000010001aeb8	bl	0x100021340
000000010001aebc	b	0x10001c170
000000010001aec0	nop
000000010001aec4	ldr	x8, #0x28e34
000000010001aec8	cmp	x8, x19
000000010001aecc	b.ne	0x10001b3f8
000000010001aed0	adr	x1, #121964 ; literal pool for: "cid"
000000010001aed4	nop
000000010001aed8	mov	x0, x21
000000010001aedc	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001aee0	cbz	x0, 0x10001c91c
000000010001aee4	bl	0x10001e170
000000010001aee8	mov	x22, x0
000000010001aeec	cbz	x22, 0x10001bb04
000000010001aef0	mov	x0, x22
000000010001aef4	bl	0x100016384
000000010001aef8	mov	x19, x0
000000010001aefc	mov	x0, x21
000000010001af00	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001af04	mov	x21, x0
000000010001af08	cbz	x21, 0x10001c91c
000000010001af0c	add	x2, x22, #0x460
000000010001af10	adr	x1, #113699 ; literal pool for: "name"
000000010001af14	nop
000000010001af18	mov	x0, x21
000000010001af1c	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
000000010001af20	cbz	x19, 0x10001c170
000000010001af24	adr	x1, #121884 ; literal pool for: "bundle_identifier"
000000010001af28	nop
000000010001af2c	b	0x10001c164
000000010001af30	ldrb	w8, [x19, #0x3a0]
000000010001af34	tst	w8, #0x3
000000010001af38	b.ne	0x10001b1dc
000000010001af3c	adr	x1, #121898 ; literal pool for: "paths"
000000010001af40	nop
000000010001af44	mov	x0, x21
000000010001af48	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001af4c	mov	x23, x0
000000010001af50	cbz	x23, 0x10001b5dc
000000010001af54	mov	x0, x23
000000010001af58	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001af5c	nop
000000010001af60	ldr	x8, #0x25160 ; literal pool symbol address: __xpc_type_dictionary
000000010001af64	cmp	x0, x8
000000010001af68	b.eq	0x10001af84
000000010001af6c	mov	x0, x23
000000010001af70	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001af74	nop
000000010001af78	ldr	x8, #0x25120 ; literal pool symbol address: __xpc_type_array
000000010001af7c	cmp	x0, x8
000000010001af80	b.ne	0x10001c91c
000000010001af84	mov	x0, x21
000000010001af88	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001af8c	cbz	w0, 0x10001c91c
000000010001af90	adr	x1, #121820 ; literal pool for: "enable"
000000010001af94	nop
000000010001af98	mov	x0, x21
000000010001af9c	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001afa0	cmp	w0, #0x0
000000010001afa4	orr	w8, wzr, #0x800
000000010001afa8	csel	x20, x8, xzr, ne
000000010001afac	adr	x1, #121799 ; literal pool for: "force"
000000010001afb0	nop
000000010001afb4	mov	x0, x21
000000010001afb8	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001afbc	orr	x8, x20, #0x8000
000000010001afc0	cmp	w0, #0x0
000000010001afc4	csel	x20, x8, x20, ne
000000010001afc8	adr	x1, #121777 ; literal pool for: "legacy-load"
000000010001afcc	nop
000000010001afd0	mov	x0, x21
000000010001afd4	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001afd8	orr	x8, x20, #0x100
000000010001afdc	cmp	w0, #0x0
000000010001afe0	csel	x20, x8, x20, ne
000000010001afe4	ldr	x8, [x19, #0x60]
000000010001afe8	adr	x9, #164400
000000010001afec	nop
000000010001aff0	cmp	x8, x9
000000010001aff4	b.ne	0x10001b010
000000010001aff8	mov	x0, x19
000000010001affc	mov	x1, x21
000000010001b000	mov	x2, x22
000000010001b004	bl	0x10001ef08
000000010001b008	cmp	w0, #0x24
000000010001b00c	b.eq	0x10001c6b8
000000010001b010	adr	x1, #121717 ; literal pool for: "immediate-reply"
000000010001b014	nop
000000010001b018	mov	x0, x21
000000010001b01c	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001b020	cbz	w0, 0x10001c568
000000010001b024	mov	w1, #0x0
000000010001b028	b	0x10001b6c4
000000010001b02c	orr	w1, wzr, #0x3
000000010001b030	orr	w2, wzr, #0x80
000000010001b034	mov	x0, x19
000000010001b038	mov	x3, x22
000000010001b03c	mov	x4, #0x0
000000010001b040	mov	x5, #0x0
000000010001b044	bl	0x10001e964
000000010001b048	mov	x23, x0
000000010001b04c	cbz	w23, 0x10001b63c
000000010001b050	adr	x3, #126128 ; literal pool for: "bootout"
000000010001b054	nop
000000010001b058	b	0x10001bf8c
000000010001b05c	orr	w1, wzr, #0x4
000000010001b060	mov	w2, #0x88
000000010001b064	mov	x0, x19
000000010001b068	mov	x3, x22
000000010001b06c	mov	x4, #0x0
000000010001b070	mov	x5, #0x0
000000010001b074	bl	0x10001e964
000000010001b078	mov	x23, x0
000000010001b07c	cbz	w23, 0x10001b6e8
000000010001b080	adr	x3, #128982 ; literal pool for: "service enumeration"
000000010001b084	nop
000000010001b088	b	0x10001bf8c
000000010001b08c	nop
000000010001b090	ldr	x8, #0x28c68
000000010001b094	cmp	x8, x19
000000010001b098	b.ne	0x10001b3f8
000000010001b09c	ldp	x8, x3, [x19, #0x60]
000000010001b0a0	ldr	x8, [x8, #0x68]
000000010001b0a4	orr	w1, wzr, #0x4
000000010001b0a8	mov	x0, x19
000000010001b0ac	mov	x2, #0x0
000000010001b0b0	mov	x4, x22
000000010001b0b4	mov	x5, #0x0
000000010001b0b8	mov	x6, #0x0
000000010001b0bc	blr	x8
000000010001b0c0	mov	x23, x0
000000010001b0c4	cbz	w23, 0x10001bb0c
000000010001b0c8	adr	x3, #128731 ; literal pool for: "query service enabled state"
000000010001b0cc	nop
000000010001b0d0	b	0x10001bf8c
000000010001b0d4	ldrb	w8, [x19, #0x3a0]
000000010001b0d8	tst	w8, #0x3
000000010001b0dc	b.ne	0x10001b1dc
000000010001b0e0	ldrh	w8, [x19, #0xa4]
000000010001b0e4	cbnz	w8, 0x10001bb14
000000010001b0e8	adr	x1, #113227 ; literal pool for: "name"
000000010001b0ec	nop
000000010001b0f0	mov	x0, x21
000000010001b0f4	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001b0f8	mov	x24, x0
000000010001b0fc	cbz	x24, 0x10001c91c
000000010001b100	adr	x1, #127194 ; literal pool for: "flags"
000000010001b104	nop
000000010001b108	mov	x0, x21
000000010001b10c	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001b110	mov	x23, x0
000000010001b114	ldr	x8, [x19, #0x60]
000000010001b118	adr	x9, #164096
000000010001b11c	nop
000000010001b120	cmp	x8, x9
000000010001b124	b.eq	0x10001b138
000000010001b128	adr	x9, #163936
000000010001b12c	nop
000000010001b130	cmp	x8, x9
000000010001b134	b.ne	0x10001b158
000000010001b138	tbz	w23, #0x0, 0x10001b154
000000010001b13c	str	x24, [sp]
000000010001b140	adr	x2, #127848 ; literal pool for: "Ignoring lax activation attempt for unsupported domain: %s"
000000010001b144	nop
000000010001b148	orr	w1, wzr, #0x4
000000010001b14c	mov	x0, x19
000000010001b150	bl	0x100019bfc
000000010001b154	and	x23, x23, #0xfffffffffffffffe
000000010001b158	tbnz	w23, #0x5, 0x10001c098
000000010001b15c	str	wzr, [sp, #0x98]
000000010001b160	add	x4, sp, #0x98
000000010001b164	mov	x0, x19
000000010001b168	mov	x1, x22
000000010001b16c	mov	x2, x24
000000010001b170	mov	x3, x23
000000010001b174	bl	0x100023fcc
000000010001b178	mov	x23, x0
000000010001b17c	cbnz	w23, 0x10001c920
000000010001b180	mov	x0, x21
000000010001b184	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001b188	mov	x21, x0
000000010001b18c	ldr	w2, [sp, #0x98]
000000010001b190	adr	x1, #115107 ; literal pool for: "port"
000000010001b194	nop
000000010001b198	bl	0x100031af0 ; symbol stub for: _xpc_dictionary_set_mach_recv
000000010001b19c	b	0x10001c170
000000010001b1a0	orr	w1, wzr, #0x3
000000010001b1a4	orr	w2, wzr, #0x80
000000010001b1a8	mov	x0, x19
000000010001b1ac	mov	x3, x22
000000010001b1b0	mov	x4, #0x0
000000010001b1b4	mov	x5, #0x0
000000010001b1b8	bl	0x10001e964
000000010001b1bc	mov	x23, x0
000000010001b1c0	cbz	w23, 0x10001b764
000000010001b1c4	adr	x3, #128585 ; literal pool for: "service remove"
000000010001b1c8	nop
000000010001b1cc	b	0x10001bf8c
000000010001b1d0	ldrb	w8, [x19, #0x3a0]
000000010001b1d4	tst	w8, #0x3
000000010001b1d8	b.eq	0x10001b7f8
000000010001b1dc	orr	w23, wzr, #0x7c
000000010001b1e0	b	0x10001c920
000000010001b1e4	orr	w1, wzr, #0x4
000000010001b1e8	orr	w2, wzr, #0x80
000000010001b1ec	mov	x0, x19
000000010001b1f0	mov	x3, x22
000000010001b1f4	mov	x4, #0x0
000000010001b1f8	mov	x5, #0x0
000000010001b1fc	bl	0x10001e964
000000010001b200	mov	x23, x0
000000010001b204	cbz	w23, 0x10001b818
000000010001b208	adr	x3, #129413 ; literal pool for: "domain print"
000000010001b20c	nop
000000010001b210	b	0x10001bf8c
000000010001b214	adrp	x8, 40 ; 0x100043000
000000010001b218	orr	w9, wzr, #0x1
000000010001b21c	strb	w9, [x8, #0xd40]
000000010001b220	adrp	x22, 40 ; 0x100043000
000000010001b224	ldr	x8, [x22, #0x3c8]
000000010001b228	cbz	x8, 0x10001b8b4
000000010001b22c	mov	x0, x21
000000010001b230	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001b234	mov	x19, x0
000000010001b238	cbz	x20, 0x10001c91c
000000010001b23c	ldr	x21, [x22, #0x3c8]
000000010001b240	ldr	x8, [x21]
000000010001b244	str	x8, [x22, #0x3c8]
000000010001b248	cbnz	x8, 0x10001b258
000000010001b24c	adr	x8, #164220
000000010001b250	nop
000000010001b254	str	x8, [x8, #0x8]
000000010001b258	nop
000000010001b25c	ldr	x8, #0x24db4 ; literal pool symbol address: __NSConcreteStackBlock
000000010001b260	ldr	x0, [x21, #0x8]
000000010001b264	str	x8, [sp, #0x98]
000000010001b268	nop
000000010001b26c	ldr	d0, 0x10003de90
000000010001b270	adr	x8, #42004
000000010001b274	nop
000000010001b278	str	d0, [sp, #0xa0]
000000010001b27c	str	x8, [sp, #0xa8]
000000010001b280	adr	x8, #158272
000000010001b284	nop
000000010001b288	stp	x8, x19, [sp, #0xb0]
000000010001b28c	add	x1, sp, #0x98
000000010001b290	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
000000010001b294	ldr	x0, [x21, #0x8]
000000010001b298	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001b29c	mov	x0, x21
000000010001b2a0	bl	0x100031010 ; symbol stub for: _free
000000010001b2a4	mov	w23, #0x0
000000010001b2a8	str	x19, [x20]
000000010001b2ac	b	0x10001c920
000000010001b2b0	adr	x1, #128002 ; literal pool for: "names"
000000010001b2b4	nop
000000010001b2b8	mov	x0, x21
000000010001b2bc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001b2c0	mov	x24, x0
000000010001b2c4	cbz	x24, 0x10001c91c
000000010001b2c8	mov	x0, x24
000000010001b2cc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001b2d0	nop
000000010001b2d4	ldr	x8, #0x24dc4 ; literal pool symbol address: __xpc_type_array
000000010001b2d8	cmp	x0, x8
000000010001b2dc	b.ne	0x10001c91c
000000010001b2e0	orr	w1, wzr, #0x3
000000010001b2e4	orr	w2, wzr, #0x80
000000010001b2e8	mov	x0, x19
000000010001b2ec	mov	x3, x22
000000010001b2f0	mov	x4, #0x0
000000010001b2f4	mov	x5, #0x0
000000010001b2f8	bl	0x10001e964
000000010001b2fc	mov	x23, x0
000000010001b300	cmp	w23, #0x1
000000010001b304	b.ne	0x10001bb50
000000010001b308	nop
000000010001b30c	ldr	x8, #0x289ec
000000010001b310	cmp	x8, x19
000000010001b314	b.ne	0x10001bb50
000000010001b318	mov	x0, x22
000000010001b31c	mov	x1, x24
000000010001b320	bl	0x100024414
000000010001b324	tbnz	w0, #0x0, 0x10001bc5c
000000010001b328	orr	w23, wzr, #0x1
000000010001b32c	b	0x10001bb54
000000010001b330	mov	w23, #0x21
000000010001b334	b	0x10001c920
000000010001b338	adr	x1, #126626 ; literal pool for: "flags"
000000010001b33c	nop
000000010001b340	mov	x0, x21
000000010001b344	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001b348	mov	x24, x0
000000010001b34c	adrp	x25, 40 ; 0x100043000
000000010001b350	ldr	x8, [x25, #0xcf8]
000000010001b354	cmp	x8, x19
000000010001b358	b.ne	0x10001b3f8
000000010001b35c	orr	w1, wzr, #0x3
000000010001b360	orr	w2, wzr, #0x80
000000010001b364	mov	x0, x19
000000010001b368	mov	x3, x22
000000010001b36c	mov	x4, #0x0
000000010001b370	mov	x5, #0x0
000000010001b374	bl	0x10001e964
000000010001b378	cmp	w0, #0x96
000000010001b37c	csel	w23, wzr, w0, eq
000000010001b380	cbz	w23, 0x10001b39c
000000010001b384	cmp	w23, #0x1
000000010001b388	b.ne	0x10001bf84
000000010001b38c	mov	w1, #0x13
000000010001b390	mov	x0, x22
000000010001b394	bl	0x100009be8
000000010001b398	tbz	w0, #0x0, 0x10001bf80
000000010001b39c	mov	w8, #0x10
000000010001b3a0	movk	w8, #0x2200, lsl #16
000000010001b3a4	add	w0, w8, #0x28
000000010001b3a8	bl	0x10000ccbc
000000010001b3ac	mov	x0, x21
000000010001b3b0	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b3b4	cbz	w0, 0x10001c91c
000000010001b3b8	ldr	w0, [x22, #0x14]
000000010001b3bc	add	x1, sp, #0x98
000000010001b3c0	bl	0x1000248f4
000000010001b3c4	tbnz	x24, #0x3f, 0x10001c204
000000010001b3c8	tbnz	x24, #0x3d, 0x10001c530
000000010001b3cc	tbnz	x24, #0x3e, 0x10001c830
000000010001b3d0	adr	x8, #128388 ; literal pool for: "System shutdown"
000000010001b3d4	nop
000000010001b3d8	adr	x23, #128364 ; literal pool for: "system shutdown"
000000010001b3dc	nop
000000010001b3e0	tbz	x24, #0x39, 0x10001c218
000000010001b3e4	b	0x10001c264
000000010001b3e8	nop
000000010001b3ec	ldr	x8, #0x2890c
000000010001b3f0	cmp	x8, x19
000000010001b3f4	b.eq	0x10001b8c8
000000010001b3f8	mov	w23, #0x7d
000000010001b3fc	b	0x10001c920
000000010001b400	mov	x0, x21
000000010001b404	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b408	cbz	w0, 0x10001c91c
000000010001b40c	adr	x1, #119385 ; literal pool for: "uid"
000000010001b410	nop
000000010001b414	mov	x0, x21
000000010001b418	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001b41c	nop
000000010001b420	ldr	x8, #0x288d8
000000010001b424	ldrb	w8, [x8, #0x3a0]
000000010001b428	tbnz	w8, #0x0, 0x10001b9b4
000000010001b42c	and	x24, x0, #0xffffffff
000000010001b430	nop
000000010001b434	nop
000000010001b438	ldr	x8, #0x27c98
000000010001b43c	mov	w1, #0x0
000000010001b440	mov	x0, #0x0
000000010001b444	mov	x2, #0x0
000000010001b448	mov	x3, x24
000000010001b44c	mov	x4, x22
000000010001b450	mov	x5, #0x0
000000010001b454	mov	x6, #0x0
000000010001b458	blr	x8
000000010001b45c	mov	x23, x0
000000010001b460	cbnz	w23, 0x10001b9b8
000000010001b464	adr	x0, #162820
000000010001b468	nop
000000010001b46c	mov	x1, x24
000000010001b470	bl	0x10001d8f0
000000010001b474	cbz	x0, 0x10001c29c
000000010001b478	mov	w23, #0x11
000000010001b47c	b	0x10001c920
000000010001b480	orr	w1, wzr, #0x3
000000010001b484	mov	w2, #0x88
000000010001b488	mov	x0, x19
000000010001b48c	mov	x3, x22
000000010001b490	mov	x4, #0x0
000000010001b494	mov	x5, #0x0
000000010001b498	bl	0x10001e964
000000010001b49c	mov	x23, x0
000000010001b4a0	cbz	w23, 0x10001b958
000000010001b4a4	adr	x3, #127985 ; literal pool for: "set domain environment"
000000010001b4a8	nop
000000010001b4ac	b	0x10001bf8c
000000010001b4b0	adr	x3, #129725 ; literal pool for: "pid-extend"
000000010001b4b4	nop
000000010001b4b8	mov	w23, #0x90
000000010001b4bc	mov	w2, #0x90
000000010001b4c0	b	0x10001bf90
000000010001b4c4	mov	x0, x21
000000010001b4c8	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b4cc	cbz	w0, 0x10001c91c
000000010001b4d0	adr	x1, #128096 ; literal pool for: "envvar"
000000010001b4d4	nop
000000010001b4d8	mov	x0, x21
000000010001b4dc	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001b4e0	mov	x22, x0
000000010001b4e4	cbz	x22, 0x10001c91c
000000010001b4e8	ldr	x19, [x19, #0x50]
000000010001b4ec	cbz	x19, 0x10001bb04
000000010001b4f0	mov	x0, x19
000000010001b4f4	mov	x1, x22
000000010001b4f8	bl	0x10000e684
000000010001b4fc	tbnz	w0, #0x0, 0x10001c144
000000010001b500	ldr	x19, [x19]
000000010001b504	cbnz	x19, 0x10001b4f0
000000010001b508	b	0x10001bb04
000000010001b50c	adr	x1, #112167 ; literal pool for: "name"
000000010001b510	nop
000000010001b514	mov	x0, x21
000000010001b518	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001b51c	mov	x22, x0
000000010001b520	cbz	x22, 0x10001c91c
000000010001b524	mov	x0, x21
000000010001b528	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b52c	cbz	w0, 0x10001c91c
000000010001b530	mov	x0, x19
000000010001b534	mov	x1, x22
000000010001b538	bl	0x10001e1b8
000000010001b53c	cbz	x0, 0x10001bb04
000000010001b540	bl	0x100015694
000000010001b544	mov	x23, x0
000000010001b548	cbz	w23, 0x10001c2b8
000000010001b54c	cmp	w23, #0x59
000000010001b550	b.eq	0x10001c2b8
000000010001b554	cmp	w23, #0x25
000000010001b558	b.eq	0x10001c2b8
000000010001b55c	b	0x10001c920
000000010001b560	adr	x1, #112083 ; literal pool for: "name"
000000010001b564	nop
000000010001b568	mov	x0, x21
000000010001b56c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001b570	mov	x23, x0
000000010001b574	cbz	x23, 0x10001c91c
000000010001b578	adr	x1, #127603 ; literal pool for: "signal"
000000010001b57c	nop
000000010001b580	mov	x0, x21
000000010001b584	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
000000010001b588	mov	x22, x0
000000010001b58c	sub	w8, w22, #0x1
000000010001b590	cmp	w8, #0x1e
000000010001b594	b.hi	0x10001c91c
000000010001b598	mov	x0, x21
000000010001b59c	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b5a0	cbz	w0, 0x10001c91c
000000010001b5a4	mov	x0, x19
000000010001b5a8	mov	x1, x23
000000010001b5ac	bl	0x10001e1b8
000000010001b5b0	cbnz	x0, 0x10001b5c4
000000010001b5b4	mov	x0, x19
000000010001b5b8	mov	x1, x23
000000010001b5bc	bl	0x10001e230
000000010001b5c0	cbz	x0, 0x10001c13c
000000010001b5c4	bl	0x100015ed8
000000010001b5c8	cbz	w0, 0x10001bb04
000000010001b5cc	mov	x1, x22
000000010001b5d0	bl	0x1000311a8 ; symbol stub for: _kill
000000010001b5d4	mov	x23, x0
000000010001b5d8	cbnz	w23, 0x10001c920
000000010001b5dc	mov	x0, x21
000000010001b5e0	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001b5e4	b	0x10001c2c4
000000010001b5e8	adr	x1, #111947 ; literal pool for: "name"
000000010001b5ec	nop
000000010001b5f0	mov	x0, x21
000000010001b5f4	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001b5f8	mov	x22, x0
000000010001b5fc	cbz	x22, 0x10001c91c
000000010001b600	mov	x0, x21
000000010001b604	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b608	cbz	w0, 0x10001c91c
000000010001b60c	mov	x0, x19
000000010001b610	mov	x1, x22
000000010001b614	bl	0x10001e1b8
000000010001b618	cbz	x0, 0x10001bb04
000000010001b61c	mov	w1, #0xa
000000010001b620	bl	0x100015574
000000010001b624	and	w8, w0, #0xfffffffe
000000010001b628	cmp	w8, #0x24
000000010001b62c	csel	w23, wzr, w0, eq
000000010001b630	cmp	w23, #0x25
000000010001b634	b.ne	0x10001bafc
000000010001b638	b	0x10001c2b8
000000010001b63c	adr	x1, #120106 ; literal pool for: "paths"
000000010001b640	nop
000000010001b644	mov	x0, x21
000000010001b648	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001b64c	mov	x23, x0
000000010001b650	cbz	x23, 0x10001bac0
000000010001b654	mov	x0, x23
000000010001b658	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001b65c	nop
000000010001b660	ldr	x8, #0x24a60 ; literal pool symbol address: __xpc_type_dictionary
000000010001b664	cmp	x0, x8
000000010001b668	b.eq	0x10001b684
000000010001b66c	mov	x0, x23
000000010001b670	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001b674	nop
000000010001b678	ldr	x8, #0x24a20 ; literal pool symbol address: __xpc_type_array
000000010001b67c	cmp	x0, x8
000000010001b680	b.ne	0x10001c91c
000000010001b684	mov	x0, x21
000000010001b688	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b68c	cbz	w0, 0x10001c91c
000000010001b690	adr	x1, #124536 ; literal pool for: "disable"
000000010001b694	nop
000000010001b698	mov	x0, x21
000000010001b69c	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001b6a0	cmp	w0, #0x0
000000010001b6a4	orr	w8, wzr, #0x800
000000010001b6a8	csel	x20, x8, xzr, ne
000000010001b6ac	adr	x1, #120025 ; literal pool for: "immediate-reply"
000000010001b6b0	nop
000000010001b6b4	mov	x0, x21
000000010001b6b8	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001b6bc	cbz	w0, 0x10001c1f0
000000010001b6c0	orr	w1, wzr, #0x1
000000010001b6c4	mov	x0, x19
000000010001b6c8	mov	x2, #0x0
000000010001b6cc	mov	x3, x23
000000010001b6d0	mov	x4, #0x0
000000010001b6d4	mov	x5, x22
000000010001b6d8	mov	x6, x20
000000010001b6dc	bl	0x10001f08c
000000010001b6e0	mov	w23, #0x24
000000010001b6e4	b	0x10001c920
000000010001b6e8	mov	x0, x21
000000010001b6ec	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b6f0	cbz	w0, 0x10001c91c
000000010001b6f4	adr	x1, #111679 ; literal pool for: "name"
000000010001b6f8	nop
000000010001b6fc	mov	x0, x21
000000010001b700	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001b704	mov	x8, x0
000000010001b708	cbz	x8, 0x10001beb0
000000010001b70c	mov	x0, x19
000000010001b710	mov	x1, x8
000000010001b714	bl	0x10001e1b8
000000010001b718	mov	x19, x0
000000010001b71c	cbz	x19, 0x10001c13c
000000010001b720	mov	x0, x21
000000010001b724	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001b728	mov	x21, x0
000000010001b72c	mov	x0, x19
000000010001b730	bl	0x100015efc
000000010001b734	mov	x22, x0
000000010001b738	mov	x0, x19
000000010001b73c	mov	x1, x22
000000010001b740	bl	0x100024534
000000010001b744	adr	x1, #127270 ; literal pool for: "service"
000000010001b748	nop
000000010001b74c	mov	x0, x21
000000010001b750	mov	x2, x22
000000010001b754	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010001b758	mov	x0, x22
000000010001b75c	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001b760	b	0x10001c170
000000010001b764	adr	x1, #111567 ; literal pool for: "name"
000000010001b768	nop
000000010001b76c	mov	x0, x21
000000010001b770	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001b774	mov	x23, x0
000000010001b778	cbz	x23, 0x10001c91c
000000010001b77c	mov	x0, x21
000000010001b780	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b784	cbz	w0, 0x10001c91c
000000010001b788	mov	x0, x19
000000010001b78c	mov	x1, x23
000000010001b790	bl	0x10001e1b8
000000010001b794	mov	x23, x0
000000010001b798	cbz	x23, 0x10001bb04
000000010001b79c	nop
000000010001b7a0	nop
000000010001b7a4	ldr	x24, #0x28c7c
000000010001b7a8	add	x25, x19, #0x3a8
000000010001b7ac	add	x26, x23, #0x460
000000010001b7b0	add	x1, sp, #0x98
000000010001b7b4	mov	x0, x22
000000010001b7b8	bl	0x1000293c0
000000010001b7bc	ldr	w8, [x22, #0x14]
000000010001b7c0	stp	x0, x8, [sp, #0x10]
000000010001b7c4	stp	x25, x26, [sp]
000000010001b7c8	adr	x2, #127060 ; literal pool for: "%s: caller removing service: service = %s, caller = %s.%d"
000000010001b7cc	nop
000000010001b7d0	mov	w1, #0x0
000000010001b7d4	mov	x0, x24
000000010001b7d8	bl	0x1000270c8
000000010001b7dc	mov	x0, x19
000000010001b7e0	mov	x1, x23
000000010001b7e4	bl	0x100021964
000000010001b7e8	mov	x23, x0
000000010001b7ec	cmp	w23, #0x24
000000010001b7f0	b.ne	0x10001bafc
000000010001b7f4	b	0x10001c2b8
000000010001b7f8	mov	x0, x21
000000010001b7fc	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001b800	cbz	x0, 0x10001c91c
000000010001b804	mov	w23, #0x0
000000010001b808	ldr	w8, [x19, #0x98]
000000010001b80c	add	w8, w8, #0x1
000000010001b810	str	w8, [x19, #0x98]
000000010001b814	b	0x10001c2c4
000000010001b818	adr	x1, #113780 ; literal pool for: "fd"
000000010001b81c	nop
000000010001b820	mov	x0, x21
000000010001b824	bl	0x100031a3c ; symbol stub for: _xpc_dictionary_dup_fd
000000010001b828	mov	x22, x0
000000010001b82c	cmn	w22, #0x1
000000010001b830	b.eq	0x10001c91c
000000010001b834	adr	x1, #127846 ; literal pool for: "cache"
000000010001b838	nop
000000010001b83c	mov	x0, x21
000000010001b840	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001b844	mov	x23, x0
000000010001b848	adr	x1, #127832 ; literal pool for: "version"
000000010001b84c	nop
000000010001b850	mov	x0, x21
000000010001b854	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001b858	mov	x24, x0
000000010001b85c	adr	x1, #127820 ; literal pool for: "variant"
000000010001b860	nop
000000010001b864	mov	x0, x21
000000010001b868	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001b86c	mov	x25, x0
000000010001b870	adr	x1, #127808 ; literal pool for: "disabled"
000000010001b874	nop
000000010001b878	mov	x0, x21
000000010001b87c	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001b880	mov	x26, x0
000000010001b884	adr	x1, #113675 ; literal pool for: "a"
000000010001b888	nop
000000010001b88c	mov	x0, x22
000000010001b890	bl	0x100030fbc ; symbol stub for: _fdopen
000000010001b894	mov	x20, x0
000000010001b898	cbz	x20, 0x10001bd74
000000010001b89c	cbz	w23, 0x10001bd9c
000000010001b8a0	bl	0x100009e80
000000010001b8a4	cbz	w0, 0x10001c17c
000000010001b8a8	adr	x2, #127761 ; literal pool for: "system services must be in cache"
000000010001b8ac	nop
000000010001b8b0	b	0x10001c184
000000010001b8b4	adrp	x19, 40 ; 0x100043000
000000010001b8b8	ldr	x8, [x19, #0xd38]
000000010001b8bc	cbz	x8, 0x10001bb2c
000000010001b8c0	mov	w23, #0x25
000000010001b8c4	b	0x10001c920
000000010001b8c8	mov	x0, x21
000000010001b8cc	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b8d0	cbz	w0, 0x10001c91c
000000010001b8d4	adr	x1, #127593 ; literal pool for: "which"
000000010001b8d8	nop
000000010001b8dc	mov	x0, x21
000000010001b8e0	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
000000010001b8e4	mov	x24, x0
000000010001b8e8	bl	0x100029818
000000010001b8ec	cbz	x0, 0x10001c91c
000000010001b8f0	adr	x1, #127571 ; literal pool for: "print"
000000010001b8f4	nop
000000010001b8f8	mov	x0, x21
000000010001b8fc	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001b900	cbz	w0, 0x10001bfa0
000000010001b904	adr	x1, #127557 ; literal pool for: "file"
000000010001b908	nop
000000010001b90c	mov	x0, x21
000000010001b910	bl	0x100031a3c ; symbol stub for: _xpc_dictionary_dup_fd
000000010001b914	mov	x22, x0
000000010001b918	cmn	w22, #0x1
000000010001b91c	b.eq	0x10001c91c
000000010001b920	adr	x1, #127534 ; literal pool for: "w"
000000010001b924	nop
000000010001b928	mov	x0, x22
000000010001b92c	bl	0x100030fbc ; symbol stub for: _fdopen
000000010001b930	mov	x20, x0
000000010001b934	cbz	x20, 0x10001bd94
000000010001b938	mov	x0, x21
000000010001b93c	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001b940	mov	x19, x0
000000010001b944	cbz	w24, 0x10001c9c4
000000010001b948	mov	x1, x24
000000010001b94c	mov	x0, x20
000000010001b950	bl	0x100024ab0
000000010001b954	b	0x10001c6a4
000000010001b958	mov	x0, x21
000000010001b95c	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001b960	cbz	w0, 0x10001c91c
000000010001b964	adr	x1, #126792 ; literal pool for: "envvars"
000000010001b968	nop
000000010001b96c	mov	x0, x21
000000010001b970	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001b974	mov	x23, x0
000000010001b978	cbz	x23, 0x10001c91c
000000010001b97c	mov	x0, x23
000000010001b980	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001b984	nop
000000010001b988	ldr	x8, #0x24738 ; literal pool symbol address: __xpc_type_dictionary
000000010001b98c	cmp	x0, x8
000000010001b990	b.ne	0x10001c91c
000000010001b994	stp	x19, x22, [sp, #0x98]
000000010001b998	str	xzr, [sp, #0xa8]
000000010001b99c	adr	x2, #36192
000000010001b9a0	nop
000000010001b9a4	add	x1, sp, #0x98
000000010001b9a8	mov	x0, x23
000000010001b9ac	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010001b9b0	b	0x10001c2b8
000000010001b9b4	orr	w23, wzr, #0x7c
000000010001b9b8	adr	x3, #129208 ; literal pool for: "persona creation"
000000010001b9bc	nop
000000010001b9c0	b	0x10001bf8c
000000010001b9c4	ldrb	w8, [x19, #0x3a0]
000000010001b9c8	tst	w8, #0x3
000000010001b9cc	b.ne	0x10001b1dc
000000010001b9d0	ldrh	w8, [x19, #0xa4]
000000010001b9d4	cbnz	w8, 0x10001bb14
000000010001b9d8	adr	x1, #110939 ; literal pool for: "name"
000000010001b9dc	nop
000000010001b9e0	mov	x0, x21
000000010001b9e4	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001b9e8	mov	x23, x0
000000010001b9ec	cbz	x23, 0x10001c91c
000000010001b9f0	adr	x1, #124906 ; literal pool for: "flags"
000000010001b9f4	nop
000000010001b9f8	mov	x0, x21
000000010001b9fc	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001ba00	mov	x24, x0
000000010001ba04	tbnz	w24, #0x4, 0x10001c8e8
000000010001ba08	mov	x25, #0x0
000000010001ba0c	b	0x10001c8fc
000000010001ba10	adr	x22, #166416
000000010001ba14	nop
000000010001ba18	ldr	x0, [x22]
000000010001ba1c	add	x20, x19, #0x3a8
000000010001ba20	stp	x10, x11, [sp, #0x18]
000000010001ba24	stp	x8, x9, [sp, #0x8]
000000010001ba28	str	x20, [sp]
000000010001ba2c	adr	x2, #124543 ; literal pool for: "%s: exec count or caller mismatch: caller exec cnt = %u, creator exec cnt = %u, caller pid = %d, creator pid = %d"
000000010001ba30	nop
000000010001ba34	mov	w1, #0x0
000000010001ba38	bl	0x1000270c8
000000010001ba3c	ldr	x8, [x19, #0xb0]
000000010001ba40	ldr	x0, [x22]
000000010001ba44	cbz	x8, 0x10001be3c
000000010001ba48	str	x20, [sp]
000000010001ba4c	adr	x2, #124625 ; literal pool for: "%s: rebirth already in progress"
000000010001ba50	nop
000000010001ba54	mov	w1, #0x0
000000010001ba58	bl	0x1000270c8
000000010001ba5c	mov	w23, #0x83
000000010001ba60	b	0x10001c920
000000010001ba64	adr	x1, #113192 ; literal pool for: "fd"
000000010001ba68	nop
000000010001ba6c	mov	x0, x21
000000010001ba70	bl	0x100031a3c ; symbol stub for: _xpc_dictionary_dup_fd
000000010001ba74	mov	x20, x0
000000010001ba78	cmn	w20, #0x1
000000010001ba7c	b.eq	0x10001c91c
000000010001ba80	adr	x1, #113167 ; literal pool for: "a"
000000010001ba84	nop
000000010001ba88	mov	x0, x20
000000010001ba8c	bl	0x100030fbc ; symbol stub for: _fdopen
000000010001ba90	mov	x22, x0
000000010001ba94	cbz	x22, 0x10001c2cc
000000010001ba98	mov	x0, x19
000000010001ba9c	mov	x1, x22
000000010001baa0	bl	0x1000257e0
000000010001baa4	mov	x0, x21
000000010001baa8	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001baac	mov	x19, x0
000000010001bab0	mov	x0, x22
000000010001bab4	b	0x10001c6a8
000000010001bab8	mov	w23, #0x22
000000010001babc	b	0x10001c920
000000010001bac0	adr	x1, #110707 ; literal pool for: "name"
000000010001bac4	nop
000000010001bac8	mov	x0, x21
000000010001bacc	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001bad0	mov	x8, x0
000000010001bad4	cbz	x8, 0x10001bfd0
000000010001bad8	mov	x0, x19
000000010001badc	mov	x1, x8
000000010001bae0	bl	0x10001e1b8
000000010001bae4	mov	x8, x0
000000010001bae8	cbz	x8, 0x10001bb04
000000010001baec	mov	x0, x19
000000010001baf0	mov	x1, x8
000000010001baf4	bl	0x100021964
000000010001baf8	mov	x23, x0
000000010001bafc	cbnz	w23, 0x10001c920
000000010001bb00	b	0x10001c2b8
000000010001bb04	orr	w23, wzr, #0x3
000000010001bb08	b	0x10001c920
000000010001bb0c	ldrh	w8, [x19, #0xa4]
000000010001bb10	cbz	w8, 0x10001bfdc
000000010001bb14	ldr	w1, [x19, #0x78]
000000010001bb18	mov	w3, #0x0
000000010001bb1c	mov	x0, x19
000000010001bb20	mov	x2, x21
000000010001bb24	bl	0x10001f2c4
000000010001bb28	b	0x10001c6b8
000000010001bb2c	mov	x0, x21
000000010001bb30	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001bb34	mov	w23, #0x0
000000010001bb38	str	x0, [x19, #0xd38]
000000010001bb3c	b	0x10001c920
000000010001bb40	cbz	w23, 0x10001bb60
000000010001bb44	adr	x3, #125946 ; literal pool for: "disable service"
000000010001bb48	nop
000000010001bb4c	b	0x10001bf8c
000000010001bb50	cbz	w23, 0x10001bc5c
000000010001bb54	adr	x3, #125796 ; literal pool for: "enable service"
000000010001bb58	nop
000000010001bb5c	b	0x10001bf8c
000000010001bb60	mov	x0, x21
000000010001bb64	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001bb68	mov	x21, x0
000000010001bb6c	cbz	x21, 0x10001c91c
000000010001bb70	mov	x0, x24
000000010001bb74	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001bb78	cbz	x0, 0x10001c170
000000010001bb7c	mov	x22, #0x0
000000010001bb80	adr	x23, #118109 ; literal pool for: "_dirty"
000000010001bb84	nop
000000010001bb88	adr	x25, #125894 ; literal pool for: "refusing to persist disabled state for '%s' as it contains illegal XML character '<'"
000000010001bb8c	nop
000000010001bb90	mov	x0, x24
000000010001bb94	mov	x1, x22
000000010001bb98	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010001bb9c	mov	x26, x0
000000010001bba0	cbz	x26, 0x10001bc44
000000010001bba4	ldr	x27, [x19, #0x378]
000000010001bba8	cbz	x27, 0x10001bbd8
000000010001bbac	orr	w1, wzr, #0x3c
000000010001bbb0	mov	x0, x26
000000010001bbb4	bl	0x1000316f4 ; symbol stub for: _strchr
000000010001bbb8	cbz	x0, 0x10001bbec
000000010001bbbc	str	x26, [sp]
000000010001bbc0	orr	w1, wzr, #0x4
000000010001bbc4	mov	x0, #0x0
000000010001bbc8	mov	x2, x25
000000010001bbcc	bl	0x100029dbc
000000010001bbd0	mov	w2, #0x8c
000000010001bbd4	b	0x10001bbdc
000000010001bbd8	mov	w2, #0x7d
000000010001bbdc	mov	x0, x21
000000010001bbe0	mov	x1, x26
000000010001bbe4	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010001bbe8	b	0x10001bc44
000000010001bbec	mov	x0, x27
000000010001bbf0	mov	x1, x26
000000010001bbf4	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001bbf8	mov	x27, x0
000000010001bbfc	cbz	x27, 0x10001bc24
000000010001bc00	mov	x0, x27
000000010001bc04	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001bc08	nop
000000010001bc0c	ldr	x8, #0x24494 ; literal pool symbol address: __xpc_type_bool
000000010001bc10	cmp	x0, x8
000000010001bc14	b.ne	0x10001bc24
000000010001bc18	mov	x0, x27
000000010001bc1c	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
000000010001bc20	tbnz	w0, #0x0, 0x10001bc44
000000010001bc24	ldr	x0, [x19, #0x378]
000000010001bc28	orr	w2, wzr, #0x1
000000010001bc2c	mov	x1, x26
000000010001bc30	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001bc34	ldr	x0, [x19, #0x378]
000000010001bc38	orr	w2, wzr, #0x1
000000010001bc3c	mov	x1, x23
000000010001bc40	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001bc44	add	x22, x22, #0x1
000000010001bc48	mov	x0, x24
000000010001bc4c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001bc50	cmp	x22, x0
000000010001bc54	b.lo	0x10001bb90
000000010001bc58	b	0x10001c170
000000010001bc5c	mov	x0, x21
000000010001bc60	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001bc64	mov	x21, x0
000000010001bc68	cbz	x21, 0x10001c91c
000000010001bc6c	mov	x0, x24
000000010001bc70	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001bc74	cbz	x0, 0x10001c170
000000010001bc78	mov	x22, #0x0
000000010001bc7c	adr	x23, #117857 ; literal pool for: "_dirty"
000000010001bc80	nop
000000010001bc84	adr	x25, #125542 ; literal pool for: "refusing to persist enabled state for '%s' as it contains illegal XML character '<'"
000000010001bc88	nop
000000010001bc8c	mov	x0, x24
000000010001bc90	mov	x1, x22
000000010001bc94	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010001bc98	mov	x26, x0
000000010001bc9c	cbz	x26, 0x10001bd40
000000010001bca0	ldr	x27, [x19, #0x378]
000000010001bca4	cbz	x27, 0x10001bcd4
000000010001bca8	orr	w1, wzr, #0x3c
000000010001bcac	mov	x0, x26
000000010001bcb0	bl	0x1000316f4 ; symbol stub for: _strchr
000000010001bcb4	cbz	x0, 0x10001bce8
000000010001bcb8	str	x26, [sp]
000000010001bcbc	orr	w1, wzr, #0x4
000000010001bcc0	mov	x0, #0x0
000000010001bcc4	mov	x2, x25
000000010001bcc8	bl	0x100029dbc
000000010001bccc	mov	w2, #0x8c
000000010001bcd0	b	0x10001bcd8
000000010001bcd4	mov	w2, #0x7d
000000010001bcd8	mov	x0, x21
000000010001bcdc	mov	x1, x26
000000010001bce0	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010001bce4	b	0x10001bd40
000000010001bce8	mov	x0, x27
000000010001bcec	mov	x1, x26
000000010001bcf0	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001bcf4	mov	x27, x0
000000010001bcf8	cbz	x27, 0x10001bd20
000000010001bcfc	mov	x0, x27
000000010001bd00	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001bd04	nop
000000010001bd08	ldr	x8, #0x24398 ; literal pool symbol address: __xpc_type_bool
000000010001bd0c	cmp	x0, x8
000000010001bd10	b.ne	0x10001bd20
000000010001bd14	mov	x0, x27
000000010001bd18	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
000000010001bd1c	cbz	w0, 0x10001bd40
000000010001bd20	ldr	x0, [x19, #0x378]
000000010001bd24	mov	w2, #0x0
000000010001bd28	mov	x1, x26
000000010001bd2c	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001bd30	ldr	x0, [x19, #0x378]
000000010001bd34	orr	w2, wzr, #0x1
000000010001bd38	mov	x1, x23
000000010001bd3c	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001bd40	add	x22, x22, #0x1
000000010001bd44	mov	x0, x24
000000010001bd48	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001bd4c	cmp	x22, x0
000000010001bd50	b.lo	0x10001bc8c
000000010001bd54	b	0x10001c170
000000010001bd58	orr	w23, wzr, #0x7c
000000010001bd5c	adr	x3, #128190 ; literal pool for: "get user context"
000000010001bd60	nop
000000010001bd64	b	0x10001bf8c
000000010001bd68	adr	x3, #127841 ; literal pool for: "extension removal"
000000010001bd6c	nop
000000010001bd70	b	0x10001b4b8
000000010001bd74	bl	0x100030adc ; symbol stub for: ___error
000000010001bd78	ldrsw	x2, [x0]
000000010001bd7c	cbz	w2, 0x10001bd94
000000010001bd80	adr	x0, #-8636
000000010001bd84	nop
000000010001bd88	mov	x1, x19
000000010001bd8c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001bd90	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001bd94	mov	x0, x22
000000010001bd98	b	0x10001c2f0
000000010001bd9c	cbz	w24, 0x10001c1c8
000000010001bda0	nop
000000010001bda4	ldr	x8, #0x27134
000000010001bda8	b	0x10001c1d4
000000010001bdac	adr	x1, #128090 ; literal pool for: "shmem"
000000010001bdb0	nop
000000010001bdb4	mov	x0, x21
000000010001bdb8	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001bdbc	cbz	x0, 0x10001c6c0
000000010001bdc0	add	x1, sp, #0x98
000000010001bdc4	bl	0x100031b80 ; symbol stub for: _xpc_shmem_map
000000010001bdc8	mov	x22, x0
000000010001bdcc	ldr	x0, [sp, #0x98]
000000010001bdd0	cbz	x0, 0x10001c6c8
000000010001bdd4	nop
000000010001bdd8	ldr	x8, #0x24358 ; literal pool symbol address: _vm_page_size
000000010001bddc	ldr	x8, [x8]
000000010001bde0	cmp	x22, x8
000000010001bde4	b.lo	0x10001c6c8
000000010001bde8	adr	x2, #126310 ; literal pool for: "w"
000000010001bdec	nop
000000010001bdf0	mov	x1, x22
000000010001bdf4	bl	0x100030fe0 ; symbol stub for: _fmemopen
000000010001bdf8	mov	x24, x0
000000010001bdfc	cbz	x24, 0x10001c9e4
000000010001be00	adrp	x23, 41 ; 0x100044000
000000010001be04	orr	w8, wzr, #0x1
000000010001be08	strb	w8, [x23, #0x428]
000000010001be0c	mov	x0, x19
000000010001be10	mov	x1, x24
000000010001be14	bl	0x100025764
000000010001be18	strb	wzr, [x23, #0x428]
000000010001be1c	mov	x0, x24
000000010001be20	bl	0x100031040 ; symbol stub for: _ftello
000000010001be24	mov	x19, x0
000000010001be28	orr	w8, wzr, #0x40000000
000000010001be2c	cmp	x19, x8
000000010001be30	b.ls	0x10001ca94
000000010001be34	mov	w23, #0x99
000000010001be38	b	0x10001cab4
000000010001be3c	str	x20, [sp]
000000010001be40	adr	x2, #123645 ; literal pool for: "%s: slaying domain for rebirth"
000000010001be44	nop
000000010001be48	mov	w1, #0x0
000000010001be4c	bl	0x1000270c8
000000010001be50	ldrh	w8, [x19, #0x3a0]
000000010001be54	orr	w8, w8, #0x100
000000010001be58	strh	w8, [x19, #0x3a0]
000000010001be5c	mov	x0, x21
000000010001be60	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010001be64	str	x0, [x19, #0xb0]
000000010001be68	mov	x0, x19
000000010001be6c	bl	0x100022cf8
000000010001be70	b	0x10001c6b8
000000010001be74	adr	x1, #118002 ; literal pool for: "paths"
000000010001be78	nop
000000010001be7c	mov	x0, x21
000000010001be80	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001be84	mov	x20, x0
000000010001be88	cbz	x20, 0x10001bea4
000000010001be8c	mov	x0, x20
000000010001be90	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001be94	nop
000000010001be98	ldr	x22, #0x24228 ; literal pool symbol address: __xpc_type_dictionary
000000010001be9c	cmp	x0, x22
000000010001bea0	b.eq	0x10001c7c8
000000010001bea4	mov	x0, x19
000000010001bea8	bl	0x100022cf8
000000010001beac	b	0x10001c91c
000000010001beb0	mov	x0, x21
000000010001beb4	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001beb8	mov	x21, x0
000000010001bebc	mov	x0, #0x0
000000010001bec0	mov	x1, #0x0
000000010001bec4	mov	x2, #0x0
000000010001bec8	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010001becc	mov	x22, x0
000000010001bed0	adr	x1, #125346 ; literal pool for: "services"
000000010001bed4	nop
000000010001bed8	mov	x0, x21
000000010001bedc	mov	x2, x22
000000010001bee0	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010001bee4	mov	x0, x22
000000010001bee8	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001beec	mov	x27, #0x0
000000010001bef0	adr	x23, #109328 ; literal pool for: "pid"
000000010001bef4	nop
000000010001bef8	adr	x24, #125315 ; literal pool for: "status"
000000010001befc	nop
000000010001bf00	add	x8, x19, x27, lsl #3
000000010001bf04	ldr	x25, [x8, #0x128]
000000010001bf08	cbz	x25, 0x10001bf70
000000010001bf0c	mov	x0, #0x0
000000010001bf10	mov	x1, #0x0
000000010001bf14	mov	x2, #0x0
000000010001bf18	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010001bf1c	mov	x26, x0
000000010001bf20	mov	x0, x25
000000010001bf24	bl	0x100015ed8
000000010001bf28	sxtw	x2, w0
000000010001bf2c	mov	x0, x26
000000010001bf30	mov	x1, x23
000000010001bf34	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010001bf38	mov	x0, x25
000000010001bf3c	bl	0x1000163cc
000000010001bf40	ldrsw	x2, [x0, #0x1c]
000000010001bf44	mov	x0, x26
000000010001bf48	mov	x1, x24
000000010001bf4c	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010001bf50	add	x1, x25, #0x460
000000010001bf54	mov	x0, x22
000000010001bf58	mov	x2, x26
000000010001bf5c	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010001bf60	mov	x0, x26
000000010001bf64	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001bf68	ldr	x25, [x25, #0x48]
000000010001bf6c	cbnz	x25, 0x10001bf0c
000000010001bf70	add	x27, x27, #0x1
000000010001bf74	cmp	x27, #0x17
000000010001bf78	b.ne	0x10001bf00
000000010001bf7c	b	0x10001c170
000000010001bf80	orr	w23, wzr, #0x1
000000010001bf84	adr	x3, #125369 ; literal pool for: "reboot"
000000010001bf88	nop
000000010001bf8c	mov	x2, x23
000000010001bf90	mov	x0, x19
000000010001bf94	mov	x1, x22
000000010001bf98	bl	0x10001dc6c
000000010001bf9c	b	0x10001c920
000000010001bfa0	orr	w1, wzr, #0x3
000000010001bfa4	mov	w2, #0x88
000000010001bfa8	mov	x0, x19
000000010001bfac	mov	x3, x22
000000010001bfb0	mov	x4, #0x0
000000010001bfb4	mov	x5, #0x0
000000010001bfb8	bl	0x10001e964
000000010001bfbc	mov	x23, x0
000000010001bfc0	cbz	w23, 0x10001c6f0
000000010001bfc4	adr	x3, #125836 ; literal pool for: "modify rlimits"
000000010001bfc8	nop
000000010001bfcc	b	0x10001bf8c
000000010001bfd0	mov	x0, x19
000000010001bfd4	bl	0x100022cf8
000000010001bfd8	b	0x10001c2b8
000000010001bfdc	adr	x1, #109399 ; literal pool for: "name"
000000010001bfe0	nop
000000010001bfe4	mov	x0, x21
000000010001bfe8	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001bfec	mov	x23, x0
000000010001bff0	cbz	x23, 0x10001c91c
000000010001bff4	adr	x1, #124875 ; literal pool for: "default-enabled"
000000010001bff8	nop
000000010001bffc	mov	x0, x21
000000010001c000	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001c004	mov	x22, x0
000000010001c008	mov	x0, x21
000000010001c00c	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001c010	mov	x21, x0
000000010001c014	cbz	x21, 0x10001c91c
000000010001c018	ldr	x8, [x19, #0x378]
000000010001c01c	cbz	x8, 0x10001b3f8
000000010001c020	mov	x0, x19
000000010001c024	mov	x1, x23
000000010001c028	bl	0x10001e1b8
000000010001c02c	cbz	x0, 0x10001c044
000000010001c030	adr	x1, #124831 ; literal pool for: "loaded"
000000010001c034	nop
000000010001c038	orr	w2, wzr, #0x1
000000010001c03c	mov	x0, x21
000000010001c040	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001c044	mov	x0, x19
000000010001c048	mov	x1, x23
000000010001c04c	bl	0x10001dec8
000000010001c050	nop
000000010001c054	ldr	x8, #0x2403c ; literal pool symbol address: __xpc_bool_true
000000010001c058	cmp	x0, x8
000000010001c05c	b.eq	0x10001caf8
000000010001c060	orr	w2, wzr, #0x1
000000010001c064	cbz	x22, 0x10001cc88
000000010001c068	nop
000000010001c06c	ldr	x8, #0x2401c ; literal pool symbol address: __xpc_bool_false
000000010001c070	cmp	x0, x8
000000010001c074	b.eq	0x10001cc88
000000010001c078	mov	x0, x22
000000010001c07c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001c080	nop
000000010001c084	ldr	x8, #0x2401c ; literal pool symbol address: __xpc_type_bool
000000010001c088	cmp	x0, x8
000000010001c08c	b.eq	0x10001cc7c
000000010001c090	orr	w2, wzr, #0x1
000000010001c094	b	0x10001cc88
000000010001c098	ldr	w1, [x22, #0x14]
000000010001c09c	str	x19, [sp, #0x98]
000000010001c0a0	orr	w2, wzr, #0x1
000000010001c0a4	add	x0, sp, #0x98
000000010001c0a8	bl	0x100023d80
000000010001c0ac	mov	x22, x0
000000010001c0b0	cbz	x22, 0x10001c13c
000000010001c0b4	orr	w0, wzr, #0x200
000000010001c0b8	bl	0x10000d464
000000010001c0bc	mov	x19, x0
000000010001c0c0	ldr	x25, [x22, #0xd0]
000000010001c0c4	cbz	x25, 0x10001c9ac
000000010001c0c8	mov	x27, #0x0
000000010001c0cc	orr	w23, wzr, #0x3
000000010001c0d0	mov	x26, x19
000000010001c0d4	add	x0, x25, #0xc0
000000010001c0d8	mov	x1, x24
000000010001c0dc	bl	0x100031700 ; symbol stub for: _strcmp
000000010001c0e0	cbnz	w0, 0x10001c130
000000010001c0e4	stp	xzr, xzr, [sp, #0x60]
000000010001c0e8	add	x1, sp, #0x68
000000010001c0ec	add	x3, sp, #0x60
000000010001c0f0	mov	x0, x25
000000010001c0f4	mov	x2, #0x0
000000010001c0f8	bl	0x100010220
000000010001c0fc	mov	x23, x0
000000010001c100	cbnz	w23, 0x10001cb00
000000010001c104	ldr	x8, [sp, #0x60]
000000010001c108	add	x27, x8, x27
000000010001c10c	cmp	x27, #0x80
000000010001c110	b.hs	0x10001cb8c
000000010001c114	ldr	x1, [sp, #0x68]
000000010001c118	lsl	x2, x8, #2
000000010001c11c	mov	x0, x26
000000010001c120	bl	0x100031328 ; symbol stub for: _memcpy
000000010001c124	mov	w23, #0x0
000000010001c128	ldr	x8, [sp, #0x60]
000000010001c12c	add	x26, x26, x8, lsl #2
000000010001c130	ldr	x25, [x25, #0x8]
000000010001c134	cbnz	x25, 0x10001c0d4
000000010001c138	b	0x10001cbbc
000000010001c13c	mov	w23, #0x71
000000010001c140	b	0x10001c920
000000010001c144	mov	x0, x19
000000010001c148	bl	0x10000e6e0
000000010001c14c	mov	x19, x0
000000010001c150	mov	x0, x21
000000010001c154	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001c158	mov	x21, x0
000000010001c15c	adr	x1, #124891 ; literal pool for: "value"
000000010001c160	nop
000000010001c164	mov	x0, x21
000000010001c168	mov	x2, x19
000000010001c16c	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
000000010001c170	mov	w23, #0x0
000000010001c174	str	x21, [x20]
000000010001c178	b	0x10001c920
000000010001c17c	adr	x2, #125534 ; literal pool for: "disk will be searched for uncached services"
000000010001c180	nop
000000010001c184	mov	x0, x20
000000010001c188	mov	x1, #0x0
000000010001c18c	bl	0x10002a548
000000010001c190	bl	0x100009e50
000000010001c194	mov	x19, x0
000000010001c198	cbz	x19, 0x10001c5a0
000000010001c19c	adr	x2, #125546 ; literal pool for: "cached daemons = "
000000010001c1a0	nop
000000010001c1a4	mov	x0, x20
000000010001c1a8	mov	x1, #0x0
000000010001c1ac	bl	0x10002a42c
000000010001c1b0	orr	w2, wzr, #0x1
000000010001c1b4	mov	x0, x20
000000010001c1b8	mov	x1, #0x0
000000010001c1bc	mov	x3, x19
000000010001c1c0	bl	0x10000d8ec
000000010001c1c4	b	0x10001c5b4
000000010001c1c8	cbz	w25, 0x10001c770
000000010001c1cc	nop
000000010001c1d0	ldr	x8, #0x26d10
000000010001c1d4	str	x8, [sp]
000000010001c1d8	adr	x2, #103122 ; literal pool for: "%s"
000000010001c1dc	nop
000000010001c1e0	mov	x0, x20
000000010001c1e4	mov	x1, #0x0
000000010001c1e8	bl	0x10002a548
000000010001c1ec	b	0x10001c698
000000010001c1f0	mov	x0, x21
000000010001c1f4	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001c1f8	mov	x21, x0
000000010001c1fc	orr	w1, wzr, #0x1
000000010001c200	b	0x10001c578
000000010001c204	adr	x8, #124782 ; literal pool for: "System reboot"
000000010001c208	nop
000000010001c20c	adr	x23, #124760 ; literal pool for: "system reboot"
000000010001c210	nop
000000010001c214	tbnz	x24, #0x39, 0x10001c264
000000010001c218	mov	w9, #0x4
000000010001c21c	movk	w9, #0x1, lsl #16
000000010001c220	add	w1, w9, #0x1
000000010001c224	add	x26, sp, #0x98
000000010001c228	stp	x8, x26, [sp]
000000010001c22c	adr	x2, #124816 ; literal pool for: "%s initiated by: %s"
000000010001c230	nop
000000010001c234	mov	x0, x19
000000010001c238	bl	0x100019bfc
000000010001c23c	nop
000000010001c240	nop
000000010001c244	ldr	x0, #0x281dc
000000010001c248	add	x8, x19, #0x3a8
000000010001c24c	stp	x24, x26, [sp, #0x10]
000000010001c250	stp	x8, x23, [sp]
000000010001c254	adr	x2, #124796 ; literal pool for: "%s: %s: flags = 0x%llx, caller = %s"
000000010001c258	nop
000000010001c25c	mov	w1, #0x0
000000010001c260	bl	0x1000270c8
000000010001c264	tbnz	x24, #0x3e, 0x10001c320
000000010001c268	tbnz	x24, #0x39, 0x10001c2b8
000000010001c26c	str	w24, [x19, #0x90]
000000010001c270	ldr	x8, [x25, #0xcf8]
000000010001c274	cmp	x8, x19
000000010001c278	b.ne	0x10001ccc8
000000010001c27c	ldr	w0, [x19, #0x7c]
000000010001c280	cbz	w0, 0x10001c2b8
000000010001c284	mov	w1, #0x0
000000010001c288	mov	x2, x19
000000010001c28c	bl	0x1000088a4
000000010001c290	cbnz	w0, 0x10001ccd8
000000010001c294	str	wzr, [x19, #0x7c]
000000010001c298	b	0x10001c2b8
000000010001c29c	adr	x0, #159180
000000010001c2a0	nop
000000010001c2a4	mov	w4, #0x0
000000010001c2a8	mov	x1, x24
000000010001c2ac	mov	x2, #0x0
000000010001c2b0	mov	x5, x22
000000010001c2b4	bl	0x10001a088
000000010001c2b8	mov	x0, x21
000000010001c2bc	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001c2c0	mov	w23, #0x0
000000010001c2c4	str	x0, [x20]
000000010001c2c8	b	0x10001c920
000000010001c2cc	bl	0x100030adc ; symbol stub for: ___error
000000010001c2d0	ldrsw	x2, [x0]
000000010001c2d4	cbz	w2, 0x10001c2ec
000000010001c2d8	adr	x0, #-10004
000000010001c2dc	nop
000000010001c2e0	mov	x1, x19
000000010001c2e4	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001c2e8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001c2ec	mov	x0, x20
000000010001c2f0	bl	0x100030c74 ; symbol stub for: _close
000000010001c2f4	cmn	w0, #0x1
000000010001c2f8	b.ne	0x10001c318
000000010001c2fc	bl	0x100030adc ; symbol stub for: ___error
000000010001c300	ldrsw	x2, [x0]
000000010001c304	adr	x0, #-10048
000000010001c308	nop
000000010001c30c	mov	x1, x19
000000010001c310	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001c314	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001c318	mov	w23, #0x9
000000010001c31c	b	0x10001c920
000000010001c320	adrp	x8, 40 ; 0x100044000
000000010001c324	ldrb	w8, [x8, #0x429]
000000010001c328	cbnz	w8, 0x10001b8c0
000000010001c32c	tbnz	x24, #0x39, 0x10001c2b8
000000010001c330	mov	x0, x21
000000010001c334	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001c338	mov	x20, x0
000000010001c33c	ldr	w8, [x22, #0x14]
000000010001c340	adrp	x24, 39 ; 0x100043000
000000010001c344	str	w8, [x24, #0xd44]
000000010001c348	adr	x2, #124602 ; literal pool for: "Wipe them out. All of them."
000000010001c34c	nop
000000010001c350	mov	w1, #0x4
000000010001c354	movk	w1, #0x1, lsl #16
000000010001c358	mov	x0, x19
000000010001c35c	bl	0x100019bfc
000000010001c360	adr	x2, #124606 ; literal pool for: "starting obliteration"
000000010001c364	nop
000000010001c368	mov	w1, #0x5
000000010001c36c	mov	x0, #0x0
000000010001c370	bl	0x100029f54
000000010001c374	adr	x8, #164118
000000010001c378	nop
000000010001c37c	orr	w9, wzr, #0x1
000000010001c380	strb	w9, [x8]
000000010001c384	bl	0x100030d70 ; symbol stub for: _dispatch_group_create
000000010001c388	adrp	x21, 39 ; 0x100043000
000000010001c38c	str	x0, [x21, #0xe40]
000000010001c390	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
000000010001c394	orr	w1, wzr, #0xe
000000010001c398	mov	x0, x19
000000010001c39c	bl	0x10000e3f4
000000010001c3a0	ldr	x21, [x21, #0xe40]
000000010001c3a4	bl	0x10000d8e0
000000010001c3a8	mov	x1, x0
000000010001c3ac	nop
000000010001c3b0	ldr	x8, #0x23c60 ; literal pool symbol address: __NSConcreteStackBlock
000000010001c3b4	str	x8, [sp, #0x68]
000000010001c3b8	nop
000000010001c3bc	ldr	d0, 0x10003de90
000000010001c3c0	str	d0, [sp, #0x70]
000000010001c3c4	adr	x8, #34396
000000010001c3c8	nop
000000010001c3cc	str	x8, [sp, #0x78]
000000010001c3d0	adr	x8, #153808
000000010001c3d4	nop
000000010001c3d8	stp	x8, x19, [sp, #0x80]
000000010001c3dc	str	x20, [sp, #0x90]
000000010001c3e0	add	x2, sp, #0x68
000000010001c3e4	mov	x0, x21
000000010001c3e8	bl	0x100030d94 ; symbol stub for: _dispatch_group_notify
000000010001c3ec	ldr	x22, [x19, #0x120]
000000010001c3f0	add	x26, x19, #0x3a8
000000010001c3f4	cbz	x22, 0x10001c43c
000000010001c3f8	adr	x23, #163880
000000010001c3fc	nop
000000010001c400	adr	x20, #124474 ; literal pool for: "%s: obliterating semi-active service: %s"
000000010001c404	nop
000000010001c408	mov	x21, x22
000000010001c40c	ldr	x22, [x21, #0x38]
000000010001c410	ldr	x0, [x23]
000000010001c414	add	x8, x21, #0x460
000000010001c418	stp	x26, x8, [sp]
000000010001c41c	mov	w1, #0x0
000000010001c420	mov	x2, x20
000000010001c424	bl	0x1000270c8
000000010001c428	mov	x0, x21
000000010001c42c	bl	0x100015694
000000010001c430	cmp	w0, #0x59
000000010001c434	b.ne	0x10001ccac
000000010001c438	cbnz	x22, 0x10001c408
000000010001c43c	mov	x27, #0x0
000000010001c440	adr	x23, #163808
000000010001c444	nop
000000010001c448	orr	w25, wzr, #0x1
000000010001c44c	mov	x20, #0x1000100010001
000000010001c450	movk	x20, #0x20, lsl #32
000000010001c454	movk	x20, #0x0, lsl #48
000000010001c458	adr	x21, #124538 ; literal pool for: "%s: obliterating active service: %s"
000000010001c45c	nop
000000010001c460	add	x8, x19, x27, lsl #3
000000010001c464	ldr	x22, [x8, #0x1e0]
000000010001c468	cbz	x22, 0x10001c4f4
000000010001c46c	mov	x0, x22
000000010001c470	bl	0x100015ed8
000000010001c474	mov	x8, x0
000000010001c478	ldr	w10, [x24, #0xd44]
000000010001c47c	ldr	x0, [x23]
000000010001c480	add	x9, x22, #0x460
000000010001c484	cmp	w8, w10
000000010001c488	b.ne	0x10001c4a4
000000010001c48c	stp	x26, x9, [sp]
000000010001c490	mov	w1, #0x0
000000010001c494	adr	x2, #124444 ; literal pool for: "%s: skipping over obliterator: %s"
000000010001c498	nop
000000010001c49c	bl	0x1000270c8
000000010001c4a0	b	0x10001c4ec
000000010001c4a4	stp	x26, x9, [sp]
000000010001c4a8	mov	w1, #0x0
000000010001c4ac	mov	x2, x21
000000010001c4b0	bl	0x1000270c8
000000010001c4b4	mov	x0, x22
000000010001c4b8	bl	0x100015694
000000010001c4bc	cmp	w0, #0x25
000000010001c4c0	b.hi	0x10001cca0
000000010001c4c4	mov	w8, w0
000000010001c4c8	lsl	x8, x25, x8
000000010001c4cc	tst	x8, x20
000000010001c4d0	b.eq	0x10001cca0
000000010001c4d4	nop
000000010001c4d8	ldr	x0, #0x27968
000000010001c4dc	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
000000010001c4e0	ldrh	w8, [x22, #0x134]
000000010001c4e4	orr	w8, w8, #0x4000
000000010001c4e8	strh	w8, [x22, #0x134]
000000010001c4ec	ldr	x22, [x22, #0x28]
000000010001c4f0	cbnz	x22, 0x10001c46c
000000010001c4f4	add	x27, x27, #0x1
000000010001c4f8	cmp	x27, #0xd
000000010001c4fc	b.lo	0x10001c460
000000010001c500	ldr	w8, [x19, #0x98]
000000010001c504	add	w8, w8, #0x1
000000010001c508	str	w8, [x19, #0x98]
000000010001c50c	adr	x8, #163699
000000010001c510	nop
000000010001c514	orr	w9, wzr, #0x1
000000010001c518	strb	w9, [x8]
000000010001c51c	adrp	x8, 40 ; 0x100044000
000000010001c520	strb	w9, [x8, #0x429]
000000010001c524	nop
000000010001c528	ldr	x0, #0x27918
000000010001c52c	b	0x10001cc74
000000010001c530	mov	w1, #0x12
000000010001c534	mov	x0, x22
000000010001c538	bl	0x100009be8
000000010001c53c	cbz	w0, 0x10001c858
000000010001c540	tbnz	x24, #0x39, 0x10001c2b8
000000010001c544	adrp	x8, 39 ; 0x100043000
000000010001c548	orr	w9, wzr, #0x1
000000010001c54c	strb	w9, [x8, #0xd28]
000000010001c550	adr	x8, #123969 ; literal pool for: "Userspace reboot"
000000010001c554	nop
000000010001c558	adr	x23, #123944 ; literal pool for: "userspace reboot"
000000010001c55c	nop
000000010001c560	tbz	x24, #0x39, 0x10001c218
000000010001c564	b	0x10001c264
000000010001c568	mov	x0, x21
000000010001c56c	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001c570	mov	x21, x0
000000010001c574	mov	w1, #0x0
000000010001c578	mov	x0, x19
000000010001c57c	mov	x2, x21
000000010001c580	mov	x3, x23
000000010001c584	mov	x4, #0x0
000000010001c588	mov	x5, x22
000000010001c58c	mov	x6, x20
000000010001c590	bl	0x10001f08c
000000010001c594	cbz	x21, 0x10001c6b8
000000010001c598	mov	x0, x21
000000010001c59c	b	0x10001c6b4
000000010001c5a0	adr	x2, #124536 ; literal pool for: "(no daemon cache)"
000000010001c5a4	nop
000000010001c5a8	mov	x0, x20
000000010001c5ac	mov	x1, #0x0
000000010001c5b0	bl	0x10002a548
000000010001c5b4	bl	0x100009e5c
000000010001c5b8	mov	x19, x0
000000010001c5bc	cbz	x19, 0x10001c5f4
000000010001c5c0	mov	x0, x20
000000010001c5c4	bl	0x10002a5c4
000000010001c5c8	adr	x2, #124514 ; literal pool for: "service cache = "
000000010001c5cc	nop
000000010001c5d0	mov	x0, x20
000000010001c5d4	mov	x1, #0x0
000000010001c5d8	bl	0x10002a42c
000000010001c5dc	orr	w2, wzr, #0x1
000000010001c5e0	mov	x0, x20
000000010001c5e4	mov	x1, #0x0
000000010001c5e8	mov	x3, x19
000000010001c5ec	bl	0x10000d8ec
000000010001c5f0	b	0x10001c608
000000010001c5f4	adr	x2, #124487 ; literal pool for: "(no service cache)"
000000010001c5f8	nop
000000010001c5fc	mov	x0, x20
000000010001c600	mov	x1, #0x0
000000010001c604	bl	0x10002a548
000000010001c608	bl	0x100009e68
000000010001c60c	mov	x19, x0
000000010001c610	cbz	x19, 0x10001c648
000000010001c614	mov	x0, x20
000000010001c618	bl	0x10002a5c4
000000010001c61c	adr	x2, #124466 ; literal pool for: "resolved framework services = "
000000010001c620	nop
000000010001c624	mov	x0, x20
000000010001c628	mov	x1, #0x0
000000010001c62c	bl	0x10002a42c
000000010001c630	orr	w2, wzr, #0x1
000000010001c634	mov	x0, x20
000000010001c638	mov	x1, #0x0
000000010001c63c	mov	x3, x19
000000010001c640	bl	0x10000d8ec
000000010001c644	b	0x10001c65c
000000010001c648	adr	x2, #124453 ; literal pool for: "(no resolved services)"
000000010001c64c	nop
000000010001c650	mov	x0, x20
000000010001c654	mov	x1, #0x0
000000010001c658	bl	0x10002a548
000000010001c65c	bl	0x100009e74
000000010001c660	mov	x19, x0
000000010001c664	cbz	x19, 0x10001c698
000000010001c668	mov	x0, x20
000000010001c66c	bl	0x10002a5c4
000000010001c670	adr	x2, #124436 ; literal pool for: "system app extensions = "
000000010001c674	nop
000000010001c678	mov	x0, x20
000000010001c67c	mov	x1, #0x0
000000010001c680	bl	0x10002a42c
000000010001c684	orr	w2, wzr, #0x1
000000010001c688	mov	x0, x20
000000010001c68c	mov	x1, #0x0
000000010001c690	mov	x3, x19
000000010001c694	bl	0x10000d8ec
000000010001c698	mov	x0, x21
000000010001c69c	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001c6a0	mov	x19, x0
000000010001c6a4	mov	x0, x20
000000010001c6a8	mov	x1, x19
000000010001c6ac	bl	0x10002a5e0
000000010001c6b0	mov	x0, x19
000000010001c6b4	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001c6b8	mov	w23, #0x0
000000010001c6bc	b	0x10001c920
000000010001c6c0	mov	x22, #0x0
000000010001c6c4	b	0x10001c6e8
000000010001c6c8	bl	0x100030adc ; symbol stub for: ___error
000000010001c6cc	ldrsw	x2, [x0]
000000010001c6d0	cbz	w2, 0x10001c6e8
000000010001c6d4	adr	x0, #-11024
000000010001c6d8	nop
000000010001c6dc	mov	x1, x19
000000010001c6e0	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001c6e4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001c6e8	mov	w23, #0x16
000000010001c6ec	b	0x10001cabc
000000010001c6f0	adr	x1, #124015 ; literal pool for: "hardlimit"
000000010001c6f4	nop
000000010001c6f8	mov	x0, x21
000000010001c6fc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001c700	mov	x19, x0
000000010001c704	cbz	x19, 0x10001c91c
000000010001c708	mov	x0, x19
000000010001c70c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001c710	nop
000000010001c714	ldr	x23, #0x239bc ; literal pool symbol address: __xpc_type_int64
000000010001c718	cmp	x0, x23
000000010001c71c	b.ne	0x10001c91c
000000010001c720	adr	x1, #123977 ; literal pool for: "softlimit"
000000010001c724	nop
000000010001c728	mov	x0, x21
000000010001c72c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001c730	mov	x22, x0
000000010001c734	cbz	x22, 0x10001c91c
000000010001c738	mov	x0, x22
000000010001c73c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001c740	cmp	x0, x23
000000010001c744	b.ne	0x10001c91c
000000010001c748	mov	x0, x19
000000010001c74c	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010001c750	mov	x19, x0
000000010001c754	mov	x0, x22
000000010001c758	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010001c75c	mov	x1, x0
000000010001c760	mov	x0, x24
000000010001c764	mov	x2, x19
000000010001c768	bl	0x10002968c
000000010001c76c	b	0x10001c2b8
000000010001c770	cbz	w26, 0x10001c9b4
000000010001c774	adr	x2, #124201 ; literal pool for: "disabled services = "
000000010001c778	nop
000000010001c77c	mov	x0, x20
000000010001c780	mov	x1, #0x0
000000010001c784	bl	0x10002a42c
000000010001c788	ldr	x0, [x19, #0x378]
000000010001c78c	cbz	x0, 0x10001cbcc
000000010001c790	bl	0x1000319ac ; symbol stub for: _xpc_copy
000000010001c794	mov	x19, x0
000000010001c798	adr	x1, #115013 ; literal pool for: "_dirty"
000000010001c79c	nop
000000010001c7a0	mov	x2, #0x0
000000010001c7a4	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010001c7a8	mov	w2, #0x0
000000010001c7ac	mov	x0, x20
000000010001c7b0	mov	x1, #0x0
000000010001c7b4	mov	x3, x19
000000010001c7b8	bl	0x10000d8ec
000000010001c7bc	mov	x0, x19
000000010001c7c0	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001c7c4	b	0x10001c698
000000010001c7c8	adr	x1, #109640 ; literal pool for: "environment"
000000010001c7cc	nop
000000010001c7d0	mov	x0, x21
000000010001c7d4	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001c7d8	mov	x21, x0
000000010001c7dc	cbz	x21, 0x10001bea4
000000010001c7e0	mov	x0, x21
000000010001c7e4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001c7e8	cmp	x0, x22
000000010001c7ec	b.ne	0x10001bea4
000000010001c7f0	mov	x0, x20
000000010001c7f4	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010001c7f8	str	x0, [x19, #0xd0]
000000010001c7fc	adr	x2, #28044
000000010001c800	nop
000000010001c804	mov	x0, x21
000000010001c808	mov	x1, x19
000000010001c80c	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010001c810	orr	w1, wzr, #0x2
000000010001c814	mov	x0, x19
000000010001c818	bl	0x100021d14
000000010001c81c	mov	w23, #0x0
000000010001c820	ldrh	w8, [x19, #0x3a0]
000000010001c824	orr	w8, w8, #0x10
000000010001c828	strh	w8, [x19, #0x3a0]
000000010001c82c	b	0x10001c920
000000010001c830	orr	w1, wzr, #0xc
000000010001c834	mov	x0, x22
000000010001c838	bl	0x100009be8
000000010001c83c	cbz	w0, 0x10001c858
000000010001c840	adr	x8, #123247 ; literal pool for: "Obliteration"
000000010001c844	nop
000000010001c848	adr	x23, #123226 ; literal pool for: "obliteration"
000000010001c84c	nop
000000010001c850	tbz	x24, #0x39, 0x10001c218
000000010001c854	b	0x10001c264
000000010001c858	mov	w23, #0x90
000000010001c85c	b	0x10001c920
000000010001c860	adr	x1, #93610 ; literal pool for: "XPCService"
000000010001c864	nop
000000010001c868	mov	x0, x23
000000010001c86c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001c870	mov	x25, x0
000000010001c874	cbz	x25, 0x10001c888
000000010001c878	mov	x0, x25
000000010001c87c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001c880	cmp	x0, x26
000000010001c884	b.eq	0x10001cbe4
000000010001c888	nop
000000010001c88c	nop
000000010001c890	ldr	x26, #0x27b90
000000010001c894	add	x27, x19, #0x3a8
000000010001c898	add	x1, sp, #0x98
000000010001c89c	mov	x0, x22
000000010001c8a0	bl	0x1000293c0
000000010001c8a4	adr	x8, #124861 ; literal pool for: "NULL"
000000010001c8a8	nop
000000010001c8ac	adr	x9, #124836 ; literal pool for: "not a dictionary"
000000010001c8b0	nop
000000010001c8b4	cmp	x25, #0x0
000000010001c8b8	csel	x8, x9, x8, ne
000000010001c8bc	ldr	w9, [sp, #0x98]
000000010001c8c0	stp	x24, x8, [sp, #0x20]
000000010001c8c4	stp	x0, x9, [sp, #0x10]
000000010001c8c8	adr	x8, #124675 ; literal pool for: "add extension instance"
000000010001c8cc	nop
000000010001c8d0	stp	x27, x8, [sp]
000000010001c8d4	adr	x2, #124686 ; literal pool for: "%s: %s: caller = %s.%d, extension path = %s, xpcservice overlay = %s (this request will probably not succeed)"
000000010001c8d8	nop
000000010001c8dc	mov	w1, #0x0
000000010001c8e0	mov	x0, x26
000000010001c8e4	b	0x10001abec
000000010001c8e8	adr	x1, #121080 ; literal pool for: "lookup-handle"
000000010001c8ec	nop
000000010001c8f0	mov	x0, x21
000000010001c8f4	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001c8f8	mov	x25, x0
000000010001c8fc	adr	x1, #121074 ; literal pool for: "instance"
000000010001c900	nop
000000010001c904	mov	x0, x21
000000010001c908	bl	0x100031ab4 ; symbol stub for: _xpc_dictionary_get_uuid
000000010001c90c	mov	x8, x0
000000010001c910	tbnz	w24, #0x2, 0x10001c918
000000010001c914	tbz	w24, #0x5, 0x10001c960
000000010001c918	cbnz	x8, 0x10001c960
000000010001c91c	mov	w23, #0x16
000000010001c920	str	w23, [sp, #0x5c]
000000010001c924	ldr	x8, [x28]
000000010001c928	nop
000000010001c92c	ldr	x9, #0x236ec ; literal pool symbol address: ___stack_chk_guard
000000010001c930	ldr	x9, [x9]
000000010001c934	cmp	x9, x8
000000010001c938	b.ne	0x10001cc9c
000000010001c93c	mov	x0, x23
000000010001c940	add	sp, sp, #0x4a0
000000010001c944	ldp	x29, x30, [sp, #0x50]
000000010001c948	ldp	x20, x19, [sp, #0x40]
000000010001c94c	ldp	x22, x21, [sp, #0x30]
000000010001c950	ldp	x24, x23, [sp, #0x20]
000000010001c954	ldp	x26, x25, [sp, #0x10]
000000010001c958	ldp	x28, x27, [sp], #0x60
000000010001c95c	ret
000000010001c960	str	wzr, [sp, #0x98]
000000010001c964	add	x4, sp, #0x98
000000010001c968	mov	x0, x19
000000010001c96c	mov	x1, x23
000000010001c970	mov	x2, x25
000000010001c974	mov	x3, x24
000000010001c978	mov	x5, x8
000000010001c97c	mov	x6, x22
000000010001c980	bl	0x100023650
000000010001c984	mov	x23, x0
000000010001c988	cbnz	w23, 0x10001c920
000000010001c98c	mov	x0, x21
000000010001c990	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001c994	mov	x19, x0
000000010001c998	ldr	w2, [sp, #0x98]
000000010001c99c	adr	x1, #108951 ; literal pool for: "port"
000000010001c9a0	nop
000000010001c9a4	bl	0x100031afc ; symbol stub for: _xpc_dictionary_set_mach_send
000000010001c9a8	b	0x10001b2a8
000000010001c9ac	orr	w23, wzr, #0x3
000000010001c9b0	b	0x10001cbc0
000000010001c9b4	mov	x0, x19
000000010001c9b8	mov	x1, x20
000000010001c9bc	bl	0x100024bc0
000000010001c9c0	b	0x10001c698
000000010001c9c4	mov	x21, #0x0
000000010001c9c8	mov	x1, x21
000000010001c9cc	mov	x0, x20
000000010001c9d0	bl	0x100024ab0
000000010001c9d4	add	x21, x21, #0x1
000000010001c9d8	cmp	x21, #0x9
000000010001c9dc	b.ne	0x10001c9c8
000000010001c9e0	b	0x10001c6a4
000000010001c9e4	bl	0x100030adc ; symbol stub for: ___error
000000010001c9e8	ldrsw	x2, [x0]
000000010001c9ec	cbz	w2, 0x10001ca04
000000010001c9f0	adr	x0, #-11820
000000010001c9f4	nop
000000010001c9f8	mov	x1, x19
000000010001c9fc	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001ca00	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001ca04	mov	w23, #0x9
000000010001ca08	b	0x10001cabc
000000010001ca0c	mov	x0, x21
000000010001ca10	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001ca14	mov	x19, x0
000000010001ca18	ldr	x21, [x22, #0x48]
000000010001ca1c	mov	x8, x21
000000010001ca20	ldr	w9, [x8, #0x14]
000000010001ca24	cmp	w9, #0x4
000000010001ca28	b.eq	0x10001ca34
000000010001ca2c	ldr	x8, [x8]
000000010001ca30	cbnz	x8, 0x10001ca20
000000010001ca34	cbz	x21, 0x10001ca4c
000000010001ca38	ldr	w9, [x21, #0x14]
000000010001ca3c	cmp	w9, #0x80
000000010001ca40	b.eq	0x10001ca4c
000000010001ca44	ldr	x21, [x21]
000000010001ca48	cbnz	x21, 0x10001ca38
000000010001ca4c	ldr	w2, [x8, #0x10]
000000010001ca50	adr	x1, #109148 ; literal pool for: "bootstrap"
000000010001ca54	nop
000000010001ca58	mov	x0, x19
000000010001ca5c	bl	0x100031afc ; symbol stub for: _xpc_dictionary_set_mach_send
000000010001ca60	cbz	x21, 0x10001b2a4
000000010001ca64	ldr	w2, [x21, #0x10]
000000010001ca68	adr	x1, #118588 ; literal pool for: "exception"
000000010001ca6c	nop
000000010001ca70	mov	x0, x19
000000010001ca74	bl	0x100031afc ; symbol stub for: _xpc_dictionary_set_mach_send
000000010001ca78	b	0x10001b2a4
000000010001ca7c	adr	x1, #108095 ; literal pool for: "error"
000000010001ca80	nop
000000010001ca84	orr	w2, wzr, #0x3
000000010001ca88	ldr	x0, [sp, #0x40]
000000010001ca8c	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010001ca90	b	0x10001cc48
000000010001ca94	mov	x0, x21
000000010001ca98	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001ca9c	str	x0, [x20]
000000010001caa0	adr	x1, #124780 ; literal pool for: "bytes-written"
000000010001caa4	nop
000000010001caa8	mov	x2, x19
000000010001caac	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001cab0	mov	w23, #0x0
000000010001cab4	mov	x0, x24
000000010001cab8	bl	0x100030fa4 ; symbol stub for: _fclose
000000010001cabc	ldr	x0, [sp, #0x98]
000000010001cac0	cbz	x0, 0x10001c920
000000010001cac4	cbz	x22, 0x10001ccb8
000000010001cac8	mov	x1, x22
000000010001cacc	bl	0x1000313ac ; symbol stub for: _munmap
000000010001cad0	b	0x10001c920
000000010001cad4	add	x22, x22, #0x1
000000010001cad8	cbz	w0, 0x10001cc44
000000010001cadc	sxtw	x2, w0
000000010001cae0	adr	x0, #-44344
000000010001cae4	nop
000000010001cae8	mov	x1, x23
000000010001caec	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001caf0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001caf4	b	0x10001cc44
000000010001caf8	mov	w2, #0x0
000000010001cafc	b	0x10001cc88
000000010001cb00	mov	x0, x23
000000010001cb04	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010001cb08	stp	x23, x0, [sp, #0x8]
000000010001cb0c	str	x24, [sp]
000000010001cb10	adr	x2, #121353 ; literal pool for: "Could not activate socket named \"%s\": %d: %s"
000000010001cb14	nop
000000010001cb18	orr	w1, wzr, #0x3
000000010001cb1c	mov	x0, x22
000000010001cb20	bl	0x1000118ec
000000010001cb24	cbnz	w23, 0x10001cbc0
000000010001cb28	mov	x0, x21
000000010001cb2c	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001cb30	mov	x21, x0
000000010001cb34	mov	x0, #0x0
000000010001cb38	mov	x1, #0x0
000000010001cb3c	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
000000010001cb40	mov	x22, x0
000000010001cb44	cbz	x27, 0x10001cb64
000000010001cb48	mov	x23, x19
000000010001cb4c	ldr	w2, [x23], #0x4
000000010001cb50	mov	x1, #-0x1
000000010001cb54	mov	x0, x22
000000010001cb58	bl	0x1000318f8 ; symbol stub for: _xpc_array_set_fd
000000010001cb5c	subs	x27, x27, #0x1
000000010001cb60	b.ne	0x10001cb4c
000000010001cb64	adr	x1, #108495 ; literal pool for: "port"
000000010001cb68	nop
000000010001cb6c	mov	x0, x21
000000010001cb70	mov	x2, x22
000000010001cb74	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010001cb78	mov	x0, x22
000000010001cb7c	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001cb80	mov	x0, x19
000000010001cb84	bl	0x100031010 ; symbol stub for: _free
000000010001cb88	b	0x10001c170
000000010001cb8c	str	x24, [sp]
000000010001cb90	adr	x2, #121171 ; literal pool for: "Too many sockets for name \"%s\". Some will be skipped."
000000010001cb94	nop
000000010001cb98	orr	w1, wzr, #0x4
000000010001cb9c	mov	x0, x22
000000010001cba0	bl	0x1000118ec
000000010001cba4	mov	x0, x25
000000010001cba8	bl	0x1000102e4
000000010001cbac	mov	w23, #0x0
000000010001cbb0	ldrh	w8, [x25, #0xbc]
000000010001cbb4	and	w8, w8, #0xfffe
000000010001cbb8	strh	w8, [x25, #0xbc]
000000010001cbbc	cbz	w23, 0x10001cb28
000000010001cbc0	mov	x0, x19
000000010001cbc4	bl	0x100031010 ; symbol stub for: _free
000000010001cbc8	b	0x10001c920
000000010001cbcc	adr	x2, #123110 ; literal pool for: "(no disabled services)"
000000010001cbd0	nop
000000010001cbd4	mov	x0, x20
000000010001cbd8	mov	x1, #0x0
000000010001cbdc	bl	0x10002a42c
000000010001cbe0	b	0x10001c698
000000010001cbe4	nop
000000010001cbe8	nop
000000010001cbec	ldr	x8, #0x27834
000000010001cbf0	str	x8, [sp, #0x48]
000000010001cbf4	add	x8, x19, #0x3a8
000000010001cbf8	str	x8, [sp, #0x40]
000000010001cbfc	add	x1, sp, #0x98
000000010001cc00	mov	x0, x22
000000010001cc04	bl	0x1000293c0
000000010001cc08	mov	x27, x0
000000010001cc0c	ldr	w26, [sp, #0x98]
000000010001cc10	mov	x0, x25
000000010001cc14	bl	0x100031a78 ; symbol stub for: _xpc_dictionary_get_count
000000010001cc18	stp	x24, x0, [sp, #0x20]
000000010001cc1c	stp	x27, x26, [sp, #0x10]
000000010001cc20	adr	x8, #123819 ; literal pool for: "add extension instance"
000000010001cc24	nop
000000010001cc28	ldp	x9, x0, [sp, #0x40]
000000010001cc2c	stp	x9, x8, [sp]
000000010001cc30	adr	x2, #123728 ; literal pool for: "%s: %s: caller = %s.%d, extension path = %s, xpcservice overlay = %zu keys"
000000010001cc34	nop
000000010001cc38	mov	w1, #0x0
000000010001cc3c	b	0x10001abec
000000010001cc40	str	x21, [x23, #0x128]
000000010001cc44	orr	w23, wzr, #0x1
000000010001cc48	ldr	x8, [sp, #0x48]
000000010001cc4c	nop
000000010001cc50	nop
000000010001cc54	ldr	x0, #0x277cc
000000010001cc58	stp	x20, x22, [sp, #0x10]
000000010001cc5c	stp	x8, x23, [sp]
000000010001cc60	adr	x2, #124161 ; literal pool for: "%s: total of %lu extension (%s) instances were found to remove, of which %lu were removed instantly"
000000010001cc64	nop
000000010001cc68	mov	w1, #0x0
000000010001cc6c	bl	0x1000270c8
000000010001cc70	mov	x0, x21
000000010001cc74	bl	0x100030d88 ; symbol stub for: _dispatch_group_leave
000000010001cc78	b	0x10001c6b8
000000010001cc7c	mov	x0, x22
000000010001cc80	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
000000010001cc84	mov	x2, x0
000000010001cc88	adr	x1, #121678 ; literal pool for: "enabled"
000000010001cc8c	nop
000000010001cc90	mov	x0, x21
000000010001cc94	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001cc98	b	0x10001c170
000000010001cc9c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010001cca0	adr	x0, #122454 ; literal pool for: "failed to stop active service"
000000010001cca4	nop
000000010001cca8	bl	0x100028f84
000000010001ccac	adr	x0, #122295 ; literal pool for: "inconsistency between domain and service semi-active state during obliterate"
000000010001ccb0	nop
000000010001ccb4	bl	0x100028f84
000000010001ccb8	mov	x0, #0x0
000000010001ccbc	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001ccc0	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001ccc4	brk	#0x1
000000010001ccc8	mov	x0, #0x0
000000010001cccc	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001ccd0	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001ccd4	brk	#0x1
000000010001ccd8	sxtw	x0, w0
000000010001ccdc	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001cce0	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001cce4	brk	#0x1
000000010001cce8	.long	0xffffe248
000000010001ccec	.long	0xffffe344
000000010001ccf0	.long	0xffffe070
000000010001ccf4	.long	0xffffe11c
000000010001ccf8	.long	0xffffdf7c
000000010001ccfc	.long	0xffffe3ec
000000010001cd00	.long	0xffffe4e8
000000010001cd04	.long	0xffffe1a8
000000010001cd08	.long	0xffffe5c8
000000010001cd0c	.long	0xffffdff0
000000010001cd10	.long	0xffffda00
000000010001cd14	.long	0xffffe3a4
000000010001cd18	.long	0xffffdf38
000000010001cd1c	.long	0xffffe0ec
000000010001cd20	.long	0xffffddd4
000000010001cd24	.long	0xffffe374
000000010001cd28	.long	0xffffe4b8
000000010001cd2c	.long	0xffffd9f0
000000010001cd30	.long	0xffffd9f0
000000010001cd34	.long	0xffffe798
000000010001cd38	.long	0xffffdb4c
000000010001cd3c	.long	0xffffe650
000000010001cd40	.long	0xffffda00
000000010001cd44	.long	0xffffd9f0
000000010001cd48	.long	0xffffd9f0
000000010001cd4c	.long	0xffffe700
000000010001cd50	.long	0xffffda00
000000010001cd54	.long	0xffffd9f0
000000010001cd58	.long	0xffffe4fc
000000010001cd5c	.long	0xffffe1d8
000000010001cd60	.long	0xffffe52c
000000010001cd64	.long	0xffffde04
000000010001cd68	.long	0xffffdb7c
000000010001cd6c	.long	0xffffd9f0
000000010001cd70	.long	0xffffda48
000000010001cd74	.long	0xffffdaac
000000010001cd78	.long	0xffffd9f0
000000010001cd7c	.long	0xffffda08
000000010001cd80	.long	0xffffe718
000000010001cd84	sub	sp, sp, #0x60
000000010001cd88	stp	x26, x25, [sp, #0x10]
000000010001cd8c	stp	x24, x23, [sp, #0x20]
000000010001cd90	stp	x22, x21, [sp, #0x30]
000000010001cd94	stp	x20, x19, [sp, #0x40]
000000010001cd98	stp	x29, x30, [sp, #0x50]
000000010001cd9c	add	x29, sp, #0x50
000000010001cda0	mov	x19, x3
000000010001cda4	mov	x20, x2
000000010001cda8	mov	x23, x1
000000010001cdac	str	wzr, [sp, #0x8]
000000010001cdb0	add	x1, sp, #0x8
000000010001cdb4	mov	x0, x20
000000010001cdb8	bl	0x10001d980
000000010001cdbc	mov	x21, x0
000000010001cdc0	cbz	x21, 0x10001cdd8
000000010001cdc4	ldrb	w8, [x21, #0x3a0]
000000010001cdc8	tst	w8, #0x3
000000010001cdcc	b.eq	0x10001cde0
000000010001cdd0	orr	w23, wzr, #0x7c
000000010001cdd4	b	0x10001d134
000000010001cdd8	ldr	w23, [sp, #0x8]
000000010001cddc	b	0x10001d134
000000010001cde0	ldr	x8, [x21, #0x60]
000000010001cde4	adr	x9, #156724
000000010001cde8	nop
000000010001cdec	cmp	x8, x9
000000010001cdf0	adr	x9, #156568
000000010001cdf4	nop
000000010001cdf8	ccmp	x8, x9, #0x4, ne
000000010001cdfc	b.ne	0x10001ce08
000000010001ce00	mov	w23, #0x2d
000000010001ce04	b	0x10001d134
000000010001ce08	ldrh	w8, [x21, #0xa4]
000000010001ce0c	cbz	w8, 0x10001ce2c
000000010001ce10	ldr	w1, [x21, #0x78]
000000010001ce14	mov	w3, #0x0
000000010001ce18	mov	x0, x21
000000010001ce1c	mov	x2, x20
000000010001ce20	bl	0x10001f2c4
000000010001ce24	mov	w23, #0x0
000000010001ce28	b	0x10001d134
000000010001ce2c	bl	0x10002d3b4
000000010001ce30	mov	x22, x0
000000010001ce34	sub	w8, w23, #0xc8
000000010001ce38	cmp	w8, #0xb
000000010001ce3c	b.hi	0x10001d018
000000010001ce40	adr	x9, #904
000000010001ce44	nop
000000010001ce48	ldrsw	x8, [x9, x8, lsl #2]
000000010001ce4c	add	x8, x8, x9
000000010001ce50	br	x8
000000010001ce54	orr	w23, wzr, #0x7e
000000010001ce58	b	0x10001d130
000000010001ce5c	mov	x0, x20
000000010001ce60	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001ce64	cbz	w0, 0x10001d124
000000010001ce68	nop
000000010001ce6c	ldr	x8, #0x26e8c
000000010001ce70	cmp	x8, x21
000000010001ce74	b.eq	0x10001ce7c
000000010001ce78	ldr	x21, [x21, #0xc0]
000000010001ce7c	ldr	w21, [x21, #0x78]
000000010001ce80	mov	x0, x20
000000010001ce84	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001ce88	mov	x20, x0
000000010001ce8c	adr	x1, #123893 ; literal pool for: "parent"
000000010001ce90	nop
000000010001ce94	mov	x2, x21
000000010001ce98	b	0x10001d04c
000000010001ce9c	mov	x0, x20
000000010001cea0	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001cea4	cbz	w0, 0x10001d12c
000000010001cea8	adr	x1, #105611 ; literal pool for: "name"
000000010001ceac	nop
000000010001ceb0	mov	x0, x20
000000010001ceb4	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001ceb8	mov	x23, x0
000000010001cebc	cbz	x23, 0x10001d12c
000000010001cec0	adr	x1, #107635 ; literal pool for: "port"
000000010001cec4	nop
000000010001cec8	mov	x0, x20
000000010001cecc	bl	0x100031a18 ; symbol stub for: _xpc_dictionary_copy_mach_send
000000010001ced0	str	w0, [sp, #0xc]
000000010001ced4	add	w8, w0, #0x1
000000010001ced8	cmp	w8, #0x2
000000010001cedc	b.lo	0x10001cff8
000000010001cee0	adr	x1, #119546 ; literal pool for: "flags"
000000010001cee4	nop
000000010001cee8	mov	x0, x20
000000010001ceec	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001cef0	ubfiz	x8, x0, #1, #1
000000010001cef4	bfxil	x8, x0, #6, #1
000000010001cef8	eor	x3, x8, #0x1
000000010001cefc	add	x4, sp, #0xc
000000010001cf00	mov	x0, x21
000000010001cf04	mov	x1, x22
000000010001cf08	mov	x2, x23
000000010001cf0c	bl	0x100023fcc
000000010001cf10	bl	0x100025894
000000010001cf14	mov	x23, x0
000000010001cf18	cbnz	w23, 0x10001cf28
000000010001cf1c	mov	x0, x20
000000010001cf20	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001cf24	str	x0, [x19]
000000010001cf28	ldr	w0, [sp, #0xc]
000000010001cf2c	bl	0x10000888c
000000010001cf30	cbz	w0, 0x10001d130
000000010001cf34	sxtw	x2, w0
000000010001cf38	adr	x0, #-13172
000000010001cf3c	nop
000000010001cf40	mov	x1, x21
000000010001cf44	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001cf48	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001cf4c	b	0x10001d130
000000010001cf50	mov	x0, x20
000000010001cf54	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001cf58	cbz	w0, 0x10001d12c
000000010001cf5c	adr	x1, #105431 ; literal pool for: "name"
000000010001cf60	nop
000000010001cf64	mov	x0, x20
000000010001cf68	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001cf6c	mov	x23, x0
000000010001cf70	cbz	x23, 0x10001d12c
000000010001cf74	adr	x1, #119398 ; literal pool for: "flags"
000000010001cf78	nop
000000010001cf7c	mov	x0, x20
000000010001cf80	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001cf84	str	wzr, [sp, #0xc]
000000010001cf88	ubfiz	x8, x0, #1, #1
000000010001cf8c	bfxil	x8, x0, #6, #1
000000010001cf90	eor	x3, x8, #0x1
000000010001cf94	add	x4, sp, #0xc
000000010001cf98	mov	x0, x21
000000010001cf9c	mov	x1, x22
000000010001cfa0	mov	x2, x23
000000010001cfa4	bl	0x100023fcc
000000010001cfa8	bl	0x100025894
000000010001cfac	mov	x23, x0
000000010001cfb0	cbnz	w23, 0x10001d130
000000010001cfb4	mov	x0, x20
000000010001cfb8	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001cfbc	mov	x20, x0
000000010001cfc0	ldr	w2, [sp, #0xc]
000000010001cfc4	adr	x1, #107375 ; literal pool for: "port"
000000010001cfc8	nop
000000010001cfcc	bl	0x100031af0 ; symbol stub for: _xpc_dictionary_set_mach_recv
000000010001cfd0	b	0x10001d058
000000010001cfd4	mov	x0, x20
000000010001cfd8	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001cfdc	cbz	w0, 0x10001d12c
000000010001cfe0	bl	0x10002d3d8
000000010001cfe4	ldr	w0, [x22, #0x14]
000000010001cfe8	bl	0x100015490
000000010001cfec	cbz	x0, 0x10001d060
000000010001cff0	bl	0x100016458
000000010001cff4	tbz	w0, #0x0, 0x10001d060
000000010001cff8	mov	w23, #0x44e
000000010001cffc	b	0x10001d130
000000010001d000	mov	x0, x20
000000010001d004	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001d008	cbz	w0, 0x10001d124
000000010001d00c	bl	0x10002d3d8
000000010001d010	mov	w23, #0x2d
000000010001d014	b	0x10001d130
000000010001d018	mov	w23, #0x21
000000010001d01c	b	0x10001d130
000000010001d020	mov	x0, x20
000000010001d024	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010001d028	cbz	w0, 0x10001d12c
000000010001d02c	mov	x0, x20
000000010001d030	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001d034	mov	x20, x0
000000010001d038	nop
000000010001d03c	ldr	x8, #0x26cbc
000000010001d040	ldr	w2, [x8, #0x78]
000000010001d044	adr	x1, #123470 ; literal pool for: "rootport"
000000010001d048	nop
000000010001d04c	mov	x0, x20
000000010001d050	bl	0x100031afc ; symbol stub for: _xpc_dictionary_set_mach_send
000000010001d054	mov	w23, #0x0
000000010001d058	str	x20, [x19]
000000010001d05c	b	0x10001d130
000000010001d060	adr	x1, #106954 ; literal pool for: "type"
000000010001d064	nop
000000010001d068	mov	x0, x20
000000010001d06c	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001d070	cmp	x0, #0x7
000000010001d074	b.eq	0x10001d0c0
000000010001d078	ldp	x8, x3, [x21, #0x60]
000000010001d07c	ldr	x8, [x8, #0x68]
000000010001d080	mov	w1, #0x5
000000010001d084	mov	x0, x21
000000010001d088	mov	x2, #0x0
000000010001d08c	mov	x4, x22
000000010001d090	mov	x5, #0x0
000000010001d094	mov	x6, #0x0
000000010001d098	blr	x8
000000010001d09c	mov	x23, x0
000000010001d0a0	cbz	w23, 0x10001d0c0
000000010001d0a4	adr	x3, #119078 ; literal pool for: "endpoint lookup"
000000010001d0a8	nop
000000010001d0ac	mov	x2, x23
000000010001d0b0	mov	x0, x21
000000010001d0b4	mov	x1, x22
000000010001d0b8	bl	0x10001dc6c
000000010001d0bc	b	0x10001d130
000000010001d0c0	adr	x1, #105075 ; literal pool for: "name"
000000010001d0c4	nop
000000010001d0c8	mov	x0, x20
000000010001d0cc	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001d0d0	mov	x23, x0
000000010001d0d4	cbz	x23, 0x10001d12c
000000010001d0d8	adr	x1, #123312 ; literal pool for: "targetpid"
000000010001d0dc	nop
000000010001d0e0	mov	x0, x20
000000010001d0e4	bl	0x100031a90 ; symbol stub for: _xpc_dictionary_get_int64
000000010001d0e8	mov	x24, x0
000000010001d0ec	tbnz	w24, #0x1f, 0x10001d124
000000010001d0f0	adr	x1, #119038 ; literal pool for: "instance"
000000010001d0f4	nop
000000010001d0f8	mov	x0, x20
000000010001d0fc	bl	0x100031ab4 ; symbol stub for: _xpc_dictionary_get_uuid
000000010001d100	mov	x25, x0
000000010001d104	adr	x1, #118998 ; literal pool for: "flags"
000000010001d108	nop
000000010001d10c	mov	x0, x20
000000010001d110	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001d114	lsr	x8, x0, #3
000000010001d118	tbnz	w8, #0x2, 0x10001d154
000000010001d11c	cbnz	x25, 0x10001d158
000000010001d120	tbz	w0, #0x8, 0x10001d158
000000010001d124	mov	w23, #0x16
000000010001d128	b	0x10001d130
000000010001d12c	mov	w23, #-0x130
000000010001d130	str	w23, [sp, #0x8]
000000010001d134	mov	x0, x23
000000010001d138	ldp	x29, x30, [sp, #0x50]
000000010001d13c	ldp	x20, x19, [sp, #0x40]
000000010001d140	ldp	x22, x21, [sp, #0x30]
000000010001d144	ldp	x24, x23, [sp, #0x20]
000000010001d148	ldp	x26, x25, [sp, #0x10]
000000010001d14c	add	sp, sp, #0x60
000000010001d150	ret
000000010001d154	cbz	x25, 0x10001d124
000000010001d158	and	x9, x0, #0x8
000000010001d15c	bfxil	x9, x0, #3, #3
000000010001d160	bfi	x9, x0, #1, #1
000000010001d164	bfxil	x9, x0, #7, #1
000000010001d168	and	x10, x8, #0x20
000000010001d16c	orr	x9, x9, x10
000000010001d170	and	x8, x8, #0x40
000000010001d174	orr	x8, x9, x8
000000010001d178	eor	x3, x8, #0x1
000000010001d17c	str	wzr, [sp, #0xc]
000000010001d180	sxtw	x2, w24
000000010001d184	add	x4, sp, #0xc
000000010001d188	mov	x0, x21
000000010001d18c	mov	x1, x23
000000010001d190	mov	x5, x25
000000010001d194	mov	x6, x22
000000010001d198	bl	0x100023650
000000010001d19c	cbz	w0, 0x10001d1ac
000000010001d1a0	bl	0x100025894
000000010001d1a4	mov	x23, x0
000000010001d1a8	b	0x10001d130
000000010001d1ac	mov	x0, x20
000000010001d1b0	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001d1b4	mov	x20, x0
000000010001d1b8	ldr	w2, [sp, #0xc]
000000010001d1bc	adr	x1, #106871 ; literal pool for: "port"
000000010001d1c0	nop
000000010001d1c4	b	0x10001d04c
000000010001d1c8	.long	0xfffffc8c
000000010001d1cc	.long	0xfffffc8c
000000010001d1d0	.long	0xfffffc8c
000000010001d1d4	.long	0xfffffc94
000000010001d1d8	.long	0xfffffcd4
000000010001d1dc	.long	0xfffffc8c
000000010001d1e0	.long	0xfffffd88
000000010001d1e4	.long	0xfffffe0c
000000010001d1e8	.long	0xfffffe48
000000010001d1ec	.long	0xfffffe38
000000010001d1f0	.long	0xfffffe50
000000010001d1f4	.long	0xfffffe58
000000010001d1f8	sub	sp, sp, #0x70
000000010001d1fc	stp	x24, x23, [sp, #0x30]
000000010001d200	stp	x22, x21, [sp, #0x40]
000000010001d204	stp	x20, x19, [sp, #0x50]
000000010001d208	stp	x29, x30, [sp, #0x60]
000000010001d20c	add	x29, sp, #0x60
000000010001d210	mov	x20, x3
000000010001d214	mov	x21, x2
000000010001d218	mov	x23, x1
000000010001d21c	str	wzr, [sp, #0xc]
000000010001d220	add	x1, sp, #0xc
000000010001d224	mov	x0, x21
000000010001d228	bl	0x10001d980
000000010001d22c	mov	x19, x0
000000010001d230	cbz	x19, 0x10001d248
000000010001d234	ldrb	w8, [x19, #0x3a0]
000000010001d238	tst	w8, #0x3
000000010001d23c	b.eq	0x10001d250
000000010001d240	orr	w0, wzr, #0x7c
000000010001d244	b	0x10001d4c8
000000010001d248	ldr	w0, [sp, #0xc]
000000010001d24c	b	0x10001d4c8
000000010001d250	nop
000000010001d254	ldr	x8, #0x26aa4
000000010001d258	cmp	x19, x8
000000010001d25c	b.eq	0x10001d288
000000010001d260	ldr	x8, [x19, #0x60]
000000010001d264	ldrb	w8, [x8, #0x88]
000000010001d268	tbnz	w8, #0x1, 0x10001d288
000000010001d26c	adr	x2, #122927 ; literal pool for: "The launch_msg(3) API may only be used on the system or user domains."
000000010001d270	nop
000000010001d274	orr	w1, wzr, #0x3
000000010001d278	mov	x0, x19
000000010001d27c	bl	0x100019bfc
000000010001d280	mov	w0, #0x7d
000000010001d284	b	0x10001d4c8
000000010001d288	adr	x1, #122969 ; literal pool for: "justdoit"
000000010001d28c	nop
000000010001d290	mov	x0, x21
000000010001d294	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010001d298	cbz	w0, 0x10001d2a8
000000010001d29c	ldrh	w8, [x19, #0x3a0]
000000010001d2a0	orr	w8, w8, #0x200
000000010001d2a4	strh	w8, [x19, #0x3a0]
000000010001d2a8	bl	0x10002d3b4
000000010001d2ac	mov	x22, x0
000000010001d2b0	cmp	w23, #0x65
000000010001d2b4	b.eq	0x10001d314
000000010001d2b8	cmp	w23, #0x64
000000010001d2bc	b.ne	0x10001d388
000000010001d2c0	adr	x1, #122922 ; literal pool for: "request"
000000010001d2c4	nop
000000010001d2c8	mov	x0, x21
000000010001d2cc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001d2d0	mov	x23, x0
000000010001d2d4	cbz	x23, 0x10001d30c
000000010001d2d8	str	xzr, [sp, #0x28]
000000010001d2dc	mov	x0, x23
000000010001d2e0	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001d2e4	nop
000000010001d2e8	ldr	x8, #0x22df8 ; literal pool symbol address: __xpc_type_string
000000010001d2ec	cmp	x0, x8
000000010001d2f0	b.eq	0x10001d398
000000010001d2f4	mov	x0, x23
000000010001d2f8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001d2fc	nop
000000010001d300	ldr	x8, #0x22dc0 ; literal pool symbol address: __xpc_type_dictionary
000000010001d304	cmp	x0, x8
000000010001d308	b.eq	0x10001d3d8
000000010001d30c	mov	w0, #0x16
000000010001d310	b	0x10001d4b8
000000010001d314	str	x19, [sp, #0x10]
000000010001d318	ldr	w1, [x22, #0x14]
000000010001d31c	add	x0, sp, #0x10
000000010001d320	mov	w2, #0x0
000000010001d324	bl	0x100023d80
000000010001d328	mov	x23, x0
000000010001d32c	cbz	x23, 0x10001d390
000000010001d330	mov	x0, x23
000000010001d334	bl	0x100015efc
000000010001d338	mov	x22, x0
000000010001d33c	cbz	x22, 0x10001d4b8
000000010001d340	mov	w3, #0x0
000000010001d344	mov	x0, x19
000000010001d348	mov	x1, x23
000000010001d34c	mov	x2, x22
000000010001d350	bl	0x100026684
000000010001d354	mov	x0, x21
000000010001d358	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001d35c	mov	x21, x0
000000010001d360	adr	x1, #122770 ; literal pool for: "response"
000000010001d364	nop
000000010001d368	mov	x0, x21
000000010001d36c	mov	x2, x22
000000010001d370	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010001d374	mov	x0, x22
000000010001d378	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001d37c	mov	w0, #0x0
000000010001d380	str	x21, [x20]
000000010001d384	b	0x10001d4b8
000000010001d388	mov	w0, #0x21
000000010001d38c	b	0x10001d4b8
000000010001d390	mov	w0, #0x71
000000010001d394	b	0x10001d4b8
000000010001d398	mov	x0, x23
000000010001d39c	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010001d3a0	mov	x2, x0
000000010001d3a4	add	x4, sp, #0x28
000000010001d3a8	mov	x0, x19
000000010001d3ac	mov	x1, x22
000000010001d3b0	mov	x3, #0x0
000000010001d3b4	bl	0x1000258f0
000000010001d3b8	cmp	w0, #0x24
000000010001d3bc	b.eq	0x10001d43c
000000010001d3c0	cbnz	w0, 0x10001d4b8
000000010001d3c4	mov	x0, x21
000000010001d3c8	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001d3cc	mov	x21, x0
000000010001d3d0	ldr	x22, [sp, #0x28]
000000010001d3d4	b	0x10001d360
000000010001d3d8	stp	x19, x22, [sp, #0x10]
000000010001d3dc	str	xzr, [sp, #0x20]
000000010001d3e0	adr	x2, #36260
000000010001d3e4	nop
000000010001d3e8	add	x1, sp, #0x10
000000010001d3ec	mov	x0, x23
000000010001d3f0	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010001d3f4	ldr	x22, [x19, #0x388]
000000010001d3f8	cbz	x22, 0x10001d474
000000010001d3fc	ldr	x0, [sp, #0x20]
000000010001d400	cbz	x0, 0x10001d40c
000000010001d404	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001d408	ldr	x22, [x19, #0x388]
000000010001d40c	str	xzr, [x19, #0x388]
000000010001d410	mov	x0, x21
000000010001d414	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001d418	mov	x20, x0
000000010001d41c	adr	x1, #122582 ; literal pool for: "response"
000000010001d420	nop
000000010001d424	mov	x2, #0x0
000000010001d428	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001d42c	ldr	x0, [x22, #0xf8]
000000010001d430	cbnz	x0, 0x10001d4e8
000000010001d434	str	x20, [x22, #0xf8]
000000010001d438	b	0x10001d4b4
000000010001d43c	ldr	x22, [x19, #0x388]
000000010001d440	cbz	x22, 0x10001d4e0
000000010001d444	str	xzr, [x19, #0x388]
000000010001d448	mov	x0, x21
000000010001d44c	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001d450	mov	x20, x0
000000010001d454	adr	x1, #122526 ; literal pool for: "response"
000000010001d458	nop
000000010001d45c	mov	x2, #0x0
000000010001d460	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001d464	ldr	x0, [x22, #0xf8]
000000010001d468	cbnz	x0, 0x10001d4f4
000000010001d46c	str	x20, [x22, #0xf8]
000000010001d470	b	0x10001d4b8
000000010001d474	mov	x0, x21
000000010001d478	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010001d47c	mov	x21, x0
000000010001d480	ldr	x2, [sp, #0x20]
000000010001d484	cbnz	x2, 0x10001d498
000000010001d488	mov	x0, #0x0
000000010001d48c	bl	0x100031bbc ; symbol stub for: _xpc_uint64_create
000000010001d490	mov	x2, x0
000000010001d494	str	x2, [sp, #0x20]
000000010001d498	adr	x1, #122458 ; literal pool for: "response"
000000010001d49c	nop
000000010001d4a0	mov	x0, x21
000000010001d4a4	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010001d4a8	ldr	x0, [sp, #0x20]
000000010001d4ac	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001d4b0	str	x21, [x20]
000000010001d4b4	mov	w0, #0x0
000000010001d4b8	str	w0, [sp, #0xc]
000000010001d4bc	ldrh	w8, [x19, #0x3a0]
000000010001d4c0	and	w8, w8, #0xfffffdff
000000010001d4c4	strh	w8, [x19, #0x3a0]
000000010001d4c8	ldp	x29, x30, [sp, #0x60]
000000010001d4cc	ldp	x20, x19, [sp, #0x50]
000000010001d4d0	ldp	x22, x21, [sp, #0x40]
000000010001d4d4	ldp	x24, x23, [sp, #0x30]
000000010001d4d8	add	sp, sp, #0x70
000000010001d4dc	ret
000000010001d4e0	mov	w0, #0x24
000000010001d4e4	b	0x10001d4b8
000000010001d4e8	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001d4ec	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001d4f0	brk	#0x1
000000010001d4f4	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001d4f8	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001d4fc	brk	#0x1
000000010001d500	sub	sp, sp, #0x30
000000010001d504	stp	x20, x19, [sp, #0x10]
000000010001d508	stp	x29, x30, [sp, #0x20]
000000010001d50c	add	x29, sp, #0x20
000000010001d510	adr	x19, #159560
000000010001d514	nop
000000010001d518	ldr	x8, [x19]
000000010001d51c	cbz	x8, 0x10001d610
000000010001d520	bl	0x100031220 ; symbol stub for: _mach_host_self
000000010001d524	add	x1, sp, #0xc
000000010001d528	bl	0x100031148 ; symbol stub for: _host_get_multiuser_config_flags
000000010001d52c	ldr	w8, [sp, #0xc]
000000010001d530	and	w8, w8, #0x7fffffff
000000010001d534	cmp	w0, #0x0
000000010001d538	csinv	w0, w8, wzr, eq
000000010001d53c	cbz	w0, 0x10001d564
000000010001d540	bl	0x10001d620
000000010001d544	mov	x8, x0
000000010001d548	nop
000000010001d54c	ldr	x0, #0x267ac
000000010001d550	str	w8, [x0, #0x34]
000000010001d554	ldrh	w8, [x0, #0x3a0]
000000010001d558	orr	w8, w8, #0x1000
000000010001d55c	strh	w8, [x0, #0x3a0]
000000010001d560	b	0x10001d56c
000000010001d564	nop
000000010001d568	ldr	x0, #0x26790
000000010001d56c	ldr	x1, [x19]
000000010001d570	bl	0x10001d6e4
000000010001d574	bl	0x100030524
000000010001d578	adrp	x20, 38 ; 0x100043000
000000010001d57c	ldr	x8, [x20, #0xcf8]
000000010001d580	str	x0, [x8, #0x378]
000000010001d584	orr	w0, wzr, #0xf
000000010001d588	orr	w1, wzr, #0x1
000000010001d58c	bl	0x1000316ac ; symbol stub for: _signal
000000010001d590	cmn	x0, #0x1
000000010001d594	b.ne	0x10001d5b8
000000010001d598	ldr	x19, [x20, #0xcf8]
000000010001d59c	bl	0x100030adc ; symbol stub for: ___error
000000010001d5a0	ldrsw	x2, [x0]
000000010001d5a4	adr	x0, #-14816
000000010001d5a8	nop
000000010001d5ac	mov	x1, x19
000000010001d5b0	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001d5b4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001d5b8	bl	0x10000d8e0
000000010001d5bc	mov	x3, x0
000000010001d5c0	nop
000000010001d5c4	ldr	x0, #0x22a9c ; literal pool symbol address: __dispatch_source_type_signal
000000010001d5c8	orr	w1, wzr, #0xf
000000010001d5cc	mov	x2, #0x0
000000010001d5d0	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
000000010001d5d4	adrp	x19, 38 ; 0x100043000
000000010001d5d8	str	x0, [x19, #0xd10]
000000010001d5dc	ldr	x1, [x20, #0xcf8]
000000010001d5e0	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010001d5e4	ldr	x0, [x19, #0xd10]
000000010001d5e8	adr	x1, #444
000000010001d5ec	nop
000000010001d5f0	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
000000010001d5f4	ldr	x0, [x19, #0xd10]
000000010001d5f8	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010001d5fc	bl	0x100031220 ; symbol stub for: _mach_host_self
000000010001d600	nop
000000010001d604	nop
000000010001d608	ldr	w1, 0x100044430
000000010001d60c	bl	0x10002af74
000000010001d610	ldp	x29, x30, [sp, #0x20]
000000010001d614	ldp	x20, x19, [sp, #0x10]
000000010001d618	add	sp, sp, #0x30
000000010001d61c	ret
000000010001d620	sub	sp, sp, #0x1b0
000000010001d624	stp	x22, x21, [sp, #0x180]
000000010001d628	stp	x20, x19, [sp, #0x190]
000000010001d62c	stp	x29, x30, [sp, #0x1a0]
000000010001d630	add	x29, sp, #0x1a0
000000010001d634	mov	x19, x0
000000010001d638	add	x20, sp, #0x10
000000010001d63c	nop
000000010001d640	ldr	x8, #0x229d8 ; literal pool symbol address: ___stack_chk_guard
000000010001d644	ldr	x8, [x8]
000000010001d648	str	x8, [x20]
000000010001d64c	add	x21, sp, #0x20
000000010001d650	add	x0, x21, #0x10
000000010001d654	mov	w1, #0x148
000000010001d658	bl	0x100030c2c ; symbol stub for: _bzero
000000010001d65c	orr	w8, wzr, #0x1
000000010001d660	stp	w8, w19, [sp, #0x20]
000000010001d664	orr	w8, wzr, #0x2
000000010001d668	stp	w8, w19, [sp, #0x28]
000000010001d66c	add	x0, x21, #0x58
000000010001d670	adr	x4, #123168 ; literal pool for: "user.%d"
000000010001d674	nop
000000010001d678	str	x19, [sp]
000000010001d67c	orr	w1, wzr, #0xff
000000010001d680	orr	w3, wzr, #0x100
000000010001d684	mov	w2, #0x0
000000010001d688	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010001d68c	add	x0, sp, #0x20
000000010001d690	add	x1, sp, #0x1c
000000010001d694	bl	0x1000311c0 ; symbol stub for: _kpersona_alloc
000000010001d698	cmn	w0, #0x1
000000010001d69c	b.ne	0x10001d6b0
000000010001d6a0	bl	0x100030adc ; symbol stub for: ___error
000000010001d6a4	ldrsw	x0, [x0]
000000010001d6a8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010001d6ac	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001d6b0	ldr	w0, [sp, #0x1c]
000000010001d6b4	ldr	x8, [x20]
000000010001d6b8	nop
000000010001d6bc	ldr	x9, #0x2295c ; literal pool symbol address: ___stack_chk_guard
000000010001d6c0	ldr	x9, [x9]
000000010001d6c4	cmp	x9, x8
000000010001d6c8	b.ne	0x10001d6e0
000000010001d6cc	ldp	x29, x30, [sp, #0x1a0]
000000010001d6d0	ldp	x20, x19, [sp, #0x190]
000000010001d6d4	ldp	x22, x21, [sp, #0x180]
000000010001d6d8	add	sp, sp, #0x1b0
000000010001d6dc	ret
000000010001d6e0	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010001d6e4	stp	x22, x21, [sp, #-0x30]!
000000010001d6e8	stp	x20, x19, [sp, #0x10]
000000010001d6ec	stp	x29, x30, [sp, #0x20]
000000010001d6f0	add	x29, sp, #0x20
000000010001d6f4	mov	x20, x1
000000010001d6f8	mov	x19, x0
000000010001d6fc	mov	x0, x20
000000010001d700	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001d704	nop
000000010001d708	ldr	x8, #0x22990 ; literal pool symbol address: __xpc_type_array
000000010001d70c	cmp	x0, x8
000000010001d710	b.ne	0x10001d78c
000000010001d714	ldr	x8, [x19, #0xb8]
000000010001d718	cbnz	x8, 0x10001d798
000000010001d71c	ldr	x8, [x19, #0xd8]
000000010001d720	cbz	x8, 0x10001d72c
000000010001d724	orr	w22, wzr, #0x10000
000000010001d728	b	0x10001d73c
000000010001d72c	bl	0x100031214 ; symbol stub for: _mach_absolute_time
000000010001d730	str	x0, [x19, #0xd8]
000000010001d734	mov	w22, #0x2000
000000010001d738	movk	w22, #0x1, lsl #16
000000010001d73c	mov	w0, #0x58
000000010001d740	bl	0x10000d464
000000010001d744	mov	x21, x0
000000010001d748	str	x19, [x21]
000000010001d74c	str	wzr, [x21, #0x8]
000000010001d750	mov	x0, x20
000000010001d754	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010001d758	stp	x0, xzr, [x21, #0x18]
000000010001d75c	adr	x8, #159060
000000010001d760	nop
000000010001d764	ldp	q0, q1, [x8]
000000010001d768	stur	q1, [x21, #0x48]
000000010001d76c	stur	q0, [x21, #0x38]
000000010001d770	str	x22, [x21, #0x30]
000000010001d774	str	x21, [x19, #0xb8]
000000010001d778	mov	x0, x19
000000010001d77c	ldp	x29, x30, [sp, #0x20]
000000010001d780	ldp	x20, x19, [sp, #0x10]
000000010001d784	ldp	x22, x21, [sp], #0x30
000000010001d788	b	0x100022b44
000000010001d78c	adr	x0, #118587 ; literal pool for: "Given object not of required type."
000000010001d790	nop
000000010001d794	bl	0x1000298d0
000000010001d798	adr	x0, #122880 ; literal pool for: "sequential read operation already in flight"
000000010001d79c	nop
000000010001d7a0	bl	0x100028f84
000000010001d7a4	sub	sp, sp, #0x30
000000010001d7a8	stp	x20, x19, [sp, #0x10]
000000010001d7ac	stp	x29, x30, [sp, #0x20]
000000010001d7b0	add	x29, sp, #0x20
000000010001d7b4	mov	x19, x0
000000010001d7b8	nop
000000010001d7bc	nop
000000010001d7c0	ldr	x0, #0x26c60
000000010001d7c4	add	x8, x19, #0x3a8
000000010001d7c8	str	x8, [sp]
000000010001d7cc	adr	x2, #122872 ; literal pool for: "%s: domain SIGTERM event"
000000010001d7d0	nop
000000010001d7d4	mov	w1, #0x0
000000010001d7d8	bl	0x1000270c8
000000010001d7dc	mov	x0, x19
000000010001d7e0	ldp	x29, x30, [sp, #0x20]
000000010001d7e4	ldp	x20, x19, [sp, #0x10]
000000010001d7e8	add	sp, sp, #0x30
000000010001d7ec	b	0x100022e20
000000010001d7f0	nop
000000010001d7f4	ldr	x8, #0x26504
000000010001d7f8	mov	x1, x0
000000010001d7fc	mov	x0, x8
000000010001d800	b	0x10001d804
000000010001d804	stp	x22, x21, [sp, #-0x30]!
000000010001d808	stp	x20, x19, [sp, #0x10]
000000010001d80c	stp	x29, x30, [sp, #0x20]
000000010001d810	add	x29, sp, #0x20
000000010001d814	mov	x19, x1
000000010001d818	mov	x21, x0
000000010001d81c	mov	x22, #0x0
000000010001d820	add	x8, x21, x22, lsl #3
000000010001d824	ldr	x20, [x8, #0x280]
000000010001d828	cbz	x20, 0x10001d84c
000000010001d82c	ldr	x8, [x20, #0x40]
000000010001d830	cmp	x8, #0x0
000000010001d834	csel	x0, x20, x8, eq
000000010001d838	bl	0x10002f2ec
000000010001d83c	cmp	w0, w19
000000010001d840	b.eq	0x10001d884
000000010001d844	ldr	x20, [x20, #0x18]
000000010001d848	cbnz	x20, 0x10001d82c
000000010001d84c	add	x22, x22, #0x1
000000010001d850	cmp	x22, #0x1f
000000010001d854	b.lo	0x10001d820
000000010001d858	ldr	x21, [x21, #0x118]
000000010001d85c	cbz	x21, 0x10001d880
000000010001d860	mov	x1, x19
000000010001d864	mov	x0, x21
000000010001d868	bl	0x10001d804
000000010001d86c	mov	x20, x0
000000010001d870	cbnz	x20, 0x10001d884
000000010001d874	ldr	x21, [x21, #0x8]
000000010001d878	cbnz	x21, 0x10001d860
000000010001d87c	b	0x10001d884
000000010001d880	mov	x20, #0x0
000000010001d884	mov	x0, x20
000000010001d888	ldp	x29, x30, [sp, #0x20]
000000010001d88c	ldp	x20, x19, [sp, #0x10]
000000010001d890	ldp	x22, x21, [sp], #0x30
000000010001d894	ret
000000010001d898	stp	x29, x30, [sp, #-0x10]!
000000010001d89c	mov	x29, sp
000000010001d8a0	ldr	w8, [x0, #0x94]
000000010001d8a4	add	w9, w8, #0x1
000000010001d8a8	str	w9, [x0, #0x94]
000000010001d8ac	tbnz	w8, #0x1f, 0x10001d8cc
000000010001d8b0	cbz	w8, 0x10001d8bc
000000010001d8b4	ldp	x29, x30, [sp], #0x10
000000010001d8b8	b	0x10000e820
000000010001d8bc	ldrb	w8, [x0, #0x3a0]
000000010001d8c0	tbnz	w8, #0x5, 0x10001d8d8
000000010001d8c4	ldp	x29, x30, [sp], #0x10
000000010001d8c8	b	0x10000e3f4
000000010001d8cc	adr	x0, #122641 ; literal pool for: "underflow of active count during activate"
000000010001d8d0	nop
000000010001d8d4	bl	0x100028f84
000000010001d8d8	adr	x0, #122671 ; literal pool for: "activation of deactivated domain"
000000010001d8dc	nop
000000010001d8e0	bl	0x100028f84
000000010001d8e4	nop
000000010001d8e8	ldr	x0, #0x26410
000000010001d8ec	ret
000000010001d8f0	sub	sp, sp, #0x30
000000010001d8f4	stp	x20, x19, [sp, #0x10]
000000010001d8f8	stp	x29, x30, [sp, #0x20]
000000010001d8fc	add	x29, sp, #0x20
000000010001d900	mov	x19, x0
000000010001d904	str	x1, [sp, #0x8]
000000010001d908	adr	x8, #153296
000000010001d90c	nop
000000010001d910	cmp	x19, x8
000000010001d914	b.eq	0x10001d968
000000010001d918	add	x0, sp, #0x8
000000010001d91c	orr	w1, wzr, #0x8
000000010001d920	bl	0x10000d840
000000010001d924	mov	x8, #0x8ba3
000000010001d928	movk	x8, #0xba2e, lsl #16
000000010001d92c	movk	x8, #0xa2e8, lsl #32
000000010001d930	movk	x8, #0x2e8b, lsl #48
000000010001d934	umulh	x8, x0, x8
000000010001d938	lsr	x8, x8, #1
000000010001d93c	mov	w9, #0xb
000000010001d940	msub	x8, x8, x9, x0
000000010001d944	ldr	x0, [x19, x8, lsl #3]
000000010001d948	cbz	x0, 0x10001d970
000000010001d94c	ldr	x8, [sp, #0x8]
000000010001d950	ldr	x9, [x0, #0x68]
000000010001d954	cmp	x9, x8
000000010001d958	b.eq	0x10001d970
000000010001d95c	ldr	x0, [x0, #0x18]
000000010001d960	cbnz	x0, 0x10001d950
000000010001d964	b	0x10001d970
000000010001d968	nop
000000010001d96c	ldr	x0, #0x2638c
000000010001d970	ldp	x29, x30, [sp, #0x20]
000000010001d974	ldp	x20, x19, [sp, #0x10]
000000010001d978	add	sp, sp, #0x30
000000010001d97c	ret
000000010001d980	sub	sp, sp, #0xc0
000000010001d984	stp	x24, x23, [sp, #0x80]
000000010001d988	stp	x22, x21, [sp, #0x90]
000000010001d98c	stp	x20, x19, [sp, #0xa0]
000000010001d990	stp	x29, x30, [sp, #0xb0]
000000010001d994	add	x29, sp, #0xb0
000000010001d998	mov	x19, x1
000000010001d99c	mov	x20, x0
000000010001d9a0	nop
000000010001d9a4	ldr	x8, #0x22674 ; literal pool symbol address: ___stack_chk_guard
000000010001d9a8	ldr	x8, [x8]
000000010001d9ac	stur	x8, [x29, #-0x38]
000000010001d9b0	add	x1, sp, #0x18
000000010001d9b4	bl	0x100031a60 ; symbol stub for: _xpc_dictionary_get_audit_token
000000010001d9b8	add	x1, sp, #0x38
000000010001d9bc	mov	x0, x20
000000010001d9c0	bl	0x100031a60 ; symbol stub for: _xpc_dictionary_get_audit_token
000000010001d9c4	adr	x1, #104550 ; literal pool for: "type"
000000010001d9c8	nop
000000010001d9cc	mov	x0, x20
000000010001d9d0	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010001d9d4	mov	x21, x0
000000010001d9d8	sub	x8, x21, #0x1
000000010001d9dc	cmp	x8, #0x6
000000010001d9e0	b.hi	0x10001da14
000000010001d9e4	adr	x1, #101133 ; literal pool for: "handle"
000000010001d9e8	nop
000000010001d9ec	mov	x0, x20
000000010001d9f0	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001d9f4	mov	x20, x0
000000010001d9f8	cbz	x20, 0x10001da14
000000010001d9fc	mov	x0, x20
000000010001da00	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001da04	nop
000000010001da08	ldr	x8, #0x226e0 ; literal pool symbol address: __xpc_type_uint64
000000010001da0c	cmp	x0, x8
000000010001da10	b.eq	0x10001da54
000000010001da14	mov	w8, #0x16
000000010001da18	mov	x22, #0x0
000000010001da1c	str	w8, [x19]
000000010001da20	ldur	x8, [x29, #-0x38]
000000010001da24	nop
000000010001da28	ldr	x9, #0x225f0 ; literal pool symbol address: ___stack_chk_guard
000000010001da2c	ldr	x9, [x9]
000000010001da30	cmp	x9, x8
000000010001da34	b.ne	0x10001dbdc
000000010001da38	mov	x0, x22
000000010001da3c	ldp	x29, x30, [sp, #0xb0]
000000010001da40	ldp	x20, x19, [sp, #0xa0]
000000010001da44	ldp	x22, x21, [sp, #0x90]
000000010001da48	ldp	x24, x23, [sp, #0x80]
000000010001da4c	add	sp, sp, #0xc0
000000010001da50	ret
000000010001da54	cmp	x21, #0x3
000000010001da58	b.ne	0x10001da64
000000010001da5c	mov	w8, #0x2d
000000010001da60	b	0x10001da18
000000010001da64	cmp	x21, #0x5
000000010001da68	b.ne	0x10001da78
000000010001da6c	mov	x0, x20
000000010001da70	bl	0x100031bc8 ; symbol stub for: _xpc_uint64_get_value
000000010001da74	cbz	x0, 0x10001db30
000000010001da78	mov	x0, x20
000000010001da7c	bl	0x100031bc8 ; symbol stub for: _xpc_uint64_get_value
000000010001da80	mov	x20, x0
000000010001da84	cmp	x21, #0x7
000000010001da88	b.eq	0x10001daa8
000000010001da8c	cmp	x21, #0x6
000000010001da90	b.ne	0x10001dac0
000000010001da94	ldr	w0, [sp, #0x2c]
000000010001da98	bl	0x100015490
000000010001da9c	cbz	x0, 0x10001db64
000000010001daa0	ldr	x22, [x0, #0xe0]
000000010001daa4	b	0x10001da20
000000010001daa8	bl	0x10002d3c0
000000010001daac	nop
000000010001dab0	ldr	x8, #0x26248
000000010001dab4	cmp	x0, #0x0
000000010001dab8	csel	x22, x8, x0, eq
000000010001dabc	b	0x10001da20
000000010001dac0	adr	x8, #148000
000000010001dac4	nop
000000010001dac8	ldr	x23, [x8, x21, lsl #3]
000000010001dacc	cmp	x21, #0x5
000000010001dad0	orr	w8, wzr, #0x80
000000010001dad4	csel	x24, xzr, x8, eq
000000010001dad8	mov	x0, x23
000000010001dadc	mov	x1, x20
000000010001dae0	bl	0x10001d8f0
000000010001dae4	mov	x22, x0
000000010001dae8	add	x3, sp, #0x18
000000010001daec	mov	x0, x23
000000010001daf0	mov	x1, x24
000000010001daf4	mov	x2, x20
000000010001daf8	bl	0x10001dbe0
000000010001dafc	mov	x24, x0
000000010001db00	cbnz	x22, 0x10001db38
000000010001db04	cbz	w24, 0x10001db38
000000010001db08	nop
000000010001db0c	ldr	x0, #0x261ec
000000010001db10	adr	x3, #109895 ; literal pool for: "domain creation"
000000010001db14	nop
000000010001db18	add	x1, sp, #0x18
000000010001db1c	mov	x2, x24
000000010001db20	bl	0x10001dc6c
000000010001db24	mov	x22, #0x0
000000010001db28	str	w24, [x19]
000000010001db2c	b	0x10001da20
000000010001db30	orr	w8, wzr, #0x70
000000010001db34	b	0x10001da18
000000010001db38	cbnz	x22, 0x10001da20
000000010001db3c	cmp	x21, #0x5
000000010001db40	b.ne	0x10001db7c
000000010001db44	ldrsw	x8, [sp, #0x2c]
000000010001db48	cmp	x20, x8
000000010001db4c	b.ne	0x10001dba4
000000010001db50	mov	x0, x20
000000010001db54	bl	0x100015490
000000010001db58	cbz	x0, 0x10001dbb0
000000010001db5c	bl	0x1000162d0
000000010001db60	b	0x10001dbbc
000000010001db64	ldr	w1, [sp, #0x24]
000000010001db68	adr	x0, #152832
000000010001db6c	nop
000000010001db70	bl	0x10001d8f0
000000010001db74	mov	x22, x0
000000010001db78	b	0x10001da20
000000010001db7c	ldr	x8, [x23, #0x80]
000000010001db80	stp	x8, x20, [sp]
000000010001db84	adr	x0, #109795 ; literal pool for: "%s/%lu"
000000010001db88	nop
000000010001db8c	bl	0x10000d72c
000000010001db90	orr	w8, wzr, #0x70
000000010001db94	str	w8, [x19]
000000010001db98	bl	0x100031010 ; symbol stub for: _free
000000010001db9c	mov	x22, #0x0
000000010001dba0	b	0x10001da20
000000010001dba4	adr	x2, #109770 ; literal pool for: "(premature birth)"
000000010001dba8	nop
000000010001dbac	b	0x10001dbc0
000000010001dbb0	add	x0, sp, #0x18
000000010001dbb4	add	x1, sp, #0x38
000000010001dbb8	bl	0x1000293c0
000000010001dbbc	mov	x2, x0
000000010001dbc0	adr	x0, #153176
000000010001dbc4	nop
000000010001dbc8	add	x5, sp, #0x18
000000010001dbcc	mov	w4, #0x0
000000010001dbd0	mov	x1, x20
000000010001dbd4	bl	0x10001a088
000000010001dbd8	b	0x10001db74
000000010001dbdc	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010001dbe0	stp	x22, x21, [sp, #-0x30]!
000000010001dbe4	stp	x20, x19, [sp, #0x10]
000000010001dbe8	stp	x29, x30, [sp, #0x20]
000000010001dbec	add	x29, sp, #0x20
000000010001dbf0	mov	x19, x3
000000010001dbf4	mov	x20, x2
000000010001dbf8	mov	x21, x1
000000010001dbfc	mov	x22, x0
000000010001dc00	nop
000000010001dc04	ldr	x8, #0x260f4
000000010001dc08	ldrb	w8, [x8, #0x3a0]
000000010001dc0c	tbnz	w8, #0x0, 0x10001dc50
000000010001dc10	tbz	w21, #0x7, 0x10001dc20
000000010001dc14	mov	x0, x19
000000010001dc18	bl	0x100026b80
000000010001dc1c	cbz	w0, 0x10001dc58
000000010001dc20	ldr	x7, [x22, #0x68]
000000010001dc24	mov	w1, #0x0
000000010001dc28	mov	x0, #0x0
000000010001dc2c	mov	x2, x21
000000010001dc30	mov	x3, x20
000000010001dc34	mov	x4, x19
000000010001dc38	mov	x5, #0x0
000000010001dc3c	mov	x6, #0x0
000000010001dc40	ldp	x29, x30, [sp, #0x20]
000000010001dc44	ldp	x20, x19, [sp, #0x10]
000000010001dc48	ldp	x22, x21, [sp], #0x30
000000010001dc4c	br	x7
000000010001dc50	orr	w0, wzr, #0x7c
000000010001dc54	b	0x10001dc5c
000000010001dc58	mov	w0, #0x9a
000000010001dc5c	ldp	x29, x30, [sp, #0x20]
000000010001dc60	ldp	x20, x19, [sp, #0x10]
000000010001dc64	ldp	x22, x21, [sp], #0x30
000000010001dc68	ret
000000010001dc6c	sub	sp, sp, #0xf0
000000010001dc70	stp	x26, x25, [sp, #0xa0]
000000010001dc74	stp	x24, x23, [sp, #0xb0]
000000010001dc78	stp	x22, x21, [sp, #0xc0]
000000010001dc7c	stp	x20, x19, [sp, #0xd0]
000000010001dc80	stp	x29, x30, [sp, #0xe0]
000000010001dc84	add	x29, sp, #0xe0
000000010001dc88	mov	x19, x3
000000010001dc8c	mov	x20, x2
000000010001dc90	mov	x21, x1
000000010001dc94	mov	x23, x0
000000010001dc98	nop
000000010001dc9c	ldr	x8, #0x2237c ; literal pool symbol address: ___stack_chk_guard
000000010001dca0	ldr	x8, [x8]
000000010001dca4	stur	x8, [x29, #-0x48]
000000010001dca8	cmp	w20, #0x7c
000000010001dcac	b.eq	0x10001dd6c
000000010001dcb0	cmp	w20, #0x9a
000000010001dcb4	b.ne	0x10001dcc4
000000010001dcb8	mov	w24, #0x3
000000010001dcbc	movk	w24, #0x1, lsl #16
000000010001dcc0	b	0x10001dcc8
000000010001dcc4	orr	w24, wzr, #0x3
000000010001dcc8	add	x1, sp, #0x58
000000010001dccc	mov	x0, x21
000000010001dcd0	bl	0x1000293c0
000000010001dcd4	mov	x22, x0
000000010001dcd8	ldr	w25, [x21, #0x14]
000000010001dcdc	mov	x0, x20
000000010001dce0	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010001dce4	ldp	w8, w9, [x21, #0xc]
000000010001dce8	ldp	w10, w11, [x21, #0x4]
000000010001dcec	ldr	w12, [x21, #0x18]
000000010001dcf0	stp	x11, x12, [sp, #0x40]
000000010001dcf4	stp	x10, x9, [sp, #0x30]
000000010001dcf8	stp	x0, x8, [sp, #0x20]
000000010001dcfc	adr	x2, #103365 ; literal pool for: "Caller not allowed to perform action: %s.%d, action = %s, code = %d: %s, uid = %u, euid = %u, gid = %u, egid = %u, asid = %u"
000000010001dd00	nop
000000010001dd04	stp	x19, x20, [sp, #0x10]
000000010001dd08	stp	x22, x25, [sp]
000000010001dd0c	mov	x1, x24
000000010001dd10	mov	x0, x23
000000010001dd14	bl	0x100019bfc
000000010001dd18	nop
000000010001dd1c	nop
000000010001dd20	ldr	x24, #0x26700
000000010001dd24	add	x23, x23, #0x3a8
000000010001dd28	ldr	w25, [x21, #0x14]
000000010001dd2c	mov	x0, x20
000000010001dd30	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010001dd34	ldp	w8, w9, [x21, #0xc]
000000010001dd38	ldp	w10, w11, [x21, #0x4]
000000010001dd3c	ldr	w12, [x21, #0x18]
000000010001dd40	stp	x11, x12, [sp, #0x48]
000000010001dd44	stp	x10, x9, [sp, #0x38]
000000010001dd48	stp	x0, x8, [sp, #0x28]
000000010001dd4c	stp	x19, x20, [sp, #0x18]
000000010001dd50	adr	x2, #103406 ; literal pool for: "%s: violation: %s.%d, action = %s, code = %d: %s, uid = %u, euid = %u, gid = %u, egid = %u, asid = %u"
000000010001dd54	nop
000000010001dd58	stp	x22, x25, [sp, #0x8]
000000010001dd5c	str	x23, [sp]
000000010001dd60	mov	w1, #0x0
000000010001dd64	mov	x0, x24
000000010001dd68	bl	0x1000270c8
000000010001dd6c	ldur	x8, [x29, #-0x48]
000000010001dd70	nop
000000010001dd74	ldr	x9, #0x222a4 ; literal pool symbol address: ___stack_chk_guard
000000010001dd78	ldr	x9, [x9]
000000010001dd7c	cmp	x9, x8
000000010001dd80	b.ne	0x10001dda0
000000010001dd84	ldp	x29, x30, [sp, #0xe0]
000000010001dd88	ldp	x20, x19, [sp, #0xd0]
000000010001dd8c	ldp	x22, x21, [sp, #0xc0]
000000010001dd90	ldp	x24, x23, [sp, #0xb0]
000000010001dd94	ldp	x26, x25, [sp, #0xa0]
000000010001dd98	add	sp, sp, #0xf0
000000010001dd9c	ret
000000010001dda0	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010001dda4	mov	x8, x1
000000010001dda8	ldrh	w9, [x0, #0xa4]
000000010001ddac	cbz	w9, 0x10001ddd4
000000010001ddb0	stp	x29, x30, [sp, #-0x10]!
000000010001ddb4	mov	x29, sp
000000010001ddb8	ldr	w1, [x0, #0x78]
000000010001ddbc	mov	w3, #0x0
000000010001ddc0	mov	x2, x8
000000010001ddc4	bl	0x10001f2c4
000000010001ddc8	mov	w0, #0x0
000000010001ddcc	ldp	x29, x30, [sp], #0x10
000000010001ddd0	ret
000000010001ddd4	orr	w0, wzr, #0x1
000000010001ddd8	ret
000000010001dddc	ldr	x0, [x0, #0x60]
000000010001dde0	ret
000000010001dde4	ldr	x0, [x0, #0x68]
000000010001dde8	ret
000000010001ddec	sub	sp, sp, #0x40
000000010001ddf0	stp	x22, x21, [sp, #0x10]
000000010001ddf4	stp	x20, x19, [sp, #0x20]
000000010001ddf8	stp	x29, x30, [sp, #0x30]
000000010001ddfc	add	x29, sp, #0x30
000000010001de00	mov	x21, x2
000000010001de04	mov	x19, x1
000000010001de08	mov	x20, x0
000000010001de0c	ldr	x22, [x20, #0x378]
000000010001de10	cbz	x22, 0x10001de3c
000000010001de14	orr	w1, wzr, #0x3c
000000010001de18	mov	x0, x19
000000010001de1c	bl	0x1000316f4 ; symbol stub for: _strchr
000000010001de20	cbz	x0, 0x10001de50
000000010001de24	str	x19, [sp]
000000010001de28	adr	x2, #109144 ; literal pool for: "refusing to persist enabled/disabled state for '%s' as it contains illegal XML character '<'"
000000010001de2c	nop
000000010001de30	orr	w1, wzr, #0x4
000000010001de34	mov	x0, #0x0
000000010001de38	bl	0x100029dbc
000000010001de3c	ldp	x29, x30, [sp, #0x30]
000000010001de40	ldp	x20, x19, [sp, #0x20]
000000010001de44	ldp	x22, x21, [sp, #0x10]
000000010001de48	add	sp, sp, #0x40
000000010001de4c	ret
000000010001de50	mov	x0, x22
000000010001de54	mov	x1, x19
000000010001de58	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001de5c	mov	x22, x0
000000010001de60	cbz	x22, 0x10001de90
000000010001de64	mov	x0, x22
000000010001de68	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001de6c	nop
000000010001de70	ldr	x8, #0x22230 ; literal pool symbol address: __xpc_type_bool
000000010001de74	cmp	x0, x8
000000010001de78	b.ne	0x10001de90
000000010001de7c	mov	x0, x22
000000010001de80	bl	0x100031940 ; symbol stub for: _xpc_bool_get_value
000000010001de84	eor	w8, w0, w21
000000010001de88	cmp	w8, #0x1
000000010001de8c	b.ne	0x10001de3c
000000010001de90	ldr	x0, [x20, #0x378]
000000010001de94	mov	x2, x21
000000010001de98	mov	x1, x19
000000010001de9c	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001dea0	ldr	x0, [x20, #0x378]
000000010001dea4	adr	x1, #109113 ; literal pool for: "_dirty"
000000010001dea8	nop
000000010001deac	orr	w2, wzr, #0x1
000000010001deb0	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
000000010001deb4	ldp	x29, x30, [sp, #0x30]
000000010001deb8	ldp	x20, x19, [sp, #0x20]
000000010001debc	ldp	x22, x21, [sp, #0x10]
000000010001dec0	add	sp, sp, #0x40
000000010001dec4	b	0x100030580
000000010001dec8	stp	x20, x19, [sp, #-0x20]!
000000010001decc	stp	x29, x30, [sp, #0x10]
000000010001ded0	add	x29, sp, #0x10
000000010001ded4	ldr	x0, [x0, #0x378]
000000010001ded8	cbz	x0, 0x10001df34
000000010001dedc	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001dee0	mov	x19, x0
000000010001dee4	cbz	x19, 0x10001df34
000000010001dee8	mov	x0, x19
000000010001deec	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001def0	nop
000000010001def4	ldr	x8, #0x221cc ; literal pool symbol address: __xpc_type_dictionary
000000010001def8	cmp	x0, x8
000000010001defc	b.ne	0x10001df18
000000010001df00	adr	x1, #88487 ; literal pool for: "Disabled"
000000010001df04	nop
000000010001df08	mov	x0, x19
000000010001df0c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001df10	mov	x19, x0
000000010001df14	cbz	x19, 0x10001df34
000000010001df18	mov	x0, x19
000000010001df1c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001df20	nop
000000010001df24	ldr	x8, #0x2217c ; literal pool symbol address: __xpc_type_bool
000000010001df28	cmp	x0, x8
000000010001df2c	csel	x0, x19, xzr, eq
000000010001df30	b	0x10001df38
000000010001df34	mov	x0, #0x0
000000010001df38	ldp	x29, x30, [sp, #0x10]
000000010001df3c	ldp	x20, x19, [sp], #0x20
000000010001df40	ret
000000010001df44	ldr	q0, [x0, #0x100]
000000010001df48	str	q0, [x1, #0x10]
000000010001df4c	ldr	q0, [x0, #0xf0]
000000010001df50	str	q0, [x1]
000000010001df54	ret
000000010001df58	stp	x20, x19, [sp, #-0x20]!
000000010001df5c	stp	x29, x30, [sp, #0x10]
000000010001df60	add	x29, sp, #0x10
000000010001df64	mov	x19, x1
000000010001df68	mov	x8, x0
000000010001df6c	ldr	x0, [x19, #0x118]
000000010001df70	cbnz	x0, 0x10001dfc4
000000010001df74	cbnz	w2, 0x10001df8c
000000010001df78	ldr	x9, [x8, #0x60]
000000010001df7c	adr	x10, #152220
000000010001df80	nop
000000010001df84	cmp	x9, x10
000000010001df88	b.eq	0x10001dfd4
000000010001df8c	mov	w1, #0x0
000000010001df90	mov	x0, x19
000000010001df94	bl	0x10001dfe0
000000010001df98	str	x0, [x19, #0x118]
000000010001df9c	nop
000000010001dfa0	ldr	x8, #0x25d78
000000010001dfa4	str	x8, [x19, #0x58]
000000010001dfa8	cbz	x8, 0x10001dfb4
000000010001dfac	add	x9, x19, #0x58
000000010001dfb0	str	x9, [x8, #0x60]
000000010001dfb4	adr	x8, #154980
000000010001dfb8	nop
000000010001dfbc	str	x19, [x8]
000000010001dfc0	str	x8, [x19, #0x60]
000000010001dfc4	orr	w1, wzr, #0x1
000000010001dfc8	ldp	x29, x30, [sp, #0x10]
000000010001dfcc	ldp	x20, x19, [sp], #0x20
000000010001dfd0	ret
000000010001dfd4	ldr	x0, [x8, #0x390]
000000010001dfd8	orr	w1, wzr, #0x2
000000010001dfdc	b	0x10001dfc8
000000010001dfe0	sub	sp, sp, #0x30
000000010001dfe4	stp	x20, x19, [sp, #0x10]
000000010001dfe8	stp	x29, x30, [sp, #0x20]
000000010001dfec	add	x29, sp, #0x20
000000010001dff0	mov	x20, x1
000000010001dff4	mov	x19, x0
000000010001dff8	cmp	w20, #0x2
000000010001dffc	b.hs	0x10001e078
000000010001e000	str	xzr, [sp, #0x8]
000000010001e004	ubfiz	w8, w20, #4, #4
000000010001e008	ldr	w9, [x19, #0x2c0]
000000010001e00c	sub	w9, w9, #0x100
000000010001e010	ror	w9, w9, #0x8
000000010001e014	cmp	w9, #0x5
000000010001e018	b.hi	0x10001e02c
000000010001e01c	adr	x10, #130836
000000010001e020	nop
000000010001e024	ldr	w9, [x10, w9, sxtw #2]
000000010001e028	b	0x10001e030
000000010001e02c	mov	w9, #0x0
000000010001e030	orr	w1, w9, w8
000000010001e034	add	x0, sp, #0x8
000000010001e038	bl	0x100030c8c ; symbol stub for: _coalition_create
000000010001e03c	cmn	w0, #0x1
000000010001e040	b.eq	0x10001e088
000000010001e044	cmp	w20, #0x1
000000010001e048	b.ne	0x10001e064
000000010001e04c	ldr	x1, [x19, #0x2f8]
000000010001e050	cbz	x1, 0x10001e064
000000010001e054	ldr	x0, [sp, #0x8]
000000010001e058	bl	0x100030ca4 ; symbol stub for: _coalition_info_set_efficiency
000000010001e05c	cmn	w0, #0x1
000000010001e060	b.eq	0x10001e09c
000000010001e064	ldr	x0, [sp, #0x8]
000000010001e068	ldp	x29, x30, [sp, #0x20]
000000010001e06c	ldp	x20, x19, [sp, #0x10]
000000010001e070	add	sp, sp, #0x30
000000010001e074	ret
000000010001e078	mov	x0, #0x0
000000010001e07c	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001e080	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001e084	brk	#0x1
000000010001e088	bl	0x100030adc ; symbol stub for: ___error
000000010001e08c	ldrsw	x0, [x0]
000000010001e090	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001e094	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001e098	brk	#0x1
000000010001e09c	bl	0x100030adc ; symbol stub for: ___error
000000010001e0a0	ldrsw	x0, [x0]
000000010001e0a4	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010001e0a8	bl	0x100030b78 ; symbol stub for: __os_crash
000000010001e0ac	brk	#0x1
000000010001e0b0	stp	x22, x21, [sp, #-0x30]!
000000010001e0b4	stp	x20, x19, [sp, #0x10]
000000010001e0b8	stp	x29, x30, [sp, #0x20]
000000010001e0bc	add	x29, sp, #0x20
000000010001e0c0	mov	x20, x1
000000010001e0c4	ldr	x19, [x20, #0x120]
000000010001e0c8	cbnz	x19, 0x10001e144
000000010001e0cc	ldr	x8, [x0, #0x60]
000000010001e0d0	adr	x9, #151880
000000010001e0d4	nop
000000010001e0d8	cmp	x8, x9
000000010001e0dc	b.eq	0x10001e15c
000000010001e0e0	orr	w1, wzr, #0x1
000000010001e0e4	mov	x0, x20
000000010001e0e8	bl	0x10001dfe0
000000010001e0ec	mov	x19, x0
000000010001e0f0	str	x19, [x20, #0x120]
000000010001e0f4	mov	x0, x20
000000010001e0f8	bl	0x1000162d0
000000010001e0fc	mov	x21, x0
000000010001e100	cbz	x21, 0x10001e11c
000000010001e104	mov	x0, x21
000000010001e108	bl	0x10003173c ; symbol stub for: _strlen
000000010001e10c	mov	x2, x0
000000010001e110	mov	x0, x19
000000010001e114	mov	x1, x21
000000010001e118	bl	0x100030cb0 ; symbol stub for: _coalition_info_set_name
000000010001e11c	nop
000000010001e120	ldr	x8, #0x25c00
000000010001e124	mov	x9, x20
000000010001e128	str	x8, [x9, #0x78]!
000000010001e12c	cbz	x8, 0x10001e134
000000010001e130	str	x9, [x8, #0x80]
000000010001e134	adr	x8, #154604
000000010001e138	nop
000000010001e13c	str	x20, [x8]
000000010001e140	str	x8, [x20, #0x80]
000000010001e144	orr	w1, wzr, #0x1
000000010001e148	mov	x0, x19
000000010001e14c	ldp	x29, x30, [sp, #0x20]
000000010001e150	ldp	x20, x19, [sp, #0x10]
000000010001e154	ldp	x22, x21, [sp], #0x30
000000010001e158	ret
000000010001e15c	ldr	x19, [x0, #0x398]
000000010001e160	cmp	w2, #0x0
000000010001e164	orr	w8, wzr, #0x2
000000010001e168	cinc	x1, x8, ne
000000010001e16c	b	0x10001e148
000000010001e170	mov	x8, x0
000000010001e174	nop
000000010001e178	ldr	x0, #0x25ba0
000000010001e17c	cbz	x0, 0x10001e194
000000010001e180	ldr	x9, [x0, #0x118]
000000010001e184	cmp	x9, x8
000000010001e188	b.eq	0x10001e1b4
000000010001e18c	ldr	x0, [x0, #0x58]
000000010001e190	cbnz	x0, 0x10001e180
000000010001e194	nop
000000010001e198	ldr	x0, #0x25b88
000000010001e19c	cbz	x0, 0x10001e1b4
000000010001e1a0	ldr	x9, [x0, #0x120]
000000010001e1a4	cmp	x9, x8
000000010001e1a8	b.eq	0x10001e1b4
000000010001e1ac	ldr	x0, [x0, #0x78]
000000010001e1b0	cbnz	x0, 0x10001e1a0
000000010001e1b4	ret
000000010001e1b8	stp	x20, x19, [sp, #-0x20]!
000000010001e1bc	stp	x29, x30, [sp, #0x10]
000000010001e1c0	add	x29, sp, #0x10
000000010001e1c4	mov	x19, x1
000000010001e1c8	mov	x20, x0
000000010001e1cc	mov	x0, x19
000000010001e1d0	bl	0x10000d878
000000010001e1d4	mov	x8, #0x42c9
000000010001e1d8	movk	x8, #0xb216, lsl #16
000000010001e1dc	movk	x8, #0x8590, lsl #32
000000010001e1e0	movk	x8, #0x642c, lsl #48
000000010001e1e4	umulh	x8, x0, x8
000000010001e1e8	sub	x9, x0, x8
000000010001e1ec	add	x8, x8, x9, lsr #1
000000010001e1f0	lsr	x8, x8, #4
000000010001e1f4	mov	w9, #0x17
000000010001e1f8	msub	x8, x8, x9, x0
000000010001e1fc	add	x8, x20, x8, lsl #3
000000010001e200	ldr	x20, [x8, #0x128]
000000010001e204	cbz	x20, 0x10001e220
000000010001e208	add	x0, x20, #0x460
000000010001e20c	mov	x1, x19
000000010001e210	bl	0x100031700 ; symbol stub for: _strcmp
000000010001e214	cbz	w0, 0x10001e220
000000010001e218	ldr	x20, [x20, #0x48]
000000010001e21c	cbnz	x20, 0x10001e208
000000010001e220	mov	x0, x20
000000010001e224	ldp	x29, x30, [sp, #0x10]
000000010001e228	ldp	x20, x19, [sp], #0x20
000000010001e22c	ret
000000010001e230	sub	sp, sp, #0x30
000000010001e234	stp	x20, x19, [sp, #0x10]
000000010001e238	stp	x29, x30, [sp, #0x20]
000000010001e23c	add	x29, sp, #0x20
000000010001e240	ldr	x8, [x0, #0x60]
000000010001e244	adr	x9, #151508
000000010001e248	nop
000000010001e24c	cmp	x8, x9
000000010001e250	b.eq	0x10001e268
000000010001e254	mov	x0, #0x0
000000010001e258	ldp	x29, x30, [sp, #0x20]
000000010001e25c	ldp	x20, x19, [sp, #0x10]
000000010001e260	add	sp, sp, #0x30
000000010001e264	ret
000000010001e268	ldr	x0, [x0, #0xc0]
000000010001e26c	str	xzr, [sp, #0x8]
000000010001e270	add	x4, sp, #0x8
000000010001e274	mov	w2, #0x0
000000010001e278	mov	x3, #0x0
000000010001e27c	bl	0x10001e2e0
000000010001e280	ldr	x0, [sp, #0x8]
000000010001e284	cbz	x0, 0x10001e254
000000010001e288	bl	0x10002f310
000000010001e28c	mov	x19, x0
000000010001e290	bl	0x100016360
000000010001e294	cbz	x0, 0x10001e254
000000010001e298	adr	x1, #108108 ; literal pool for: "com.apple.keyboard-service"
000000010001e29c	nop
000000010001e2a0	bl	0x100031700 ; symbol stub for: _strcmp
000000010001e2a4	cmp	w0, #0x0
000000010001e2a8	csel	x0, x19, xzr, eq
000000010001e2ac	b	0x10001e258
000000010001e2b0	sub	sp, sp, #0x20
000000010001e2b4	stp	x29, x30, [sp, #0x10]
000000010001e2b8	add	x29, sp, #0x10
000000010001e2bc	str	xzr, [sp, #0x8]
000000010001e2c0	add	x4, sp, #0x8
000000010001e2c4	mov	w2, #0x0
000000010001e2c8	mov	x3, #0x0
000000010001e2cc	bl	0x10001e2e0
000000010001e2d0	ldr	x0, [sp, #0x8]
000000010001e2d4	ldp	x29, x30, [sp, #0x10]
000000010001e2d8	add	sp, sp, #0x20
000000010001e2dc	ret
000000010001e2e0	sub	sp, sp, #0x70
000000010001e2e4	stp	x24, x23, [sp, #0x30]
000000010001e2e8	stp	x22, x21, [sp, #0x40]
000000010001e2ec	stp	x20, x19, [sp, #0x50]
000000010001e2f0	stp	x29, x30, [sp, #0x60]
000000010001e2f4	add	x29, sp, #0x60
000000010001e2f8	mov	x19, x4
000000010001e2fc	mov	x22, x2
000000010001e300	mov	x21, x1
000000010001e304	mov	x20, x0
000000010001e308	cbz	x3, 0x10001e340
000000010001e30c	ldr	q0, [x3, #0x10]
000000010001e310	str	q0, [sp, #0x20]
000000010001e314	ldr	q0, [x3]
000000010001e318	str	q0, [sp, #0x10]
000000010001e31c	str	x21, [sp]
000000010001e320	adr	x1, #114746 ; literal pool for: "mach-lookup"
000000010001e324	nop
000000010001e328	orr	w2, wzr, #0x2
000000010001e32c	add	x0, sp, #0x10
000000010001e330	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
000000010001e334	cbz	w0, 0x10001e340
000000010001e338	orr	w0, wzr, #0x1
000000010001e33c	b	0x10001e474
000000010001e340	mov	x0, x21
000000010001e344	bl	0x10000d878
000000010001e348	mov	x8, #0x4211
000000010001e34c	movk	x8, #0x2108, lsl #16
000000010001e350	movk	x8, #0x1084, lsl #32
000000010001e354	movk	x8, #0x842, lsl #48
000000010001e358	umulh	x8, x0, x8
000000010001e35c	sub	x9, x0, x8
000000010001e360	add	x8, x8, x9, lsr #1
000000010001e364	lsr	x9, x8, #4
000000010001e368	lsl	x9, x9, #5
000000010001e36c	sub	x8, x9, x8, lsr #4
000000010001e370	sub	x8, x0, x8
000000010001e374	add	x8, x20, x8, lsl #3
000000010001e378	ldr	x23, [x8, #0x280]
000000010001e37c	cbz	x23, 0x10001e398
000000010001e380	add	x0, x23, #0x88
000000010001e384	mov	x1, x21
000000010001e388	bl	0x100031700 ; symbol stub for: _strcmp
000000010001e38c	cbz	w0, 0x10001e46c
000000010001e390	ldr	x23, [x23, #0x18]
000000010001e394	cbnz	x23, 0x10001e380
000000010001e398	cbz	w22, 0x10001e3b0
000000010001e39c	ldr	x8, [x20, #0x60]
000000010001e3a0	adr	x9, #151160
000000010001e3a4	nop
000000010001e3a8	cmp	x8, x9
000000010001e3ac	b.eq	0x10001e3b8
000000010001e3b0	orr	w0, wzr, #0x3
000000010001e3b4	b	0x10001e474
000000010001e3b8	mov	x0, x20
000000010001e3bc	mov	x1, x21
000000010001e3c0	bl	0x10001e1b8
000000010001e3c4	mov	x22, x0
000000010001e3c8	cbz	x22, 0x10001e3b0
000000010001e3cc	nop
000000010001e3d0	nop
000000010001e3d4	ldr	x0, #0x2604c
000000010001e3d8	add	x8, x22, #0x460
000000010001e3dc	add	x9, x20, #0x3a8
000000010001e3e0	stp	x8, x9, [sp]
000000010001e3e4	adr	x2, #119999 ; literal pool for: "%s: %s: initializing endpoint after lookup"
000000010001e3e8	nop
000000010001e3ec	mov	w1, #0x0
000000010001e3f0	bl	0x1000270c8
000000010001e3f4	mov	x0, x20
000000010001e3f8	mov	x1, x21
000000010001e3fc	bl	0x10000ce0c
000000010001e400	mov	x21, x0
000000010001e404	mov	x0, x22
000000010001e408	mov	x1, x21
000000010001e40c	bl	0x100003c94
000000010001e410	mov	x23, x0
000000010001e414	mov	x0, x21
000000010001e418	bl	0x10000ce54
000000010001e41c	cbz	x23, 0x10001e460
000000010001e420	mov	x0, x20
000000010001e424	mov	x1, x23
000000010001e428	bl	0x100022250
000000010001e42c	cbz	w0, 0x10001e458
000000010001e430	adr	x2, #119966 ; literal pool for: "Failed to initialize implicit endpoint"
000000010001e434	nop
000000010001e438	orr	w1, wzr, #0x3
000000010001e43c	mov	x0, x22
000000010001e440	bl	0x1000118ec
000000010001e444	mov	x0, x20
000000010001e448	mov	x1, x23
000000010001e44c	bl	0x100021820
000000010001e450	mov	x23, #0x0
000000010001e454	b	0x10001e460
000000010001e458	mov	x0, x23
000000010001e45c	bl	0x10002f500
000000010001e460	ldrh	w8, [x22, #0x114]
000000010001e464	cbnz	w8, 0x10001e48c
000000010001e468	cbz	x23, 0x10001e3b0
000000010001e46c	mov	w0, #0x0
000000010001e470	str	x23, [x19]
000000010001e474	ldp	x29, x30, [sp, #0x60]
000000010001e478	ldp	x20, x19, [sp, #0x50]
000000010001e47c	ldp	x22, x21, [sp, #0x40]
000000010001e480	ldp	x24, x23, [sp, #0x30]
000000010001e484	add	sp, sp, #0x70
000000010001e488	ret
000000010001e48c	adr	x0, #119913 ; literal pool for: "lazy initialization of endpoint on active service"
000000010001e490	nop
000000010001e494	bl	0x100028f84
000000010001e498	stp	x22, x21, [sp, #-0x30]!
000000010001e49c	stp	x20, x19, [sp, #0x10]
000000010001e4a0	stp	x29, x30, [sp, #0x20]
000000010001e4a4	add	x29, sp, #0x20
000000010001e4a8	mov	x22, x2
000000010001e4ac	mov	x19, x1
000000010001e4b0	mov	x20, x0
000000010001e4b4	ldr	x21, [x19, #0xc0]
000000010001e4b8	cbz	x21, 0x10001e4d4
000000010001e4bc	add	x0, x21, #0x88
000000010001e4c0	mov	x1, x22
000000010001e4c4	bl	0x100031700 ; symbol stub for: _strcmp
000000010001e4c8	cbz	w0, 0x10001e510
000000010001e4cc	ldr	x21, [x21, #0x8]
000000010001e4d0	cbnz	x21, 0x10001e4bc
000000010001e4d4	adr	x2, #80
000000010001e4d8	nop
000000010001e4dc	mov	x0, x19
000000010001e4e0	mov	x1, x22
000000010001e4e4	mov	x3, x19
000000010001e4e8	bl	0x10002ebbc
000000010001e4ec	mov	x21, x0
000000010001e4f0	ldrb	w8, [x21, #0x50]
000000010001e4f4	orr	w8, w8, #0x8
000000010001e4f8	strb	w8, [x21, #0x50]
000000010001e4fc	orr	w3, wzr, #0x10
000000010001e500	mov	x0, x20
000000010001e504	mov	x1, x19
000000010001e508	mov	x2, x21
000000010001e50c	bl	0x10001e764
000000010001e510	mov	x0, x21
000000010001e514	ldp	x29, x30, [sp, #0x20]
000000010001e518	ldp	x20, x19, [sp, #0x10]
000000010001e51c	ldp	x22, x21, [sp], #0x30
000000010001e520	ret
000000010001e524	sub	sp, sp, #0xc0
000000010001e528	stp	x28, x27, [sp, #0x60]
000000010001e52c	stp	x26, x25, [sp, #0x70]
000000010001e530	stp	x24, x23, [sp, #0x80]
000000010001e534	stp	x22, x21, [sp, #0x90]
000000010001e538	stp	x20, x19, [sp, #0xa0]
000000010001e53c	stp	x29, x30, [sp, #0xb0]
000000010001e540	add	x29, sp, #0xb0
000000010001e544	mov	x19, x2
000000010001e548	mov	x24, x1
000000010001e54c	mov	x23, x0
000000010001e550	ldr	x20, [x19, #0xe0]
000000010001e554	bl	0x10002f2ec
000000010001e558	mov	x22, x0
000000010001e55c	ldrb	w8, [x23, #0x50]
000000010001e560	tst	w8, #0x8
000000010001e564	orr	w8, wzr, #0x8
000000010001e568	csinc	w21, w8, wzr, ne
000000010001e56c	cmp	w24, #0x1
000000010001e570	b.eq	0x10001e668
000000010001e574	cbnz	w24, 0x10001e738
000000010001e578	adrp	x8, 38 ; 0x100044000
000000010001e57c	ldrb	w8, [x8, #0x429]
000000010001e580	cbz	w8, 0x10001e6fc
000000010001e584	stur	wzr, [x29, #-0x54]
000000010001e588	mov	w8, #0x34
000000010001e58c	stp	wzr, w8, [sp, #0x20]
000000010001e590	str	wzr, [sp, #0x1c]
000000010001e594	nop
000000010001e598	ldr	x24, #0x21b88 ; literal pool symbol address: _mach_task_self_
000000010001e59c	ldr	w0, [x24]
000000010001e5a0	orr	w2, wzr, #0x3000000
000000010001e5a4	sub	x3, x29, #0x54
000000010001e5a8	add	x4, sp, #0x20
000000010001e5ac	add	x5, sp, #0x1c
000000010001e5b0	add	x6, sp, #0x28
000000010001e5b4	add	x7, sp, #0x24
000000010001e5b8	mov	x1, x22
000000010001e5bc	bl	0x100031298 ; symbol stub for: _mach_port_peek
000000010001e5c0	cbnz	w0, 0x10001e64c
000000010001e5c4	adr	x25, #155228
000000010001e5c8	nop
000000010001e5cc	adrp	x26, 37 ; 0x100043000
000000010001e5d0	adrp	x27, 37 ; 0x100043000
000000010001e5d4	adr	x23, #119786 ; literal pool for: "%s: peeking at message: seqno = %u, pid = %d"
000000010001e5d8	nop
000000010001e5dc	ldr	x0, [x25]
000000010001e5e0	ldr	x8, [x26, #0xcf8]
000000010001e5e4	add	x8, x8, #0x3a8
000000010001e5e8	ldur	w9, [x29, #-0x54]
000000010001e5ec	ldr	w10, [sp, #0x50]
000000010001e5f0	stp	x9, x10, [sp, #0x8]
000000010001e5f4	str	x8, [sp]
000000010001e5f8	mov	w1, #0x0
000000010001e5fc	mov	x2, x23
000000010001e600	bl	0x1000270c8
000000010001e604	ldr	w8, [sp, #0x50]
000000010001e608	cbz	w8, 0x10001e6dc
000000010001e60c	ldr	w9, [x27, #0xd44]
000000010001e610	cmp	w8, w9
000000010001e614	b.eq	0x10001e6dc
000000010001e618	ldur	w8, [x29, #-0x54]
000000010001e61c	add	w8, w8, #0x1
000000010001e620	stur	w8, [x29, #-0x54]
000000010001e624	ldr	w0, [x24]
000000010001e628	orr	w2, wzr, #0x3000000
000000010001e62c	sub	x3, x29, #0x54
000000010001e630	add	x4, sp, #0x20
000000010001e634	add	x5, sp, #0x1c
000000010001e638	add	x6, sp, #0x28
000000010001e63c	add	x7, sp, #0x24
000000010001e640	mov	x1, x22
000000010001e644	bl	0x100031298 ; symbol stub for: _mach_port_peek
000000010001e648	cbz	w0, 0x10001e5dc
000000010001e64c	mov	x0, x20
000000010001e650	mov	x1, x19
000000010001e654	bl	0x100021964
000000010001e658	cbz	w0, 0x10001e738
000000010001e65c	adr	x0, #119499 ; literal pool for: "failed to boot out inactive service during obliteration; endpoint event"
000000010001e660	nop
000000010001e664	bl	0x100028f84
000000010001e668	ldrb	w8, [x19, #0x135]
000000010001e66c	tbz	w8, #0x3, 0x10001e68c
000000010001e670	add	x8, x23, #0x88
000000010001e674	str	x8, [sp]
000000010001e678	adr	x2, #119587 ; literal pool for: "Deactivated abandoned endpoint: %s"
000000010001e67c	nop
000000010001e680	orr	w1, wzr, #0x7
000000010001e684	mov	x0, x20
000000010001e688	bl	0x100019bfc
000000010001e68c	mov	x0, x23
000000010001e690	bl	0x10002f334
000000010001e694	tbz	w0, #0x0, 0x10001e6a8
000000010001e698	ldrb	w8, [x23, #0x50]
000000010001e69c	and	w8, w8, #0xfffffffb
000000010001e6a0	strb	w8, [x23, #0x50]
000000010001e6a4	b	0x10001e6b4
000000010001e6a8	mov	x0, x20
000000010001e6ac	mov	x1, x23
000000010001e6b0	bl	0x100021820
000000010001e6b4	mov	x0, x20
000000010001e6b8	mov	x1, x19
000000010001e6bc	ldp	x29, x30, [sp, #0xb0]
000000010001e6c0	ldp	x20, x19, [sp, #0xa0]
000000010001e6c4	ldp	x22, x21, [sp, #0x90]
000000010001e6c8	ldp	x24, x23, [sp, #0x80]
000000010001e6cc	ldp	x26, x25, [sp, #0x70]
000000010001e6d0	ldp	x28, x27, [sp, #0x60]
000000010001e6d4	add	sp, sp, #0xc0
000000010001e6d8	b	0x100021418
000000010001e6dc	ldr	x0, [x25]
000000010001e6e0	ldr	x8, [x26, #0xcf8]
000000010001e6e4	add	x8, x8, #0x3a8
000000010001e6e8	str	x8, [sp]
000000010001e6ec	adr	x2, #119551 ; literal pool for: "%s: port has message from obliterator or kernel"
000000010001e6f0	nop
000000010001e6f4	mov	w1, #0x0
000000010001e6f8	bl	0x1000270c8
000000010001e6fc	mov	x1, x21
000000010001e700	mov	x0, x19
000000010001e704	bl	0x100015574
000000010001e708	and	w8, w0, #0xfffffffe
000000010001e70c	cmp	w8, #0x24
000000010001e710	csel	w8, wzr, w0, eq
000000010001e714	cbz	w8, 0x10001e738
000000010001e718	cmp	w8, #0x25
000000010001e71c	b.eq	0x10001e758
000000010001e720	sxtw	x2, w8
000000010001e724	adr	x0, #-51580
000000010001e728	nop
000000010001e72c	mov	x1, x19
000000010001e730	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001e734	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001e738	ldp	x29, x30, [sp, #0xb0]
000000010001e73c	ldp	x20, x19, [sp, #0xa0]
000000010001e740	ldp	x22, x21, [sp, #0x90]
000000010001e744	ldp	x24, x23, [sp, #0x80]
000000010001e748	ldp	x26, x25, [sp, #0x70]
000000010001e74c	ldp	x28, x27, [sp, #0x60]
000000010001e750	add	sp, sp, #0xc0
000000010001e754	ret
000000010001e758	adr	x0, #119319 ; literal pool for: "endpoint event received for running service"
000000010001e75c	nop
000000010001e760	bl	0x100028f84
000000010001e764	stp	x24, x23, [sp, #-0x40]!
000000010001e768	stp	x22, x21, [sp, #0x10]
000000010001e76c	stp	x20, x19, [sp, #0x20]
000000010001e770	stp	x29, x30, [sp, #0x30]
000000010001e774	add	x29, sp, #0x30
000000010001e778	mov	x19, x2
000000010001e77c	mov	x20, x0
000000010001e780	tbnz	w3, #0x2, 0x10001e7b8
000000010001e784	mov	x8, x19
000000010001e788	ldr	x9, [x8, #0x8]!
000000010001e78c	cmn	x9, #0x1
000000010001e790	b.ne	0x10001e8a0
000000010001e794	ldr	x9, [x19, #0x10]
000000010001e798	cmn	x9, #0x1
000000010001e79c	b.ne	0x10001e8a0
000000010001e7a0	tbnz	w3, #0x1, 0x10001e85c
000000010001e7a4	tbnz	w3, #0x4, 0x10001e864
000000010001e7a8	tbnz	w3, #0x6, 0x10001e86c
000000010001e7ac	tbnz	w3, #0x0, 0x10001e874
000000010001e7b0	ldr	x9, [x1, #0xa8]!
000000010001e7b4	b	0x10001e878
000000010001e7b8	add	x23, x19, #0x88
000000010001e7bc	mov	x0, x23
000000010001e7c0	bl	0x10003173c ; symbol stub for: _strlen
000000010001e7c4	add	x0, x0, #0x89
000000010001e7c8	bl	0x10000d464
000000010001e7cc	mov	x21, x0
000000010001e7d0	add	x22, x21, #0x88
000000010001e7d4	mov	x0, x22
000000010001e7d8	mov	x1, x23
000000010001e7dc	bl	0x10003170c ; symbol stub for: _strcpy
000000010001e7e0	str	x19, [x21, #0x40]
000000010001e7e4	ldr	x8, [x19, #0x38]!
000000010001e7e8	str	x8, [x21, #0x28]
000000010001e7ec	cbz	x8, 0x10001e7f8
000000010001e7f0	add	x9, x21, #0x28
000000010001e7f4	str	x9, [x8, #0x30]
000000010001e7f8	str	x21, [x19]
000000010001e7fc	str	x19, [x21, #0x30]
000000010001e800	mov	x0, x22
000000010001e804	bl	0x10000d878
000000010001e808	mov	x8, #0x4211
000000010001e80c	movk	x8, #0x2108, lsl #16
000000010001e810	movk	x8, #0x1084, lsl #32
000000010001e814	movk	x8, #0x842, lsl #48
000000010001e818	umulh	x8, x0, x8
000000010001e81c	sub	x9, x0, x8
000000010001e820	add	x8, x8, x9, lsr #1
000000010001e824	lsr	x9, x8, #4
000000010001e828	lsl	x9, x9, #5
000000010001e82c	sub	x8, x9, x8, lsr #4
000000010001e830	sub	x8, x0, x8
000000010001e834	add	x9, x20, x8, lsl #3
000000010001e838	add	x8, x9, #0x280
000000010001e83c	ldr	x9, [x9, #0x280]
000000010001e840	str	x9, [x21, #0x18]
000000010001e844	cbz	x9, 0x10001e850
000000010001e848	add	x10, x21, #0x18
000000010001e84c	str	x10, [x9, #0x20]
000000010001e850	str	x21, [x8]
000000010001e854	str	x8, [x21, #0x20]
000000010001e858	b	0x10001e88c
000000010001e85c	ldr	x9, [x1, #0xb8]!
000000010001e860	b	0x10001e878
000000010001e864	ldr	x9, [x1, #0xc0]!
000000010001e868	b	0x10001e878
000000010001e86c	ldr	x9, [x1, #0xc8]!
000000010001e870	b	0x10001e878
000000010001e874	ldr	x9, [x1, #0xb0]!
000000010001e878	str	x9, [x8]
000000010001e87c	cbz	x9, 0x10001e884
000000010001e880	str	x8, [x9, #0x10]
000000010001e884	str	x19, [x1]
000000010001e888	str	x1, [x19, #0x10]
000000010001e88c	ldp	x29, x30, [sp, #0x30]
000000010001e890	ldp	x20, x19, [sp, #0x20]
000000010001e894	ldp	x22, x21, [sp, #0x10]
000000010001e898	ldp	x24, x23, [sp], #0x40
000000010001e89c	ret
000000010001e8a0	adr	x0, #119163 ; literal pool for: "attempting to re-add an endpoint into service"
000000010001e8a4	nop
000000010001e8a8	bl	0x100028f84
000000010001e8ac	stp	x26, x25, [sp, #-0x50]!
000000010001e8b0	stp	x24, x23, [sp, #0x10]
000000010001e8b4	stp	x22, x21, [sp, #0x20]
000000010001e8b8	stp	x20, x19, [sp, #0x30]
000000010001e8bc	stp	x29, x30, [sp, #0x40]
000000010001e8c0	add	x29, sp, #0x40
000000010001e8c4	mov	x19, x3
000000010001e8c8	mov	x20, x2
000000010001e8cc	mov	x21, x1
000000010001e8d0	mov	x24, x0
000000010001e8d4	ldr	x8, [x24, #0x40]
000000010001e8d8	add	x23, x8, x4
000000010001e8dc	mov	x0, #0x0
000000010001e8e0	mov	x1, #0x0
000000010001e8e4	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
000000010001e8e8	mov	x22, x0
000000010001e8ec	lsl	x0, x23, #2
000000010001e8f0	bl	0x10000d408
000000010001e8f4	mov	x23, x0
000000010001e8f8	ldr	x24, [x24, #0x48]
000000010001e8fc	cbz	x24, 0x10001e930
000000010001e900	mov	x25, #0x0
000000010001e904	ldr	w2, [x24, #0x10]
000000010001e908	mov	x1, #-0x1
000000010001e90c	mov	x0, x22
000000010001e910	bl	0x100031910 ; symbol stub for: _xpc_array_set_mach_send
000000010001e914	ldr	w9, [x24, #0x14]
000000010001e918	add	x8, x25, #0x1
000000010001e91c	str	w9, [x23, x25, lsl #2]
000000010001e920	ldr	x24, [x24]
000000010001e924	mov	x25, x8
000000010001e928	cbnz	x24, 0x10001e904
000000010001e92c	b	0x10001e934
000000010001e930	mov	x8, #0x0
000000010001e934	str	x22, [x21]
000000010001e938	str	x23, [x20]
000000010001e93c	str	x8, [x19]
000000010001e940	ldp	x29, x30, [sp, #0x40]
000000010001e944	ldp	x20, x19, [sp, #0x30]
000000010001e948	ldp	x22, x21, [sp, #0x20]
000000010001e94c	ldp	x24, x23, [sp, #0x10]
000000010001e950	ldp	x26, x25, [sp], #0x50
000000010001e954	ret
000000010001e958	mov	x4, #0x0
000000010001e95c	mov	x5, #0x0
000000010001e960	b	0x10001e964
000000010001e964	stp	x24, x23, [sp, #-0x40]!
000000010001e968	stp	x22, x21, [sp, #0x10]
000000010001e96c	stp	x20, x19, [sp, #0x20]
000000010001e970	stp	x29, x30, [sp, #0x30]
000000010001e974	add	x29, sp, #0x30
000000010001e978	mov	x19, x5
000000010001e97c	mov	x20, x4
000000010001e980	mov	x21, x3
000000010001e984	mov	x22, x2
000000010001e988	mov	x24, x1
000000010001e98c	mov	x23, x0
000000010001e990	cmp	w24, #0x1
000000010001e994	b.hi	0x10001e9a8
000000010001e998	nop
000000010001e99c	ldr	x8, #0x2535c
000000010001e9a0	ldrh	w8, [x8, #0x3a0]
000000010001e9a4	tbnz	w8, #0x0, 0x10001e9c0
000000010001e9a8	orr	w8, w24, #0x1
000000010001e9ac	cmp	w8, #0x3
000000010001e9b0	b.ne	0x10001e9d8
000000010001e9b4	ldrb	w8, [x23, #0x3a0]
000000010001e9b8	tst	w8, #0x3
000000010001e9bc	b.eq	0x10001e9d8
000000010001e9c0	orr	w0, wzr, #0x7c
000000010001e9c4	ldp	x29, x30, [sp, #0x30]
000000010001e9c8	ldp	x20, x19, [sp, #0x20]
000000010001e9cc	ldp	x22, x21, [sp, #0x10]
000000010001e9d0	ldp	x24, x23, [sp], #0x40
000000010001e9d4	ret
000000010001e9d8	tbz	w22, #0x7, 0x10001e9e8
000000010001e9dc	mov	x0, x21
000000010001e9e0	bl	0x100026b80
000000010001e9e4	cbz	w0, 0x10001ea1c
000000010001e9e8	ldp	x8, x3, [x23, #0x60]
000000010001e9ec	ldr	x7, [x8, #0x68]
000000010001e9f0	mov	x1, x24
000000010001e9f4	mov	x0, x23
000000010001e9f8	mov	x2, x22
000000010001e9fc	mov	x4, x21
000000010001ea00	mov	x5, x20
000000010001ea04	mov	x6, x19
000000010001ea08	ldp	x29, x30, [sp, #0x30]
000000010001ea0c	ldp	x20, x19, [sp, #0x20]
000000010001ea10	ldp	x22, x21, [sp, #0x10]
000000010001ea14	ldp	x24, x23, [sp], #0x40
000000010001ea18	br	x7
000000010001ea1c	mov	w0, #0x9a
000000010001ea20	b	0x10001e9c4
000000010001ea24	stp	x20, x19, [sp, #-0x20]!
000000010001ea28	stp	x29, x30, [sp, #0x10]
000000010001ea2c	add	x29, sp, #0x10
000000010001ea30	mov	x19, x0
000000010001ea34	ldr	x0, [x19, #0x380]
000000010001ea38	cbnz	x0, 0x10001ea74
000000010001ea3c	ldr	x8, [x19, #0x60]
000000010001ea40	adr	x9, #148888
000000010001ea44	nop
000000010001ea48	cmp	x8, x9
000000010001ea4c	b.eq	0x10001ea68
000000010001ea50	nop
000000010001ea54	ldr	x0, #0x252a4
000000010001ea58	bl	0x10001ea24
000000010001ea5c	mov	w1, #0x0
000000010001ea60	bl	0x10000e3f4
000000010001ea64	b	0x10001ea70
000000010001ea68	mov	x0, #0x0
000000010001ea6c	bl	0x1000287ac
000000010001ea70	str	x0, [x19, #0x380]
000000010001ea74	ldp	x29, x30, [sp, #0x10]
000000010001ea78	ldp	x20, x19, [sp], #0x20
000000010001ea7c	ret
000000010001ea80	sub	sp, sp, #0x30
000000010001ea84	stp	x20, x19, [sp, #0x10]
000000010001ea88	stp	x29, x30, [sp, #0x20]
000000010001ea8c	add	x29, sp, #0x20
000000010001ea90	mov	x19, x0
000000010001ea94	ldr	x20, [x19, #0xc0]
000000010001ea98	nop
000000010001ea9c	nop
000000010001eaa0	ldr	x0, #0x25980
000000010001eaa4	add	x8, x20, #0x3a8
000000010001eaa8	add	x9, x19, #0x3a8
000000010001eaac	stp	x8, x9, [sp]
000000010001eab0	adr	x2, #106284 ; literal pool for: "%s: removing child: %s"
000000010001eab4	nop
000000010001eab8	mov	w1, #0x0
000000010001eabc	bl	0x1000270c8
000000010001eac0	ldr	x8, [x19, #0x8]
000000010001eac4	cbz	x8, 0x10001ead0
000000010001eac8	ldr	x9, [x19, #0x10]
000000010001eacc	str	x9, [x8, #0x10]
000000010001ead0	ldr	x9, [x19, #0x10]
000000010001ead4	str	x8, [x9]
000000010001ead8	mov	x8, #-0x1
000000010001eadc	stp	x8, x8, [x19, #0x8]
000000010001eae0	orr	w1, wzr, #0x3
000000010001eae4	mov	x0, x19
000000010001eae8	bl	0x10000e4a4
000000010001eaec	orr	w1, wzr, #0x4
000000010001eaf0	mov	x0, x20
000000010001eaf4	bl	0x10001eb10
000000010001eaf8	orr	w1, wzr, #0x2
000000010001eafc	mov	x0, x19
000000010001eb00	ldp	x29, x30, [sp, #0x20]
000000010001eb04	ldp	x20, x19, [sp, #0x10]
000000010001eb08	add	sp, sp, #0x30
000000010001eb0c	b	0x10000e4a4
000000010001eb10	stp	x20, x19, [sp, #-0x20]!
000000010001eb14	stp	x29, x30, [sp, #0x10]
000000010001eb18	add	x29, sp, #0x10
000000010001eb1c	mov	x20, x1
000000010001eb20	mov	x19, x0
000000010001eb24	ldr	w9, [x19, #0x94]
000000010001eb28	sub	w8, w9, #0x1
000000010001eb2c	str	w8, [x19, #0x94]
000000010001eb30	cmp	w9, #0x0
000000010001eb34	b.le	0x10001ebf0
000000010001eb38	cbz	w8, 0x10001eb50
000000010001eb3c	mov	x1, x20
000000010001eb40	mov	x0, x19
000000010001eb44	ldp	x29, x30, [sp, #0x10]
000000010001eb48	ldp	x20, x19, [sp], #0x20
000000010001eb4c	b	0x10000e824
000000010001eb50	ldrh	w8, [x19, #0x3a0]
000000010001eb54	tbz	w8, #0x0, 0x10001ebfc
000000010001eb58	tbnz	w8, #0x5, 0x10001ec08
000000010001eb5c	mov	x9, #0x0
000000010001eb60	add	x10, x19, x9, lsl #3
000000010001eb64	ldr	x10, [x10, #0x128]
000000010001eb68	cbnz	x10, 0x10001ebe4
000000010001eb6c	add	x9, x9, #0x1
000000010001eb70	cmp	x9, #0x16
000000010001eb74	b.ls	0x10001eb60
000000010001eb78	tbz	w8, #0xc, 0x10001eba0
000000010001eb7c	ldr	w0, [x19, #0x34]
000000010001eb80	cbz	w0, 0x10001eba0
000000010001eb84	bl	0x1000311cc ; symbol stub for: _kpersona_dealloc
000000010001eb88	cmn	w0, #0x1
000000010001eb8c	b.ne	0x10001eba0
000000010001eb90	bl	0x100030adc ; symbol stub for: ___error
000000010001eb94	ldrsw	x0, [x0]
000000010001eb98	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010001eb9c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001eba0	ldrh	w8, [x19, #0x3a0]
000000010001eba4	orr	w8, w8, #0x20
000000010001eba8	strh	w8, [x19, #0x3a0]
000000010001ebac	ldr	x8, [x19, #0x60]
000000010001ebb0	ldrb	w9, [x8, #0x88]
000000010001ebb4	tbz	w9, #0x0, 0x10001ebc4
000000010001ebb8	ldr	w0, [x19, #0x78]
000000010001ebbc	bl	0x10002d748
000000010001ebc0	ldr	x8, [x19, #0x60]
000000010001ebc4	ldr	x8, [x8, #0x60]
000000010001ebc8	mov	x0, x19
000000010001ebcc	blr	x8
000000010001ebd0	mov	x1, x20
000000010001ebd4	mov	x0, x19
000000010001ebd8	ldp	x29, x30, [sp, #0x10]
000000010001ebdc	ldp	x20, x19, [sp], #0x20
000000010001ebe0	b	0x10000e4a4
000000010001ebe4	adr	x0, #106107 ; literal pool for: "domain cleaning up with services still in list"
000000010001ebe8	nop
000000010001ebec	bl	0x100028f84
000000010001ebf0	adr	x0, #105987 ; literal pool for: "underflow of active count during deactivate"
000000010001ebf4	nop
000000010001ebf8	bl	0x100028f84
000000010001ebfc	adr	x0, #106019 ; literal pool for: "inactive domain is not shutting down"
000000010001ec00	nop
000000010001ec04	bl	0x100028f84
000000010001ec08	adr	x0, #106044 ; literal pool for: "domain already deactivated"
000000010001ec0c	nop
000000010001ec10	bl	0x100028f84
000000010001ec14	stp	x20, x19, [sp, #-0x20]!
000000010001ec18	stp	x29, x30, [sp, #0x10]
000000010001ec1c	add	x29, sp, #0x10
000000010001ec20	mov	x19, x0
000000010001ec24	ldr	w0, [x19, #0x10]
000000010001ec28	ldr	x1, [x19, #0x18]
000000010001ec2c	bl	0x10002def4
000000010001ec30	ldr	x0, [x19, #0x18]
000000010001ec34	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001ec38	mov	x0, x19
000000010001ec3c	ldp	x29, x30, [sp, #0x10]
000000010001ec40	ldp	x20, x19, [sp], #0x20
000000010001ec44	b	0x100031010 ; symbol stub for: _free
000000010001ec48	stp	x20, x19, [sp, #-0x20]!
000000010001ec4c	stp	x29, x30, [sp, #0x10]
000000010001ec50	add	x29, sp, #0x10
000000010001ec54	mov	x19, x0
000000010001ec58	adr	x1, #106064 ; literal pool for: "Frameworks"
000000010001ec5c	nop
000000010001ec60	bl	0x10001eca4
000000010001ec64	tbnz	w0, #0x0, 0x10001ec7c
000000010001ec68	adr	x1, #106059 ; literal pool for: "PrivateFrameworks"
000000010001ec6c	nop
000000010001ec70	mov	x0, x19
000000010001ec74	bl	0x10001eca4
000000010001ec78	tbz	w0, #0x0, 0x10001ec8c
000000010001ec7c	orr	w0, wzr, #0x1
000000010001ec80	ldp	x29, x30, [sp, #0x10]
000000010001ec84	ldp	x20, x19, [sp], #0x20
000000010001ec88	ret
000000010001ec8c	adr	x1, #92150 ; literal pool for: "AppRemovalServices"
000000010001ec90	nop
000000010001ec94	mov	x0, x19
000000010001ec98	ldp	x29, x30, [sp, #0x10]
000000010001ec9c	ldp	x20, x19, [sp], #0x20
000000010001eca0	b	0x10001eca4
000000010001eca4	stp	x28, x27, [sp, #-0x50]!
000000010001eca8	stp	x24, x23, [sp, #0x10]
000000010001ecac	stp	x22, x21, [sp, #0x20]
000000010001ecb0	stp	x20, x19, [sp, #0x30]
000000010001ecb4	stp	x29, x30, [sp, #0x40]
000000010001ecb8	add	x29, sp, #0x40
000000010001ecbc	sub	sp, sp, #0x420
000000010001ecc0	mov	x19, x1
000000010001ecc4	mov	x20, x0
000000010001ecc8	nop
000000010001eccc	ldr	x8, #0x2134c ; literal pool symbol address: ___stack_chk_guard
000000010001ecd0	ldr	x8, [x8]
000000010001ecd4	stur	x8, [x29, #-0x48]
000000010001ecd8	adr	x24, #93601 ; literal pool for: ""
000000010001ecdc	nop
000000010001ece0	adr	x4, #105957 ; literal pool for: "%s/System/Library/%s"
000000010001ece4	nop
000000010001ece8	stp	x24, x19, [sp]
000000010001ecec	add	x0, sp, #0x18
000000010001ecf0	orr	w1, wzr, #0x400
000000010001ecf4	orr	w3, wzr, #0x400
000000010001ecf8	mov	w2, #0x0
000000010001ecfc	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010001ed00	add	x1, sp, #0x18
000000010001ed04	mov	x0, x20
000000010001ed08	bl	0x10000d7a4
000000010001ed0c	tbz	w0, #0x0, 0x10001ed18
000000010001ed10	orr	w0, wzr, #0x1
000000010001ed14	b	0x10001ed48
000000010001ed18	adr	x0, #105922 ; literal pool for: "SystemRoots"
000000010001ed1c	nop
000000010001ed20	bl	0x1000301dc
000000010001ed24	mov	x21, x0
000000010001ed28	cbz	x21, 0x10001ed48
000000010001ed2c	mov	x0, x21
000000010001ed30	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001ed34	nop
000000010001ed38	ldr	x8, #0x21360 ; literal pool symbol address: __xpc_type_array
000000010001ed3c	cmp	x0, x8
000000010001ed40	b.eq	0x10001ed7c
000000010001ed44	mov	w0, #0x0
000000010001ed48	ldur	x8, [x29, #-0x48]
000000010001ed4c	nop
000000010001ed50	ldr	x9, #0x212c8 ; literal pool symbol address: ___stack_chk_guard
000000010001ed54	ldr	x9, [x9]
000000010001ed58	cmp	x9, x8
000000010001ed5c	b.ne	0x10001edf0
000000010001ed60	add	sp, sp, #0x420
000000010001ed64	ldp	x29, x30, [sp, #0x40]
000000010001ed68	ldp	x20, x19, [sp, #0x30]
000000010001ed6c	ldp	x22, x21, [sp, #0x20]
000000010001ed70	ldp	x24, x23, [sp, #0x10]
000000010001ed74	ldp	x28, x27, [sp], #0x50
000000010001ed78	ret
000000010001ed7c	mov	x0, x21
000000010001ed80	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001ed84	cbz	x0, 0x10001ed48
000000010001ed88	mov	x22, #0x0
000000010001ed8c	adr	x23, #105818 ; literal pool for: "%s%s/%s"
000000010001ed90	nop
000000010001ed94	mov	x0, x21
000000010001ed98	mov	x1, x22
000000010001ed9c	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010001eda0	mov	x8, x0
000000010001eda4	cbz	x8, 0x10001edd8
000000010001eda8	stp	x8, x19, [sp, #0x8]
000000010001edac	add	x0, sp, #0x18
000000010001edb0	orr	w1, wzr, #0x400
000000010001edb4	orr	w3, wzr, #0x400
000000010001edb8	str	x24, [sp]
000000010001edbc	mov	w2, #0x0
000000010001edc0	mov	x4, x23
000000010001edc4	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010001edc8	add	x1, sp, #0x18
000000010001edcc	mov	x0, x20
000000010001edd0	bl	0x10000d7a4
000000010001edd4	tbnz	w0, #0x0, 0x10001ed10
000000010001edd8	add	x22, x22, #0x1
000000010001eddc	mov	x0, x21
000000010001ede0	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001ede4	cmp	x22, x0
000000010001ede8	b.lo	0x10001ed94
000000010001edec	b	0x10001ed44
000000010001edf0	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010001edf4	stp	x22, x21, [sp, #-0x30]!
000000010001edf8	stp	x20, x19, [sp, #0x10]
000000010001edfc	stp	x29, x30, [sp, #0x20]
000000010001ee00	add	x29, sp, #0x20
000000010001ee04	mov	x20, x3
000000010001ee08	mov	x19, x2
000000010001ee0c	mov	x8, x1
000000010001ee10	mov	x21, x0
000000010001ee14	adr	x1, #105768 ; literal pool for: "cid"
000000010001ee18	nop
000000010001ee1c	mov	x0, x20
000000010001ee20	mov	x2, x8
000000010001ee24	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001ee28	mov	x0, x21
000000010001ee2c	bl	0x100016384
000000010001ee30	mov	x8, x0
000000010001ee34	cbz	x8, 0x10001ee4c
000000010001ee38	adr	x1, #105736 ; literal pool for: "bundle_identifier"
000000010001ee3c	nop
000000010001ee40	mov	x0, x20
000000010001ee44	mov	x2, x8
000000010001ee48	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
000000010001ee4c	add	x2, x21, #0x460
000000010001ee50	adr	x1, #97507 ; literal pool for: "name"
000000010001ee54	nop
000000010001ee58	mov	x0, x20
000000010001ee5c	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
000000010001ee60	adr	x1, #105714 ; literal pool for: "resource-usage-blob"
000000010001ee64	nop
000000010001ee68	mov	w3, #0xd8
000000010001ee6c	mov	x0, x20
000000010001ee70	mov	x2, x19
000000010001ee74	ldp	x29, x30, [sp, #0x20]
000000010001ee78	ldp	x20, x19, [sp, #0x10]
000000010001ee7c	ldp	x22, x21, [sp], #0x30
000000010001ee80	b	0x100031ad8 ; symbol stub for: _xpc_dictionary_set_data
000000010001ee84	stp	x22, x21, [sp, #-0x30]!
000000010001ee88	stp	x20, x19, [sp, #0x10]
000000010001ee8c	stp	x29, x30, [sp, #0x20]
000000010001ee90	add	x29, sp, #0x20
000000010001ee94	mov	x19, x2
000000010001ee98	mov	x20, x1
000000010001ee9c	mov	x21, x0
000000010001eea0	adrp	x8, 37 ; 0x100043000
000000010001eea4	ldrb	w8, [x8, #0xd40]
000000010001eea8	cmp	w8, #0x1
000000010001eeac	b.ne	0x10001eef8
000000010001eeb0	mov	x0, #0x0
000000010001eeb4	mov	x1, #0x0
000000010001eeb8	mov	x2, #0x0
000000010001eebc	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010001eec0	mov	x22, x0
000000010001eec4	mov	x0, x21
000000010001eec8	mov	x1, x20
000000010001eecc	mov	x2, x19
000000010001eed0	mov	x3, x22
000000010001eed4	bl	0x10001edf4
000000010001eed8	orr	w0, wzr, #0x10
000000010001eedc	bl	0x10000d408
000000010001eee0	stp	xzr, x22, [x0]
000000010001eee4	adr	x8, #148708
000000010001eee8	nop
000000010001eeec	ldr	x9, [x8, #0x8]
000000010001eef0	str	x0, [x9]
000000010001eef4	str	x0, [x8, #0x8]
000000010001eef8	ldp	x29, x30, [sp, #0x20]
000000010001eefc	ldp	x20, x19, [sp, #0x10]
000000010001ef00	ldp	x22, x21, [sp], #0x30
000000010001ef04	ret
000000010001ef08	sub	sp, sp, #0x40
000000010001ef0c	stp	x22, x21, [sp, #0x10]
000000010001ef10	stp	x20, x19, [sp, #0x20]
000000010001ef14	stp	x29, x30, [sp, #0x30]
000000010001ef18	add	x29, sp, #0x30
000000010001ef1c	mov	x20, x2
000000010001ef20	mov	x21, x1
000000010001ef24	mov	x19, x0
000000010001ef28	ldrh	w8, [x19, #0x3a0]
000000010001ef2c	tbnz	w8, #0x2, 0x10001ef64
000000010001ef30	tst	w8, #0x3
000000010001ef34	b.eq	0x10001ef6c
000000010001ef38	nop
000000010001ef3c	nop
000000010001ef40	ldr	x0, #0x254e0
000000010001ef44	add	x8, x19, #0x3a8
000000010001ef48	str	x8, [sp]
000000010001ef4c	adr	x2, #105545 ; literal pool for: "%s: domain shutting down, not uncorking"
000000010001ef50	nop
000000010001ef54	mov	w1, #0x0
000000010001ef58	bl	0x1000270c8
000000010001ef5c	orr	w0, wzr, #0x7c
000000010001ef60	b	0x10001f078
000000010001ef64	mov	w0, #0x25
000000010001ef68	b	0x10001f078
000000010001ef6c	tbnz	w8, #0x3, 0x10001efa0
000000010001ef70	nop
000000010001ef74	nop
000000010001ef78	ldr	x0, #0x254a8
000000010001ef7c	add	x8, x19, #0x3a8
000000010001ef80	str	x8, [sp]
000000010001ef84	adr	x2, #105529 ; literal pool for: "%s: origin not yet resolved, deferring bootstrap"
000000010001ef88	nop
000000010001ef8c	mov	w1, #0x0
000000010001ef90	bl	0x1000270c8
000000010001ef94	ldr	w1, [x19, #0x78]
000000010001ef98	orr	w3, wzr, #0x1
000000010001ef9c	b	0x10001f068
000000010001efa0	ldr	x8, [x19, #0xd0]
000000010001efa4	cbz	x8, 0x10001f03c
000000010001efa8	ldr	x0, [x19, #0xc8]
000000010001efac	cbz	x0, 0x10001efcc
000000010001efb0	bl	0x100031964 ; symbol stub for: _xpc_bundle_get_executable_path
000000010001efb4	mov	x8, x0
000000010001efb8	cbz	x8, 0x10001efcc
000000010001efbc	ldr	x0, [x19, #0xd0]
000000010001efc0	orr	w2, wzr, #0x2
000000010001efc4	mov	x1, x8
000000010001efc8	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010001efcc	nop
000000010001efd0	nop
000000010001efd4	ldr	x0, #0x2544c
000000010001efd8	add	x8, x19, #0x3a8
000000010001efdc	str	x8, [sp]
000000010001efe0	adr	x2, #105530 ; literal pool for: "%s: uncorking domain"
000000010001efe4	nop
000000010001efe8	mov	w1, #0x0
000000010001efec	bl	0x1000270c8
000000010001eff0	ldr	x1, [x19, #0x68]
000000010001eff4	mov	w0, #0x14
000000010001eff8	movk	w0, #0x2200, lsl #16
000000010001effc	bl	0x10000ccd0
000000010001f000	ldr	x0, [x19, #0x68]
000000010001f004	nop
000000010001f008	ldr	x3, [x19, #0xd0]
000000010001f00c	orr	w6, wzr, #0x400
000000010001f010	mov	w1, #0x0
000000010001f014	mov	x0, x19
000000010001f018	mov	x2, #0x0
000000010001f01c	mov	x4, #0x0
000000010001f020	mov	x5, x20
000000010001f024	bl	0x10001f08c
000000010001f028	mov	w0, #0x0
000000010001f02c	ldrh	w8, [x19, #0x3a0]
000000010001f030	orr	w8, w8, #0x4
000000010001f034	strh	w8, [x19, #0x3a0]
000000010001f038	b	0x10001f078
000000010001f03c	nop
000000010001f040	nop
000000010001f044	ldr	x0, #0x253dc
000000010001f048	add	x8, x19, #0x3a8
000000010001f04c	str	x8, [sp]
000000010001f050	adr	x2, #105374 ; literal pool for: "%s: no images list yet, deferring bootstrap"
000000010001f054	nop
000000010001f058	mov	w1, #0x0
000000010001f05c	bl	0x1000270c8
000000010001f060	ldr	w1, [x19, #0x78]
000000010001f064	orr	w3, wzr, #0x2
000000010001f068	mov	x0, x19
000000010001f06c	mov	x2, x21
000000010001f070	bl	0x10001f2c4
000000010001f074	mov	w0, #0x24
000000010001f078	ldp	x29, x30, [sp, #0x30]
000000010001f07c	ldp	x20, x19, [sp, #0x20]
000000010001f080	ldp	x22, x21, [sp, #0x10]
000000010001f084	add	sp, sp, #0x40
000000010001f088	ret
000000010001f08c	sub	sp, sp, #0x70
000000010001f090	stp	x28, x27, [sp, #0x10]
000000010001f094	stp	x26, x25, [sp, #0x20]
000000010001f098	stp	x24, x23, [sp, #0x30]
000000010001f09c	stp	x22, x21, [sp, #0x40]
000000010001f0a0	stp	x20, x19, [sp, #0x50]
000000010001f0a4	stp	x29, x30, [sp, #0x60]
000000010001f0a8	add	x29, sp, #0x60
000000010001f0ac	mov	x28, x6
000000010001f0b0	mov	x26, x5
000000010001f0b4	mov	x27, x4
000000010001f0b8	mov	x25, x3
000000010001f0bc	mov	x19, x2
000000010001f0c0	mov	x23, x1
000000010001f0c4	mov	x22, x0
000000010001f0c8	bl	0x100030d70 ; symbol stub for: _dispatch_group_create
000000010001f0cc	mov	x21, x0
000000010001f0d0	bl	0x10002c3bc
000000010001f0d4	mov	x20, x0
000000010001f0d8	cbz	x19, 0x10001f0e8
000000010001f0dc	mov	x0, x19
000000010001f0e0	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010001f0e4	b	0x10001f100
000000010001f0e8	orr	x28, x28, #0x200
000000010001f0ec	mov	x0, #0x0
000000010001f0f0	mov	x1, #0x0
000000010001f0f4	mov	x2, #0x0
000000010001f0f8	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010001f0fc	mov	x19, x0
000000010001f100	ldr	x8, [x22, #0xd8]
000000010001f104	cbnz	x8, 0x10001f114
000000010001f108	bl	0x100031214 ; symbol stub for: _mach_absolute_time
000000010001f10c	str	x0, [x22, #0xd8]
000000010001f110	orr	x28, x28, #0x2000
000000010001f114	orr	w0, wzr, #0x4
000000010001f118	mov	w3, #0x0
000000010001f11c	mov	x1, #0x0
000000010001f120	mov	x2, #0x0
000000010001f124	bl	0x10000a2c8
000000010001f128	mov	x24, x0
000000010001f12c	str	x28, [sp]
000000010001f130	mov	x1, x23
000000010001f134	mov	x2, x22
000000010001f138	mov	x3, x21
000000010001f13c	mov	x4, x19
000000010001f140	mov	x5, x20
000000010001f144	mov	x6, x27
000000010001f148	mov	x7, x26
000000010001f14c	bl	0x10001f334
000000010001f150	mov	x0, x25
000000010001f154	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001f158	nop
000000010001f15c	ldr	x8, #0x20f3c ; literal pool symbol address: __xpc_type_array
000000010001f160	cmp	x0, x8
000000010001f164	b.eq	0x10001f198
000000010001f168	mov	x0, x25
000000010001f16c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001f170	nop
000000010001f174	ldr	x8, #0x20f6c ; literal pool symbol address: __xpc_type_string
000000010001f178	cmp	x0, x8
000000010001f17c	b.eq	0x10001f1e8
000000010001f180	adr	x2, #620
000000010001f184	nop
000000010001f188	mov	x0, x25
000000010001f18c	mov	x1, x24
000000010001f190	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010001f194	b	0x10001f210
000000010001f198	mov	x0, #0x0
000000010001f19c	bl	0x100031bbc ; symbol stub for: _xpc_uint64_create
000000010001f1a0	mov	x26, x0
000000010001f1a4	mov	x0, x25
000000010001f1a8	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001f1ac	cbz	x0, 0x10001f208
000000010001f1b0	mov	x27, #0x0
000000010001f1b4	mov	x0, x25
000000010001f1b8	mov	x1, x27
000000010001f1bc	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010001f1c0	cbz	x0, 0x10001f1d0
000000010001f1c4	mov	x1, x26
000000010001f1c8	mov	x2, x24
000000010001f1cc	bl	0x10001f3ec
000000010001f1d0	add	x27, x27, #0x1
000000010001f1d4	mov	x0, x25
000000010001f1d8	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001f1dc	cmp	x27, x0
000000010001f1e0	b.lo	0x10001f1b4
000000010001f1e4	b	0x10001f208
000000010001f1e8	mov	x0, #0x0
000000010001f1ec	bl	0x100031bbc ; symbol stub for: _xpc_uint64_create
000000010001f1f0	mov	x26, x0
000000010001f1f4	mov	x0, x25
000000010001f1f8	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010001f1fc	mov	x1, x26
000000010001f200	mov	x2, x24
000000010001f204	bl	0x10001f3ec
000000010001f208	mov	x0, x26
000000010001f20c	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001f210	mov	x0, #0x0
000000010001f214	mov	x1, #0x0
000000010001f218	mov	x2, #0x0
000000010001f21c	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010001f220	mov	x25, x0
000000010001f224	adr	x1, #104971 ; literal pool for: "errors"
000000010001f228	nop
000000010001f22c	mov	x0, x19
000000010001f230	mov	x2, x25
000000010001f234	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010001f238	mov	x0, x25
000000010001f23c	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001f240	cbnz	w23, 0x10001f25c
000000010001f244	ldrh	w8, [x22, #0xa4]
000000010001f248	add	w8, w8, #0x1
000000010001f24c	strh	w8, [x22, #0xa4]
000000010001f250	mov	w1, #0x9
000000010001f254	mov	x0, x22
000000010001f258	bl	0x10001d898
000000010001f25c	bl	0x10000d8e0
000000010001f260	mov	x1, x0
000000010001f264	adr	x3, #736
000000010001f268	nop
000000010001f26c	mov	x0, x21
000000010001f270	mov	x2, x24
000000010001f274	bl	0x100030da0 ; symbol stub for: _dispatch_group_notify_f
000000010001f278	mov	x0, x21
000000010001f27c	bl	0x100030d88 ; symbol stub for: _dispatch_group_leave
000000010001f280	mov	x0, x21
000000010001f284	bl	0x100030e60 ; symbol stub for: _dispatch_release
000000010001f288	str	xzr, [x24, #0x38]
000000010001f28c	mov	x0, x21
000000010001f290	bl	0x100030e60 ; symbol stub for: _dispatch_release
000000010001f294	mov	w1, #0x0
000000010001f298	mov	x0, x20
000000010001f29c	bl	0x10000e4a4
000000010001f2a0	mov	x0, x19
000000010001f2a4	ldp	x29, x30, [sp, #0x60]
000000010001f2a8	ldp	x20, x19, [sp, #0x50]
000000010001f2ac	ldp	x22, x21, [sp, #0x40]
000000010001f2b0	ldp	x24, x23, [sp, #0x30]
000000010001f2b4	ldp	x26, x25, [sp, #0x20]
000000010001f2b8	ldp	x28, x27, [sp, #0x10]
000000010001f2bc	add	sp, sp, #0x70
000000010001f2c0	b	0x100031b68 ; symbol stub for: _xpc_release
000000010001f2c4	stp	x24, x23, [sp, #-0x40]!
000000010001f2c8	stp	x22, x21, [sp, #0x10]
000000010001f2cc	stp	x20, x19, [sp, #0x20]
000000010001f2d0	stp	x29, x30, [sp, #0x30]
000000010001f2d4	add	x29, sp, #0x30
000000010001f2d8	mov	x21, x3
000000010001f2dc	mov	x22, x2
000000010001f2e0	mov	x23, x1
000000010001f2e4	mov	x19, x0
000000010001f2e8	orr	w0, wzr, #0x30
000000010001f2ec	bl	0x10000d408
000000010001f2f0	mov	x20, x0
000000010001f2f4	str	w23, [x20, #0x10]
000000010001f2f8	mov	x0, x22
000000010001f2fc	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010001f300	str	x0, [x20, #0x18]
000000010001f304	str	w21, [x20, #0x20]
000000010001f308	ldr	x8, [x19, #0xa8]!
000000010001f30c	str	x8, [x20]
000000010001f310	cbz	x8, 0x10001f318
000000010001f314	str	x20, [x8, #0x8]
000000010001f318	str	x20, [x19]
000000010001f31c	str	x19, [x20, #0x8]
000000010001f320	ldp	x29, x30, [sp, #0x30]
000000010001f324	ldp	x20, x19, [sp, #0x20]
000000010001f328	ldp	x22, x21, [sp, #0x10]
000000010001f32c	ldp	x24, x23, [sp], #0x40
000000010001f330	ret
000000010001f334	stp	x26, x25, [sp, #-0x50]!
000000010001f338	stp	x24, x23, [sp, #0x10]
000000010001f33c	stp	x22, x21, [sp, #0x20]
000000010001f340	stp	x20, x19, [sp, #0x30]
000000010001f344	stp	x29, x30, [sp, #0x40]
000000010001f348	add	x29, sp, #0x40
000000010001f34c	mov	x19, x7
000000010001f350	mov	x21, x6
000000010001f354	mov	x22, x5
000000010001f358	mov	x23, x4
000000010001f35c	mov	x24, x3
000000010001f360	mov	x25, x2
000000010001f364	mov	x20, x0
000000010001f368	ldr	x26, [x29, #0x10]
000000010001f36c	str	w1, [x20, #0x8]
000000010001f370	orr	w1, wzr, #0x8
000000010001f374	mov	x0, x25
000000010001f378	bl	0x10001d898
000000010001f37c	str	x25, [x20, #0x30]
000000010001f380	mov	x0, x24
000000010001f384	bl	0x100030e78 ; symbol stub for: _dispatch_retain
000000010001f388	mov	x0, x24
000000010001f38c	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
000000010001f390	str	x24, [x20, #0x38]
000000010001f394	mov	x0, x23
000000010001f398	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010001f39c	str	x0, [x20, #0x40]
000000010001f3a0	mov	w1, #0x28
000000010001f3a4	mov	x0, x22
000000010001f3a8	bl	0x10000e3f4
000000010001f3ac	str	x0, [x20, #0x48]
000000010001f3b0	cbz	x21, 0x10001f3c0
000000010001f3b4	mov	x0, x21
000000010001f3b8	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010001f3bc	str	x0, [x20, #0x58]
000000010001f3c0	ldr	q0, [x19, #0x10]
000000010001f3c4	stur	q0, [x20, #0x1c]
000000010001f3c8	ldr	q0, [x19]
000000010001f3cc	stur	q0, [x20, #0xc]
000000010001f3d0	str	x26, [x20, #0x50]
000000010001f3d4	ldp	x29, x30, [sp, #0x40]
000000010001f3d8	ldp	x20, x19, [sp, #0x30]
000000010001f3dc	ldp	x22, x21, [sp, #0x20]
000000010001f3e0	ldp	x24, x23, [sp, #0x10]
000000010001f3e4	ldp	x26, x25, [sp], #0x50
000000010001f3e8	ret
000000010001f3ec	sub	sp, sp, #0x70
000000010001f3f0	stp	x28, x27, [sp, #0x10]
000000010001f3f4	stp	x26, x25, [sp, #0x20]
000000010001f3f8	stp	x24, x23, [sp, #0x30]
000000010001f3fc	stp	x22, x21, [sp, #0x40]
000000010001f400	stp	x20, x19, [sp, #0x50]
000000010001f404	stp	x29, x30, [sp, #0x60]
000000010001f408	add	x29, sp, #0x60
000000010001f40c	mov	x23, x2
000000010001f410	mov	x21, x1
000000010001f414	mov	x20, x0
000000010001f418	ldr	x19, [x23, #0x30]
000000010001f41c	mov	x0, x21
000000010001f420	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001f424	nop
000000010001f428	ldr	x8, #0x20cc0 ; literal pool symbol address: __xpc_type_uint64
000000010001f42c	cmp	x0, x8
000000010001f430	b.eq	0x10001f43c
000000010001f434	mov	x27, #0x0
000000010001f438	b	0x10001f448
000000010001f43c	mov	x0, x21
000000010001f440	bl	0x100031bc8 ; symbol stub for: _xpc_uint64_get_value
000000010001f444	mov	x27, x0
000000010001f448	ldp	x24, x8, [x23, #0x40]
000000010001f44c	str	x8, [sp, #0x8]
000000010001f450	ldp	x8, x22, [x23, #0x50]
000000010001f454	and	x8, x8, #0xffffff00
000000010001f458	orr	x21, x8, x27
000000010001f45c	ldr	w26, [x23, #0x8]
000000010001f460	ldr	x25, [x23, #0x38]
000000010001f464	add	x23, x23, #0xc
000000010001f468	ldrb	w28, [x20]
000000010001f46c	adr	x1, #104394 ; literal pool for: "/usr/lib"
000000010001f470	nop
000000010001f474	mov	x0, x20
000000010001f478	bl	0x10000d7a4
000000010001f47c	tbnz	w0, #0x0, 0x10001f4c0
000000010001f480	and	x8, x27, #0xff
000000010001f484	cmp	x8, #0x2
000000010001f488	cset	w9, eq
000000010001f48c	lsl	w9, w9, #1
000000010001f490	cmp	x8, #0x1
000000010001f494	csinc	w8, w9, wzr, ne
000000010001f498	cmp	w28, #0x2f
000000010001f49c	orr	w9, wzr, #0x4
000000010001f4a0	csel	w27, w8, w9, eq
000000010001f4a4	mov	w8, #0x6c
000000010001f4a8	csel	w28, wzr, w8, eq
000000010001f4ac	adr	x1, #104339 ; literal pool for: "/usr/local/lib"
000000010001f4b0	nop
000000010001f4b4	mov	x0, x20
000000010001f4b8	bl	0x10000d7a4
000000010001f4bc	cbz	w0, 0x10001f4c8
000000010001f4c0	orr	w27, wzr, #0x4
000000010001f4c4	mov	w28, #0x6c
000000010001f4c8	mov	x0, x27
000000010001f4cc	mov	x3, x28
000000010001f4d0	mov	x1, x20
000000010001f4d4	mov	x2, x22
000000010001f4d8	bl	0x10000a2c8
000000010001f4dc	mov	x20, x0
000000010001f4e0	bl	0x10000d8e0
000000010001f4e4	mov	x1, x0
000000010001f4e8	adr	x3, #376
000000010001f4ec	nop
000000010001f4f0	mov	x0, x20
000000010001f4f4	mov	x2, x19
000000010001f4f8	bl	0x10000a3cc
000000010001f4fc	str	x21, [sp]
000000010001f500	mov	x1, x26
000000010001f504	mov	x0, x20
000000010001f508	mov	x2, x19
000000010001f50c	mov	x3, x25
000000010001f510	mov	x4, x24
000000010001f514	ldr	x5, [sp, #0x8]
000000010001f518	mov	x6, x22
000000010001f51c	mov	x7, x23
000000010001f520	bl	0x10001f334
000000010001f524	ldp	x29, x30, [sp, #0x60]
000000010001f528	ldp	x20, x19, [sp, #0x50]
000000010001f52c	ldp	x22, x21, [sp, #0x40]
000000010001f530	ldp	x24, x23, [sp, #0x30]
000000010001f534	ldp	x26, x25, [sp, #0x20]
000000010001f538	ldp	x28, x27, [sp, #0x10]
000000010001f53c	add	sp, sp, #0x70
000000010001f540	ret
000000010001f544	stp	x20, x19, [sp, #-0x20]!
000000010001f548	stp	x29, x30, [sp, #0x10]
000000010001f54c	add	x29, sp, #0x10
000000010001f550	mov	x19, x0
000000010001f554	ldr	x20, [x19, #0x30]
000000010001f558	ldr	x8, [x19, #0x50]
000000010001f55c	tbz	w8, #0x10, 0x10001f570
000000010001f560	mov	x0, x20
000000010001f564	bl	0x100022b44
000000010001f568	tbnz	w0, #0x0, 0x10001f630
000000010001f56c	ldr	x8, [x19, #0x50]
000000010001f570	tbnz	w8, #0x9, 0x10001f5a4
000000010001f574	ldr	x0, [x19, #0x40]
000000010001f578	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
000000010001f57c	orr	w8, w0, #0x20
000000010001f580	cmp	w8, #0x20
000000010001f584	b.eq	0x10001f5e8
000000010001f588	sxtw	x2, w0
000000010001f58c	adr	x0, #-22984
000000010001f590	nop
000000010001f594	mov	x1, x20
000000010001f598	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010001f59c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010001f5a0	b	0x10001f5e8
000000010001f5a4	tbz	w8, #0xa, 0x10001f5c8
000000010001f5a8	ldr	x0, [x19, #0x48]
000000010001f5ac	adr	x2, #13888
000000010001f5b0	nop
000000010001f5b4	mov	x1, x19
000000010001f5b8	bl	0x10002c2b8
000000010001f5bc	ldr	x0, [x20, #0xd0]
000000010001f5c0	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001f5c4	str	xzr, [x20, #0xd0]
000000010001f5c8	ldr	x0, [x19, #0x40]
000000010001f5cc	adr	x1, #104035 ; literal pool for: "errors"
000000010001f5d0	nop
000000010001f5d4	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010001f5d8	adr	x2, #13960
000000010001f5dc	nop
000000010001f5e0	mov	x1, x20
000000010001f5e4	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010001f5e8	ldrb	w8, [x19, #0x51]
000000010001f5ec	tbz	w8, #0x5, 0x10001f630
000000010001f5f0	ldr	x0, [x20, #0xd8]
000000010001f5f4	bl	0x100008730
000000010001f5f8	str	x0, [x20, #0xe0]
000000010001f5fc	nop
000000010001f600	ldr	x8, #0x246f8
000000010001f604	cmp	x8, x20
000000010001f608	b.ne	0x10001f618
000000010001f60c	adr	x8, #151070
000000010001f610	nop
000000010001f614	strb	wzr, [x8]
000000010001f618	ldr	x1, [x20, #0x68]
000000010001f61c	mov	w0, #0x18
000000010001f620	movk	w0, #0x2200, lsl #16
000000010001f624	bl	0x10000ccd0
000000010001f628	ldr	x0, [x20, #0x68]
000000010001f62c	nop
000000010001f630	ldr	w8, [x19, #0x8]
000000010001f634	cbnz	w8, 0x10001f644
000000010001f638	mov	w1, #0x9
000000010001f63c	mov	x0, x20
000000010001f640	bl	0x100022148
000000010001f644	mov	x0, x19
000000010001f648	bl	0x1000201a8
000000010001f64c	mov	w1, #0x0
000000010001f650	mov	x0, x19
000000010001f654	ldp	x29, x30, [sp, #0x10]
000000010001f658	ldp	x20, x19, [sp], #0x20
000000010001f65c	b	0x10000e4a4
000000010001f660	sub	sp, sp, #0x130
000000010001f664	stp	x28, x27, [sp, #0xd0]
000000010001f668	stp	x26, x25, [sp, #0xe0]
000000010001f66c	stp	x24, x23, [sp, #0xf0]
000000010001f670	stp	x22, x21, [sp, #0x100]
000000010001f674	stp	x20, x19, [sp, #0x110]
000000010001f678	stp	x29, x30, [sp, #0x120]
000000010001f67c	add	x29, sp, #0x120
000000010001f680	mov	x20, x3
000000010001f684	mov	x21, x2
000000010001f688	mov	x22, x1
000000010001f68c	mov	x19, x0
000000010001f690	nop
000000010001f694	ldr	x8, #0x20984 ; literal pool symbol address: ___stack_chk_guard
000000010001f698	ldr	x8, [x8]
000000010001f69c	stur	x8, [x29, #-0x58]
000000010001f6a0	bl	0x10000a878
000000010001f6a4	ldrb	w8, [x20, #0x3a0]
000000010001f6a8	tst	w8, #0x3
000000010001f6ac	b.eq	0x10001f6d4
000000010001f6b0	cmp	w0, #0x3
000000010001f6b4	b.ne	0x10001f70c
000000010001f6b8	cbnz	x22, 0x10001f6c4
000000010001f6bc	cmn	w21, #0x1
000000010001f6c0	b.eq	0x10001f710
000000010001f6c4	mov	w1, #0x0
000000010001f6c8	mov	x0, x19
000000010001f6cc	bl	0x10000e3f4
000000010001f6d0	b	0x10001fbb4
000000010001f6d4	cbz	w0, 0x10001f718
000000010001f6d8	sub	w8, w0, #0x1
000000010001f6dc	cmp	w8, #0x1
000000010001f6e0	b.hi	0x10001f770
000000010001f6e4	ldr	x22, [x19, #0x50]
000000010001f6e8	cmp	w21, #0x8f
000000010001f6ec	b.eq	0x10001f6f4
000000010001f6f0	cbnz	w21, 0x10001f888
000000010001f6f4	tbz	w22, #0xc, 0x10001f7ac
000000010001f6f8	tbnz	w22, #0xa, 0x10001f9b0
000000010001f6fc	ldr	w8, [x19, #0x8]
000000010001f700	cbz	w8, 0x10001fbf8
000000010001f704	mov	w21, #0x74
000000010001f708	b	0x10001fba0
000000010001f70c	cbnz	x22, 0x100020134
000000010001f710	orr	w1, wzr, #0x7c
000000010001f714	b	0x10001fba4
000000010001f718	mov	x0, x19
000000010001f71c	bl	0x10000a8a8
000000010001f720	mov	x22, x0
000000010001f724	cmp	w21, #0x8f
000000010001f728	csel	w21, wzr, w21, eq
000000010001f72c	cbz	w21, 0x10001f8f8
000000010001f730	cmp	w21, #0x15
000000010001f734	b.eq	0x10001f8d4
000000010001f738	cmp	w21, #0x1d
000000010001f73c	b.ne	0x10001f950
000000010001f740	mov	w21, #0x1d
000000010001f744	mov	w0, #0x1d
000000010001f748	bl	0x100031724 ; symbol stub for: _strerror
000000010001f74c	stp	x21, x0, [sp, #0x8]
000000010001f750	str	x22, [sp]
000000010001f754	adr	x2, #103674 ; literal pool for: "Path not a regular file: path = %s, error = %d: %s"
000000010001f758	nop
000000010001f75c	orr	w1, wzr, #0x3
000000010001f760	mov	x0, x20
000000010001f764	bl	0x100019bfc
000000010001f768	mov	w1, #0x6c
000000010001f76c	b	0x10001fba4
000000010001f770	cmp	w0, #0x3
000000010001f774	b.ne	0x10001fba0
000000010001f778	mov	w1, #0x0
000000010001f77c	mov	x0, x19
000000010001f780	bl	0x10000e3f4
000000010001f784	cbz	x22, 0x10001f98c
000000010001f788	mov	x0, x22
000000010001f78c	bl	0x10000a878
000000010001f790	cmp	w0, #0x3
000000010001f794	b.ne	0x10001faa4
000000010001f798	orr	w21, wzr, #0x1
000000010001f79c	orr	w1, wzr, #0x1
000000010001f7a0	mov	x0, x22
000000010001f7a4	bl	0x10000a3c4
000000010001f7a8	b	0x10001faa8
000000010001f7ac	str	x22, [sp, #0x30]
000000010001f7b0	mov	x0, x19
000000010001f7b4	bl	0x10000a8b0
000000010001f7b8	bl	0x10003194c ; symbol stub for: _xpc_bundle_copy_services
000000010001f7bc	mov	x22, x0
000000010001f7c0	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001f7c4	cbz	x0, 0x10001f87c
000000010001f7c8	mov	x23, #0x0
000000010001f7cc	add	x24, x19, #0xc
000000010001f7d0	mov	w28, #-0x1100
000000010001f7d4	adr	x25, #-372
000000010001f7d8	nop
000000010001f7dc	mov	x0, x22
000000010001f7e0	mov	x1, x23
000000010001f7e4	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
000000010001f7e8	cmp	w21, #0x8f
000000010001f7ec	b.ne	0x10001f800
000000010001f7f0	bl	0x10000a340
000000010001f7f4	mov	x26, x0
000000010001f7f8	mov	w27, #0x1002
000000010001f7fc	b	0x10001f820
000000010001f800	bl	0x10003197c ; symbol stub for: _xpc_bundle_get_path
000000010001f804	mov	x1, x0
000000010001f808	orr	w0, wzr, #0x1
000000010001f80c	mov	w3, #0x0
000000010001f810	mov	x2, #0x0
000000010001f814	bl	0x10000a2c8
000000010001f818	mov	x26, x0
000000010001f81c	mov	w27, #0x1001
000000010001f820	ldr	w1, [x19, #0x8]
000000010001f824	ldp	x2, x3, [x19, #0x30]
000000010001f828	ldp	x4, x5, [x19, #0x40]
000000010001f82c	ldp	x8, x6, [x19, #0x50]
000000010001f830	str	x8, [sp]
000000010001f834	mov	x0, x26
000000010001f838	mov	x7, x24
000000010001f83c	bl	0x10001f334
000000010001f840	ldr	x8, [x26, #0x50]
000000010001f844	and	x8, x8, x28
000000010001f848	orr	x8, x8, x27
000000010001f84c	str	x8, [x26, #0x50]
000000010001f850	bl	0x10000d8e0
000000010001f854	mov	x1, x0
000000010001f858	mov	x0, x26
000000010001f85c	mov	x2, x20
000000010001f860	mov	x3, x25
000000010001f864	bl	0x10000a3cc
000000010001f868	add	x23, x23, #0x1
000000010001f86c	mov	x0, x22
000000010001f870	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010001f874	cmp	x23, x0
000000010001f878	b.lo	0x10001f7dc
000000010001f87c	mov	x0, x22
000000010001f880	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001f884	ldr	x22, [sp, #0x30]
000000010001f888	cmp	w21, #0x6c
000000010001f88c	b.gt	0x10001f8a8
000000010001f890	cbz	w21, 0x10001fbac
000000010001f894	cmp	w21, #0x24
000000010001f898	b.eq	0x10001fa84
000000010001f89c	cmp	w21, #0x6b
000000010001f8a0	b.eq	0x10001f8c4
000000010001f8a4	b	0x10001fba0
000000010001f8a8	cmp	w21, #0x6d
000000010001f8ac	b.eq	0x10001f8c4
000000010001f8b0	cmp	w21, #0x80
000000010001f8b4	b.eq	0x10001f8c4
000000010001f8b8	cmp	w21, #0x8f
000000010001f8bc	b.eq	0x10001fbac
000000010001f8c0	b	0x10001fba0
000000010001f8c4	tst	x22, #0x1000
000000010001f8c8	mov	w8, #0x79
000000010001f8cc	csel	w21, w21, w8, ne
000000010001f8d0	b	0x10001fba0
000000010001f8d4	adr	x1, #103341 ; literal pool for: ".xpc"
000000010001f8d8	nop
000000010001f8dc	mov	x0, x22
000000010001f8e0	bl	0x10000d7e4
000000010001f8e4	tbz	w0, #0x0, 0x10001fb04
000000010001f8e8	orr	w22, wzr, #0x1
000000010001f8ec	orr	w23, wzr, #0x1000
000000010001f8f0	orr	w21, wzr, #0x1
000000010001f8f4	b	0x10001fb2c
000000010001f8f8	adr	x1, #103368 ; literal pool for: ".plist"
000000010001f8fc	nop
000000010001f900	mov	x0, x22
000000010001f904	bl	0x10000d7e4
000000010001f908	cbz	w0, 0x10001fbac
000000010001f90c	ldr	w8, [x19, #0x8]
000000010001f910	cbz	w8, 0x10001fc20
000000010001f914	mov	x0, x19
000000010001f918	bl	0x10000a8a8
000000010001f91c	mov	x22, x0
000000010001f920	mov	x0, x19
000000010001f924	bl	0x10000a8a0
000000010001f928	mov	x21, x0
000000010001f92c	mov	x0, x19
000000010001f930	bl	0x10000a880
000000010001f934	mov	x23, x0
000000010001f938	str	xzr, [sp, #0x38]
000000010001f93c	ldrb	w8, [x20, #0x3a0]
000000010001f940	tst	w8, #0x3
000000010001f944	b.eq	0x10001fce8
000000010001f948	orr	w21, wzr, #0x7c
000000010001f94c	b	0x10001f974
000000010001f950	mov	x0, x21
000000010001f954	bl	0x100031724 ; symbol stub for: _strerror
000000010001f958	stp	x21, x0, [sp, #0x8]
000000010001f95c	str	x22, [sp]
000000010001f960	adr	x2, #103217 ; literal pool for: "Could not read path: path = %s, error = %d: %s"
000000010001f964	nop
000000010001f968	orr	w1, wzr, #0x3
000000010001f96c	mov	x0, x20
000000010001f970	bl	0x100019bfc
000000010001f974	mov	x1, x21
000000010001f978	mov	x0, x19
000000010001f97c	bl	0x100020144
000000010001f980	cmp	w21, #0x24
000000010001f984	b.ne	0x10001fbac
000000010001f988	b	0x10001fbb4
000000010001f98c	cbz	w21, 0x10001fbb4
000000010001f990	cmn	w21, #0x1
000000010001f994	b.ne	0x10001fc10
000000010001f998	mov	x0, x19
000000010001f99c	bl	0x1000201a8
000000010001f9a0	mov	w1, #0x0
000000010001f9a4	mov	x0, x19
000000010001f9a8	bl	0x10000e4a4
000000010001f9ac	b	0x10001fbb4
000000010001f9b0	mov	x0, x19
000000010001f9b4	bl	0x10000a8b0
000000010001f9b8	mov	x26, x0
000000010001f9bc	ldr	x22, [x19, #0x48]
000000010001f9c0	bl	0x100031970 ; symbol stub for: _xpc_bundle_get_info_dictionary
000000010001f9c4	mov	x21, x0
000000010001f9c8	cbz	x21, 0x10001fb9c
000000010001f9cc	adr	x1, #79915 ; literal pool for: "CFBundleIdentifier"
000000010001f9d0	nop
000000010001f9d4	mov	x0, x21
000000010001f9d8	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001f9dc	mov	x23, x0
000000010001f9e0	cbz	x23, 0x10001fb9c
000000010001f9e4	mov	x0, x22
000000010001f9e8	mov	x1, x23
000000010001f9ec	bl	0x10002c284
000000010001f9f0	mov	x24, x0
000000010001f9f4	cbz	x24, 0x10001fa68
000000010001f9f8	mov	x0, x24
000000010001f9fc	bl	0x10000a8b0
000000010001fa00	mov	x25, x0
000000010001fa04	orr	w1, wzr, #0x2
000000010001fa08	mov	x0, x26
000000010001fa0c	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
000000010001fa10	mov	x26, x0
000000010001fa14	orr	w1, wzr, #0x2
000000010001fa18	mov	x0, x25
000000010001fa1c	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
000000010001fa20	mov	x27, x0
000000010001fa24	bl	0x10001ec48
000000010001fa28	cbz	w0, 0x10001fa38
000000010001fa2c	mov	x0, x26
000000010001fa30	bl	0x10001ec48
000000010001fa34	cbz	w0, 0x10001fe08
000000010001fa38	mov	x0, x27
000000010001fa3c	bl	0x10001ec48
000000010001fa40	tbnz	w0, #0x0, 0x10001fd30
000000010001fa44	mov	x0, x26
000000010001fa48	bl	0x10001ec48
000000010001fa4c	tbz	w0, #0x0, 0x10001fd30
000000010001fa50	orr	w21, wzr, #0x7f
000000010001fa54	mov	x1, x21
000000010001fa58	mov	x0, x24
000000010001fa5c	bl	0x100020144
000000010001fa60	mov	x0, x24
000000010001fa64	bl	0x1000201a8
000000010001fa68	ldr	x8, [x19, #0x50]
000000010001fa6c	and	x8, x8, #0xfffffffffffffbff
000000010001fa70	str	x8, [x19, #0x50]
000000010001fa74	mov	x0, x22
000000010001fa78	mov	x1, x23
000000010001fa7c	mov	x2, x19
000000010001fa80	bl	0x10002c1c0
000000010001fa84	ldr	w8, [x19, #0x8]
000000010001fa88	cbnz	w8, 0x10001fbb4
000000010001fa8c	ldr	x0, [x19, #0x38]
000000010001fa90	bl	0x100030d88 ; symbol stub for: _dispatch_group_leave
000000010001fa94	ldr	x0, [x19, #0x38]
000000010001fa98	bl	0x100030e60 ; symbol stub for: _dispatch_release
000000010001fa9c	str	xzr, [x19, #0x38]
000000010001faa0	b	0x10001fbb4
000000010001faa4	mov	x21, #0x0
000000010001faa8	mov	w1, #0x0
000000010001faac	mov	x0, x22
000000010001fab0	bl	0x10000e3f4
000000010001fab4	ldr	w1, [x19, #0x8]
000000010001fab8	ldp	x2, x3, [x19, #0x30]
000000010001fabc	ldp	x4, x5, [x19, #0x40]
000000010001fac0	add	x7, x19, #0xc
000000010001fac4	ldp	x8, x6, [x19, #0x50]
000000010001fac8	str	x8, [sp]
000000010001facc	mov	x0, x22
000000010001fad0	bl	0x10001f334
000000010001fad4	ldr	x8, [x22, #0x50]
000000010001fad8	and	x8, x8, #0xffffff00
000000010001fadc	orr	x8, x8, x21
000000010001fae0	str	x8, [x22, #0x50]
000000010001fae4	bl	0x10000d8e0
000000010001fae8	mov	x1, x0
000000010001faec	adr	x3, #-1164
000000010001faf0	nop
000000010001faf4	mov	x0, x22
000000010001faf8	mov	x2, x20
000000010001fafc	bl	0x10000a3cc
000000010001fb00	b	0x10001fbb4
000000010001fb04	adr	x1, #102786 ; literal pool for: ".pluginkit"
000000010001fb08	nop
000000010001fb0c	mov	x0, x22
000000010001fb10	bl	0x10000d7e4
000000010001fb14	mov	x21, x0
000000010001fb18	cmp	w21, #0x0
000000010001fb1c	orr	w8, wzr, #0x3
000000010001fb20	csinc	w22, w8, wzr, eq
000000010001fb24	orr	w8, wzr, #0x1000
000000010001fb28	csel	x23, x8, xzr, ne
000000010001fb2c	mov	x0, x19
000000010001fb30	bl	0x10000a8a8
000000010001fb34	mov	x1, x0
000000010001fb38	mov	x0, x22
000000010001fb3c	mov	w3, #0x0
000000010001fb40	mov	x2, #0x0
000000010001fb44	bl	0x10000a2c8
000000010001fb48	mov	x22, x0
000000010001fb4c	ldr	w1, [x19, #0x8]
000000010001fb50	ldp	x2, x3, [x19, #0x30]
000000010001fb54	ldp	x4, x5, [x19, #0x40]
000000010001fb58	add	x7, x19, #0xc
000000010001fb5c	ldp	x8, x6, [x19, #0x50]
000000010001fb60	str	x8, [sp]
000000010001fb64	bl	0x10001f334
000000010001fb68	ldr	x8, [x22, #0x50]
000000010001fb6c	and	x8, x8, #0xffffff00
000000010001fb70	orr	x9, x23, x21
000000010001fb74	orr	x8, x9, x8
000000010001fb78	str	x8, [x22, #0x50]
000000010001fb7c	bl	0x10000d8e0
000000010001fb80	mov	x1, x0
000000010001fb84	adr	x3, #-1316
000000010001fb88	nop
000000010001fb8c	mov	x0, x22
000000010001fb90	mov	x2, x20
000000010001fb94	bl	0x10000a3cc
000000010001fb98	b	0x10001fbac
000000010001fb9c	mov	w21, #0x16
000000010001fba0	mov	x1, x21
000000010001fba4	mov	x0, x19
000000010001fba8	bl	0x100020144
000000010001fbac	mov	x0, x19
000000010001fbb0	bl	0x1000201a8
000000010001fbb4	mov	w1, #0x0
000000010001fbb8	mov	x0, x19
000000010001fbbc	bl	0x10000e4a4
000000010001fbc0	ldur	x8, [x29, #-0x58]
000000010001fbc4	nop
000000010001fbc8	ldr	x9, #0x20450 ; literal pool symbol address: ___stack_chk_guard
000000010001fbcc	ldr	x9, [x9]
000000010001fbd0	cmp	x9, x8
000000010001fbd4	b.ne	0x100020130
000000010001fbd8	ldp	x29, x30, [sp, #0x120]
000000010001fbdc	ldp	x20, x19, [sp, #0x110]
000000010001fbe0	ldp	x22, x21, [sp, #0x100]
000000010001fbe4	ldp	x24, x23, [sp, #0xf0]
000000010001fbe8	ldp	x26, x25, [sp, #0xe0]
000000010001fbec	ldp	x28, x27, [sp, #0xd0]
000000010001fbf0	add	sp, sp, #0x130
000000010001fbf4	ret
000000010001fbf8	mov	x0, x20
000000010001fbfc	mov	x1, x19
000000010001fc00	bl	0x1000225e0
000000010001fc04	cmp	w0, #0x79
000000010001fc08	csel	w21, wzr, w0, eq
000000010001fc0c	b	0x10001f888
000000010001fc10	mov	x1, x21
000000010001fc14	mov	x0, x19
000000010001fc18	bl	0x100020144
000000010001fc1c	b	0x10001fbb4
000000010001fc20	mov	w8, #-0x1
000000010001fc24	str	w8, [sp, #0x84]
000000010001fc28	mov	x0, x19
000000010001fc2c	bl	0x10000a8a8
000000010001fc30	mov	x22, x0
000000010001fc34	mov	x0, x19
000000010001fc38	bl	0x10000a8a0
000000010001fc3c	mov	x24, x0
000000010001fc40	mov	x0, x19
000000010001fc44	bl	0x10000a880
000000010001fc48	adr	x8, #1488
000000010001fc4c	nop
000000010001fc50	str	x8, [sp, #0x38]
000000010001fc54	adr	x8, #2456
000000010001fc58	nop
000000010001fc5c	str	x8, [sp, #0x40]
000000010001fc60	adr	x8, #2808
000000010001fc64	nop
000000010001fc68	str	x8, [sp, #0x48]
000000010001fc6c	adr	x8, #3328
000000010001fc70	nop
000000010001fc74	str	x8, [sp, #0x50]
000000010001fc78	adr	x8, #3404
000000010001fc7c	nop
000000010001fc80	str	x8, [sp, #0x58]
000000010001fc84	adr	x8, #3604
000000010001fc88	nop
000000010001fc8c	stp	x20, xzr, [sp, #0x70]
000000010001fc90	str	x8, [sp, #0x60]
000000010001fc94	adr	x8, #3796
000000010001fc98	nop
000000010001fc9c	str	x8, [sp, #0x68]
000000010001fca0	cbz	x0, 0x10001fd78
000000010001fca4	add	x1, sp, #0x78
000000010001fca8	bl	0x100020ba4
000000010001fcac	mov	x21, x0
000000010001fcb0	str	w21, [sp, #0x84]
000000010001fcb4	cbz	w21, 0x10001fd8c
000000010001fcb8	mov	x0, x21
000000010001fcbc	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010001fcc0	stp	x21, x0, [sp, #0x8]
000000010001fcc4	str	x22, [sp]
000000010001fcc8	adr	x2, #102399 ; literal pool for: "Could not parse plist: path = %s, error = %d: %s"
000000010001fccc	nop
000000010001fcd0	orr	w1, wzr, #0x3
000000010001fcd4	mov	x0, x20
000000010001fcd8	bl	0x100019bfc
000000010001fcdc	ldr	x21, [sp, #0x78]
000000010001fce0	cbnz	x21, 0x10001fecc
000000010001fce4	b	0x10001fed4
000000010001fce8	add	x24, x19, #0xc
000000010001fcec	orr	w1, wzr, #0x3
000000010001fcf0	orr	w2, wzr, #0x80
000000010001fcf4	mov	x0, x20
000000010001fcf8	mov	x3, x24
000000010001fcfc	mov	x4, x22
000000010001fd00	mov	x5, x21
000000010001fd04	bl	0x10001e964
000000010001fd08	mov	x21, x0
000000010001fd0c	cbz	w21, 0x10001fdc0
000000010001fd10	adr	x3, #105849 ; literal pool for: "service bootout"
000000010001fd14	nop
000000010001fd18	mov	x2, x21
000000010001fd1c	mov	x0, x20
000000010001fd20	mov	x1, x24
000000010001fd24	bl	0x10001dc6c
000000010001fd28	cbnz	w21, 0x10001ffe8
000000010001fd2c	b	0x10001f980
000000010001fd30	mov	x0, x27
000000010001fd34	bl	0x10001ec48
000000010001fd38	tbnz	w0, #0x0, 0x10001fd48
000000010001fd3c	mov	x0, x26
000000010001fd40	bl	0x10001ec48
000000010001fd44	tbz	w0, #0x0, 0x10001ff44
000000010001fd48	mov	x0, x27
000000010001fd4c	mov	x1, x26
000000010001fd50	bl	0x100031700 ; symbol stub for: _strcmp
000000010001fd54	cbz	w0, 0x10001fee0
000000010001fd58	stp	x26, x27, [sp]
000000010001fd5c	adr	x2, #105855 ; literal pool for: "Conflicts exist in System services. Randomly deciding: path1 = %s, path2 = %s"
000000010001fd60	nop
000000010001fd64	orr	w1, wzr, #0x4
000000010001fd68	mov	x0, x20
000000010001fd6c	bl	0x100019bfc
000000010001fd70	mov	w21, #0x82
000000010001fd74	b	0x10001fba0
000000010001fd78	mov	x0, x19
000000010001fd7c	bl	0x10000a890
000000010001fd80	mov	x21, x0
000000010001fd84	str	x21, [sp, #0x78]
000000010001fd88	b	0x10001fd90
000000010001fd8c	ldr	x21, [sp, #0x78]
000000010001fd90	add	x23, x19, #0xc
000000010001fd94	adr	x1, #78576 ; literal pool for: "Label"
000000010001fd98	nop
000000010001fd9c	mov	x0, x21
000000010001fda0	bl	0x100020c34
000000010001fda4	tbnz	w0, #0x0, 0x10001fdb8
000000010001fda8	mov	x0, x19
000000010001fdac	bl	0x10000a888
000000010001fdb0	cmp	w0, #0x8f
000000010001fdb4	b.ne	0x10001fe10
000000010001fdb8	orr	w25, wzr, #0x80
000000010001fdbc	b	0x10001fe14
000000010001fdc0	cbz	x23, 0x10001ffa4
000000010001fdc4	add	x1, sp, #0x38
000000010001fdc8	mov	x0, x23
000000010001fdcc	bl	0x100020ba4
000000010001fdd0	mov	x21, x0
000000010001fdd4	cbz	w21, 0x10001ffb8
000000010001fdd8	mov	x0, x21
000000010001fddc	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010001fde0	stp	x21, x0, [sp, #0x8]
000000010001fde4	str	x22, [sp]
000000010001fde8	adr	x2, #105649 ; literal pool for: "Could not parse plist: path = %s, error = %d: %s:"
000000010001fdec	nop
000000010001fdf0	orr	w1, wzr, #0x3
000000010001fdf4	mov	x0, x20
000000010001fdf8	bl	0x100019bfc
000000010001fdfc	ldr	x22, [sp, #0x38]
000000010001fe00	cbnz	x22, 0x10001ffdc
000000010001fe04	b	0x10001ffe4
000000010001fe08	orr	w21, wzr, #0x7f
000000010001fe0c	b	0x10001fba0
000000010001fe10	mov	x25, #0x0
000000010001fe14	ldr	x8, [x20, #0x60]
000000010001fe18	adr	x9, #144384
000000010001fe1c	nop
000000010001fe20	cmp	x8, x9
000000010001fe24	orr	w8, wzr, #0x80
000000010001fe28	csel	x2, xzr, x8, eq
000000010001fe2c	orr	w1, wzr, #0x2
000000010001fe30	mov	x0, x20
000000010001fe34	mov	x3, x23
000000010001fe38	mov	x4, x22
000000010001fe3c	mov	x5, x24
000000010001fe40	bl	0x10001e964
000000010001fe44	mov	x24, x0
000000010001fe48	cbz	w24, 0x10001fe84
000000010001fe4c	add	x1, sp, #0x88
000000010001fe50	mov	x0, x23
000000010001fe54	bl	0x1000293c0
000000010001fe58	cmp	w24, #0x7a
000000010001fe5c	b.eq	0x10001fea4
000000010001fe60	cmp	w24, #0x1
000000010001fe64	b.ne	0x10001fec4
000000010001fe68	adr	x3, #102032 ; literal pool for: "service bootstrap"
000000010001fe6c	nop
000000010001fe70	orr	w2, wzr, #0x1
000000010001fe74	mov	x0, x20
000000010001fe78	mov	x1, x23
000000010001fe7c	bl	0x10001dc6c
000000010001fe80	b	0x10001fec4
000000010001fe84	adr	x1, #85874 ; literal pool for: "/System/Library/LaunchDaemons/com.apple.jetsamproperties"
000000010001fe88	nop
000000010001fe8c	mov	x0, x22
000000010001fe90	bl	0x10000d7a4
000000010001fe94	cbz	w0, 0x10001fee8
000000010001fe98	str	wzr, [sp, #0x84]
000000010001fe9c	cbnz	x21, 0x10001fecc
000000010001fea0	b	0x10001fed4
000000010001fea4	ldr	w8, [x19, #0x20]
000000010001fea8	stp	x0, x8, [sp, #0x8]
000000010001feac	str	x22, [sp]
000000010001feb0	adr	x2, #101978 ; literal pool for: "Caller specified a plist with bad ownership/permissions: path = %s, caller = %s.%d"
000000010001feb4	nop
000000010001feb8	orr	w1, wzr, #0x3
000000010001febc	mov	x0, x20
000000010001fec0	bl	0x100019bfc
000000010001fec4	str	w24, [sp, #0x84]
000000010001fec8	cbz	x21, 0x10001fed4
000000010001fecc	mov	x0, x21
000000010001fed0	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001fed4	ldr	w21, [sp, #0x84]
000000010001fed8	cbnz	w21, 0x10001f974
000000010001fedc	b	0x10001fbac
000000010001fee0	mov	w21, #0x79
000000010001fee4	b	0x10001fba0
000000010001fee8	ldr	x8, [x19, #0x50]
000000010001feec	lsr	x9, x8, #8
000000010001fef0	lsr	x8, x8, #10
000000010001fef4	and	x10, x8, #0x2
000000010001fef8	orr	x10, x10, x25
000000010001fefc	and	x8, x8, #0x20
000000010001ff00	orr	x5, x10, x8
000000010001ff04	bfi	x5, x9, #9, #1
000000010001ff08	str	wzr, [sp, #0x84]
000000010001ff0c	add	x4, sp, #0x38
000000010001ff10	add	x6, sp, #0x84
000000010001ff14	mov	x0, x20
000000010001ff18	mov	x1, x21
000000010001ff1c	mov	x2, x22
000000010001ff20	mov	x3, x23
000000010001ff24	bl	0x100003db8
000000010001ff28	mov	x8, x0
000000010001ff2c	cbz	x8, 0x10002004c
000000010001ff30	mov	x0, x20
000000010001ff34	mov	x1, x8
000000010001ff38	bl	0x100020c5c
000000010001ff3c	cbnz	x21, 0x10001fecc
000000010001ff40	b	0x10001fed4
000000010001ff44	adr	x20, #105351 ; literal pool for: "CFBundleVersion"
000000010001ff48	nop
000000010001ff4c	mov	x0, x21
000000010001ff50	mov	x1, x20
000000010001ff54	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001ff58	adr	x26, #88884 ; literal pool for: "0"
000000010001ff5c	nop
000000010001ff60	cmp	x0, #0x0
000000010001ff64	csel	x21, x26, x0, eq
000000010001ff68	mov	x0, x25
000000010001ff6c	bl	0x100031970 ; symbol stub for: _xpc_bundle_get_info_dictionary
000000010001ff70	mov	x1, x20
000000010001ff74	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010001ff78	cmp	x0, #0x0
000000010001ff7c	csel	x1, x26, x0, eq
000000010001ff80	mov	x0, x21
000000010001ff84	bl	0x10000d5dc
000000010001ff88	mov	w21, #0x81
000000010001ff8c	cmp	w0, #0x1
000000010001ff90	b.eq	0x10001fa54
000000010001ff94	add	w8, w0, #0x1
000000010001ff98	cmp	w8, #0x2
000000010001ff9c	b.lo	0x10001fba0
000000010001ffa0	b	0x10001fa54
000000010001ffa4	mov	x0, x19
000000010001ffa8	bl	0x10000a890
000000010001ffac	mov	x22, x0
000000010001ffb0	str	x22, [sp, #0x38]
000000010001ffb4	b	0x10001ffbc
000000010001ffb8	ldr	x22, [sp, #0x38]
000000010001ffbc	mov	x0, x22
000000010001ffc0	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010001ffc4	nop
000000010001ffc8	ldr	x8, #0x200f8 ; literal pool symbol address: __xpc_type_dictionary
000000010001ffcc	cmp	x0, x8
000000010001ffd0	b.eq	0x10001fff4
000000010001ffd4	mov	w21, #0x6d
000000010001ffd8	cbz	x22, 0x10001ffe4
000000010001ffdc	mov	x0, x22
000000010001ffe0	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010001ffe4	cbz	w21, 0x10001f980
000000010001ffe8	cmp	w21, #0x24
000000010001ffec	b.eq	0x10001f980
000000010001fff0	b	0x10001f974
000000010001fff4	adr	x1, #77968 ; literal pool for: "Label"
000000010001fff8	nop
000000010001fffc	mov	x0, x22
0000000100020000	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100020004	mov	x23, x0
0000000100020008	cbz	x23, 0x10001ffd4
000000010002000c	mov	x0, x20
0000000100020010	mov	x1, x23
0000000100020014	bl	0x10001e1b8
0000000100020018	mov	x24, x0
000000010002001c	cbz	x24, 0x1000200b4
0000000100020020	mov	x0, x20
0000000100020024	mov	x1, x24
0000000100020028	bl	0x100021964
000000010002002c	mov	x21, x0
0000000100020030	cmp	w21, #0x24
0000000100020034	b.ne	0x1000200c0
0000000100020038	ldr	x8, [x24, #0x100]
000000010002003c	cbz	x8, 0x100020114
0000000100020040	mov	w21, #0x25
0000000100020044	cbnz	x22, 0x10001ffdc
0000000100020048	b	0x10001ffe4
000000010002004c	ldr	w8, [sp, #0x84]
0000000100020050	cmp	w8, #0x76
0000000100020054	b.gt	0x10002006c
0000000100020058	cmp	w8, #0x11
000000010002005c	b.eq	0x1000200e0
0000000100020060	cmp	w8, #0x25
0000000100020064	b.eq	0x10001fec8
0000000100020068	b	0x10002007c
000000010002006c	cmp	w8, #0x77
0000000100020070	b.eq	0x10001fec8
0000000100020074	cmp	w8, #0x86
0000000100020078	b.eq	0x10001fec8
000000010002007c	add	x1, sp, #0x88
0000000100020080	mov	x0, x23
0000000100020084	bl	0x1000293c0
0000000100020088	mov	x23, x0
000000010002008c	ldr	w24, [sp, #0x84]
0000000100020090	ldr	w25, [x19, #0x20]
0000000100020094	mov	x0, x24
0000000100020098	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010002009c	stp	x24, x0, [sp, #0x18]
00000001000200a0	stp	x23, x25, [sp, #0x8]
00000001000200a4	str	x22, [sp]
00000001000200a8	adr	x2, #101654 ; literal pool for: "Could not import service from caller: path = %s, caller = %s.%d, error = %d: %s"
00000001000200ac	nop
00000001000200b0	b	0x100020100
00000001000200b4	mov	w21, #0x71
00000001000200b8	cbnz	x22, 0x10001ffdc
00000001000200bc	b	0x10001ffe4
00000001000200c0	ldrb	w8, [x19, #0x51]
00000001000200c4	tbz	w8, #0x3, 0x10001ffd8
00000001000200c8	orr	w2, wzr, #0x1
00000001000200cc	mov	x0, x20
00000001000200d0	mov	x1, x23
00000001000200d4	bl	0x10001ddec
00000001000200d8	cbnz	x22, 0x10001ffdc
00000001000200dc	b	0x10001ffe4
00000001000200e0	add	x1, sp, #0x88
00000001000200e4	mov	x0, x23
00000001000200e8	bl	0x1000293c0
00000001000200ec	ldr	w8, [x19, #0x20]
00000001000200f0	stp	x0, x8, [sp, #0x8]
00000001000200f4	str	x22, [sp]
00000001000200f8	adr	x2, #101477 ; literal pool for: "Caller tried to import service with same label as an existing service: path = %s, caller = %s.%d"
00000001000200fc	nop
0000000100020100	orr	w1, wzr, #0x3
0000000100020104	mov	x0, x20
0000000100020108	bl	0x100019bfc
000000010002010c	cbnz	x21, 0x10001fecc
0000000100020110	b	0x10001fed4
0000000100020114	orr	w1, wzr, #0x1e
0000000100020118	mov	x0, x19
000000010002011c	bl	0x10000e3f4
0000000100020120	str	x0, [x24, #0x100]
0000000100020124	mov	w21, #0x24
0000000100020128	cbnz	x22, 0x10001ffdc
000000010002012c	b	0x10001ffe4
0000000100020130	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100020134	mov	x0, #0x0
0000000100020138	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002013c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100020140	brk	#0x1
0000000100020144	stp	x22, x21, [sp, #-0x30]!
0000000100020148	stp	x20, x19, [sp, #0x10]
000000010002014c	stp	x29, x30, [sp, #0x20]
0000000100020150	add	x29, sp, #0x20
0000000100020154	mov	x19, x1
0000000100020158	mov	x20, x0
000000010002015c	ldr	x0, [x20, #0x40]
0000000100020160	cbz	x0, 0x100020198
0000000100020164	adr	x1, #101067 ; literal pool for: "errors"
0000000100020168	nop
000000010002016c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100020170	mov	x21, x0
0000000100020174	mov	x0, x20
0000000100020178	bl	0x10000a8a8
000000010002017c	mov	x1, x0
0000000100020180	sxtw	x2, w19
0000000100020184	mov	x0, x21
0000000100020188	ldp	x29, x30, [sp, #0x20]
000000010002018c	ldp	x20, x19, [sp, #0x10]
0000000100020190	ldp	x22, x21, [sp], #0x30
0000000100020194	b	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100020198	ldp	x29, x30, [sp, #0x20]
000000010002019c	ldp	x20, x19, [sp, #0x10]
00000001000201a0	ldp	x22, x21, [sp], #0x30
00000001000201a4	ret
00000001000201a8	stp	x20, x19, [sp, #-0x20]!
00000001000201ac	stp	x29, x30, [sp, #0x10]
00000001000201b0	add	x29, sp, #0x10
00000001000201b4	mov	x19, x0
00000001000201b8	ldr	x0, [x19, #0x30]
00000001000201bc	orr	w1, wzr, #0x8
00000001000201c0	bl	0x10001eb10
00000001000201c4	str	xzr, [x19, #0x30]
00000001000201c8	ldr	x0, [x19, #0x38]
00000001000201cc	cbz	x0, 0x1000201e0
00000001000201d0	bl	0x100030d88 ; symbol stub for: _dispatch_group_leave
00000001000201d4	ldr	x0, [x19, #0x38]
00000001000201d8	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000201dc	str	xzr, [x19, #0x38]
00000001000201e0	ldr	x0, [x19, #0x40]
00000001000201e4	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000201e8	str	xzr, [x19, #0x40]
00000001000201ec	ldr	x0, [x19, #0x48]
00000001000201f0	mov	w1, #0x28
00000001000201f4	bl	0x10000e4a4
00000001000201f8	str	xzr, [x19, #0x48]
00000001000201fc	ldr	x0, [x19, #0x58]
0000000100020200	cbz	x0, 0x10002020c
0000000100020204	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100020208	str	xzr, [x19, #0x58]
000000010002020c	ldp	x29, x30, [sp, #0x10]
0000000100020210	ldp	x20, x19, [sp], #0x20
0000000100020214	ret
0000000100020218	sub	sp, sp, #0x60
000000010002021c	stp	x22, x21, [sp, #0x30]
0000000100020220	stp	x20, x19, [sp, #0x40]
0000000100020224	stp	x29, x30, [sp, #0x50]
0000000100020228	add	x29, sp, #0x50
000000010002022c	mov	x20, x3
0000000100020230	mov	x21, x2
0000000100020234	mov	x22, x1
0000000100020238	mov	x19, x0
000000010002023c	sturb	wzr, [x29, #-0x25]
0000000100020240	sub	x1, x29, #0x25
0000000100020244	bl	0x1000163d4
0000000100020248	cmp	w22, #0x6
000000010002024c	b.hi	0x1000204fc
0000000100020250	mov	w8, w22
0000000100020254	adr	x9, #892
0000000100020258	nop
000000010002025c	ldrsw	x8, [x9, x8, lsl #2]
0000000100020260	add	x8, x8, x9
0000000100020264	br	x8
0000000100020268	ldrh	w8, [x19, #0x114]
000000010002026c	cbnz	w8, 0x100020544
0000000100020270	ldrb	w8, [x19, #0x134]
0000000100020274	tbnz	w8, #0x0, 0x100020550
0000000100020278	ldr	x20, [x19, #0xa8]
000000010002027c	cbz	x20, 0x100020290
0000000100020280	mov	x0, x20
0000000100020284	bl	0x10002f6fc
0000000100020288	ldr	x20, [x20, #0x8]
000000010002028c	cbnz	x20, 0x100020280
0000000100020290	ldr	x20, [x19, #0xc0]
0000000100020294	cbz	x20, 0x1000202a8
0000000100020298	mov	x0, x20
000000010002029c	bl	0x10002f6fc
00000001000202a0	ldr	x20, [x20, #0x8]
00000001000202a4	cbnz	x20, 0x100020298
00000001000202a8	ldr	x20, [x19, #0xc8]
00000001000202ac	cbz	x20, 0x1000202c0
00000001000202b0	mov	x0, x20
00000001000202b4	bl	0x10002f6fc
00000001000202b8	ldr	x20, [x20, #0x8]
00000001000202bc	cbnz	x20, 0x1000202b0
00000001000202c0	ldr	x20, [x19, #0xd0]
00000001000202c4	cbz	x20, 0x1000202d8
00000001000202c8	mov	x0, x20
00000001000202cc	bl	0x1000101ac
00000001000202d0	ldr	x20, [x20, #0x8]
00000001000202d4	cbnz	x20, 0x1000202c8
00000001000202d8	mov	x0, x19
00000001000202dc	bl	0x100015e38
00000001000202e0	ldrh	w8, [x19, #0x134]
00000001000202e4	orr	w8, w8, #0x1
00000001000202e8	strh	w8, [x19, #0x134]
00000001000202ec	ldr	x9, [x19, #0xe0]
00000001000202f0	add	x8, x9, #0x120
00000001000202f4	ldr	x9, [x9, #0x120]
00000001000202f8	str	x9, [x19, #0x38]
00000001000202fc	cbz	x9, 0x100020308
0000000100020300	add	x10, x19, #0x38
0000000100020304	str	x10, [x9, #0x40]
0000000100020308	str	x19, [x8]
000000010002030c	str	x8, [x19, #0x40]
0000000100020310	b	0x1000204fc
0000000100020314	str	w21, [x19, #0x130]
0000000100020318	mov	x0, x19
000000010002031c	bl	0x100015ed8
0000000100020320	mov	x20, x0
0000000100020324	cbnz	x21, 0x1000204fc
0000000100020328	sxtw	x1, w20
000000010002032c	adr	x0, #143084
0000000100020330	nop
0000000100020334	bl	0x10001d8f0
0000000100020338	mov	x21, x0
000000010002033c	cbz	x21, 0x100020388
0000000100020340	ldrb	w8, [x21, #0x3a1]
0000000100020344	tbz	w8, #0x2, 0x100020388
0000000100020348	nop
000000010002034c	nop
0000000100020350	ldr	x0, #0x240d0
0000000100020354	add	x8, x21, #0x3a8
0000000100020358	str	x8, [sp]
000000010002035c	adr	x2, #101150 ; literal pool for: "%s: uncorking exec source after service init"
0000000100020360	nop
0000000100020364	mov	w1, #0x0
0000000100020368	bl	0x1000270c8
000000010002036c	ldr	x0, [x21, #0x80]
0000000100020370	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100020374	ldrh	w8, [x21, #0x3a0]
0000000100020378	and	w8, w8, #0xfffffbff
000000010002037c	strh	w8, [x21, #0x3a0]
0000000100020380	mov	x0, x21
0000000100020384	bl	0x1000212a4
0000000100020388	mov	x0, x19
000000010002038c	bl	0x100016430
0000000100020390	cbz	w0, 0x1000204fc
0000000100020394	stur	wzr, [x29, #-0x24]
0000000100020398	sub	x2, x29, #0x24
000000010002039c	orr	w3, wzr, #0x4
00000001000203a0	mov	x0, x20
00000001000203a4	mov	w1, #0x0
00000001000203a8	bl	0x100030d04 ; symbol stub for: _csops
00000001000203ac	cbz	w0, 0x100020510
00000001000203b0	bl	0x100030adc ; symbol stub for: ___error
00000001000203b4	ldr	w8, [x0]
00000001000203b8	cmp	w8, #0x3
00000001000203bc	b.eq	0x1000204fc
00000001000203c0	bl	0x100030adc ; symbol stub for: ___error
00000001000203c4	ldr	w8, [x0]
00000001000203c8	str	x8, [sp]
00000001000203cc	adr	x2, #102195 ; literal pool for: "csops returned %d"
00000001000203d0	nop
00000001000203d4	mov	w1, #0x3
00000001000203d8	movk	w1, #0x1, lsl #16
00000001000203dc	mov	x0, #0x0
00000001000203e0	bl	0x100029f54
00000001000203e4	b	0x100020518
00000001000203e8	ldrb	w8, [x19, #0x134]
00000001000203ec	tbz	w8, #0x0, 0x10002055c
00000001000203f0	ldr	x8, [x19, #0x38]
00000001000203f4	cbz	x8, 0x100020400
00000001000203f8	ldr	x9, [x19, #0x40]
00000001000203fc	str	x9, [x8, #0x40]
0000000100020400	ldr	x9, [x19, #0x40]
0000000100020404	str	x8, [x9]
0000000100020408	mov	x8, #-0x1
000000010002040c	stp	x8, x8, [x19, #0x38]
0000000100020410	ldrh	w8, [x19, #0x134]
0000000100020414	and	w9, w8, #0xfffe
0000000100020418	strh	w9, [x19, #0x134]
000000010002041c	str	wzr, [x19, #0x10c]
0000000100020420	cbz	x21, 0x1000204e0
0000000100020424	tbnz	w8, #0x4, 0x1000204f0
0000000100020428	mov	x0, x19
000000010002042c	bl	0x1000210ac
0000000100020430	b	0x1000204fc
0000000100020434	adrp	x8, 36 ; 0x100044000
0000000100020438	ldrb	w8, [x8, #0x429]
000000010002043c	cbz	w8, 0x100020470
0000000100020440	ldrb	w8, [x20, #0x3a0]
0000000100020444	tst	w8, #0x3
0000000100020448	b.ne	0x100020470
000000010002044c	ldr	w8, [x19, #0x110]
0000000100020450	cbnz	w8, 0x100020470
0000000100020454	mov	x0, x19
0000000100020458	bl	0x100015ed8
000000010002045c	cbz	w0, 0x100020568
0000000100020460	nop
0000000100020464	ldr	w8, 0x100043d44
0000000100020468	cmp	w0, w8
000000010002046c	b.eq	0x100020578
0000000100020470	ldrh	w8, [x19, #0x134]
0000000100020474	mov	w9, #0x120
0000000100020478	tst	w8, w9
000000010002047c	b.eq	0x100020488
0000000100020480	orr	w8, w8, #0x10
0000000100020484	strh	w8, [x19, #0x134]
0000000100020488	ldr	x21, [x19, #0xd0]
000000010002048c	cbz	x21, 0x1000204ac
0000000100020490	ldrb	w8, [x21, #0xbc]
0000000100020494	tbz	w8, #0x0, 0x1000204a0
0000000100020498	mov	x0, x21
000000010002049c	bl	0x1000102e4
00000001000204a0	ldr	x21, [x21, #0x8]
00000001000204a4	cbnz	x21, 0x100020490
00000001000204a8	ldrh	w8, [x19, #0x134]
00000001000204ac	tbz	w8, #0xc, 0x1000204c4
00000001000204b0	mov	x0, x20
00000001000204b4	bl	0x100021340
00000001000204b8	ldrh	w8, [x19, #0x134]
00000001000204bc	and	w8, w8, #0xffffefff
00000001000204c0	strh	w8, [x19, #0x134]
00000001000204c4	mov	x0, x20
00000001000204c8	mov	x1, x19
00000001000204cc	bl	0x100021418
00000001000204d0	b	0x1000204fc
00000001000204d4	mov	x0, x19
00000001000204d8	bl	0x100021724
00000001000204dc	b	0x1000204fc
00000001000204e0	mov	x0, x20
00000001000204e4	mov	x1, x19
00000001000204e8	bl	0x100021168
00000001000204ec	b	0x1000204fc
00000001000204f0	mov	x0, x20
00000001000204f4	mov	x1, x19
00000001000204f8	bl	0x100020d38
00000001000204fc	ldp	x29, x30, [sp, #0x50]
0000000100020500	ldp	x20, x19, [sp, #0x40]
0000000100020504	ldp	x22, x21, [sp, #0x30]
0000000100020508	add	sp, sp, #0x60
000000010002050c	ret
0000000100020510	ldur	w8, [x29, #-0x24]
0000000100020514	tbnz	w8, #0x1a, 0x1000204fc
0000000100020518	mov	x0, x19
000000010002051c	bl	0x1000162ac
0000000100020520	add	x8, x19, #0x460
0000000100020524	stp	x8, x20, [sp, #0x8]
0000000100020528	str	x0, [sp]
000000010002052c	adr	x1, #100731 ; literal pool for: "unexpected exec of non-platform binary: %s: %s [%d]"
0000000100020530	nop
0000000100020534	add	x0, sp, #0x20
0000000100020538	bl	0x100030c08 ; symbol stub for: _asprintf
000000010002053c	ldr	x0, [sp, #0x20]
0000000100020540	bl	0x100028f84
0000000100020544	adr	x0, #100554 ; literal pool for: "will-spawn received on active service"
0000000100020548	nop
000000010002054c	bl	0x100028f84
0000000100020550	adr	x0, #100580 ; literal pool for: "multiple will-spawn events received"
0000000100020554	nop
0000000100020558	bl	0x100028f84
000000010002055c	adr	x0, #100604 ; literal pool for: "out-of-order spawn event received"
0000000100020560	nop
0000000100020564	bl	0x100028f84
0000000100020568	mov	x0, #0x0
000000010002056c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100020570	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100020574	brk	#0x1
0000000100020578	mov	x0, x19
000000010002057c	bl	0x1000163cc
0000000100020580	bl	0x10002c9d4
0000000100020584	str	x0, [sp]
0000000100020588	adr	x2, #100691 ; literal pool for: "Obliterator task exited: %s"
000000010002058c	nop
0000000100020590	orr	w1, wzr, #0x10000
0000000100020594	mov	x0, #0x0
0000000100020598	bl	0x100029f54
000000010002059c	adr	x2, #100699 ; literal pool for: "The system may be in an inconsistent half-obliterated state."
00000001000205a0	nop
00000001000205a4	orr	w1, wzr, #0x10000
00000001000205a8	mov	x0, #0x0
00000001000205ac	bl	0x100029f54
00000001000205b0	adr	x2, #100740 ; literal pool for: "Rebooting now, so the finish-obliteration boot task can clean things up."
00000001000205b4	nop
00000001000205b8	orr	w1, wzr, #0x10000
00000001000205bc	mov	x0, #0x0
00000001000205c0	bl	0x100029f54
00000001000205c4	orr	w0, wzr, #0x1
00000001000205c8	mov	w1, #0x0
00000001000205cc	bl	0x10002ba34
00000001000205d0	.long	0xfffffc98
00000001000205d4	.long	0xfffffe18
00000001000205d8	.long	0xffffff2c
00000001000205dc	.long	0xffffff2c
00000001000205e0	.long	0xfffffd44
00000001000205e4	.long	0xfffffe64
00000001000205e8	.long	0xffffff04
00000001000205ec	sub	sp, sp, #0x70
00000001000205f0	stp	x26, x25, [sp, #0x20]
00000001000205f4	stp	x24, x23, [sp, #0x30]
00000001000205f8	stp	x22, x21, [sp, #0x40]
00000001000205fc	stp	x20, x19, [sp, #0x50]
0000000100020600	stp	x29, x30, [sp, #0x60]
0000000100020604	add	x29, sp, #0x60
0000000100020608	mov	x21, x2
000000010002060c	mov	x19, x1
0000000100020610	mov	x20, x0
0000000100020614	adr	x25, #146956
0000000100020618	nop
000000010002061c	ldr	x22, [x25]
0000000100020620	add	x23, x21, #0x3a8
0000000100020624	mov	x0, x19
0000000100020628	bl	0x10001802c
000000010002062c	add	x24, x20, #0x460
0000000100020630	stp	x0, x24, [sp, #0x8]
0000000100020634	str	x23, [sp]
0000000100020638	adr	x2, #101941 ; literal pool for: "%s: spawn query for reason '%s': %s"
000000010002063c	nop
0000000100020640	mov	w1, #0x0
0000000100020644	mov	x0, x22
0000000100020648	bl	0x1000270c8
000000010002064c	ldrb	w8, [x21, #0x3a0]
0000000100020650	tst	w8, #0x3
0000000100020654	b.eq	0x100020678
0000000100020658	ldr	x0, [x25]
000000010002065c	stp	x23, x24, [sp]
0000000100020660	adr	x2, #101937 ; literal pool for: "%s: denying spawn, domain shutting down: %s"
0000000100020664	nop
0000000100020668	mov	w1, #0x0
000000010002066c	bl	0x1000270c8
0000000100020670	orr	w0, wzr, #0x7c
0000000100020674	b	0x1000206bc
0000000100020678	ldrh	w8, [x20, #0x134]
000000010002067c	tbnz	w8, #0x1, 0x10002069c
0000000100020680	ldrh	w9, [x20, #0x114]
0000000100020684	cbz	w9, 0x1000206d8
0000000100020688	ldr	x0, [x25]
000000010002068c	stp	x23, x24, [sp]
0000000100020690	adr	x2, #101982 ; literal pool for: "%s: pending spawn, service not yet quiesced: %s"
0000000100020694	nop
0000000100020698	b	0x1000206ac
000000010002069c	ldr	x0, [x25]
00000001000206a0	stp	x23, x24, [sp]
00000001000206a4	adr	x2, #101913 ; literal pool for: "%s: pending spawn, service not yet activated: %s"
00000001000206a8	nop
00000001000206ac	mov	w1, #0x0
00000001000206b0	bl	0x1000270c8
00000001000206b4	str	w19, [x20, #0x108]
00000001000206b8	orr	w0, wzr, #0x10
00000001000206bc	ldp	x29, x30, [sp, #0x60]
00000001000206c0	ldp	x20, x19, [sp, #0x50]
00000001000206c4	ldp	x22, x21, [sp, #0x40]
00000001000206c8	ldp	x24, x23, [sp, #0x30]
00000001000206cc	ldp	x26, x25, [sp, #0x20]
00000001000206d0	add	sp, sp, #0x70
00000001000206d4	ret
00000001000206d8	ldr	w9, [x21, #0x98]
00000001000206dc	cbz	w9, 0x100020728
00000001000206e0	mov	x9, #0x0
00000001000206e4	adr	x10, #141516
00000001000206e8	nop
00000001000206ec	ldr	w11, [x10, x9, lsl #2]
00000001000206f0	cmp	w11, w19
00000001000206f4	b.eq	0x100020728
00000001000206f8	add	x9, x9, #0x1
00000001000206fc	cmp	x9, #0x6
0000000100020700	b.ls	0x1000206ec
0000000100020704	str	w19, [x20, #0x10c]
0000000100020708	ldr	x0, [x25]
000000010002070c	stp	x23, x24, [sp]
0000000100020710	adr	x2, #101902 ; literal pool for: "%s: pending spawn, domain in on-demand-only mode: %s"
0000000100020714	nop
0000000100020718	mov	w1, #0x0
000000010002071c	bl	0x1000270c8
0000000100020720	mov	w0, #0x92
0000000100020724	b	0x1000206bc
0000000100020728	tbnz	w8, #0x2, 0x100020750
000000010002072c	ldr	x0, [x25]
0000000100020730	stp	x23, x24, [sp]
0000000100020734	adr	x2, #101919 ; literal pool for: "%s: pending spawn, service not yet imported: %s"
0000000100020738	nop
000000010002073c	mov	w1, #0x0
0000000100020740	bl	0x1000270c8
0000000100020744	str	w19, [x20, #0x108]
0000000100020748	orr	w0, wzr, #0x2
000000010002074c	b	0x1000206bc
0000000100020750	mov	w0, #0x0
0000000100020754	b	0x1000206bc
0000000100020758	sub	sp, sp, #0x30
000000010002075c	stp	x20, x19, [sp, #0x10]
0000000100020760	stp	x29, x30, [sp, #0x20]
0000000100020764	add	x29, sp, #0x20
0000000100020768	mov	x20, x1
000000010002076c	mov	x19, x0
0000000100020770	ldrb	w8, [x20, #0x3a0]
0000000100020774	tst	w8, #0x3
0000000100020778	b.eq	0x1000207dc
000000010002077c	nop
0000000100020780	ldr	x8, #0x23578
0000000100020784	cmp	x8, x20
0000000100020788	b.ne	0x100020798
000000010002078c	adrp	x8, 35 ; 0x100043000
0000000100020790	orr	w9, wzr, #0x1
0000000100020794	strb	w9, [x8, #0xd29]
0000000100020798	nop
000000010002079c	nop
00000001000207a0	ldr	x0, #0x23c80
00000001000207a4	add	x8, x20, #0x3a8
00000001000207a8	add	x9, x19, #0x460
00000001000207ac	stp	x8, x9, [sp]
00000001000207b0	adr	x2, #101843 ; literal pool for: "%s: resetting service: %s"
00000001000207b4	nop
00000001000207b8	mov	w1, #0x0
00000001000207bc	bl	0x1000270c8
00000001000207c0	ldrh	w8, [x19, #0x134]
00000001000207c4	orr	w8, w8, #0x800
00000001000207c8	strh	w8, [x19, #0x134]
00000001000207cc	mov	x0, x19
00000001000207d0	bl	0x100021768
00000001000207d4	mov	w0, #0x0
00000001000207d8	b	0x100020864
00000001000207dc	ldr	x8, [x19, #0xb0]
00000001000207e0	cbz	x8, 0x10002081c
00000001000207e4	adr	x2, #101817 ; literal pool for: "Service cannot reset: active unmanaged endpoints"
00000001000207e8	nop
00000001000207ec	orr	w1, wzr, #0x4
00000001000207f0	mov	x0, x20
00000001000207f4	bl	0x100019bfc
00000001000207f8	nop
00000001000207fc	nop
0000000100020800	ldr	x0, #0x23c20
0000000100020804	add	x8, x20, #0x3a8
0000000100020808	add	x9, x19, #0x460
000000010002080c	stp	x8, x9, [sp]
0000000100020810	adr	x2, #101822 ; literal pool for: "%s: cannot reset service active unmanaged endpoints: %s"
0000000100020814	nop
0000000100020818	b	0x100020858
000000010002081c	ldr	x8, [x19, #0xb8]
0000000100020820	cbz	x8, 0x100020874
0000000100020824	adr	x2, #101858 ; literal pool for: "Service cannot reset: active PID-local endpoints"
0000000100020828	nop
000000010002082c	orr	w1, wzr, #0x4
0000000100020830	mov	x0, x20
0000000100020834	bl	0x100019bfc
0000000100020838	nop
000000010002083c	nop
0000000100020840	ldr	x0, #0x23be0
0000000100020844	add	x8, x20, #0x3a8
0000000100020848	add	x9, x19, #0x460
000000010002084c	stp	x8, x9, [sp]
0000000100020850	adr	x2, #101863 ; literal pool for: "%s: cannot reset service active pid-local endpoints: %s"
0000000100020854	nop
0000000100020858	mov	w1, #0x0
000000010002085c	bl	0x1000270c8
0000000100020860	orr	w0, wzr, #0x10
0000000100020864	ldp	x29, x30, [sp, #0x20]
0000000100020868	ldp	x20, x19, [sp, #0x10]
000000010002086c	add	sp, sp, #0x30
0000000100020870	ret
0000000100020874	ldr	x8, [x19, #0xa8]
0000000100020878	cbz	x8, 0x10002088c
000000010002087c	ldrb	w9, [x8, #0x50]
0000000100020880	tbnz	w9, #0x2, 0x1000208c4
0000000100020884	ldr	x8, [x8, #0x8]
0000000100020888	cbnz	x8, 0x10002087c
000000010002088c	ldr	x8, [x19, #0xc0]
0000000100020890	cbz	x8, 0x1000208a4
0000000100020894	ldrb	w9, [x8, #0x50]
0000000100020898	tbnz	w9, #0x2, 0x1000208fc
000000010002089c	ldr	x8, [x8, #0x8]
00000001000208a0	cbnz	x8, 0x100020894
00000001000208a4	ldr	x8, [x19, #0xc8]
00000001000208a8	cbz	x8, 0x1000207d4
00000001000208ac	mov	w0, #0x0
00000001000208b0	ldrb	w9, [x8, #0x50]
00000001000208b4	tbnz	w9, #0x2, 0x100020934
00000001000208b8	ldr	x8, [x8, #0x8]
00000001000208bc	cbnz	x8, 0x1000208b0
00000001000208c0	b	0x100020864
00000001000208c4	adr	x2, #101803 ; literal pool for: "Service cannot reset: active endpoints"
00000001000208c8	nop
00000001000208cc	orr	w1, wzr, #0x4
00000001000208d0	mov	x0, x20
00000001000208d4	bl	0x100019bfc
00000001000208d8	nop
00000001000208dc	nop
00000001000208e0	ldr	x0, #0x23b40
00000001000208e4	add	x8, x20, #0x3a8
00000001000208e8	add	x9, x19, #0x460
00000001000208ec	stp	x8, x9, [sp]
00000001000208f0	adr	x2, #101798 ; literal pool for: "%s: cannot reset service active endpoints: %s"
00000001000208f4	nop
00000001000208f8	b	0x100020858
00000001000208fc	adr	x2, #101832 ; literal pool for: "Service cannot reset: active event channels"
0000000100020900	nop
0000000100020904	orr	w1, wzr, #0x4
0000000100020908	mov	x0, x20
000000010002090c	bl	0x100019bfc
0000000100020910	nop
0000000100020914	nop
0000000100020918	ldr	x0, #0x23b08
000000010002091c	add	x8, x20, #0x3a8
0000000100020920	add	x9, x19, #0x460
0000000100020924	stp	x8, x9, [sp]
0000000100020928	adr	x2, #101832 ; literal pool for: "%s: cannot reset service active event channels: %s"
000000010002092c	nop
0000000100020930	b	0x100020858
0000000100020934	adr	x2, #101871 ; literal pool for: "Service cannot reset: active instance endpoints"
0000000100020938	nop
000000010002093c	orr	w1, wzr, #0x4
0000000100020940	mov	x0, x20
0000000100020944	bl	0x100019bfc
0000000100020948	nop
000000010002094c	nop
0000000100020950	ldr	x0, #0x23ad0
0000000100020954	add	x8, x20, #0x3a8
0000000100020958	add	x9, x19, #0x460
000000010002095c	stp	x8, x9, [sp]
0000000100020960	adr	x2, #101875 ; literal pool for: "%s: cannot reset service: active instance endpoints: %s"
0000000100020964	nop
0000000100020968	b	0x100020858
000000010002096c	stp	x22, x21, [sp, #-0x30]!
0000000100020970	stp	x20, x19, [sp, #0x10]
0000000100020974	stp	x29, x30, [sp, #0x20]
0000000100020978	add	x29, sp, #0x20
000000010002097c	mov	x19, x5
0000000100020980	mov	x20, x0
0000000100020984	adr	x3, #-9312
0000000100020988	nop
000000010002098c	mov	x5, x20
0000000100020990	bl	0x10002ee1c
0000000100020994	mov	x21, x0
0000000100020998	cbz	x21, 0x1000209b0
000000010002099c	mov	x0, x19
00000001000209a0	mov	x1, x20
00000001000209a4	mov	x2, x21
00000001000209a8	mov	x3, #0x0
00000001000209ac	bl	0x10001e764
00000001000209b0	mov	x0, x21
00000001000209b4	ldp	x29, x30, [sp, #0x20]
00000001000209b8	ldp	x20, x19, [sp, #0x10]
00000001000209bc	ldp	x22, x21, [sp], #0x30
00000001000209c0	ret
00000001000209c4	sub	sp, sp, #0x50
00000001000209c8	stp	x24, x23, [sp, #0x10]
00000001000209cc	stp	x22, x21, [sp, #0x20]
00000001000209d0	stp	x20, x19, [sp, #0x30]
00000001000209d4	stp	x29, x30, [sp, #0x40]
00000001000209d8	add	x29, sp, #0x40
00000001000209dc	mov	x20, x3
00000001000209e0	mov	x19, x2
00000001000209e4	mov	x21, x1
00000001000209e8	mov	x22, x0
00000001000209ec	ldr	w23, [x4, #0x30]
00000001000209f0	bl	0x10000d8e0
00000001000209f4	mov	x4, x0
00000001000209f8	adr	x5, #5024
00000001000209fc	nop
0000000100020a00	mov	x2, x23
0000000100020a04	mov	x0, x22
0000000100020a08	mov	x1, x21
0000000100020a0c	mov	x3, x19
0000000100020a10	mov	x6, x22
0000000100020a14	mov	x7, x20
0000000100020a18	bl	0x10000ef94
0000000100020a1c	mov	x19, x0
0000000100020a20	bl	0x1000102dc
0000000100020a24	cbz	w0, 0x100020a60
0000000100020a28	mov	x0, x19
0000000100020a2c	bl	0x1000102dc
0000000100020a30	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100020a34	stp	x21, x0, [sp]
0000000100020a38	adr	x2, #101715 ; literal pool for: "Ignored socket %s: %s"
0000000100020a3c	nop
0000000100020a40	orr	w1, wzr, #0x4
0000000100020a44	mov	x0, x20
0000000100020a48	bl	0x10000ce7c
0000000100020a4c	mov	w1, #0x0
0000000100020a50	mov	x0, x19
0000000100020a54	bl	0x10000e4a4
0000000100020a58	mov	x19, #0x0
0000000100020a5c	b	0x100020a7c
0000000100020a60	ldr	x8, [x22, #0xd0]!
0000000100020a64	mov	x9, x19
0000000100020a68	str	x8, [x9, #0x8]!
0000000100020a6c	cbz	x8, 0x100020a74
0000000100020a70	str	x9, [x8, #0x10]
0000000100020a74	str	x19, [x22]
0000000100020a78	str	x22, [x19, #0x10]
0000000100020a7c	mov	x0, x19
0000000100020a80	ldp	x29, x30, [sp, #0x40]
0000000100020a84	ldp	x20, x19, [sp, #0x30]
0000000100020a88	ldp	x22, x21, [sp, #0x20]
0000000100020a8c	ldp	x24, x23, [sp, #0x10]
0000000100020a90	add	sp, sp, #0x50
0000000100020a94	ret
0000000100020a98	stp	x24, x23, [sp, #-0x40]!
0000000100020a9c	stp	x22, x21, [sp, #0x10]
0000000100020aa0	stp	x20, x19, [sp, #0x20]
0000000100020aa4	stp	x29, x30, [sp, #0x30]
0000000100020aa8	add	x29, sp, #0x30
0000000100020aac	mov	x19, x1
0000000100020ab0	mov	x20, x0
0000000100020ab4	ldr	x21, [x20, #0xd0]
0000000100020ab8	cbz	x21, 0x100020b04
0000000100020abc	ldr	x22, [x21, #0x8]
0000000100020ac0	ldr	x23, [x21, #0x30]
0000000100020ac4	ldrh	w8, [x19, #0xa4]
0000000100020ac8	add	w8, w8, #0x1
0000000100020acc	strh	w8, [x19, #0xa4]
0000000100020ad0	mov	w1, #0xa
0000000100020ad4	mov	x0, x19
0000000100020ad8	bl	0x10001d898
0000000100020adc	ldrh	w8, [x23, #0x114]
0000000100020ae0	add	w8, w8, #0x1
0000000100020ae4	strh	w8, [x23, #0x114]
0000000100020ae8	ldrh	w8, [x23, #0x134]
0000000100020aec	orr	w8, w8, #0x8
0000000100020af0	strh	w8, [x23, #0x134]
0000000100020af4	mov	x0, x21
0000000100020af8	bl	0x10000f638
0000000100020afc	mov	x21, x22
0000000100020b00	cbnz	x22, 0x100020abc
0000000100020b04	ldr	x20, [x20, #0xa8]
0000000100020b08	cbz	x20, 0x100020b54
0000000100020b0c	mov	x21, #-0x1
0000000100020b10	ldr	x22, [x20, #0x8]
0000000100020b14	mov	x0, x19
0000000100020b18	mov	x1, x20
0000000100020b1c	bl	0x100022250
0000000100020b20	cbz	w0, 0x100020b4c
0000000100020b24	ldr	x8, [x20, #0x8]
0000000100020b28	cbz	x8, 0x100020b34
0000000100020b2c	ldr	x9, [x20, #0x10]
0000000100020b30	str	x9, [x8, #0x10]
0000000100020b34	ldr	x9, [x20, #0x10]
0000000100020b38	str	x8, [x9]
0000000100020b3c	stp	x21, x21, [x20, #0x8]
0000000100020b40	mov	w1, #0x0
0000000100020b44	mov	x0, x20
0000000100020b48	bl	0x10000e4a4
0000000100020b4c	mov	x20, x22
0000000100020b50	cbnz	x22, 0x100020b10
0000000100020b54	ldp	x29, x30, [sp, #0x30]
0000000100020b58	ldp	x20, x19, [sp, #0x20]
0000000100020b5c	ldp	x22, x21, [sp, #0x10]
0000000100020b60	ldp	x24, x23, [sp], #0x40
0000000100020b64	ret
0000000100020b68	mov	x8, x1
0000000100020b6c	ldrh	w9, [x2, #0xa4]
0000000100020b70	cbz	w9, 0x100020b9c
0000000100020b74	stp	x29, x30, [sp, #-0x10]!
0000000100020b78	mov	x29, sp
0000000100020b7c	ldr	w1, [x2, #0x78]
0000000100020b80	mov	w3, #0x0
0000000100020b84	mov	x0, x2
0000000100020b88	mov	x2, x8
0000000100020b8c	bl	0x10001f2c4
0000000100020b90	mov	w0, #0x0
0000000100020b94	ldp	x29, x30, [sp], #0x10
0000000100020b98	ret
0000000100020b9c	orr	w0, wzr, #0x1
0000000100020ba0	ret
0000000100020ba4	sub	sp, sp, #0x40
0000000100020ba8	stp	x22, x21, [sp, #0x10]
0000000100020bac	stp	x20, x19, [sp, #0x20]
0000000100020bb0	stp	x29, x30, [sp, #0x30]
0000000100020bb4	add	x29, sp, #0x30
0000000100020bb8	mov	x20, x1
0000000100020bbc	stp	xzr, xzr, [sp]
0000000100020bc0	add	x1, sp, #0x8
0000000100020bc4	mov	x2, sp
0000000100020bc8	bl	0x100030d58 ; symbol stub for: _dispatch_data_create_map
0000000100020bcc	mov	x19, x0
0000000100020bd0	cbz	x19, 0x100020c04
0000000100020bd4	ldp	x1, x0, [sp]
0000000100020bd8	bl	0x1000319b8 ; symbol stub for: _xpc_create_from_plist
0000000100020bdc	mov	x22, x0
0000000100020be0	cbz	x22, 0x100020bfc
0000000100020be4	mov	x0, x22
0000000100020be8	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100020bec	nop
0000000100020bf0	ldr	x8, #0x1f4d0 ; literal pool symbol address: __xpc_type_dictionary
0000000100020bf4	cmp	x0, x8
0000000100020bf8	b.eq	0x100020c0c
0000000100020bfc	mov	w21, #0x6d
0000000100020c00	b	0x100020c14
0000000100020c04	orr	w21, wzr, #0xc
0000000100020c08	b	0x100020c1c
0000000100020c0c	mov	w21, #0x0
0000000100020c10	str	x22, [x20]
0000000100020c14	mov	x0, x19
0000000100020c18	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100020c1c	mov	x0, x21
0000000100020c20	ldp	x29, x30, [sp, #0x30]
0000000100020c24	ldp	x20, x19, [sp, #0x20]
0000000100020c28	ldp	x22, x21, [sp, #0x10]
0000000100020c2c	add	sp, sp, #0x40
0000000100020c30	ret
0000000100020c34	stp	x29, x30, [sp, #-0x10]!
0000000100020c38	mov	x29, sp
0000000100020c3c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100020c40	cbz	x0, 0x100020c54
0000000100020c44	adr	x1, #76466 ; literal pool for: "com.apple."
0000000100020c48	nop
0000000100020c4c	ldp	x29, x30, [sp], #0x10
0000000100020c50	b	0x10000d7a4
0000000100020c54	ldp	x29, x30, [sp], #0x10
0000000100020c58	ret
0000000100020c5c	stp	x20, x19, [sp, #-0x20]!
0000000100020c60	stp	x29, x30, [sp, #0x10]
0000000100020c64	add	x29, sp, #0x10
0000000100020c68	mov	x19, x1
0000000100020c6c	mov	x20, x0
0000000100020c70	ldr	x8, [x19, #0xe0]
0000000100020c74	cmp	x8, x20
0000000100020c78	b.ne	0x100020d2c
0000000100020c7c	add	x0, x19, #0x460
0000000100020c80	bl	0x10000d878
0000000100020c84	mov	x8, #0x42c9
0000000100020c88	movk	x8, #0xb216, lsl #16
0000000100020c8c	movk	x8, #0x8590, lsl #32
0000000100020c90	movk	x8, #0x642c, lsl #48
0000000100020c94	umulh	x8, x0, x8
0000000100020c98	sub	x9, x0, x8
0000000100020c9c	add	x8, x8, x9, lsr #1
0000000100020ca0	lsr	x8, x8, #4
0000000100020ca4	mov	w9, #0x17
0000000100020ca8	msub	x8, x8, x9, x0
0000000100020cac	add	x9, x20, x8, lsl #3
0000000100020cb0	add	x8, x9, #0x128
0000000100020cb4	ldr	x9, [x9, #0x128]
0000000100020cb8	str	x9, [x19, #0x48]
0000000100020cbc	cbz	x9, 0x100020cc8
0000000100020cc0	add	x10, x19, #0x48
0000000100020cc4	str	x10, [x9, #0x50]
0000000100020cc8	str	x19, [x8]
0000000100020ccc	str	x8, [x19, #0x50]
0000000100020cd0	ldr	w8, [x20, #0x9c]
0000000100020cd4	add	w8, w8, #0x1
0000000100020cd8	str	w8, [x20, #0x9c]
0000000100020cdc	mov	w1, #0x5
0000000100020ce0	mov	x0, x20
0000000100020ce4	bl	0x10000e3f4
0000000100020ce8	str	x0, [x19, #0xe0]
0000000100020cec	ldr	w8, [x19, #0x110]
0000000100020cf0	cbnz	w8, 0x100020d00
0000000100020cf4	ldrh	w8, [x19, #0x134]
0000000100020cf8	orr	w8, w8, #0x6
0000000100020cfc	strh	w8, [x19, #0x134]
0000000100020d00	ldrh	w8, [x19, #0x114]
0000000100020d04	add	w8, w8, #0x1
0000000100020d08	strh	w8, [x19, #0x114]
0000000100020d0c	mov	w1, #0x5
0000000100020d10	mov	x0, x20
0000000100020d14	bl	0x10001d898
0000000100020d18	mov	x0, x20
0000000100020d1c	mov	x1, x19
0000000100020d20	ldp	x29, x30, [sp, #0x10]
0000000100020d24	ldp	x20, x19, [sp], #0x20
0000000100020d28	b	0x100021418
0000000100020d2c	adr	x0, #101682 ; literal pool for: "inconsistency in service domain during add"
0000000100020d30	nop
0000000100020d34	bl	0x100028f84
0000000100020d38	sub	sp, sp, #0x50
0000000100020d3c	stp	x24, x23, [sp, #0x10]
0000000100020d40	stp	x22, x21, [sp, #0x20]
0000000100020d44	stp	x20, x19, [sp, #0x30]
0000000100020d48	stp	x29, x30, [sp, #0x40]
0000000100020d4c	add	x29, sp, #0x40
0000000100020d50	mov	x20, x1
0000000100020d54	mov	x19, x0
0000000100020d58	ldr	x8, [x20, #0xe0]
0000000100020d5c	cmp	x8, x19
0000000100020d60	b.ne	0x1000210a0
0000000100020d64	ldr	x8, [x19, #0x60]
0000000100020d68	adr	x9, #140464
0000000100020d6c	nop
0000000100020d70	cmp	x8, x9
0000000100020d74	b.ne	0x100020d80
0000000100020d78	ldrh	w8, [x20, #0x114]
0000000100020d7c	cbz	w8, 0x100020da8
0000000100020d80	nop
0000000100020d84	nop
0000000100020d88	ldr	x0, #0x23698
0000000100020d8c	add	x8, x19, #0x3a8
0000000100020d90	add	x9, x20, #0x460
0000000100020d94	stp	x8, x9, [sp]
0000000100020d98	adr	x2, #98835 ; literal pool for: "%s: removing service: %s"
0000000100020d9c	nop
0000000100020da0	mov	w1, #0x0
0000000100020da4	bl	0x1000270c8
0000000100020da8	ldrh	w8, [x20, #0x134]
0000000100020dac	and	w8, w8, #0xfffffffe
0000000100020db0	orr	w8, w8, #0x10
0000000100020db4	strh	w8, [x20, #0x134]
0000000100020db8	mov	x0, x20
0000000100020dbc	bl	0x100021768
0000000100020dc0	ldr	x1, [x20, #0xa8]
0000000100020dc4	cbz	x1, 0x100020ddc
0000000100020dc8	ldr	x21, [x1, #0x8]
0000000100020dcc	mov	x0, x19
0000000100020dd0	bl	0x100021820
0000000100020dd4	mov	x1, x21
0000000100020dd8	cbnz	x21, 0x100020dc8
0000000100020ddc	ldr	x1, [x20, #0xc0]
0000000100020de0	cbz	x1, 0x100020df8
0000000100020de4	ldr	x21, [x1, #0x8]
0000000100020de8	mov	x0, x19
0000000100020dec	bl	0x100021820
0000000100020df0	mov	x1, x21
0000000100020df4	cbnz	x21, 0x100020de4
0000000100020df8	ldr	x1, [x20, #0xc8]
0000000100020dfc	cbz	x1, 0x100020e14
0000000100020e00	ldr	x21, [x1, #0x8]
0000000100020e04	mov	x0, x19
0000000100020e08	bl	0x100021820
0000000100020e0c	mov	x1, x21
0000000100020e10	cbnz	x21, 0x100020e00
0000000100020e14	ldr	x21, [x20, #0xd0]
0000000100020e18	cbz	x21, 0x100020e7c
0000000100020e1c	ldr	x8, [x21, #0x8]
0000000100020e20	add	x9, x21, #0x10
0000000100020e24	cbz	x8, 0x100020e60
0000000100020e28	mov	x22, #-0x1
0000000100020e2c	mov	x0, x21
0000000100020e30	mov	x21, x8
0000000100020e34	ldr	x10, [x9]
0000000100020e38	mov	x23, x21
0000000100020e3c	str	x10, [x23, #0x10]!
0000000100020e40	ldr	x9, [x9]
0000000100020e44	str	x8, [x9]
0000000100020e48	stp	x22, x22, [x0, #0x8]
0000000100020e4c	mov	w1, #0x0
0000000100020e50	bl	0x10000e4a4
0000000100020e54	ldur	x8, [x23, #-0x8]
0000000100020e58	mov	x9, x23
0000000100020e5c	cbnz	x8, 0x100020e2c
0000000100020e60	ldr	x9, [x9]
0000000100020e64	str	x8, [x9]
0000000100020e68	mov	x8, #-0x1
0000000100020e6c	stp	x8, x8, [x21, #0x8]
0000000100020e70	mov	w1, #0x0
0000000100020e74	mov	x0, x21
0000000100020e78	bl	0x10000e4a4
0000000100020e7c	ldr	x1, [x20, #0xd8]
0000000100020e80	cbz	x1, 0x100020e98
0000000100020e84	ldr	x21, [x1, #0x18]
0000000100020e88	mov	x0, x19
0000000100020e8c	bl	0x100021964
0000000100020e90	mov	x1, x21
0000000100020e94	cbnz	x21, 0x100020e84
0000000100020e98	ldrh	w8, [x20, #0x134]
0000000100020e9c	and	w9, w8, #0x600
0000000100020ea0	cmp	w9, #0x200
0000000100020ea4	b.ne	0x100020ed0
0000000100020ea8	orr	w8, w8, #0x400
0000000100020eac	strh	w8, [x20, #0x134]
0000000100020eb0	ldr	x8, [x20, #0x18]
0000000100020eb4	cbz	x8, 0x100020ec0
0000000100020eb8	ldr	x9, [x20, #0x20]
0000000100020ebc	str	x9, [x8, #0x20]
0000000100020ec0	ldr	x9, [x20, #0x20]
0000000100020ec4	str	x8, [x9]
0000000100020ec8	mov	x8, #-0x1
0000000100020ecc	stp	x8, x8, [x20, #0x18]
0000000100020ed0	mov	x0, x20
0000000100020ed4	bl	0x100015468
0000000100020ed8	cbz	w0, 0x100020ef4
0000000100020edc	ldr	x0, [x20, #0xe8]
0000000100020ee0	ldr	w8, [x0, #0xf0]
0000000100020ee4	sub	w8, w8, #0x1
0000000100020ee8	str	w8, [x0, #0xf0]
0000000100020eec	mov	w1, #0x13
0000000100020ef0	bl	0x10000e4a4
0000000100020ef4	ldr	x0, [x19, #0x50]
0000000100020ef8	cbz	x0, 0x100020f34
0000000100020efc	mov	x21, #-0x1
0000000100020f00	ldr	x22, [x0]
0000000100020f04	ldr	x8, [x0, #0x10]
0000000100020f08	cmp	x8, x20
0000000100020f0c	b.ne	0x100020f2c
0000000100020f10	cbz	x22, 0x100020f1c
0000000100020f14	ldr	x8, [x0, #0x8]
0000000100020f18	str	x8, [x22, #0x8]
0000000100020f1c	ldr	x8, [x0, #0x8]
0000000100020f20	str	x22, [x8]
0000000100020f24	stp	x21, x21, [x0]
0000000100020f28	bl	0x10000e704
0000000100020f2c	mov	x0, x22
0000000100020f30	cbnz	x22, 0x100020f00
0000000100020f34	ldr	x8, [x20, #0x48]
0000000100020f38	cbz	x8, 0x100020f44
0000000100020f3c	ldr	x9, [x20, #0x50]
0000000100020f40	str	x9, [x8, #0x50]
0000000100020f44	ldr	x9, [x20, #0x50]
0000000100020f48	str	x8, [x9]
0000000100020f4c	mov	x8, #-0x1
0000000100020f50	stp	x8, x8, [x20, #0x48]
0000000100020f54	ldr	w8, [x19, #0x9c]
0000000100020f58	sub	w8, w8, #0x1
0000000100020f5c	str	w8, [x19, #0x9c]
0000000100020f60	ldr	x8, [x20, #0x118]
0000000100020f64	cbz	x8, 0x100020fd8
0000000100020f68	ldrh	w8, [x20, #0x114]
0000000100020f6c	add	w8, w8, #0x1
0000000100020f70	strh	w8, [x20, #0x114]
0000000100020f74	orr	w1, wzr, #0x1c
0000000100020f78	mov	x0, x20
0000000100020f7c	bl	0x10000e3f4
0000000100020f80	nop
0000000100020f84	ldr	x8, #0x22d7c
0000000100020f88	str	x8, [x20, #0x68]
0000000100020f8c	cbz	x8, 0x100020f98
0000000100020f90	add	x9, x20, #0x68
0000000100020f94	str	x9, [x8, #0x70]
0000000100020f98	adr	x8, #142696
0000000100020f9c	nop
0000000100020fa0	str	x20, [x8]
0000000100020fa4	str	x8, [x20, #0x70]
0000000100020fa8	ldr	x0, [x20, #0x118]
0000000100020fac	mov	w1, #0x0
0000000100020fb0	bl	0x100030cc8 ; symbol stub for: _coalition_terminate
0000000100020fb4	cmn	w0, #0x1
0000000100020fb8	b.ne	0x100020fd8
0000000100020fbc	bl	0x100030adc ; symbol stub for: ___error
0000000100020fc0	ldrsw	x2, [x0]
0000000100020fc4	adr	x0, #-61980
0000000100020fc8	nop
0000000100020fcc	mov	x1, x20
0000000100020fd0	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100020fd4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100020fd8	ldr	x8, [x20, #0x120]
0000000100020fdc	cbz	x8, 0x100021050
0000000100020fe0	ldrh	w8, [x20, #0x114]
0000000100020fe4	add	w8, w8, #0x1
0000000100020fe8	strh	w8, [x20, #0x114]
0000000100020fec	mov	w1, #0x1d
0000000100020ff0	mov	x0, x20
0000000100020ff4	bl	0x10000e3f4
0000000100020ff8	nop
0000000100020ffc	ldr	x8, #0x22d0c
0000000100021000	str	x8, [x20, #0x88]
0000000100021004	cbz	x8, 0x100021010
0000000100021008	add	x9, x20, #0x88
000000010002100c	str	x9, [x8, #0x90]
0000000100021010	adr	x8, #142584
0000000100021014	nop
0000000100021018	str	x20, [x8]
000000010002101c	str	x8, [x20, #0x90]
0000000100021020	ldr	x0, [x20, #0x120]
0000000100021024	mov	w1, #0x0
0000000100021028	bl	0x100030cc8 ; symbol stub for: _coalition_terminate
000000010002102c	cmn	w0, #0x1
0000000100021030	b.ne	0x100021050
0000000100021034	bl	0x100030adc ; symbol stub for: ___error
0000000100021038	ldrsw	x2, [x0]
000000010002103c	adr	x0, #-62100
0000000100021040	nop
0000000100021044	mov	x1, x20
0000000100021048	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010002104c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100021050	ldr	x8, [x19, #0x38]
0000000100021054	cmp	x8, x20
0000000100021058	b.ne	0x100021060
000000010002105c	str	xzr, [x19, #0x38]
0000000100021060	mov	x0, x20
0000000100021064	bl	0x1000051b0
0000000100021068	mov	w1, #0x0
000000010002106c	mov	x0, x20
0000000100021070	bl	0x10000e4a4
0000000100021074	mov	w1, #0x5
0000000100021078	mov	x0, x19
000000010002107c	bl	0x10001eb10
0000000100021080	mov	w1, #0x5
0000000100021084	mov	x0, x19
0000000100021088	ldp	x29, x30, [sp, #0x40]
000000010002108c	ldp	x20, x19, [sp, #0x30]
0000000100021090	ldp	x22, x21, [sp, #0x20]
0000000100021094	ldp	x24, x23, [sp, #0x10]
0000000100021098	add	sp, sp, #0x50
000000010002109c	b	0x10000e4a4
00000001000210a0	adr	x0, #98013 ; literal pool for: "inconsistency in service domain during remove"
00000001000210a4	nop
00000001000210a8	bl	0x100028f84
00000001000210ac	stp	x20, x19, [sp, #-0x20]!
00000001000210b0	stp	x29, x30, [sp, #0x10]
00000001000210b4	add	x29, sp, #0x10
00000001000210b8	mov	x19, x0
00000001000210bc	ldr	x20, [x19, #0xa8]
00000001000210c0	cbz	x20, 0x1000210dc
00000001000210c4	ldrb	w8, [x20, #0x50]
00000001000210c8	tbnz	w8, #0x2, 0x100021144
00000001000210cc	mov	x0, x20
00000001000210d0	bl	0x10002f500
00000001000210d4	ldr	x20, [x20, #0x8]
00000001000210d8	cbnz	x20, 0x1000210c4
00000001000210dc	ldr	x20, [x19, #0xc0]
00000001000210e0	cbz	x20, 0x1000210fc
00000001000210e4	ldrb	w8, [x20, #0x50]
00000001000210e8	tbnz	w8, #0x2, 0x100021150
00000001000210ec	mov	x0, x20
00000001000210f0	bl	0x10002f500
00000001000210f4	ldr	x20, [x20, #0x8]
00000001000210f8	cbnz	x20, 0x1000210e4
00000001000210fc	ldr	x20, [x19, #0xc8]
0000000100021100	cbz	x20, 0x10002111c
0000000100021104	ldrb	w8, [x20, #0x50]
0000000100021108	tbnz	w8, #0x2, 0x10002115c
000000010002110c	mov	x0, x20
0000000100021110	bl	0x10002f500
0000000100021114	ldr	x20, [x20, #0x8]
0000000100021118	cbnz	x20, 0x100021104
000000010002111c	ldr	x20, [x19, #0xd0]
0000000100021120	cbz	x20, 0x100021134
0000000100021124	mov	x0, x20
0000000100021128	bl	0x1000100a8
000000010002112c	ldr	x20, [x20, #0x8]
0000000100021130	cbnz	x20, 0x100021124
0000000100021134	mov	x0, x19
0000000100021138	ldp	x29, x30, [sp, #0x10]
000000010002113c	ldp	x20, x19, [sp], #0x20
0000000100021140	b	0x100015d00
0000000100021144	adr	x0, #98262 ; literal pool for: "service deactivated with active endpoints"
0000000100021148	nop
000000010002114c	bl	0x100028f84
0000000100021150	adr	x0, #98292 ; literal pool for: "service deactivated with active event endpoints"
0000000100021154	nop
0000000100021158	bl	0x100028f84
000000010002115c	adr	x0, #98328 ; literal pool for: "service deactivated with active instance endpoints"
0000000100021160	nop
0000000100021164	bl	0x100028f84
0000000100021168	sub	sp, sp, #0x30
000000010002116c	stp	x20, x19, [sp, #0x10]
0000000100021170	stp	x29, x30, [sp, #0x20]
0000000100021174	add	x29, sp, #0x20
0000000100021178	mov	x19, x1
000000010002117c	mov	x20, x0
0000000100021180	ldr	x8, [x19, #0xe0]
0000000100021184	cmp	x8, x20
0000000100021188	b.ne	0x10002128c
000000010002118c	ldrsh	w8, [x19, #0x114]
0000000100021190	add	w9, w8, #0x1
0000000100021194	strh	w9, [x19, #0x114]
0000000100021198	tbnz	w8, #0x1f, 0x100021298
000000010002119c	cbnz	w8, 0x10002127c
00000001000211a0	mov	w8, #-0x1
00000001000211a4	str	w8, [sp, #0xc]
00000001000211a8	ldr	w8, [x19, #0x110]
00000001000211ac	cbz	w8, 0x100021214
00000001000211b0	str	w8, [sp, #0xc]
00000001000211b4	add	x0, sp, #0xc
00000001000211b8	orr	w1, wzr, #0x4
00000001000211bc	bl	0x10000d840
00000001000211c0	mov	x8, #0x2493
00000001000211c4	movk	x8, #0x9249, lsl #16
00000001000211c8	movk	x8, #0x4924, lsl #32
00000001000211cc	movk	x8, #0x2492, lsl #48
00000001000211d0	umulh	x8, x0, x8
00000001000211d4	sub	x9, x0, x8
00000001000211d8	add	x8, x8, x9, lsr #1
00000001000211dc	lsr	x9, x8, #2
00000001000211e0	lsl	x9, x9, #3
00000001000211e4	sub	x8, x9, x8, lsr #2
00000001000211e8	sub	x8, x0, x8
00000001000211ec	add	x9, x20, x8, lsl #3
00000001000211f0	add	x8, x9, #0x248
00000001000211f4	ldr	x9, [x9, #0x248]
00000001000211f8	mov	x10, x19
00000001000211fc	str	x9, [x10, #0x28]!
0000000100021200	cbz	x9, 0x100021208
0000000100021204	str	x10, [x9, #0x30]
0000000100021208	str	x19, [x8]
000000010002120c	str	x8, [x19, #0x30]
0000000100021210	b	0x10002127c
0000000100021214	mov	x0, x19
0000000100021218	bl	0x100015ed8
000000010002121c	str	w0, [sp, #0xc]
0000000100021220	add	x0, sp, #0xc
0000000100021224	orr	w1, wzr, #0x4
0000000100021228	bl	0x10000d840
000000010002122c	mov	x8, #0x4ec5
0000000100021230	movk	x8, #0xc4ec, lsl #16
0000000100021234	movk	x8, #0xec4e, lsl #32
0000000100021238	movk	x8, #0x4ec4, lsl #48
000000010002123c	umulh	x8, x0, x8
0000000100021240	lsr	x8, x8, #2
0000000100021244	mov	w9, #0xd
0000000100021248	msub	x8, x8, x9, x0
000000010002124c	add	x9, x20, x8, lsl #3
0000000100021250	add	x8, x9, #0x1e0
0000000100021254	ldr	x9, [x9, #0x1e0]
0000000100021258	str	x9, [x19, #0x28]
000000010002125c	cbz	x9, 0x100021268
0000000100021260	add	x10, x19, #0x28
0000000100021264	str	x10, [x9, #0x30]
0000000100021268	str	x19, [x8]
000000010002126c	str	x8, [x19, #0x30]
0000000100021270	ldr	w8, [x20, #0xa0]
0000000100021274	add	w8, w8, #0x1
0000000100021278	str	w8, [x20, #0xa0]
000000010002127c	ldp	x29, x30, [sp, #0x20]
0000000100021280	ldp	x20, x19, [sp, #0x10]
0000000100021284	add	sp, sp, #0x30
0000000100021288	ret
000000010002128c	adr	x0, #98075 ; literal pool for: "inconsistency in service domain during activate"
0000000100021290	nop
0000000100021294	bl	0x100028f84
0000000100021298	adr	x0, #98111 ; literal pool for: "underflow of service activation count during activate"
000000010002129c	nop
00000001000212a0	bl	0x100028f84
00000001000212a4	sub	sp, sp, #0x30
00000001000212a8	stp	x20, x19, [sp, #0x10]
00000001000212ac	stp	x29, x30, [sp, #0x20]
00000001000212b0	add	x29, sp, #0x20
00000001000212b4	mov	x19, x0
00000001000212b8	ldr	x8, [x19, #0x60]
00000001000212bc	adr	x9, #139100
00000001000212c0	nop
00000001000212c4	cmp	x8, x9
00000001000212c8	b.ne	0x100021334
00000001000212cc	orr	w1, wzr, #0x7
00000001000212d0	mov	x0, x19
00000001000212d4	mov	x2, #0x0
00000001000212d8	mov	x3, #0x0
00000001000212dc	bl	0x10000e39c
00000001000212e0	mov	x20, x0
00000001000212e4	nop
00000001000212e8	nop
00000001000212ec	ldr	x0, #0x23134
00000001000212f0	add	x8, x19, #0x3a8
00000001000212f4	str	x8, [sp]
00000001000212f8	adr	x2, #98113 ; literal pool for: "%s: resolving origin"
00000001000212fc	nop
0000000100021300	mov	w1, #0x0
0000000100021304	bl	0x1000270c8
0000000100021308	orr	w1, wzr, #0x7
000000010002130c	mov	x0, x19
0000000100021310	bl	0x10001d898
0000000100021314	bl	0x10000a2b0
0000000100021318	adr	x2, #2020
000000010002131c	nop
0000000100021320	mov	x1, x20
0000000100021324	ldp	x29, x30, [sp, #0x20]
0000000100021328	ldp	x20, x19, [sp, #0x10]
000000010002132c	add	sp, sp, #0x30
0000000100021330	b	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100021334	adr	x0, #98009 ; literal pool for: "attempt to resolve origin of non-pid domain"
0000000100021338	nop
000000010002133c	bl	0x100028f84
0000000100021340	stp	x24, x23, [sp, #-0x40]!
0000000100021344	stp	x22, x21, [sp, #0x10]
0000000100021348	stp	x20, x19, [sp, #0x20]
000000010002134c	stp	x29, x30, [sp, #0x30]
0000000100021350	add	x29, sp, #0x30
0000000100021354	mov	x19, x0
0000000100021358	ldr	w8, [x19, #0x98]
000000010002135c	subs	w9, w8, #0x1
0000000100021360	str	w9, [x19, #0x98]
0000000100021364	cbz	w8, 0x10002140c
0000000100021368	b.gt	0x1000213f8
000000010002136c	mov	x22, #0x0
0000000100021370	adr	x20, #-62920
0000000100021374	nop
0000000100021378	add	x8, x19, x22, lsl #3
000000010002137c	ldr	x21, [x8, #0x128]
0000000100021380	cbz	x21, 0x1000213ec
0000000100021384	ldr	x23, [x21, #0x48]
0000000100021388	ldr	w8, [x21, #0x10c]
000000010002138c	cbz	w8, 0x1000213e4
0000000100021390	mov	w1, #0x11
0000000100021394	mov	x0, x21
0000000100021398	bl	0x10000e3f4
000000010002139c	ldr	w1, [x21, #0x10c]
00000001000213a0	mov	x0, x21
00000001000213a4	bl	0x100015574
00000001000213a8	and	w8, w0, #0xfffffffe
00000001000213ac	cmp	w8, #0x24
00000001000213b0	csel	w8, wzr, w0, eq
00000001000213b4	cbz	w8, 0x1000213d4
00000001000213b8	cmp	w8, #0x25
00000001000213bc	b.eq	0x1000213d4
00000001000213c0	sxtw	x2, w8
00000001000213c4	mov	x0, x20
00000001000213c8	mov	x1, x21
00000001000213cc	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000213d0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000213d4	str	wzr, [x21, #0x10c]
00000001000213d8	mov	w1, #0x11
00000001000213dc	mov	x0, x21
00000001000213e0	bl	0x10000e4a4
00000001000213e4	mov	x21, x23
00000001000213e8	cbnz	x23, 0x100021384
00000001000213ec	add	x22, x22, #0x1
00000001000213f0	cmp	x22, #0x17
00000001000213f4	b.ne	0x100021378
00000001000213f8	ldp	x29, x30, [sp, #0x30]
00000001000213fc	ldp	x20, x19, [sp, #0x20]
0000000100021400	ldp	x22, x21, [sp, #0x10]
0000000100021404	ldp	x24, x23, [sp], #0x40
0000000100021408	ret
000000010002140c	adr	x0, #98053 ; literal pool for: "underflow of on-demand count"
0000000100021410	nop
0000000100021414	bl	0x100028f84
0000000100021418	sub	sp, sp, #0x50
000000010002141c	stp	x22, x21, [sp, #0x20]
0000000100021420	stp	x20, x19, [sp, #0x30]
0000000100021424	stp	x29, x30, [sp, #0x40]
0000000100021428	add	x29, sp, #0x40
000000010002142c	mov	x19, x1
0000000100021430	mov	x20, x0
0000000100021434	ldr	x8, [x19, #0xe0]
0000000100021438	cmp	x8, x20
000000010002143c	b.ne	0x1000216f4
0000000100021440	ldr	w8, [x19, #0x110]
0000000100021444	ldrsh	w9, [x19, #0x114]
0000000100021448	sub	w10, w9, #0x1
000000010002144c	strh	w10, [x19, #0x114]
0000000100021450	cmp	w9, #0x0
0000000100021454	b.le	0x100021700
0000000100021458	cmp	w8, #0x0
000000010002145c	orr	w10, wzr, #0x1
0000000100021460	cinc	w10, w10, ne
0000000100021464	cmp	w10, w9
0000000100021468	b.ge	0x100021480
000000010002146c	ldp	x29, x30, [sp, #0x40]
0000000100021470	ldp	x20, x19, [sp, #0x30]
0000000100021474	ldp	x22, x21, [sp, #0x20]
0000000100021478	add	sp, sp, #0x50
000000010002147c	ret
0000000100021480	ldrh	w9, [x19, #0x134]
0000000100021484	tbnz	w9, #0x1, 0x100021508
0000000100021488	nop
000000010002148c	nop
0000000100021490	ldr	x0, #0x22f90
0000000100021494	add	x8, x20, #0x3a8
0000000100021498	add	x9, x19, #0x460
000000010002149c	ldr	x10, [x19, #0x128]
00000001000214a0	adr	x11, #98067 ; literal pool for: ", leaving extension group"
00000001000214a4	nop
00000001000214a8	adr	x12, #83409 ; literal pool for: ""
00000001000214ac	nop
00000001000214b0	cmp	x10, #0x0
00000001000214b4	csel	x10, x12, x11, eq
00000001000214b8	stp	x9, x10, [sp, #0x8]
00000001000214bc	str	x8, [sp]
00000001000214c0	adr	x2, #98008 ; literal pool for: "%s: service inactive: %s%s"
00000001000214c4	nop
00000001000214c8	mov	w1, #0x0
00000001000214cc	bl	0x1000270c8
00000001000214d0	ldr	x8, [x19, #0x28]
00000001000214d4	cbz	x8, 0x1000214e0
00000001000214d8	ldr	x9, [x19, #0x30]
00000001000214dc	str	x9, [x8, #0x30]
00000001000214e0	ldr	x9, [x19, #0x30]
00000001000214e4	str	x8, [x9]
00000001000214e8	mov	x8, #-0x1
00000001000214ec	stp	x8, x8, [x19, #0x28]
00000001000214f0	ldr	w8, [x19, #0x110]
00000001000214f4	cbnz	w8, 0x100021534
00000001000214f8	ldr	w8, [x20, #0xa0]
00000001000214fc	sub	w8, w8, #0x1
0000000100021500	str	w8, [x20, #0xa0]
0000000100021504	b	0x100021514
0000000100021508	and	w9, w9, #0xfffffffd
000000010002150c	strh	w9, [x19, #0x134]
0000000100021510	cbnz	w8, 0x100021534
0000000100021514	mov	x0, x19
0000000100021518	bl	0x1000163cc
000000010002151c	bl	0x10002cd8c
0000000100021520	cbz	w0, 0x100021530
0000000100021524	ldrh	w8, [x19, #0x134]
0000000100021528	and	w8, w8, #0xffffdfff
000000010002152c	strh	w8, [x19, #0x134]
0000000100021530	ldr	w8, [x19, #0x110]
0000000100021534	mov	w9, #-0x1
0000000100021538	str	w9, [x19, #0x130]
000000010002153c	ldrh	w10, [x19, #0x134]
0000000100021540	and	w9, w10, #0xffffff3f
0000000100021544	strh	w9, [x19, #0x134]
0000000100021548	strh	wzr, [x19, #0x114]
000000010002154c	cbnz	w8, 0x100021560
0000000100021550	tbnz	w10, #0xd, 0x100021560
0000000100021554	mov	x0, x19
0000000100021558	bl	0x100015c20
000000010002155c	ldrh	w9, [x19, #0x134]
0000000100021560	and	w8, w9, #0xffffdfff
0000000100021564	strh	w8, [x19, #0x134]
0000000100021568	ldr	x21, [x19, #0xf8]
000000010002156c	cbz	x21, 0x1000215a8
0000000100021570	str	xzr, [x19, #0xf8]
0000000100021574	mov	x0, x21
0000000100021578	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
000000010002157c	orr	w8, w0, #0x20
0000000100021580	cmp	w8, #0x20
0000000100021584	b.eq	0x1000215a0
0000000100021588	sxtw	x2, w0
000000010002158c	adr	x0, #-63460
0000000100021590	nop
0000000100021594	mov	x1, x20
0000000100021598	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010002159c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000215a0	mov	x0, x21
00000001000215a4	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000215a8	ldr	x21, [x19, #0x128]
00000001000215ac	cbz	x21, 0x1000215c4
00000001000215b0	str	xzr, [x19, #0x128]
00000001000215b4	mov	x0, x21
00000001000215b8	bl	0x100030d88 ; symbol stub for: _dispatch_group_leave
00000001000215bc	mov	x0, x21
00000001000215c0	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000215c4	mov	x0, x19
00000001000215c8	bl	0x100021724
00000001000215cc	ldr	w8, [x19, #0x110]
00000001000215d0	cbz	w8, 0x100021630
00000001000215d4	ldr	x8, [x19, #0xb0]
00000001000215d8	cbnz	x8, 0x10002170c
00000001000215dc	ldr	x8, [x19, #0xb8]
00000001000215e0	cbnz	x8, 0x100021718
00000001000215e4	nop
00000001000215e8	nop
00000001000215ec	ldr	x0, #0x22e34
00000001000215f0	add	x8, x20, #0x3a8
00000001000215f4	add	x9, x19, #0x460
00000001000215f8	stp	x8, x9, [sp]
00000001000215fc	adr	x2, #97861 ; literal pool for: "%s: removing inactive unmanaged service: %s"
0000000100021600	nop
0000000100021604	mov	w1, #0x0
0000000100021608	bl	0x1000270c8
000000010002160c	mov	x0, x19
0000000100021610	bl	0x100031010 ; symbol stub for: _free
0000000100021614	orr	w1, wzr, #0x6
0000000100021618	mov	x0, x20
000000010002161c	ldp	x29, x30, [sp, #0x40]
0000000100021620	ldp	x20, x19, [sp, #0x30]
0000000100021624	ldp	x22, x21, [sp, #0x20]
0000000100021628	add	sp, sp, #0x50
000000010002162c	b	0x10000e4a4
0000000100021630	ldrb	w8, [x20, #0x3a0]
0000000100021634	tbnz	w8, #0x0, 0x1000216a0
0000000100021638	ldrb	w8, [x19, #0x134]
000000010002163c	tbnz	w8, #0x4, 0x1000216a0
0000000100021640	mov	x0, x19
0000000100021644	bl	0x1000210ac
0000000100021648	ldrh	w8, [x20, #0xa4]
000000010002164c	cbnz	w8, 0x10002146c
0000000100021650	ldr	w1, [x19, #0x108]
0000000100021654	cbz	w1, 0x10002146c
0000000100021658	mov	x0, x19
000000010002165c	bl	0x100015574
0000000100021660	and	w8, w0, #0xfffffffe
0000000100021664	cmp	w8, #0x24
0000000100021668	csel	w8, wzr, w0, eq
000000010002166c	cbz	w8, 0x100021698
0000000100021670	cmp	w8, #0x25
0000000100021674	b.eq	0x100021698
0000000100021678	cmp	w8, #0x92
000000010002167c	b.eq	0x100021698
0000000100021680	sxtw	x2, w8
0000000100021684	adr	x0, #-63708
0000000100021688	nop
000000010002168c	mov	x1, x19
0000000100021690	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100021694	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100021698	str	wzr, [x19, #0x108]
000000010002169c	b	0x10002146c
00000001000216a0	ldr	x21, [x19, #0x100]
00000001000216a4	cbz	x21, 0x1000216d8
00000001000216a8	ldrb	w8, [x21, #0x51]
00000001000216ac	tbz	w8, #0x3, 0x1000216c0
00000001000216b0	add	x1, x19, #0x460
00000001000216b4	orr	w2, wzr, #0x1
00000001000216b8	mov	x0, x20
00000001000216bc	bl	0x10001ddec
00000001000216c0	mov	x0, x21
00000001000216c4	bl	0x1000201a8
00000001000216c8	orr	w1, wzr, #0x1e
00000001000216cc	mov	x0, x21
00000001000216d0	bl	0x10000e4a4
00000001000216d4	str	xzr, [x19, #0x100]
00000001000216d8	mov	x0, x20
00000001000216dc	mov	x1, x19
00000001000216e0	ldp	x29, x30, [sp, #0x40]
00000001000216e4	ldp	x20, x19, [sp, #0x30]
00000001000216e8	ldp	x22, x21, [sp, #0x20]
00000001000216ec	add	sp, sp, #0x50
00000001000216f0	b	0x100020d38
00000001000216f4	adr	x0, #97338 ; literal pool for: "inconsistency in service domain during deactivate"
00000001000216f8	nop
00000001000216fc	bl	0x100028f84
0000000100021700	adr	x0, #97376 ; literal pool for: "underflow of service activation count during deactivate"
0000000100021704	nop
0000000100021708	bl	0x100028f84
000000010002170c	adr	x0, #97473 ; literal pool for: "unmanaged service deactivated with active dynamic endpoints"
0000000100021710	nop
0000000100021714	bl	0x100028f84
0000000100021718	adr	x0, #97521 ; literal pool for: "unmanaged service deactivated with active pid endpoints"
000000010002171c	nop
0000000100021720	bl	0x100028f84
0000000100021724	stp	x20, x19, [sp, #-0x20]!
0000000100021728	stp	x29, x30, [sp, #0x10]
000000010002172c	add	x29, sp, #0x10
0000000100021730	mov	x19, x0
0000000100021734	ldr	w8, [x19, #0x110]
0000000100021738	cbnz	w8, 0x10002175c
000000010002173c	ldrb	w8, [x19, #0x135]
0000000100021740	tbz	w8, #0x6, 0x10002175c
0000000100021744	nop
0000000100021748	ldr	x0, #0x226f8
000000010002174c	bl	0x100030d88 ; symbol stub for: _dispatch_group_leave
0000000100021750	ldrh	w8, [x19, #0x134]
0000000100021754	and	w8, w8, #0xffffbfff
0000000100021758	strh	w8, [x19, #0x134]
000000010002175c	ldp	x29, x30, [sp, #0x10]
0000000100021760	ldp	x20, x19, [sp], #0x20
0000000100021764	ret
0000000100021768	stp	x20, x19, [sp, #-0x20]!
000000010002176c	stp	x29, x30, [sp, #0x10]
0000000100021770	add	x29, sp, #0x10
0000000100021774	mov	x19, x0
0000000100021778	ldrb	w8, [x19, #0x135]
000000010002177c	tbz	w8, #0x3, 0x1000217b0
0000000100021780	ldr	x0, [x19, #0xb0]
0000000100021784	cbz	x0, 0x100021798
0000000100021788	ldr	x20, [x0, #0x8]
000000010002178c	bl	0x10002f760
0000000100021790	mov	x0, x20
0000000100021794	cbnz	x20, 0x100021788
0000000100021798	ldr	x0, [x19, #0xb8]
000000010002179c	cbz	x0, 0x1000217b0
00000001000217a0	ldr	x20, [x0, #0x8]
00000001000217a4	bl	0x10002f760
00000001000217a8	mov	x0, x20
00000001000217ac	cbnz	x20, 0x1000217a0
00000001000217b0	ldr	x0, [x19, #0xa8]
00000001000217b4	cbz	x0, 0x1000217c8
00000001000217b8	ldr	x20, [x0, #0x8]
00000001000217bc	bl	0x10002f760
00000001000217c0	mov	x0, x20
00000001000217c4	cbnz	x20, 0x1000217b8
00000001000217c8	ldr	x0, [x19, #0xc0]
00000001000217cc	cbz	x0, 0x1000217e0
00000001000217d0	ldr	x20, [x0, #0x8]
00000001000217d4	bl	0x10002f760
00000001000217d8	mov	x0, x20
00000001000217dc	cbnz	x20, 0x1000217d0
00000001000217e0	ldr	x0, [x19, #0xc8]
00000001000217e4	cbz	x0, 0x1000217f8
00000001000217e8	ldr	x20, [x0, #0x8]
00000001000217ec	bl	0x10002f760
00000001000217f0	mov	x0, x20
00000001000217f4	cbnz	x20, 0x1000217e8
00000001000217f8	ldr	x0, [x19, #0xd0]
00000001000217fc	cbz	x0, 0x100021810
0000000100021800	ldr	x20, [x0, #0x8]
0000000100021804	bl	0x100010370
0000000100021808	mov	x0, x20
000000010002180c	cbnz	x20, 0x100021800
0000000100021810	mov	x0, x19
0000000100021814	ldp	x29, x30, [sp, #0x10]
0000000100021818	ldp	x20, x19, [sp], #0x20
000000010002181c	b	0x100015e80
0000000100021820	stp	x22, x21, [sp, #-0x30]!
0000000100021824	stp	x20, x19, [sp, #0x10]
0000000100021828	stp	x29, x30, [sp, #0x20]
000000010002182c	add	x29, sp, #0x20
0000000100021830	mov	x19, x1
0000000100021834	mov	x20, x0
0000000100021838	ldr	x8, [x19, #0x40]
000000010002183c	cbz	x8, 0x100021854
0000000100021840	mov	x0, x19
0000000100021844	ldp	x29, x30, [sp, #0x20]
0000000100021848	ldp	x20, x19, [sp, #0x10]
000000010002184c	ldp	x22, x21, [sp], #0x30
0000000100021850	b	0x100021aa0
0000000100021854	ldr	x0, [x19, #0x38]
0000000100021858	cbz	x0, 0x10002186c
000000010002185c	ldr	x21, [x0, #0x28]
0000000100021860	bl	0x100021aa0
0000000100021864	mov	x0, x21
0000000100021868	cbnz	x21, 0x10002185c
000000010002186c	ldr	w8, [x19, #0x48]
0000000100021870	cbz	w8, 0x1000218a4
0000000100021874	ldr	x1, [x20, #0x48]
0000000100021878	cbz	x1, 0x100021890
000000010002187c	ldr	w9, [x1, #0x14]
0000000100021880	cmp	w9, w8
0000000100021884	b.eq	0x10002189c
0000000100021888	ldr	x1, [x1]
000000010002188c	cbnz	x1, 0x10002187c
0000000100021890	adr	x0, #96098 ; literal pool for: "domain has no corresponding special port entry"
0000000100021894	nop
0000000100021898	bl	0x100028f84
000000010002189c	mov	x0, x20
00000001000218a0	bl	0x100019b90
00000001000218a4	ldr	w8, [x19, #0x4c]
00000001000218a8	cbz	w8, 0x100021904
00000001000218ac	cmp	w8, #0x18
00000001000218b0	b.ne	0x1000218d4
00000001000218b4	nop
00000001000218b8	ldr	x8, #0x22440
00000001000218bc	ldrh	w8, [x8, #0x3a0]
00000001000218c0	and	w20, w8, #0x3
00000001000218c4	bl	0x100031220 ; symbol stub for: _mach_host_self
00000001000218c8	cbz	w20, 0x1000218e8
00000001000218cc	mov	w1, #0x0
00000001000218d0	b	0x1000218f4
00000001000218d4	sxtw	x8, w8
00000001000218d8	adr	x9, #140408
00000001000218dc	nop
00000001000218e0	add	x8, x9, x8, lsl #3
00000001000218e4	b	0x100021900
00000001000218e8	nop
00000001000218ec	nop
00000001000218f0	ldr	w1, 0x100044430
00000001000218f4	bl	0x10002af74
00000001000218f8	adr	x8, #140368
00000001000218fc	nop
0000000100021900	str	xzr, [x8]
0000000100021904	ldrb	w8, [x19, #0x50]
0000000100021908	tbz	w8, #0x5, 0x10002192c
000000010002190c	ldr	x8, [x19, #0x18]
0000000100021910	cbz	x8, 0x10002191c
0000000100021914	ldr	x9, [x19, #0x20]
0000000100021918	str	x9, [x8, #0x20]
000000010002191c	ldr	x9, [x19, #0x20]
0000000100021920	str	x8, [x9]
0000000100021924	mov	x8, #-0x1
0000000100021928	stp	x8, x8, [x19, #0x18]
000000010002192c	ldr	x8, [x19, #0x8]
0000000100021930	cbz	x8, 0x10002193c
0000000100021934	ldr	x9, [x19, #0x10]
0000000100021938	str	x9, [x8, #0x10]
000000010002193c	ldr	x9, [x19, #0x10]
0000000100021940	str	x8, [x9]
0000000100021944	mov	x8, #-0x1
0000000100021948	stp	x8, x8, [x19, #0x8]
000000010002194c	mov	w1, #0x0
0000000100021950	mov	x0, x19
0000000100021954	ldp	x29, x30, [sp, #0x20]
0000000100021958	ldp	x20, x19, [sp, #0x10]
000000010002195c	ldp	x22, x21, [sp], #0x30
0000000100021960	b	0x10000e4a4
0000000100021964	stp	x20, x19, [sp, #-0x20]!
0000000100021968	stp	x29, x30, [sp, #0x10]
000000010002196c	add	x29, sp, #0x10
0000000100021970	mov	x19, x1
0000000100021974	mov	x20, x0
0000000100021978	ldrh	w8, [x19, #0x134]
000000010002197c	and	w9, w8, #0x600
0000000100021980	cmp	w9, #0x200
0000000100021984	b.ne	0x1000219e4
0000000100021988	ldr	x8, [x19, #0x18]
000000010002198c	cmn	x8, #0x1
0000000100021990	b.eq	0x1000219a0
0000000100021994	cbnz	x8, 0x1000219bc
0000000100021998	add	x9, x19, #0x20
000000010002199c	b	0x1000219c8
00000001000219a0	mov	x9, x19
00000001000219a4	ldr	x10, [x9, #0x20]!
00000001000219a8	cmn	x10, #0x1
00000001000219ac	b.ne	0x1000219c4
00000001000219b0	adr	x0, #95857 ; literal pool for: "multiple attempts to remove service instance"
00000001000219b4	nop
00000001000219b8	bl	0x100028f84
00000001000219bc	mov	x9, x19
00000001000219c0	ldr	x10, [x9, #0x20]!
00000001000219c4	str	x10, [x8, #0x20]
00000001000219c8	ldr	x9, [x9]
00000001000219cc	str	x8, [x9]
00000001000219d0	mov	x8, #-0x1
00000001000219d4	stp	x8, x8, [x19, #0x18]
00000001000219d8	ldrh	w8, [x19, #0x134]
00000001000219dc	orr	w8, w8, #0x400
00000001000219e0	strh	w8, [x19, #0x134]
00000001000219e4	tbnz	w8, #0x0, 0x100021a3c
00000001000219e8	ldrh	w9, [x19, #0x114]
00000001000219ec	cbz	w9, 0x100021a60
00000001000219f0	orr	w8, w8, #0x10
00000001000219f4	strh	w8, [x19, #0x134]
00000001000219f8	mov	x0, x19
00000001000219fc	bl	0x100015694
0000000100021a00	mov	x8, x0
0000000100021a04	mov	w0, #0x24
0000000100021a08	cbz	w8, 0x100021a7c
0000000100021a0c	cmp	w8, #0x25
0000000100021a10	b.eq	0x100021a7c
0000000100021a14	cmp	w8, #0x59
0000000100021a18	b.eq	0x100021a88
0000000100021a1c	sxtw	x2, w8
0000000100021a20	adr	x0, #-64632
0000000100021a24	nop
0000000100021a28	mov	x1, x19
0000000100021a2c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100021a30	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100021a34	mov	w0, #0x24
0000000100021a38	b	0x100021a7c
0000000100021a3c	orr	w8, w8, #0x10
0000000100021a40	strh	w8, [x19, #0x134]
0000000100021a44	mov	x0, x19
0000000100021a48	bl	0x100015694
0000000100021a4c	cmp	w0, #0x59
0000000100021a50	b.eq	0x100021a78
0000000100021a54	adr	x0, #95738 ; literal pool for: "inconsistency between domain and service semi-active state during semi-active bootout"
0000000100021a58	nop
0000000100021a5c	bl	0x100028f84
0000000100021a60	mov	x0, x19
0000000100021a64	bl	0x100015ed8
0000000100021a68	cbnz	w0, 0x100021a94
0000000100021a6c	mov	x0, x20
0000000100021a70	mov	x1, x19
0000000100021a74	bl	0x100020d38
0000000100021a78	mov	w0, #0x0
0000000100021a7c	ldp	x29, x30, [sp, #0x10]
0000000100021a80	ldp	x20, x19, [sp], #0x20
0000000100021a84	ret
0000000100021a88	adr	x0, #95809 ; literal pool for: "inconsistency between domain and service semi-active state during active bootout"
0000000100021a8c	nop
0000000100021a90	bl	0x100028f84
0000000100021a94	adr	x0, #95760 ; literal pool for: "active service has zero active count"
0000000100021a98	nop
0000000100021a9c	bl	0x100028f84
0000000100021aa0	ldr	x8, [x0, #0x40]
0000000100021aa4	cbz	x8, 0x100021ae8
0000000100021aa8	ldr	x8, [x0, #0x18]
0000000100021aac	cbz	x8, 0x100021ab8
0000000100021ab0	ldr	x9, [x0, #0x20]
0000000100021ab4	str	x9, [x8, #0x20]
0000000100021ab8	ldr	x9, [x0, #0x20]
0000000100021abc	str	x8, [x9]
0000000100021ac0	mov	x8, #-0x1
0000000100021ac4	stp	x8, x8, [x0, #0x18]
0000000100021ac8	ldr	x9, [x0, #0x28]
0000000100021acc	cbz	x9, 0x100021ad8
0000000100021ad0	ldr	x10, [x0, #0x30]
0000000100021ad4	str	x10, [x9, #0x30]
0000000100021ad8	ldr	x10, [x0, #0x30]
0000000100021adc	str	x9, [x10]
0000000100021ae0	stp	x8, x8, [x0, #0x28]
0000000100021ae4	b	0x100031010 ; symbol stub for: _free
0000000100021ae8	stp	x29, x30, [sp, #-0x10]!
0000000100021aec	mov	x29, sp
0000000100021af0	adr	x0, #95444 ; literal pool for: "alias-removal attempt of non-aliased endpoint"
0000000100021af4	nop
0000000100021af8	bl	0x100028f84
0000000100021afc	stp	x20, x19, [sp, #-0x20]!
0000000100021b00	stp	x29, x30, [sp, #0x10]
0000000100021b04	add	x29, sp, #0x10
0000000100021b08	sub	sp, sp, #0x410
0000000100021b0c	mov	x19, x0
0000000100021b10	nop
0000000100021b14	ldr	x8, #0x1e504 ; literal pool symbol address: ___stack_chk_guard
0000000100021b18	ldr	x8, [x8]
0000000100021b1c	stur	x8, [x29, #-0x18]
0000000100021b20	ldr	x8, [x19]
0000000100021b24	ldr	w0, [x8, #0x68]
0000000100021b28	orr	w2, wzr, #0x400
0000000100021b2c	add	x1, sp, #0x8
0000000100021b30	bl	0x100031580 ; symbol stub for: _proc_pidpath
0000000100021b34	cbz	w0, 0x100021b48
0000000100021b38	add	x0, sp, #0x8
0000000100021b3c	bl	0x10000d520
0000000100021b40	str	x0, [x19, #0x8]
0000000100021b44	b	0x100021b54
0000000100021b48	bl	0x100030adc ; symbol stub for: ___error
0000000100021b4c	ldrsw	x8, [x0]
0000000100021b50	str	x8, [x19, #0x10]
0000000100021b54	bl	0x10000d8e0
0000000100021b58	adr	x2, #60
0000000100021b5c	nop
0000000100021b60	mov	x1, x19
0000000100021b64	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100021b68	ldur	x8, [x29, #-0x18]
0000000100021b6c	nop
0000000100021b70	ldr	x9, #0x1e4a8 ; literal pool symbol address: ___stack_chk_guard
0000000100021b74	ldr	x9, [x9]
0000000100021b78	cmp	x9, x8
0000000100021b7c	b.ne	0x100021b90
0000000100021b80	add	sp, sp, #0x410
0000000100021b84	ldp	x29, x30, [sp, #0x10]
0000000100021b88	ldp	x20, x19, [sp], #0x20
0000000100021b8c	ret
0000000100021b90	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100021b94	stp	x22, x21, [sp, #-0x30]!
0000000100021b98	stp	x20, x19, [sp, #0x10]
0000000100021b9c	stp	x29, x30, [sp, #0x20]
0000000100021ba0	add	x29, sp, #0x20
0000000100021ba4	mov	x19, x0
0000000100021ba8	ldr	w8, [x19, #0x10]
0000000100021bac	cbz	w8, 0x100021bd0
0000000100021bb0	bl	0x10000d8e0
0000000100021bb4	adr	x2, #332
0000000100021bb8	nop
0000000100021bbc	mov	x1, x19
0000000100021bc0	ldp	x29, x30, [sp, #0x20]
0000000100021bc4	ldp	x20, x19, [sp, #0x10]
0000000100021bc8	ldp	x22, x21, [sp], #0x30
0000000100021bcc	b	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100021bd0	ldp	x21, x1, [x19]
0000000100021bd4	orr	w0, wzr, #0x1
0000000100021bd8	bl	0x100031958 ; symbol stub for: _xpc_bundle_create_from_origin
0000000100021bdc	mov	x20, x0
0000000100021be0	str	x20, [x21, #0xc8]
0000000100021be4	bl	0x10000d8e0
0000000100021be8	mov	x1, x0
0000000100021bec	adr	x3, #32
0000000100021bf0	nop
0000000100021bf4	mov	x0, x20
0000000100021bf8	mov	x2, x19
0000000100021bfc	ldp	x29, x30, [sp, #0x20]
0000000100021c00	ldp	x20, x19, [sp, #0x10]
0000000100021c04	ldp	x22, x21, [sp], #0x30
0000000100021c08	b	0x1000319a0 ; symbol stub for: _xpc_bundle_resolve
0000000100021c0c	sub	sp, sp, #0x60
0000000100021c10	stp	x24, x23, [sp, #0x20]
0000000100021c14	stp	x22, x21, [sp, #0x30]
0000000100021c18	stp	x20, x19, [sp, #0x40]
0000000100021c1c	stp	x29, x30, [sp, #0x50]
0000000100021c20	add	x29, sp, #0x50
0000000100021c24	mov	x19, x2
0000000100021c28	mov	x22, x1
0000000100021c2c	mov	x23, x0
0000000100021c30	ldp	x21, x20, [x19]
0000000100021c34	nop
0000000100021c38	nop
0000000100021c3c	ldr	x0, #0x227e4
0000000100021c40	add	x8, x21, #0x3a8
0000000100021c44	stp	x8, x22, [sp]
0000000100021c48	adr	x2, #95750 ; literal pool for: "%s: domain origin resolved: error = %d"
0000000100021c4c	nop
0000000100021c50	mov	w1, #0x0
0000000100021c54	bl	0x1000270c8
0000000100021c58	cbz	w22, 0x100021cb8
0000000100021c5c	cmp	w22, #0x80
0000000100021c60	b.eq	0x100021ca8
0000000100021c64	cbz	x23, 0x100021c7c
0000000100021c68	orr	w1, wzr, #0x6
0000000100021c6c	mov	x0, x23
0000000100021c70	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
0000000100021c74	mov	x23, x0
0000000100021c78	b	0x100021c84
0000000100021c7c	adr	x23, #95737 ; literal pool for: "(untainted)"
0000000100021c80	nop
0000000100021c84	mov	x0, x22
0000000100021c88	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100021c8c	stp	x0, x23, [sp, #0x8]
0000000100021c90	str	x22, [sp]
0000000100021c94	adr	x2, #95725 ; literal pool for: "Could not resolve origin of domain. XPC services in this domain's bundle will not be bootstrapped: error = %d: %s, taint = %s"
0000000100021c98	nop
0000000100021c9c	orr	w1, wzr, #0x3
0000000100021ca0	mov	x0, x21
0000000100021ca4	bl	0x100019bfc
0000000100021ca8	ldr	x0, [x21, #0xc8]
0000000100021cac	cbz	x0, 0x100021cb8
0000000100021cb0	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100021cb4	str	xzr, [x21, #0xc8]
0000000100021cb8	ldrh	w8, [x21, #0x3a0]
0000000100021cbc	orr	w8, w8, #0x8
0000000100021cc0	strh	w8, [x21, #0x3a0]
0000000100021cc4	orr	w1, wzr, #0x1
0000000100021cc8	mov	x0, x21
0000000100021ccc	bl	0x100021d14
0000000100021cd0	orr	w1, wzr, #0x7
0000000100021cd4	mov	x0, x21
0000000100021cd8	bl	0x10001eb10
0000000100021cdc	mov	x0, x20
0000000100021ce0	bl	0x100031010 ; symbol stub for: _free
0000000100021ce4	mov	x0, x19
0000000100021ce8	ldp	x29, x30, [sp, #0x50]
0000000100021cec	ldp	x20, x19, [sp, #0x40]
0000000100021cf0	ldp	x22, x21, [sp, #0x30]
0000000100021cf4	ldp	x24, x23, [sp, #0x20]
0000000100021cf8	add	sp, sp, #0x60
0000000100021cfc	b	0x10000e470
0000000100021d00	mov	x8, x0
0000000100021d04	ldr	w1, [x8, #0x10]
0000000100021d08	mov	x0, #0x0
0000000100021d0c	mov	x2, x8
0000000100021d10	b	0x100021c0c
0000000100021d14	stp	x24, x23, [sp, #-0x40]!
0000000100021d18	stp	x22, x21, [sp, #0x10]
0000000100021d1c	stp	x20, x19, [sp, #0x20]
0000000100021d20	stp	x29, x30, [sp, #0x30]
0000000100021d24	add	x29, sp, #0x30
0000000100021d28	mov	x19, x1
0000000100021d2c	ldr	x20, [x0, #0xa8]
0000000100021d30	cbz	x20, 0x100021d84
0000000100021d34	adr	x21, #-12576
0000000100021d38	nop
0000000100021d3c	mov	x22, #-0x1
0000000100021d40	ldr	x23, [x20]
0000000100021d44	ldr	w8, [x20, #0x20]
0000000100021d48	cmp	w8, w19
0000000100021d4c	b.ne	0x100021d7c
0000000100021d50	bl	0x10000d8e0
0000000100021d54	mov	x1, x20
0000000100021d58	mov	x2, x21
0000000100021d5c	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100021d60	ldr	x8, [x20]
0000000100021d64	cbz	x8, 0x100021d70
0000000100021d68	ldr	x9, [x20, #0x8]
0000000100021d6c	str	x9, [x8, #0x8]
0000000100021d70	ldp	x8, x9, [x20]
0000000100021d74	str	x8, [x9]
0000000100021d78	stp	x22, x22, [x20]
0000000100021d7c	mov	x20, x23
0000000100021d80	cbnz	x23, 0x100021d40
0000000100021d84	ldp	x29, x30, [sp, #0x30]
0000000100021d88	ldp	x20, x19, [sp, #0x20]
0000000100021d8c	ldp	x22, x21, [sp, #0x10]
0000000100021d90	ldp	x24, x23, [sp], #0x40
0000000100021d94	ret
0000000100021d98	sub	sp, sp, #0xf0
0000000100021d9c	stp	x28, x27, [sp, #0x90]
0000000100021da0	stp	x26, x25, [sp, #0xa0]
0000000100021da4	stp	x24, x23, [sp, #0xb0]
0000000100021da8	stp	x22, x21, [sp, #0xc0]
0000000100021dac	stp	x20, x19, [sp, #0xd0]
0000000100021db0	stp	x29, x30, [sp, #0xe0]
0000000100021db4	add	x29, sp, #0xe0
0000000100021db8	mov	x19, x2
0000000100021dbc	mov	x22, x1
0000000100021dc0	mov	x21, x0
0000000100021dc4	nop
0000000100021dc8	ldr	x8, #0x1e250 ; literal pool symbol address: ___stack_chk_guard
0000000100021dcc	ldr	x8, [x8]
0000000100021dd0	stur	x8, [x29, #-0x58]
0000000100021dd4	ldr	x20, [x19, #0xe0]
0000000100021dd8	strb	wzr, [sp, #0x1f]
0000000100021ddc	add	x1, sp, #0x1f
0000000100021de0	mov	x0, x19
0000000100021de4	bl	0x1000163d4
0000000100021de8	cmp	w22, #0x2
0000000100021dec	b.eq	0x100021e54
0000000100021df0	cmp	w22, #0x1
0000000100021df4	b.eq	0x100021ef0
0000000100021df8	cbnz	w22, 0x100021f08
0000000100021dfc	str	xzr, [sp, #0x20]
0000000100021e00	add	x1, sp, #0x20
0000000100021e04	mov	x0, x21
0000000100021e08	bl	0x10001008c
0000000100021e0c	mov	x8, x0
0000000100021e10	cbz	x8, 0x100021ee4
0000000100021e14	stur	xzr, [x29, #-0x68]
0000000100021e18	ldr	x0, [sp, #0x20]
0000000100021e1c	sub	x2, x29, #0x68
0000000100021e20	mov	w3, #0x0
0000000100021e24	mov	x1, x8
0000000100021e28	mov	x4, #0x0
0000000100021e2c	bl	0x10000e4dc
0000000100021e30	cbz	x0, 0x100021ec8
0000000100021e34	mov	x8, x20
0000000100021e38	ldr	x9, [x8, #0x50]!
0000000100021e3c	str	x9, [x0]
0000000100021e40	cbz	x9, 0x100021e48
0000000100021e44	str	x0, [x9, #0x8]
0000000100021e48	str	x0, [x8]
0000000100021e4c	stp	x8, x19, [x0, #0x8]
0000000100021e50	b	0x100021ee4
0000000100021e54	adrp	x8, 35 ; 0x100044000
0000000100021e58	ldrb	w8, [x8, #0x429]
0000000100021e5c	cbz	w8, 0x100021e7c
0000000100021e60	mov	x0, x20
0000000100021e64	mov	x1, x19
0000000100021e68	bl	0x100021964
0000000100021e6c	cbz	w0, 0x100021f08
0000000100021e70	adr	x0, #96631 ; literal pool for: "failed to boot out inactive service during obliteration; socket event"
0000000100021e74	nop
0000000100021e78	bl	0x100028f84
0000000100021e7c	ldrb	w8, [sp, #0x1f]
0000000100021e80	cmp	w8, #0x0
0000000100021e84	cset	w8, eq
0000000100021e88	and	w8, w0, w8
0000000100021e8c	cmp	w8, #0x1
0000000100021e90	b.ne	0x100021f40
0000000100021e94	stp	xzr, xzr, [sp, #0x68]
0000000100021e98	add	x1, sp, #0x70
0000000100021e9c	add	x2, sp, #0x68
0000000100021ea0	mov	x0, x21
0000000100021ea4	bl	0x1000103a8
0000000100021ea8	mov	x21, x0
0000000100021eac	str	w21, [sp, #0x64]
0000000100021eb0	cbz	w21, 0x100021f80
0000000100021eb4	cmp	w21, #0x23
0000000100021eb8	b.ne	0x100022110
0000000100021ebc	adr	x0, #96713 ; literal pool for: "EWOULDBLOCK returned on socket that should not block"
0000000100021ec0	nop
0000000100021ec4	bl	0x100028f84
0000000100021ec8	ldr	x8, [sp, #0x20]
0000000100021ecc	str	x8, [sp]
0000000100021ed0	adr	x2, #96465 ; literal pool for: "Service attempted to specify secure socket key with reserved name: %s"
0000000100021ed4	nop
0000000100021ed8	orr	w1, wzr, #0x3
0000000100021edc	mov	x0, x19
0000000100021ee0	bl	0x1000118ec
0000000100021ee4	ldrb	w8, [x21, #0x28]
0000000100021ee8	orr	w8, w8, #0x1
0000000100021eec	strb	w8, [x21, #0x28]
0000000100021ef0	mov	x0, x20
0000000100021ef4	mov	x1, x19
0000000100021ef8	bl	0x100021418
0000000100021efc	mov	w1, #0xa
0000000100021f00	mov	x0, x20
0000000100021f04	bl	0x100022148
0000000100021f08	ldur	x8, [x29, #-0x58]
0000000100021f0c	nop
0000000100021f10	ldr	x9, #0x1e108 ; literal pool symbol address: ___stack_chk_guard
0000000100021f14	ldr	x9, [x9]
0000000100021f18	cmp	x9, x8
0000000100021f1c	b.ne	0x100022138
0000000100021f20	ldp	x29, x30, [sp, #0xe0]
0000000100021f24	ldp	x20, x19, [sp, #0xd0]
0000000100021f28	ldp	x22, x21, [sp, #0xc0]
0000000100021f2c	ldp	x24, x23, [sp, #0xb0]
0000000100021f30	ldp	x26, x25, [sp, #0xa0]
0000000100021f34	ldp	x28, x27, [sp, #0x90]
0000000100021f38	add	sp, sp, #0xf0
0000000100021f3c	ret
0000000100021f40	orr	w1, wzr, #0x2
0000000100021f44	mov	x0, x19
0000000100021f48	bl	0x100015574
0000000100021f4c	and	w8, w0, #0xfffffffe
0000000100021f50	cmp	w8, #0x24
0000000100021f54	csel	w8, wzr, w0, eq
0000000100021f58	cbz	w8, 0x100021f08
0000000100021f5c	cmp	w8, #0x25
0000000100021f60	b.eq	0x10002213c
0000000100021f64	sxtw	x2, w8
0000000100021f68	adr	x0, #-65984
0000000100021f6c	nop
0000000100021f70	mov	x1, x19
0000000100021f74	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100021f78	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100021f7c	b	0x100021f08
0000000100021f80	ldr	x8, [sp, #0x68]
0000000100021f84	cbz	x8, 0x100022104
0000000100021f88	mov	x26, #0x0
0000000100021f8c	adr	x21, #-6196
0000000100021f90	nop
0000000100021f94	adr	x23, #-5672
0000000100021f98	nop
0000000100021f9c	adr	x22, #-5592
0000000100021fa0	nop
0000000100021fa4	adr	x27, #-5388
0000000100021fa8	nop
0000000100021fac	adr	x28, #-5188
0000000100021fb0	nop
0000000100021fb4	adr	x8, #-7580
0000000100021fb8	nop
0000000100021fbc	str	x8, [sp, #0x20]
0000000100021fc0	adr	x8, #-6612
0000000100021fc4	nop
0000000100021fc8	stp	x8, x21, [sp, #0x28]
0000000100021fcc	stp	x23, x22, [sp, #0x38]
0000000100021fd0	stp	x27, x28, [sp, #0x48]
0000000100021fd4	str	x20, [sp, #0x58]
0000000100021fd8	sub	x0, x29, #0x68
0000000100021fdc	bl	0x100031868 ; symbol stub for: _uuid_generate
0000000100021fe0	ldr	w8, [x19, #0xf4]
0000000100021fe4	cbz	w8, 0x100021ff4
0000000100021fe8	ldr	w9, [x19, #0xf0]
0000000100021fec	cmp	w9, w8
0000000100021ff0	b.hs	0x100022094
0000000100021ff4	ldr	x8, [sp, #0x70]
0000000100021ff8	ldr	w2, [x8, x26, lsl #2]
0000000100021ffc	sub	x1, x29, #0x68
0000000100022000	add	x4, sp, #0x20
0000000100022004	add	x6, sp, #0x64
0000000100022008	mov	x0, x19
000000010002200c	mov	x3, #0x0
0000000100022010	mov	x5, #0x0
0000000100022014	bl	0x1000045bc
0000000100022018	mov	x24, x0
000000010002201c	cbz	x24, 0x1000220a0
0000000100022020	ldrh	w8, [x24, #0x134]
0000000100022024	orr	w8, w8, #0x100
0000000100022028	strh	w8, [x24, #0x134]
000000010002202c	mov	x0, x20
0000000100022030	mov	x1, x24
0000000100022034	bl	0x100020c5c
0000000100022038	ldr	w8, [x19, #0xf0]
000000010002203c	add	w8, w8, #0x1
0000000100022040	str	w8, [x19, #0xf0]
0000000100022044	str	x19, [x24, #0xe8]
0000000100022048	mov	w1, #0x13
000000010002204c	mov	x0, x19
0000000100022050	bl	0x10000e3f4
0000000100022054	orr	w1, wzr, #0x2
0000000100022058	mov	x0, x24
000000010002205c	bl	0x100015574
0000000100022060	and	w8, w0, #0xfffffffe
0000000100022064	cmp	w8, #0x24
0000000100022068	csel	w25, wzr, w0, eq
000000010002206c	str	w25, [sp, #0x64]
0000000100022070	cbz	w25, 0x1000220c4
0000000100022074	mov	x0, x25
0000000100022078	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010002207c	stp	x25, x0, [sp]
0000000100022080	orr	w1, wzr, #0x3
0000000100022084	mov	x0, x24
0000000100022088	adr	x2, #96361 ; literal pool for: "Could not spawn dedicated inetd instance: %d: %s"
000000010002208c	nop
0000000100022090	b	0x1000220c0
0000000100022094	mov	w24, #0x43
0000000100022098	str	w24, [sp, #0x64]
000000010002209c	b	0x1000220a4
00000001000220a0	ldr	w24, [sp, #0x64]
00000001000220a4	mov	x0, x24
00000001000220a8	bl	0x100031b8c ; symbol stub for: _xpc_strerror
00000001000220ac	stp	x24, x0, [sp]
00000001000220b0	orr	w1, wzr, #0x3
00000001000220b4	mov	x0, x19
00000001000220b8	adr	x2, #96258 ; literal pool for: "Could not create new instance of inetd service: %d: %s"
00000001000220bc	nop
00000001000220c0	bl	0x1000118ec
00000001000220c4	ldr	x8, [sp, #0x70]
00000001000220c8	ldr	w0, [x8, x26, lsl #2]
00000001000220cc	bl	0x100030c74 ; symbol stub for: _close
00000001000220d0	cmn	w0, #0x1
00000001000220d4	b.ne	0x1000220f4
00000001000220d8	bl	0x100030adc ; symbol stub for: ___error
00000001000220dc	ldrsw	x2, [x0]
00000001000220e0	adr	x0, #-66360
00000001000220e4	nop
00000001000220e8	mov	x1, x19
00000001000220ec	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000220f0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000220f4	add	x26, x26, #0x1
00000001000220f8	ldr	x8, [sp, #0x68]
00000001000220fc	cmp	x26, x8
0000000100022100	b.lo	0x100021fb4
0000000100022104	ldr	x0, [sp, #0x70]
0000000100022108	bl	0x100031010 ; symbol stub for: _free
000000010002210c	mov	w21, #0x0
0000000100022110	cbz	w21, 0x100021f08
0000000100022114	mov	x0, x21
0000000100022118	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010002211c	stp	x21, x0, [sp]
0000000100022120	adr	x2, #96013 ; literal pool for: "Could not accept new inetd connection: %d: %s"
0000000100022124	nop
0000000100022128	orr	w1, wzr, #0x3
000000010002212c	mov	x0, x19
0000000100022130	bl	0x1000118ec
0000000100022134	b	0x100021f08
0000000100022138	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002213c	adr	x0, #96031 ; literal pool for: "socket event received for running service"
0000000100022140	nop
0000000100022144	bl	0x100028f84
0000000100022148	stp	x24, x23, [sp, #-0x40]!
000000010002214c	stp	x22, x21, [sp, #0x10]
0000000100022150	stp	x20, x19, [sp, #0x20]
0000000100022154	stp	x29, x30, [sp, #0x30]
0000000100022158	add	x29, sp, #0x30
000000010002215c	mov	x20, x1
0000000100022160	mov	x19, x0
0000000100022164	ldrh	w8, [x19, #0xa4]
0000000100022168	subs	w8, w8, #0x1
000000010002216c	strh	w8, [x19, #0xa4]
0000000100022170	b.hi	0x100022234
0000000100022174	mov	w1, #0x0
0000000100022178	mov	x0, x19
000000010002217c	bl	0x100021d14
0000000100022180	mov	x23, #0x0
0000000100022184	adr	x21, #-66524
0000000100022188	nop
000000010002218c	add	x8, x19, x23, lsl #3
0000000100022190	ldr	x22, [x8, #0x128]
0000000100022194	cbz	x22, 0x100022200
0000000100022198	ldr	x24, [x22, #0x48]
000000010002219c	ldr	w8, [x22, #0x108]
00000001000221a0	cbz	w8, 0x1000221f8
00000001000221a4	mov	w1, #0x12
00000001000221a8	mov	x0, x22
00000001000221ac	bl	0x10000e3f4
00000001000221b0	ldr	w1, [x22, #0x108]
00000001000221b4	mov	x0, x22
00000001000221b8	bl	0x100015574
00000001000221bc	and	w8, w0, #0xfffffffe
00000001000221c0	cmp	w8, #0x24
00000001000221c4	csel	w8, wzr, w0, eq
00000001000221c8	cbz	w8, 0x1000221e8
00000001000221cc	cmp	w8, #0x92
00000001000221d0	b.eq	0x1000221e8
00000001000221d4	sxtw	x2, w8
00000001000221d8	mov	x0, x21
00000001000221dc	mov	x1, x22
00000001000221e0	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000221e4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000221e8	str	wzr, [x22, #0x108]
00000001000221ec	mov	w1, #0x12
00000001000221f0	mov	x0, x22
00000001000221f4	bl	0x10000e4a4
00000001000221f8	mov	x22, x24
00000001000221fc	cbnz	x24, 0x100022198
0000000100022200	add	x23, x23, #0x1
0000000100022204	cmp	x23, #0x17
0000000100022208	b.ne	0x10002218c
000000010002220c	ldrb	w8, [x19, #0x3a0]
0000000100022210	tbz	w8, #0x7, 0x100022234
0000000100022214	mov	x0, x19
0000000100022218	bl	0x100021340
000000010002221c	ldrh	w8, [x19, #0x3a0]
0000000100022220	and	w8, w8, #0xffffff7f
0000000100022224	strh	w8, [x19, #0x3a0]
0000000100022228	mov	x0, x19
000000010002222c	bl	0x10001ea24
0000000100022230	bl	0x100028810
0000000100022234	mov	x1, x20
0000000100022238	mov	x0, x19
000000010002223c	ldp	x29, x30, [sp, #0x30]
0000000100022240	ldp	x20, x19, [sp, #0x20]
0000000100022244	ldp	x22, x21, [sp, #0x10]
0000000100022248	ldp	x24, x23, [sp], #0x40
000000010002224c	b	0x10001eb10
0000000100022250	sub	sp, sp, #0x70
0000000100022254	stp	x24, x23, [sp, #0x30]
0000000100022258	stp	x22, x21, [sp, #0x40]
000000010002225c	stp	x20, x19, [sp, #0x50]
0000000100022260	stp	x29, x30, [sp, #0x60]
0000000100022264	add	x29, sp, #0x60
0000000100022268	mov	x19, x1
000000010002226c	mov	x22, x0
0000000100022270	mov	x0, x19
0000000100022274	bl	0x10002f310
0000000100022278	mov	x21, x0
000000010002227c	str	xzr, [sp, #0x28]
0000000100022280	add	x20, x19, #0x88
0000000100022284	add	x4, sp, #0x28
0000000100022288	mov	w2, #0x0
000000010002228c	mov	x0, x22
0000000100022290	mov	x1, x20
0000000100022294	mov	x3, #0x0
0000000100022298	bl	0x10001e2e0
000000010002229c	cbz	w0, 0x1000222c4
00000001000222a0	ldrb	w8, [x19, #0x50]
00000001000222a4	tbz	w8, #0x4, 0x100022308
00000001000222a8	nop
00000001000222ac	ldr	x8, #0x21a4c
00000001000222b0	cmp	x8, x22
00000001000222b4	b.eq	0x100022300
00000001000222b8	orr	w8, wzr, #0x80
00000001000222bc	str	w8, [x19, #0x48]
00000001000222c0	b	0x100022308
00000001000222c4	ldr	x0, [sp, #0x28]
00000001000222c8	ldr	x8, [x0, #0x40]
00000001000222cc	cbz	x8, 0x1000222d8
00000001000222d0	str	x8, [sp, #0x28]
00000001000222d4	mov	x0, x8
00000001000222d8	bl	0x10002f310
00000001000222dc	add	x8, x0, #0x460
00000001000222e0	stp	x20, x8, [sp]
00000001000222e4	adr	x2, #95806 ; literal pool for: "The endpoint \"%s\" defined in plist already exists and is owned by: %s"
00000001000222e8	nop
00000001000222ec	orr	w1, wzr, #0x4
00000001000222f0	mov	x0, x21
00000001000222f4	bl	0x1000118ec
00000001000222f8	mov	w0, #0x25
00000001000222fc	b	0x1000224b8
0000000100022300	orr	w8, wzr, #0x18
0000000100022304	str	w8, [x19, #0x4c]
0000000100022308	mov	x0, x19
000000010002230c	bl	0x10002f310
0000000100022310	mov	x23, x0
0000000100022314	ldr	w24, [x19, #0x4c]
0000000100022318	cbz	w24, 0x100022350
000000010002231c	nop
0000000100022320	ldr	x8, #0x219d8
0000000100022324	cmp	x8, x22
0000000100022328	b.eq	0x100022350
000000010002232c	mov	x0, x24
0000000100022330	bl	0x10003122c ; symbol stub for: _mach_host_special_port_description
0000000100022334	stp	x24, x0, [sp]
0000000100022338	adr	x2, #95792 ; literal pool for: "Non-system service tried to claim host-special port: %d: %s"
000000010002233c	nop
0000000100022340	orr	w1, wzr, #0x3
0000000100022344	mov	x0, x23
0000000100022348	bl	0x1000118ec
000000010002234c	str	wzr, [x19, #0x4c]
0000000100022350	mov	x0, x20
0000000100022354	bl	0x10000d878
0000000100022358	mov	x8, #0x4211
000000010002235c	movk	x8, #0x2108, lsl #16
0000000100022360	movk	x8, #0x1084, lsl #32
0000000100022364	movk	x8, #0x842, lsl #48
0000000100022368	umulh	x8, x0, x8
000000010002236c	sub	x9, x0, x8
0000000100022370	add	x8, x8, x9, lsr #1
0000000100022374	lsr	x9, x8, #4
0000000100022378	lsl	x9, x9, #5
000000010002237c	sub	x8, x9, x8, lsr #4
0000000100022380	sub	x8, x0, x8
0000000100022384	add	x9, x22, x8, lsl #3
0000000100022388	add	x8, x9, #0x280
000000010002238c	ldr	x9, [x9, #0x280]
0000000100022390	mov	x10, x19
0000000100022394	str	x9, [x10, #0x18]!
0000000100022398	cbz	x9, 0x1000223a0
000000010002239c	str	x10, [x9, #0x20]
00000001000223a0	str	x19, [x8]
00000001000223a4	str	x8, [x19, #0x20]
00000001000223a8	ldr	w8, [x19, #0x48]
00000001000223ac	cbz	w8, 0x1000223d4
00000001000223b0	mov	x0, x19
00000001000223b4	bl	0x10002f2ec
00000001000223b8	ldr	w3, [x19, #0x48]
00000001000223bc	mov	x2, x0
00000001000223c0	mov	x0, x22
00000001000223c4	mov	x1, x21
00000001000223c8	bl	0x1000224d0
00000001000223cc	cbz	w0, 0x1000223d4
00000001000223d0	str	wzr, [x19, #0x48]
00000001000223d4	ldrsw	x21, [x19, #0x4c]
00000001000223d8	cbz	w21, 0x1000224a8
00000001000223dc	mov	x0, x19
00000001000223e0	bl	0x10002f310
00000001000223e4	mov	x22, x0
00000001000223e8	cmp	w21, #0x18
00000001000223ec	b.ne	0x100022410
00000001000223f0	adrp	x8, 33 ; 0x100043000
00000001000223f4	ldr	x9, [x8, #0xd48]
00000001000223f8	cbz	x9, 0x100022450
00000001000223fc	add	x8, x9, #0x88
0000000100022400	stp	x20, x8, [sp]
0000000100022404	adr	x2, #95718 ; literal pool for: "Endpoint \"%s\" tried to steal host exception port from \"%s\""
0000000100022408	nop
000000010002240c	b	0x10002243c
0000000100022410	adr	x23, #137536
0000000100022414	nop
0000000100022418	ldr	x24, [x23, x21, lsl #3]
000000010002241c	cbz	x24, 0x100022474
0000000100022420	mov	x0, x21
0000000100022424	bl	0x10003122c ; symbol stub for: _mach_host_special_port_description
0000000100022428	add	x8, x24, #0x88
000000010002242c	stp	x21, x8, [sp, #0x10]
0000000100022430	stp	x20, x0, [sp]
0000000100022434	adr	x2, #95729 ; literal pool for: "Endpoint \"%s\" tried to steal host %s port (%d) from \"%s\""
0000000100022438	nop
000000010002243c	orr	w1, wzr, #0x3
0000000100022440	mov	x0, x22
0000000100022444	bl	0x1000118ec
0000000100022448	str	wzr, [x19, #0x4c]
000000010002244c	b	0x1000224a8
0000000100022450	str	x19, [x8, #0xd48]
0000000100022454	bl	0x100031220 ; symbol stub for: _mach_host_self
0000000100022458	mov	x20, x0
000000010002245c	mov	x0, x19
0000000100022460	bl	0x10002f2ec
0000000100022464	mov	x1, x0
0000000100022468	mov	x0, x20
000000010002246c	bl	0x10002af74
0000000100022470	b	0x1000224a8
0000000100022474	bl	0x100031220 ; symbol stub for: _mach_host_self
0000000100022478	mov	x20, x0
000000010002247c	mov	x0, x19
0000000100022480	bl	0x10002f2ec
0000000100022484	mov	x2, x0
0000000100022488	mov	x0, x20
000000010002248c	mov	x1, x21
0000000100022490	bl	0x100031178 ; symbol stub for: _host_set_special_port
0000000100022494	cbz	w0, 0x1000224a4
0000000100022498	sxtw	x0, w0
000000010002249c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000224a0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000224a4	str	x19, [x23, x21, lsl #3]
00000001000224a8	mov	w0, #0x0
00000001000224ac	ldrb	w8, [x19, #0x50]
00000001000224b0	orr	w8, w8, #0x20
00000001000224b4	strb	w8, [x19, #0x50]
00000001000224b8	ldp	x29, x30, [sp, #0x60]
00000001000224bc	ldp	x20, x19, [sp, #0x50]
00000001000224c0	ldp	x22, x21, [sp, #0x40]
00000001000224c4	ldp	x24, x23, [sp, #0x30]
00000001000224c8	add	sp, sp, #0x70
00000001000224cc	ret
00000001000224d0	sub	sp, sp, #0x50
00000001000224d4	stp	x22, x21, [sp, #0x20]
00000001000224d8	stp	x20, x19, [sp, #0x30]
00000001000224dc	stp	x29, x30, [sp, #0x40]
00000001000224e0	add	x29, sp, #0x40
00000001000224e4	mov	x20, x3
00000001000224e8	mov	x21, x1
00000001000224ec	mov	x19, x0
00000001000224f0	mov	x22, x19
00000001000224f4	ldr	x8, [x22, #0x48]!
00000001000224f8	cbz	x8, 0x100022510
00000001000224fc	ldr	w9, [x8, #0x14]
0000000100022500	cmp	w9, w20
0000000100022504	b.eq	0x100022540
0000000100022508	ldr	x8, [x8]
000000010002250c	cbnz	x8, 0x1000224fc
0000000100022510	mov	x0, x2
0000000100022514	mov	x1, x20
0000000100022518	bl	0x10000e790
000000010002251c	ldr	x8, [x22]
0000000100022520	cbz	x8, 0x100022580
0000000100022524	ldr	x9, [x8]
0000000100022528	str	x9, [x0]
000000010002252c	cbz	x9, 0x100022538
0000000100022530	ldr	x9, [x8]
0000000100022534	str	x0, [x9, #0x8]
0000000100022538	mov	x22, x8
000000010002253c	b	0x100022584
0000000100022540	ldr	w1, [x8, #0x10]
0000000100022544	mov	x0, x19
0000000100022548	bl	0x10001d804
000000010002254c	add	x8, x0, #0x88
0000000100022550	adr	x9, #75125 ; literal pool for: "(unknown)"
0000000100022554	nop
0000000100022558	cmp	x0, #0x0
000000010002255c	csel	x22, x9, x8, eq
0000000100022560	add	x8, x21, #0x460
0000000100022564	cmp	x21, #0x0
0000000100022568	csel	x21, x9, x8, eq
000000010002256c	cmp	w20, #0x80
0000000100022570	b.ne	0x1000225a0
0000000100022574	adr	x0, #95280 ; literal pool for: "exception"
0000000100022578	nop
000000010002257c	b	0x1000225a8
0000000100022580	str	xzr, [x0]
0000000100022584	mov	w8, #0x0
0000000100022588	str	x0, [x22]
000000010002258c	str	x22, [x0, #0x8]
0000000100022590	ldr	x9, [x19, #0x40]
0000000100022594	add	x9, x9, #0x1
0000000100022598	str	x9, [x19, #0x40]
000000010002259c	b	0x1000225c8
00000001000225a0	mov	x0, x20
00000001000225a4	bl	0x1000312e0 ; symbol stub for: _mach_task_special_port_description
00000001000225a8	stp	x0, x22, [sp, #0x8]
00000001000225ac	str	x21, [sp]
00000001000225b0	adr	x2, #95230 ; literal pool for: "service \"%s\" tried to claim task-%s port from endpoint \"%s\""
00000001000225b4	nop
00000001000225b8	orr	w1, wzr, #0x3
00000001000225bc	mov	x0, x19
00000001000225c0	bl	0x100019bfc
00000001000225c4	mov	w8, #0x11
00000001000225c8	mov	x0, x8
00000001000225cc	ldp	x29, x30, [sp, #0x40]
00000001000225d0	ldp	x20, x19, [sp, #0x30]
00000001000225d4	ldp	x22, x21, [sp, #0x20]
00000001000225d8	add	sp, sp, #0x50
00000001000225dc	ret
00000001000225e0	sub	sp, sp, #0x100
00000001000225e4	stp	x28, x27, [sp, #0xa0]
00000001000225e8	stp	x26, x25, [sp, #0xb0]
00000001000225ec	stp	x24, x23, [sp, #0xc0]
00000001000225f0	stp	x22, x21, [sp, #0xd0]
00000001000225f4	stp	x20, x19, [sp, #0xe0]
00000001000225f8	stp	x29, x30, [sp, #0xf0]
00000001000225fc	add	x29, sp, #0xf0
0000000100022600	mov	x22, x1
0000000100022604	mov	x19, x0
0000000100022608	mov	x0, x22
000000010002260c	bl	0x10000a8b0
0000000100022610	mov	x21, x0
0000000100022614	mov	x0, x22
0000000100022618	bl	0x10000a8a0
000000010002261c	mov	x24, x0
0000000100022620	mov	x0, x21
0000000100022624	bl	0x10003197c ; symbol stub for: _xpc_bundle_get_path
0000000100022628	mov	x20, x0
000000010002262c	mov	x0, x21
0000000100022630	bl	0x100031970 ; symbol stub for: _xpc_bundle_get_info_dictionary
0000000100022634	mov	x26, x0
0000000100022638	ldrb	w8, [x19, #0x3a0]
000000010002263c	tst	w8, #0x3
0000000100022640	b.eq	0x10002264c
0000000100022644	orr	w28, wzr, #0x7c
0000000100022648	b	0x1000229ac
000000010002264c	ldr	x8, [x22, #0x50]
0000000100022650	ubfx	x25, x8, #13, #1
0000000100022654	adr	x1, #68515 ; literal pool for: "CFBundleIdentifier"
0000000100022658	nop
000000010002265c	mov	x0, x26
0000000100022660	bl	0x100020c34
0000000100022664	tbnz	w0, #0x0, 0x100022678
0000000100022668	mov	x0, x22
000000010002266c	bl	0x10000a888
0000000100022670	cmp	w0, #0x8f
0000000100022674	b.ne	0x100022680
0000000100022678	orr	w23, wzr, #0x80
000000010002267c	b	0x100022684
0000000100022680	mov	x23, #0x0
0000000100022684	ldr	x8, [x19, #0x60]
0000000100022688	adr	x9, #134032
000000010002268c	nop
0000000100022690	orr	x10, x25, #0x80
0000000100022694	cmp	x8, x9
0000000100022698	csel	x25, x25, x10, eq
000000010002269c	ldrb	w8, [x22, #0x51]
00000001000226a0	tbz	w8, #0x6, 0x1000226c8
00000001000226a4	orr	w1, wzr, #0x2
00000001000226a8	mov	x0, x21
00000001000226ac	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
00000001000226b0	adr	x1, #77299 ; literal pool for: ".appex"
00000001000226b4	nop
00000001000226b8	bl	0x10000d7e4
00000001000226bc	orr	x8, x23, #0x40
00000001000226c0	cmp	w0, #0x0
00000001000226c4	csel	x23, x8, x23, ne
00000001000226c8	mov	x0, x21
00000001000226cc	bl	0x100031970 ; symbol stub for: _xpc_bundle_get_info_dictionary
00000001000226d0	cbz	x0, 0x100022718
00000001000226d4	add	x28, x22, #0xc
00000001000226d8	adr	x1, #69426 ; literal pool for: "XPCService"
00000001000226dc	nop
00000001000226e0	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000226e4	mov	x27, x0
00000001000226e8	cbz	x27, 0x10002273c
00000001000226ec	mov	x0, x27
00000001000226f0	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000226f4	nop
00000001000226f8	ldr	x8, #0x1d9c8 ; literal pool symbol address: __xpc_type_dictionary
00000001000226fc	cmp	x0, x8
0000000100022700	b.eq	0x100022804
0000000100022704	adr	x2, #95468 ; literal pool for: "Invalid XPCService dictionary."
0000000100022708	nop
000000010002270c	orr	w1, wzr, #0x3
0000000100022710	mov	x0, x19
0000000100022714	bl	0x100019bfc
0000000100022718	mov	w28, #0x16
000000010002271c	stur	w28, [x29, #-0x54]
0000000100022720	mov	x0, x28
0000000100022724	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100022728	stp	x28, x0, [sp, #0x8]
000000010002272c	str	x20, [sp]
0000000100022730	adr	x2, #95225 ; literal pool for: "Could not get domain target from bundle: path = %s, error = %d: %s"
0000000100022734	nop
0000000100022738	b	0x1000229a0
000000010002273c	str	wzr, [sp, #0x44]
0000000100022740	stur	wzr, [x29, #-0x54]
0000000100022744	adr	x8, #133844
0000000100022748	nop
000000010002274c	str	x8, [sp, #0x48]
0000000100022750	mov	x27, x19
0000000100022754	tbz	w23, #0x6, 0x1000227bc
0000000100022758	adr	x1, #69298 ; literal pool for: "XPCService"
000000010002275c	nop
0000000100022760	mov	x0, x26
0000000100022764	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100022768	mov	x26, x0
000000010002276c	cbz	x26, 0x1000227b8
0000000100022770	mov	x0, x26
0000000100022774	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100022778	nop
000000010002277c	ldr	x8, #0x1d944 ; literal pool symbol address: __xpc_type_dictionary
0000000100022780	cmp	x0, x8
0000000100022784	b.ne	0x1000227b8
0000000100022788	adr	x1, #73674 ; literal pool for: "_RoleAccount"
000000010002278c	nop
0000000100022790	mov	x0, x26
0000000100022794	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100022798	cbz	x0, 0x1000227b8
000000010002279c	adr	x1, #95225 ; literal pool for: "mobile"
00000001000227a0	nop
00000001000227a4	bl	0x100031700 ; symbol stub for: _strcmp
00000001000227a8	and	x8, x25, #0xffffffffffffff7f
00000001000227ac	orr	x8, x8, #0x10
00000001000227b0	cmp	w0, #0x0
00000001000227b4	csel	x25, x25, x8, ne
00000001000227b8	and	x23, x23, #0x7f
00000001000227bc	orr	w1, wzr, #0x2
00000001000227c0	mov	x0, x27
00000001000227c4	mov	x2, x25
00000001000227c8	mov	x3, x28
00000001000227cc	mov	x4, x20
00000001000227d0	mov	x5, x24
00000001000227d4	bl	0x10001e964
00000001000227d8	mov	x28, x0
00000001000227dc	stur	w28, [x29, #-0x54]
00000001000227e0	adrp	x8, 33 ; 0x100043000
00000001000227e4	str	xzr, [x8, #0xd30]
00000001000227e8	cbz	w28, 0x100022880
00000001000227ec	ldr	x0, [x19, #0xc8]
00000001000227f0	cbz	x0, 0x100022974
00000001000227f4	orr	w1, wzr, #0x2
00000001000227f8	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
00000001000227fc	mov	x21, x0
0000000100022800	b	0x10002297c
0000000100022804	str	x28, [sp, #0x30]
0000000100022808	adr	x1, #73534 ; literal pool for: "ServiceType"
000000010002280c	nop
0000000100022810	mov	x0, x27
0000000100022814	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100022818	mov	x28, x0
000000010002281c	adr	x8, #133628
0000000100022820	nop
0000000100022824	str	x25, [sp, #0x38]
0000000100022828	cbz	x28, 0x1000229d0
000000010002282c	adr	x1, #74495 ; literal pool for: "System"
0000000100022830	nop
0000000100022834	mov	x0, x28
0000000100022838	bl	0x100031700 ; symbol stub for: _strcmp
000000010002283c	cbz	w0, 0x1000229d8
0000000100022840	adr	x1, #95183 ; literal pool for: "Session"
0000000100022844	nop
0000000100022848	mov	x0, x28
000000010002284c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100022850	cbz	w0, 0x1000229fc
0000000100022854	adr	x1, #95171 ; literal pool for: "Application"
0000000100022858	nop
000000010002285c	mov	x0, x28
0000000100022860	bl	0x100031700 ; symbol stub for: _strcmp
0000000100022864	cmp	w0, #0x0
0000000100022868	adr	x8, #133552
000000010002286c	nop
0000000100022870	csel	x25, x8, xzr, eq
0000000100022874	mov	w8, #0x16
0000000100022878	csel	w28, wzr, w8, eq
000000010002287c	b	0x100022a08
0000000100022880	adr	x8, #-9832
0000000100022884	nop
0000000100022888	ldr	x9, [x22, #0x50]
000000010002288c	str	x8, [sp, #0x58]
0000000100022890	adr	x8, #-8868
0000000100022894	nop
0000000100022898	str	x8, [sp, #0x60]
000000010002289c	lsr	x8, x9, #8
00000001000228a0	bfi	x23, x8, #9, #1
00000001000228a4	adr	x8, #-8524
00000001000228a8	nop
00000001000228ac	str	x8, [sp, #0x68]
00000001000228b0	adr	x8, #-8004
00000001000228b4	nop
00000001000228b8	str	x8, [sp, #0x70]
00000001000228bc	adr	x8, #-7928
00000001000228c0	nop
00000001000228c4	str	x8, [sp, #0x78]
00000001000228c8	adr	x8, #-7728
00000001000228cc	nop
00000001000228d0	str	x8, [sp, #0x80]
00000001000228d4	adr	x8, #-7532
00000001000228d8	nop
00000001000228dc	stp	x8, x27, [sp, #0x88]
00000001000228e0	stur	wzr, [x29, #-0x54]
00000001000228e4	add	x2, sp, #0x58
00000001000228e8	sub	x4, x29, #0x54
00000001000228ec	mov	x0, x27
00000001000228f0	mov	x1, x21
00000001000228f4	mov	x3, x23
00000001000228f8	bl	0x100005250
00000001000228fc	mov	x20, x0
0000000100022900	cbz	x20, 0x1000229f4
0000000100022904	ldur	w8, [x29, #-0x54]
0000000100022908	cmp	w8, #0x79
000000010002290c	cset	w9, eq
0000000100022910	ldr	w10, [sp, #0x44]
0000000100022914	orr	w9, w10, w9
0000000100022918	cmp	w9, #0x1
000000010002291c	b.ne	0x1000229e8
0000000100022920	ldr	x21, [x20, #0xa8]
0000000100022924	cbz	x21, 0x100022968
0000000100022928	str	xzr, [sp, #0x50]
000000010002292c	add	x1, x21, #0x88
0000000100022930	add	x4, sp, #0x50
0000000100022934	mov	w2, #0x0
0000000100022938	mov	x0, x19
000000010002293c	mov	x3, #0x0
0000000100022940	bl	0x10001e2e0
0000000100022944	cbz	w0, 0x10002295c
0000000100022948	orr	w3, wzr, #0x4
000000010002294c	mov	x0, x19
0000000100022950	mov	x1, x20
0000000100022954	mov	x2, x21
0000000100022958	bl	0x10001e764
000000010002295c	ldr	x21, [x21, #0x8]
0000000100022960	cbnz	x21, 0x100022928
0000000100022964	ldur	w8, [x29, #-0x54]
0000000100022968	cbnz	w8, 0x1000229f4
000000010002296c	mov	x0, x27
0000000100022970	b	0x1000229ec
0000000100022974	adr	x21, #74065 ; literal pool for: "(unknown)"
0000000100022978	nop
000000010002297c	ldr	x8, [sp, #0x48]
0000000100022980	ldr	x22, [x8, #0x78]
0000000100022984	mov	x0, x28
0000000100022988	bl	0x100031b8c ; symbol stub for: _xpc_strerror
000000010002298c	stp	x0, x21, [sp, #0x18]
0000000100022990	stp	x20, x28, [sp, #0x8]
0000000100022994	str	x22, [sp]
0000000100022998	adr	x2, #94724 ; literal pool for: "Path not allowed in target domain: type = %s, path = %s error = %d: %s, origin = %s"
000000010002299c	nop
00000001000229a0	orr	w1, wzr, #0x3
00000001000229a4	mov	x0, x19
00000001000229a8	bl	0x100019bfc
00000001000229ac	mov	x0, x28
00000001000229b0	ldp	x29, x30, [sp, #0xf0]
00000001000229b4	ldp	x20, x19, [sp, #0xe0]
00000001000229b8	ldp	x22, x21, [sp, #0xd0]
00000001000229bc	ldp	x24, x23, [sp, #0xc0]
00000001000229c0	ldp	x26, x25, [sp, #0xb0]
00000001000229c4	ldp	x28, x27, [sp, #0xa0]
00000001000229c8	add	sp, sp, #0x100
00000001000229cc	ret
00000001000229d0	mov	x25, x8
00000001000229d4	b	0x100022a08
00000001000229d8	mov	w28, #0x0
00000001000229dc	adr	x25, #132604
00000001000229e0	nop
00000001000229e4	b	0x100022a08
00000001000229e8	mov	x0, x19
00000001000229ec	mov	x1, x20
00000001000229f0	bl	0x100020c5c
00000001000229f4	ldur	w28, [x29, #-0x54]
00000001000229f8	b	0x1000229ac
00000001000229fc	mov	w28, #0x0
0000000100022a00	adr	x25, #133000
0000000100022a04	nop
0000000100022a08	adr	x1, #72725 ; literal pool for: "_MultipleInstances"
0000000100022a0c	nop
0000000100022a10	mov	x0, x27
0000000100022a14	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100022a18	cbz	w0, 0x100022a54
0000000100022a1c	adr	x8, #133116
0000000100022a20	nop
0000000100022a24	cmp	x25, x8
0000000100022a28	b.eq	0x100022a68
0000000100022a2c	adr	x2, #94711 ; literal pool for: "MultipleInstance XPC services are not supported for any service type other than Application. Forcing service to PID domain."
0000000100022a30	nop
0000000100022a34	orr	w1, wzr, #0x4
0000000100022a38	mov	x0, x19
0000000100022a3c	mov	x25, x8
0000000100022a40	bl	0x100019bfc
0000000100022a44	mov	x8, x25
0000000100022a48	adr	x27, #133072
0000000100022a4c	nop
0000000100022a50	b	0x100022a6c
0000000100022a54	mov	x27, x25
0000000100022a58	ldr	x25, [sp, #0x38]
0000000100022a5c	adr	x8, #133052
0000000100022a60	nop
0000000100022a64	b	0x100022a70
0000000100022a68	mov	x27, x8
0000000100022a6c	ldr	x25, [sp, #0x38]
0000000100022a70	stur	w28, [x29, #-0x54]
0000000100022a74	cbnz	w28, 0x100022720
0000000100022a78	cmp	x27, x8
0000000100022a7c	b.eq	0x100022b18
0000000100022a80	ldr	x8, [x27, #0x58]
0000000100022a84	ldr	x28, [sp, #0x30]
0000000100022a88	mov	x0, x28
0000000100022a8c	mov	x1, #0x0
0000000100022a90	blr	x8
0000000100022a94	mov	x1, x0
0000000100022a98	str	x27, [sp, #0x48]
0000000100022a9c	mov	x0, x27
0000000100022aa0	bl	0x10001d8f0
0000000100022aa4	mov	x27, x0
0000000100022aa8	cbnz	x27, 0x100022ae0
0000000100022aac	ldr	x27, [sp, #0x48]
0000000100022ab0	ldr	x8, [x27, #0x58]
0000000100022ab4	mov	x0, x28
0000000100022ab8	mov	x1, #0x0
0000000100022abc	blr	x8
0000000100022ac0	mov	x1, x0
0000000100022ac4	stur	wzr, [x29, #-0x54]
0000000100022ac8	mov	w4, #0x0
0000000100022acc	mov	x0, x27
0000000100022ad0	mov	x2, #0x0
0000000100022ad4	mov	x5, x28
0000000100022ad8	bl	0x10001a088
0000000100022adc	mov	x27, x0
0000000100022ae0	cmp	x27, x19
0000000100022ae4	b.eq	0x100022b30
0000000100022ae8	adrp	x28, 33 ; 0x100043000
0000000100022aec	ldr	x8, [x28, #0xd30]
0000000100022af0	cbnz	x8, 0x100022b38
0000000100022af4	ldr	x0, [x19, #0xc8]
0000000100022af8	cbz	x0, 0x100022b0c
0000000100022afc	orr	w1, wzr, #0x2
0000000100022b00	bl	0x100031988 ; symbol stub for: _xpc_bundle_get_property
0000000100022b04	str	x0, [x28, #0xd30]
0000000100022b08	orr	x25, x25, #0x100
0000000100022b0c	orr	w8, wzr, #0x1
0000000100022b10	str	w8, [sp, #0x44]
0000000100022b14	b	0x100022b24
0000000100022b18	str	wzr, [sp, #0x44]
0000000100022b1c	mov	x27, x19
0000000100022b20	str	x8, [sp, #0x48]
0000000100022b24	ldr	x28, [sp, #0x30]
0000000100022b28	tbnz	w23, #0x6, 0x100022758
0000000100022b2c	b	0x1000227bc
0000000100022b30	str	wzr, [sp, #0x44]
0000000100022b34	b	0x100022750
0000000100022b38	adr	x0, #94260 ; literal pool for: "_eval_bundle_origin_hack was already set"
0000000100022b3c	nop
0000000100022b40	bl	0x100028f84
0000000100022b44	stp	x22, x21, [sp, #-0x30]!
0000000100022b48	stp	x20, x19, [sp, #0x10]
0000000100022b4c	stp	x29, x30, [sp, #0x20]
0000000100022b50	add	x29, sp, #0x20
0000000100022b54	mov	x19, x0
0000000100022b58	ldr	x20, [x19, #0xb8]
0000000100022b5c	ldp	x0, x21, [x20, #0x18]
0000000100022b60	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100022b64	cmp	x21, x0
0000000100022b68	b.ne	0x100022ba4
0000000100022b6c	str	xzr, [x20]
0000000100022b70	ldr	x0, [x20, #0x10]
0000000100022b74	cbz	x0, 0x100022b7c
0000000100022b78	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100022b7c	ldr	x0, [x20, #0x18]
0000000100022b80	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100022b84	ldr	x0, [x20, #0x28]
0000000100022b88	cbz	x0, 0x100022b90
0000000100022b8c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100022b90	mov	x0, x20
0000000100022b94	bl	0x100031010 ; symbol stub for: _free
0000000100022b98	mov	w0, #0x0
0000000100022b9c	str	xzr, [x19, #0xb8]
0000000100022ba0	b	0x100022bdc
0000000100022ba4	ldp	x0, x1, [x20, #0x18]
0000000100022ba8	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100022bac	mov	x3, x0
0000000100022bb0	ldr	x8, [x20, #0x20]
0000000100022bb4	add	x8, x8, #0x1
0000000100022bb8	str	x8, [x20, #0x20]
0000000100022bbc	ldr	w1, [x20, #0x8]
0000000100022bc0	ldr	x2, [x20, #0x10]
0000000100022bc4	add	x5, x20, #0x38
0000000100022bc8	ldr	x6, [x20, #0x30]
0000000100022bcc	mov	x0, x19
0000000100022bd0	mov	x4, x2
0000000100022bd4	bl	0x10001f08c
0000000100022bd8	orr	w0, wzr, #0x1
0000000100022bdc	ldp	x29, x30, [sp, #0x20]
0000000100022be0	ldp	x20, x19, [sp, #0x10]
0000000100022be4	ldp	x22, x21, [sp], #0x30
0000000100022be8	ret
0000000100022bec	stp	x22, x21, [sp, #-0x30]!
0000000100022bf0	stp	x20, x19, [sp, #0x10]
0000000100022bf4	stp	x29, x30, [sp, #0x20]
0000000100022bf8	add	x29, sp, #0x20
0000000100022bfc	mov	x19, x1
0000000100022c00	ldr	x20, [x2, #0x30]
0000000100022c04	mov	x0, x19
0000000100022c08	bl	0x10000e81c
0000000100022c0c	mov	x21, x0
0000000100022c10	bl	0x10000ebe8
0000000100022c14	cmp	x21, x0
0000000100022c18	b.ne	0x100022c54
0000000100022c1c	mov	x0, x20
0000000100022c20	mov	x1, x19
0000000100022c24	bl	0x1000225e0
0000000100022c28	cbz	w0, 0x100022c40
0000000100022c2c	cmp	w0, #0x79
0000000100022c30	b.eq	0x100022c40
0000000100022c34	mov	x1, x0
0000000100022c38	mov	x0, x19
0000000100022c3c	bl	0x100020144
0000000100022c40	mov	x0, x19
0000000100022c44	ldp	x29, x30, [sp, #0x20]
0000000100022c48	ldp	x20, x19, [sp, #0x10]
0000000100022c4c	ldp	x22, x21, [sp], #0x30
0000000100022c50	b	0x1000201a8
0000000100022c54	adr	x0, #94283 ; literal pool for: "non-I/O value in resolved service dictionary"
0000000100022c58	nop
0000000100022c5c	bl	0x100028f84
0000000100022c60	sub	sp, sp, #0x50
0000000100022c64	stp	x22, x21, [sp, #0x20]
0000000100022c68	stp	x20, x19, [sp, #0x30]
0000000100022c6c	stp	x29, x30, [sp, #0x40]
0000000100022c70	add	x29, sp, #0x40
0000000100022c74	mov	x19, x2
0000000100022c78	mov	x20, x0
0000000100022c7c	mov	x0, x1
0000000100022c80	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
0000000100022c84	mov	x21, x0
0000000100022c88	sub	w8, w21, #0x77
0000000100022c8c	cmp	w8, #0x21
0000000100022c90	orr	w9, wzr, #0x1
0000000100022c94	lsl	x8, x9, x8
0000000100022c98	mov	x9, #0x8025
0000000100022c9c	movk	x9, #0x2000, lsl #16
0000000100022ca0	movk	x9, #0x2, lsl #32
0000000100022ca4	and	x8, x8, x9
0000000100022ca8	ccmp	x8, #0x0, #0x4, ls
0000000100022cac	b.eq	0x100022cc0
0000000100022cb0	adr	x8, #137166
0000000100022cb4	nop
0000000100022cb8	ldrb	w8, [x8]
0000000100022cbc	cbz	w8, 0x100022ce4
0000000100022cc0	mov	x0, x21
0000000100022cc4	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100022cc8	stp	x21, x0, [sp, #0x8]
0000000100022ccc	str	x20, [sp]
0000000100022cd0	adr	x2, #94204 ; literal pool for: "Failed to bootstrap path: path = %s, error = %d: %s"
0000000100022cd4	nop
0000000100022cd8	orr	w1, wzr, #0x3
0000000100022cdc	mov	x0, x19
0000000100022ce0	bl	0x100019bfc
0000000100022ce4	ldp	x29, x30, [sp, #0x40]
0000000100022ce8	ldp	x20, x19, [sp, #0x30]
0000000100022cec	ldp	x22, x21, [sp, #0x20]
0000000100022cf0	add	sp, sp, #0x50
0000000100022cf4	ret
0000000100022cf8	sub	sp, sp, #0x40
0000000100022cfc	stp	x22, x21, [sp, #0x10]
0000000100022d00	stp	x20, x19, [sp, #0x20]
0000000100022d04	stp	x29, x30, [sp, #0x30]
0000000100022d08	add	x29, sp, #0x30
0000000100022d0c	mov	x19, x0
0000000100022d10	adr	x21, #136976
0000000100022d14	nop
0000000100022d18	ldr	x0, [x21]
0000000100022d1c	add	x20, x19, #0x3a8
0000000100022d20	str	x20, [sp]
0000000100022d24	adr	x2, #94188 ; literal pool for: "%s: slaying domain"
0000000100022d28	nop
0000000100022d2c	mov	w1, #0x0
0000000100022d30	bl	0x1000270c8
0000000100022d34	ldrb	w8, [x19, #0x3a0]
0000000100022d38	tst	w8, #0x3
0000000100022d3c	b.eq	0x100022d6c
0000000100022d40	ldr	x0, [x21]
0000000100022d44	str	x20, [sp]
0000000100022d48	adr	x2, #94171 ; literal pool for: "%s: already shutting down or slain"
0000000100022d4c	nop
0000000100022d50	mov	w1, #0x0
0000000100022d54	bl	0x1000270c8
0000000100022d58	ldp	x29, x30, [sp, #0x30]
0000000100022d5c	ldp	x20, x19, [sp, #0x20]
0000000100022d60	ldp	x22, x21, [sp, #0x10]
0000000100022d64	add	sp, sp, #0x40
0000000100022d68	ret
0000000100022d6c	ldr	x8, [x19, #0x88]
0000000100022d70	cbz	x8, 0x100022d9c
0000000100022d74	mov	w1, #0xb
0000000100022d78	mov	x0, x19
0000000100022d7c	bl	0x10000e824
0000000100022d80	ldr	x0, [x19, #0x88]
0000000100022d84	mov	x1, x0
0000000100022d88	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100022d8c	ldr	x0, [x19, #0x88]
0000000100022d90	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100022d94	str	xzr, [x19, #0x88]
0000000100022d98	str	wzr, [x19, #0x7c]
0000000100022d9c	ldr	x8, [x19, #0x80]
0000000100022da0	cbz	x8, 0x100022df0
0000000100022da4	ldrb	w8, [x19, #0x3a1]
0000000100022da8	tbz	w8, #0x2, 0x100022dd8
0000000100022dac	ldr	x0, [x21]
0000000100022db0	str	x20, [sp]
0000000100022db4	adr	x2, #94098 ; literal pool for: "%s: uncorking exec source for disposal"
0000000100022db8	nop
0000000100022dbc	mov	w1, #0x0
0000000100022dc0	bl	0x1000270c8
0000000100022dc4	ldr	x0, [x19, #0x80]
0000000100022dc8	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100022dcc	ldrh	w8, [x19, #0x3a0]
0000000100022dd0	and	w8, w8, #0xfffffbff
0000000100022dd4	strh	w8, [x19, #0x3a0]
0000000100022dd8	mov	w1, #0xd
0000000100022ddc	mov	x0, x19
0000000100022de0	bl	0x10000e824
0000000100022de4	ldr	x0, [x19, #0x80]
0000000100022de8	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100022dec	str	xzr, [x19, #0x80]
0000000100022df0	ldrh	w8, [x19, #0x3a0]
0000000100022df4	orr	w8, w8, #0x2
0000000100022df8	strh	w8, [x19, #0x3a0]
0000000100022dfc	bl	0x10000d8e0
0000000100022e00	adr	x2, #32
0000000100022e04	nop
0000000100022e08	mov	x1, x19
0000000100022e0c	ldp	x29, x30, [sp, #0x30]
0000000100022e10	ldp	x20, x19, [sp, #0x20]
0000000100022e14	ldp	x22, x21, [sp, #0x10]
0000000100022e18	add	sp, sp, #0x40
0000000100022e1c	b	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100022e20	sub	sp, sp, #0x90
0000000100022e24	stp	x28, x27, [sp, #0x30]
0000000100022e28	stp	x26, x25, [sp, #0x40]
0000000100022e2c	stp	x24, x23, [sp, #0x50]
0000000100022e30	stp	x22, x21, [sp, #0x60]
0000000100022e34	stp	x20, x19, [sp, #0x70]
0000000100022e38	stp	x29, x30, [sp, #0x80]
0000000100022e3c	add	x29, sp, #0x80
0000000100022e40	mov	x19, x0
0000000100022e44	ldrb	w8, [x19, #0x3a0]
0000000100022e48	tbnz	w8, #0x0, 0x10002344c
0000000100022e4c	adr	x25, #136660
0000000100022e50	nop
0000000100022e54	ldr	x0, [x25]
0000000100022e58	add	x23, x19, #0x3a8
0000000100022e5c	str	x23, [sp]
0000000100022e60	adr	x2, #94014 ; literal pool for: "%s: shutting down"
0000000100022e64	nop
0000000100022e68	mov	w1, #0x0
0000000100022e6c	bl	0x1000270c8
0000000100022e70	adrp	x26, 33 ; 0x100043000
0000000100022e74	ldr	x8, [x26, #0xcf8]
0000000100022e78	cmp	x8, x19
0000000100022e7c	b.ne	0x100023008
0000000100022e80	mov	w22, #0xca00
0000000100022e84	movk	w22, #0x3b9a, lsl #16
0000000100022e88	bl	0x10000d8e0
0000000100022e8c	mov	x3, x0
0000000100022e90	nop
0000000100022e94	ldr	x0, #0x1d1d4 ; literal pool symbol address: __dispatch_source_type_timer
0000000100022e98	mov	x1, #0x0
0000000100022e9c	mov	x2, #0x0
0000000100022ea0	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100022ea4	mov	x20, x0
0000000100022ea8	nop
0000000100022eac	nop
0000000100022eb0	ldrsw	x8, 0x10004350c
0000000100022eb4	mul	x1, x8, x22
0000000100022eb8	mov	x0, #0x0
0000000100022ebc	bl	0x100030f38 ; symbol stub for: _dispatch_time
0000000100022ec0	mov	x1, x0
0000000100022ec4	mov	x2, #-0x1
0000000100022ec8	mov	x0, x20
0000000100022ecc	mov	x3, #0x0
0000000100022ed0	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100022ed4	ldr	x1, [x26, #0xcf8]
0000000100022ed8	mov	x0, x20
0000000100022edc	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100022ee0	adr	x1, #1400
0000000100022ee4	nop
0000000100022ee8	mov	x0, x20
0000000100022eec	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100022ef0	mov	x0, x20
0000000100022ef4	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100022ef8	adr	x24, #138504
0000000100022efc	nop
0000000100022f00	ldr	w8, [x24]
0000000100022f04	cbz	w8, 0x100022f70
0000000100022f08	bl	0x10000d8e0
0000000100022f0c	mov	x3, x0
0000000100022f10	nop
0000000100022f14	ldr	x0, #0x1d154 ; literal pool symbol address: __dispatch_source_type_timer
0000000100022f18	orr	w2, wzr, #0x1
0000000100022f1c	mov	x1, #0x0
0000000100022f20	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100022f24	mov	x21, x0
0000000100022f28	ldrsw	x8, [x24]
0000000100022f2c	mul	x1, x8, x22
0000000100022f30	mov	x0, #0x0
0000000100022f34	bl	0x100030f38 ; symbol stub for: _dispatch_time
0000000100022f38	mov	x1, x0
0000000100022f3c	mov	x2, #-0x1
0000000100022f40	mov	x0, x21
0000000100022f44	mov	x3, #0x0
0000000100022f48	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100022f4c	mov	x0, x21
0000000100022f50	mov	x1, x20
0000000100022f54	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100022f58	adr	x1, #1348
0000000100022f5c	nop
0000000100022f60	mov	x0, x21
0000000100022f64	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100022f68	mov	x0, x21
0000000100022f6c	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100022f70	adrp	x8, 33 ; 0x100043000
0000000100022f74	ldrb	w9, [x8, #0xe48]
0000000100022f78	tbnz	w9, #0x0, 0x100023008
0000000100022f7c	orr	w21, wzr, #0x1
0000000100022f80	strb	w21, [x8, #0xe48]
0000000100022f84	ldr	x0, [x26, #0xcf8]
0000000100022f88	adr	x2, #93915 ; literal pool for: "committing to system shutdown"
0000000100022f8c	nop
0000000100022f90	mov	w1, #0x5
0000000100022f94	bl	0x100019bfc
0000000100022f98	adr	x0, #93929 ; literal pool for: "com.apple.xpc.launchd.system-override"
0000000100022f9c	nop
0000000100022fa0	mov	x1, #0x0
0000000100022fa4	bl	0x100030e48 ; symbol stub for: _dispatch_queue_create
0000000100022fa8	mov	x20, x0
0000000100022fac	adr	x2, #1432
0000000100022fb0	nop
0000000100022fb4	mov	x1, #0x0
0000000100022fb8	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
0000000100022fbc	mov	x0, x20
0000000100022fc0	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100022fc4	adrp	x8, 33 ; 0x100043000
0000000100022fc8	ldrb	w8, [x8, #0xd28]
0000000100022fcc	tbnz	w8, #0x0, 0x100023008
0000000100022fd0	str	w21, [sp, #0x2c]
0000000100022fd4	adr	x0, #93907 ; literal pool for: "kern.willshutdown"
0000000100022fd8	nop
0000000100022fdc	add	x3, sp, #0x2c
0000000100022fe0	orr	w4, wzr, #0x4
0000000100022fe4	mov	x1, #0x0
0000000100022fe8	mov	x2, #0x0
0000000100022fec	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
0000000100022ff0	cmn	w0, #0x1
0000000100022ff4	b.ne	0x100023008
0000000100022ff8	bl	0x100030adc ; symbol stub for: ___error
0000000100022ffc	ldrsw	x0, [x0]
0000000100023000	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100023004	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100023008	bl	0x100031214 ; symbol stub for: _mach_absolute_time
000000010002300c	mov	x9, #0x0
0000000100023010	ldrh	w8, [x19, #0x3a0]
0000000100023014	orr	w8, w8, #0x2
0000000100023018	str	x0, [x19, #0xe8]
000000010002301c	strh	w8, [x19, #0x3a0]
0000000100023020	adr	x21, #94122 ; literal pool for: "%s: removing unmanaged pid-local endpoint: %s"
0000000100023024	nop
0000000100023028	adr	x22, #94078 ; literal pool for: "%s: removing unmanaged endpoint: %s"
000000010002302c	nop
0000000100023030	adr	x26, #93943 ; literal pool for: "Removing unexpected non-dynamic endpoint: %s"
0000000100023034	nop
0000000100023038	str	x9, [sp, #0x18]
000000010002303c	add	x8, x19, x9, lsl #3
0000000100023040	ldr	x27, [x8, #0x248]
0000000100023044	cbz	x27, 0x1000231b4
0000000100023048	add	x8, x8, #0x248
000000010002304c	str	x8, [sp, #0x20]
0000000100023050	ldr	x0, [x25]
0000000100023054	add	x20, x27, #0x460
0000000100023058	stp	x23, x20, [sp]
000000010002305c	mov	w1, #0x0
0000000100023060	adr	x2, #93811 ; literal pool for: "%s: removing unmanaged service: %s"
0000000100023064	nop
0000000100023068	bl	0x1000270c8
000000010002306c	mov	x0, x19
0000000100023070	mov	x1, x27
0000000100023074	bl	0x100021168
0000000100023078	ldr	x8, [x27, #0xa8]
000000010002307c	cbz	x8, 0x1000230cc
0000000100023080	str	x20, [sp]
0000000100023084	orr	w1, wzr, #0x3
0000000100023088	mov	x0, x19
000000010002308c	adr	x2, #93802 ; literal pool for: "Unmanaged service with non-dynamic endpoints: %s"
0000000100023090	nop
0000000100023094	bl	0x100019bfc
0000000100023098	ldr	x28, [x27, #0xa8]
000000010002309c	cbz	x28, 0x1000230cc
00000001000230a0	ldr	x24, [x28, #0x8]
00000001000230a4	add	x8, x28, #0x88
00000001000230a8	str	x8, [sp]
00000001000230ac	orr	w1, wzr, #0x3
00000001000230b0	mov	x0, x19
00000001000230b4	mov	x2, x26
00000001000230b8	bl	0x100019bfc
00000001000230bc	mov	x0, x28
00000001000230c0	bl	0x10002f760
00000001000230c4	mov	x28, x24
00000001000230c8	cbnz	x24, 0x1000230a0
00000001000230cc	ldr	x8, [x27, #0xc0]
00000001000230d0	adr	x24, #93871 ; literal pool for: "Removing unexpected event endpoint: %s"
00000001000230d4	nop
00000001000230d8	cbz	x8, 0x100023128
00000001000230dc	str	x20, [sp]
00000001000230e0	orr	w1, wzr, #0x3
00000001000230e4	mov	x0, x19
00000001000230e8	adr	x2, #93804 ; literal pool for: "Unmanaged service with event endpoints: %s"
00000001000230ec	nop
00000001000230f0	bl	0x100019bfc
00000001000230f4	ldr	x28, [x27, #0xc0]
00000001000230f8	cbz	x28, 0x100023128
00000001000230fc	ldr	x20, [x28, #0x8]
0000000100023100	add	x8, x28, #0x88
0000000100023104	str	x8, [sp]
0000000100023108	orr	w1, wzr, #0x3
000000010002310c	mov	x0, x19
0000000100023110	mov	x2, x24
0000000100023114	bl	0x100019bfc
0000000100023118	mov	x0, x28
000000010002311c	bl	0x10002f760
0000000100023120	mov	x28, x20
0000000100023124	cbnz	x20, 0x1000230fc
0000000100023128	ldr	x28, [x27, #0xb0]
000000010002312c	cbz	x28, 0x10002315c
0000000100023130	ldr	x20, [x28, #0x8]
0000000100023134	ldr	x0, [x25]
0000000100023138	add	x8, x28, #0x88
000000010002313c	stp	x23, x8, [sp]
0000000100023140	mov	w1, #0x0
0000000100023144	mov	x2, x22
0000000100023148	bl	0x1000270c8
000000010002314c	mov	x0, x28
0000000100023150	bl	0x10002f760
0000000100023154	mov	x28, x20
0000000100023158	cbnz	x20, 0x100023130
000000010002315c	ldr	x28, [x27, #0xb8]
0000000100023160	cbz	x28, 0x100023190
0000000100023164	ldr	x20, [x28, #0x8]
0000000100023168	ldr	x0, [x25]
000000010002316c	add	x8, x28, #0x88
0000000100023170	stp	x23, x8, [sp]
0000000100023174	mov	w1, #0x0
0000000100023178	mov	x2, x21
000000010002317c	bl	0x1000270c8
0000000100023180	mov	x0, x28
0000000100023184	bl	0x10002f760
0000000100023188	mov	x28, x20
000000010002318c	cbnz	x20, 0x100023164
0000000100023190	ldrsh	w8, [x27, #0x114]
0000000100023194	cmp	w8, #0x3
0000000100023198	b.ge	0x100023428
000000010002319c	mov	x0, x19
00000001000231a0	mov	x1, x27
00000001000231a4	bl	0x100021418
00000001000231a8	ldr	x8, [sp, #0x20]
00000001000231ac	ldr	x27, [x8]
00000001000231b0	cbnz	x27, 0x100023050
00000001000231b4	ldr	x9, [sp, #0x18]
00000001000231b8	add	x9, x9, #0x1
00000001000231bc	cmp	x9, #0x7
00000001000231c0	b.lo	0x100023038
00000001000231c4	ldr	x22, [x19, #0x120]
00000001000231c8	cbz	x22, 0x100023208
00000001000231cc	adr	x20, #93778 ; literal pool for: "%s: removing semi-active service: %s"
00000001000231d0	nop
00000001000231d4	mov	x21, x22
00000001000231d8	ldr	x22, [x21, #0x38]
00000001000231dc	ldr	x0, [x25]
00000001000231e0	add	x8, x21, #0x460
00000001000231e4	stp	x23, x8, [sp]
00000001000231e8	mov	w1, #0x0
00000001000231ec	mov	x2, x20
00000001000231f0	bl	0x1000270c8
00000001000231f4	mov	x0, x19
00000001000231f8	mov	x1, x21
00000001000231fc	bl	0x100021964
0000000100023200	cbnz	w0, 0x100023440
0000000100023204	cbnz	x22, 0x1000231d4
0000000100023208	mov	x24, #0x0
000000010002320c	adr	x20, #93789 ; literal pool for: "%s: removing active service: %s"
0000000100023210	nop
0000000100023214	adr	x21, #-70764
0000000100023218	nop
000000010002321c	add	x8, x19, x24, lsl #3
0000000100023220	ldr	x26, [x8, #0x1e0]
0000000100023224	cbz	x26, 0x100023278
0000000100023228	mov	x22, x26
000000010002322c	ldr	x26, [x22, #0x28]
0000000100023230	ldr	x0, [x25]
0000000100023234	add	x8, x22, #0x460
0000000100023238	stp	x23, x8, [sp]
000000010002323c	mov	w1, #0x0
0000000100023240	mov	x2, x20
0000000100023244	bl	0x1000270c8
0000000100023248	mov	x0, x19
000000010002324c	mov	x1, x22
0000000100023250	bl	0x100021964
0000000100023254	cbz	w0, 0x100023274
0000000100023258	cmp	w0, #0x24
000000010002325c	b.eq	0x100023274
0000000100023260	sxtw	x2, w0
0000000100023264	mov	x0, x21
0000000100023268	mov	x1, x22
000000010002326c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100023270	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100023274	cbnz	x26, 0x100023228
0000000100023278	add	x24, x24, #0x1
000000010002327c	cmp	x24, #0xd
0000000100023280	b.ne	0x10002321c
0000000100023284	mov	x20, #0x0
0000000100023288	adrp	x24, 32 ; 0x100043000
000000010002328c	add	x8, x19, x20, lsl #3
0000000100023290	ldr	x1, [x8, #0x128]
0000000100023294	cbz	x1, 0x1000232b8
0000000100023298	ldr	x21, [x1, #0x48]
000000010002329c	ldrh	w8, [x1, #0x114]
00000001000232a0	cbnz	w8, 0x1000232b0
00000001000232a4	mov	x0, x19
00000001000232a8	bl	0x100021964
00000001000232ac	cbnz	w0, 0x100023434
00000001000232b0	mov	x1, x21
00000001000232b4	cbnz	x21, 0x100023298
00000001000232b8	add	x20, x20, #0x1
00000001000232bc	cmp	x20, #0x17
00000001000232c0	b.lo	0x10002328c
00000001000232c4	mov	x20, #0x0
00000001000232c8	add	x8, x19, x20, lsl #3
00000001000232cc	ldr	x0, [x8, #0x280]
00000001000232d0	cbz	x0, 0x1000232ec
00000001000232d4	ldr	x21, [x0, #0x18]
00000001000232d8	ldr	x8, [x0, #0x40]
00000001000232dc	cbz	x8, 0x1000232e4
00000001000232e0	bl	0x100021aa0
00000001000232e4	mov	x0, x21
00000001000232e8	cbnz	x21, 0x1000232d4
00000001000232ec	add	x20, x20, #0x1
00000001000232f0	cmp	x20, #0x1f
00000001000232f4	b.ne	0x1000232c8
00000001000232f8	ldr	x20, [x19, #0x118]
00000001000232fc	cbz	x20, 0x100023310
0000000100023300	mov	x0, x20
0000000100023304	bl	0x100022cf8
0000000100023308	ldr	x20, [x20, #0x8]
000000010002330c	cbnz	x20, 0x100023300
0000000100023310	ldrh	w8, [x19, #0x3a0]
0000000100023314	orr	w8, w8, #0x1
0000000100023318	strh	w8, [x19, #0x3a0]
000000010002331c	ldr	x8, [x19, #0x88]
0000000100023320	cbz	x8, 0x10002334c
0000000100023324	mov	w1, #0xb
0000000100023328	mov	x0, x19
000000010002332c	bl	0x10000e824
0000000100023330	ldr	x0, [x19, #0x88]
0000000100023334	mov	x1, x0
0000000100023338	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002333c	ldr	x0, [x19, #0x88]
0000000100023340	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
0000000100023344	str	xzr, [x19, #0x88]
0000000100023348	str	wzr, [x19, #0x7c]
000000010002334c	ldr	x8, [x19, #0x80]
0000000100023350	cbz	x8, 0x1000233a0
0000000100023354	ldrb	w8, [x19, #0x3a1]
0000000100023358	tbz	w8, #0x2, 0x100023388
000000010002335c	ldr	x0, [x25]
0000000100023360	str	x23, [sp]
0000000100023364	adr	x2, #92642 ; literal pool for: "%s: uncorking exec source for disposal"
0000000100023368	nop
000000010002336c	mov	w1, #0x0
0000000100023370	bl	0x1000270c8
0000000100023374	ldr	x0, [x19, #0x80]
0000000100023378	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010002337c	ldrh	w8, [x19, #0x3a0]
0000000100023380	and	w8, w8, #0xfffffbff
0000000100023384	strh	w8, [x19, #0x3a0]
0000000100023388	mov	w1, #0xd
000000010002338c	mov	x0, x19
0000000100023390	bl	0x10000e824
0000000100023394	ldr	x0, [x19, #0x80]
0000000100023398	bl	0x100030e60 ; symbol stub for: _dispatch_release
000000010002339c	str	xzr, [x19, #0x80]
00000001000233a0	ldr	x20, [x19, #0xa8]
00000001000233a4	cbz	x20, 0x1000233e0
00000001000233a8	mov	x21, #-0x1
00000001000233ac	ldr	x22, [x20]
00000001000233b0	ldr	w0, [x20, #0x10]
00000001000233b4	ldr	x1, [x20, #0x18]
00000001000233b8	bl	0x10002def4
00000001000233bc	ldr	x8, [x20]
00000001000233c0	cbz	x8, 0x1000233cc
00000001000233c4	ldr	x9, [x20, #0x8]
00000001000233c8	str	x9, [x8, #0x8]
00000001000233cc	ldr	x9, [x20, #0x8]
00000001000233d0	str	x8, [x9]
00000001000233d4	stp	x21, x21, [x20]
00000001000233d8	mov	x20, x22
00000001000233dc	cbnz	x22, 0x1000233ac
00000001000233e0	ldr	x8, [x24, #0xcf8]
00000001000233e4	nop
00000001000233e8	ldr	x0, #0x20928
00000001000233ec	cmp	x8, x19
00000001000233f0	ccmp	x0, #0x0, #0x4, eq
00000001000233f4	b.eq	0x1000233fc
00000001000233f8	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000233fc	orr	w1, wzr, #0xc
0000000100023400	mov	x0, x19
0000000100023404	bl	0x10001eb10
0000000100023408	ldp	x29, x30, [sp, #0x80]
000000010002340c	ldp	x20, x19, [sp, #0x70]
0000000100023410	ldp	x22, x21, [sp, #0x60]
0000000100023414	ldp	x24, x23, [sp, #0x50]
0000000100023418	ldp	x26, x25, [sp, #0x40]
000000010002341c	ldp	x28, x27, [sp, #0x30]
0000000100023420	add	sp, sp, #0x90
0000000100023424	ret
0000000100023428	adr	x0, #93136 ; literal pool for: "extra activation on unmanaged service"
000000010002342c	nop
0000000100023430	bl	0x100028f84
0000000100023434	adr	x0, #93269 ; literal pool for: "failed to remove inactive service"
0000000100023438	nop
000000010002343c	bl	0x100028f84
0000000100023440	adr	x0, #93187 ; literal pool for: "failure to remove semi-active service"
0000000100023444	nop
0000000100023448	bl	0x100028f84
000000010002344c	adr	x0, #92449 ; literal pool for: "multiple invocations of death handler for domain"
0000000100023450	nop
0000000100023454	bl	0x100028f84
0000000100023458	sub	sp, sp, #0x30
000000010002345c	stp	x20, x19, [sp, #0x10]
0000000100023460	stp	x29, x30, [sp, #0x20]
0000000100023464	add	x29, sp, #0x20
0000000100023468	mov	x19, x0
000000010002346c	nop
0000000100023470	nop
0000000100023474	ldr	x0, #0x1fffc
0000000100023478	adr	x8, #92472 ; literal pool for: "Shutting the system down has taken too long. launchd is rebooting\n(or halting) the system now. Any processes that are still running\nwill be abandoned to the mercy of the kernel.\n"
000000010002347c	nop
0000000100023480	str	x8, [sp]
0000000100023484	adr	x2, #73766 ; literal pool for: "%s"
0000000100023488	nop
000000010002348c	mov	x1, #0x0
0000000100023490	bl	0x10002a548
0000000100023494	mov	x0, x19
0000000100023498	bl	0x100018de0
000000010002349c	stp	x24, x23, [sp, #-0x40]!
00000001000234a0	stp	x22, x21, [sp, #0x10]
00000001000234a4	stp	x20, x19, [sp, #0x20]
00000001000234a8	stp	x29, x30, [sp, #0x30]
00000001000234ac	add	x29, sp, #0x30
00000001000234b0	mov	x19, x0
00000001000234b4	bl	0x100031214 ; symbol stub for: _mach_absolute_time
00000001000234b8	mov	x20, x0
00000001000234bc	bl	0x100031214 ; symbol stub for: _mach_absolute_time
00000001000234c0	mov	x21, x0
00000001000234c4	nop
00000001000234c8	ldr	x8, #0x20830
00000001000234cc	ldr	x8, [x8, #0xe8]
00000001000234d0	sub	x0, x21, x8
00000001000234d4	bl	0x1000087d0
00000001000234d8	mov	x22, x0
00000001000234dc	nop
00000001000234e0	nop
00000001000234e4	ldrsw	x23, 0x10004350c
00000001000234e8	mov	w24, #0xca00
00000001000234ec	movk	w24, #0x3b9a, lsl #16
00000001000234f0	sub	x0, x21, x20
00000001000234f4	bl	0x1000087d0
00000001000234f8	madd	x8, x23, x24, x0
00000001000234fc	subs	x1, x8, x22
0000000100023500	b.ls	0x100023530
0000000100023504	mov	x0, #0x0
0000000100023508	bl	0x100030f38 ; symbol stub for: _dispatch_time
000000010002350c	mov	x1, x0
0000000100023510	mov	x2, #-0x1
0000000100023514	mov	x0, x19
0000000100023518	mov	x3, #0x0
000000010002351c	ldp	x29, x30, [sp, #0x30]
0000000100023520	ldp	x20, x19, [sp, #0x20]
0000000100023524	ldp	x22, x21, [sp, #0x10]
0000000100023528	ldp	x24, x23, [sp], #0x40
000000010002352c	b	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100023530	ldp	x29, x30, [sp, #0x30]
0000000100023534	ldp	x20, x19, [sp, #0x20]
0000000100023538	ldp	x22, x21, [sp, #0x10]
000000010002353c	ldp	x24, x23, [sp], #0x40
0000000100023540	ret
0000000100023544	stp	x29, x30, [sp, #-0x10]!
0000000100023548	mov	x29, sp
000000010002354c	adr	x0, #92525 ; literal pool for: "system shutdown has begun"
0000000100023550	nop
0000000100023554	bl	0x100031598 ; symbol stub for: _pthread_setname_np
0000000100023558	mov	x0, #-0x1
000000010002355c	orr	w1, wzr, #0x3
0000000100023560	bl	0x1000317f0 ; symbol stub for: _system_override
0000000100023564	cmn	w0, #0x1
0000000100023568	b.eq	0x100023574
000000010002356c	ldp	x29, x30, [sp], #0x10
0000000100023570	ret
0000000100023574	bl	0x100030adc ; symbol stub for: ___error
0000000100023578	ldrsw	x0, [x0]
000000010002357c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100023580	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100023584	brk	#0x1
0000000100023588	sub	sp, sp, #0x50
000000010002358c	stp	x22, x21, [sp, #0x20]
0000000100023590	stp	x20, x19, [sp, #0x30]
0000000100023594	stp	x29, x30, [sp, #0x40]
0000000100023598	add	x29, sp, #0x40
000000010002359c	mov	x19, x2
00000001000235a0	mov	x21, x1
00000001000235a4	mov	x20, x0
00000001000235a8	mov	x0, x21
00000001000235ac	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000235b0	nop
00000001000235b4	ldr	x8, #0x1cb2c ; literal pool symbol address: __xpc_type_string
00000001000235b8	cmp	x0, x8
00000001000235bc	b.ne	0x10002363c
00000001000235c0	str	xzr, [sp, #0x18]
00000001000235c4	strb	wzr, [sp, #0x17]
00000001000235c8	mov	x0, x21
00000001000235cc	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
00000001000235d0	mov	x1, x0
00000001000235d4	add	x2, sp, #0x18
00000001000235d8	add	x4, sp, #0x17
00000001000235dc	mov	w3, #0x0
00000001000235e0	mov	x0, x20
00000001000235e4	bl	0x10000e4dc
00000001000235e8	cbz	x0, 0x100023608
00000001000235ec	ldr	x8, [x19, #0x50]!
00000001000235f0	str	x8, [x0]
00000001000235f4	cbz	x8, 0x1000235fc
00000001000235f8	str	x0, [x8, #0x8]
00000001000235fc	str	x0, [x19]
0000000100023600	str	x19, [x0, #0x8]
0000000100023604	b	0x10002363c
0000000100023608	ldrb	w8, [sp, #0x17]
000000010002360c	adr	x9, #93107 ; literal pool for: "change"
0000000100023610	nop
0000000100023614	adr	x10, #93106 ; literal pool for: "set"
0000000100023618	nop
000000010002361c	cmp	w8, #0x0
0000000100023620	csel	x8, x10, x9, eq
0000000100023624	stp	x8, x20, [sp]
0000000100023628	adr	x2, #93011 ; literal pool for: "Service attempted to %s environment variable with reserved name: %s"
000000010002362c	nop
0000000100023630	orr	w1, wzr, #0x3
0000000100023634	mov	x0, x19
0000000100023638	bl	0x100019bfc
000000010002363c	ldp	x29, x30, [sp, #0x40]
0000000100023640	ldp	x20, x19, [sp, #0x30]
0000000100023644	ldp	x22, x21, [sp, #0x20]
0000000100023648	add	sp, sp, #0x50
000000010002364c	ret
0000000100023650	sub	sp, sp, #0x130
0000000100023654	stp	x28, x27, [sp, #0xd0]
0000000100023658	stp	x26, x25, [sp, #0xe0]
000000010002365c	stp	x24, x23, [sp, #0xf0]
0000000100023660	stp	x22, x21, [sp, #0x100]
0000000100023664	stp	x20, x19, [sp, #0x110]
0000000100023668	stp	x29, x30, [sp, #0x120]
000000010002366c	add	x29, sp, #0x120
0000000100023670	mov	x19, x6
0000000100023674	mov	x23, x5
0000000100023678	mov	x27, x4
000000010002367c	mov	x22, x3
0000000100023680	str	x2, [sp, #0x60]
0000000100023684	mov	x24, x1
0000000100023688	mov	x25, x0
000000010002368c	nop
0000000100023690	ldr	x8, #0x1c988 ; literal pool symbol address: ___stack_chk_guard
0000000100023694	ldr	x8, [x8]
0000000100023698	stur	x8, [x29, #-0x58]
000000010002369c	bl	0x10002d3c0
00000001000236a0	mov	x26, x0
00000001000236a4	mov	w8, #0x24
00000001000236a8	and	x8, x22, x8
00000001000236ac	str	x8, [sp, #0x50]
00000001000236b0	ubfx	w8, w22, #7, #1
00000001000236b4	str	w8, [sp, #0x5c]
00000001000236b8	adrp	x20, 32 ; 0x100043000
00000001000236bc	ldr	x8, [x20, #0xcf8]
00000001000236c0	mov	x28, x25
00000001000236c4	cmp	x8, x26
00000001000236c8	b.eq	0x100023704
00000001000236cc	cbz	x26, 0x100023704
00000001000236d0	cmp	x28, x8
00000001000236d4	b.ne	0x100023704
00000001000236d8	ldr	q0, [x19, #0x10]
00000001000236dc	str	q0, [sp, #0x90]
00000001000236e0	ldr	q0, [x19]
00000001000236e4	str	q0, [sp, #0x80]
00000001000236e8	str	x24, [sp]
00000001000236ec	orr	w2, wzr, #0x2
00000001000236f0	add	x0, sp, #0x80
00000001000236f4	adr	x1, #92959 ; literal pool for: "mach-cross-domain-lookup"
00000001000236f8	nop
00000001000236fc	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
0000000100023700	cbnz	w0, 0x100023d34
0000000100023704	str	xzr, [sp, #0x68]
0000000100023708	tbnz	w22, #0x1, 0x100023758
000000010002370c	tbnz	w22, #0x4, 0x100023798
0000000100023710	ldr	x8, [sp, #0x50]
0000000100023714	cbz	x8, 0x10002388c
0000000100023718	str	xzr, [sp, #0x78]
000000010002371c	ldr	x8, [x28, #0x60]
0000000100023720	adr	x9, #129784
0000000100023724	nop
0000000100023728	cmp	x8, x9
000000010002372c	csel	x3, xzr, x19, eq
0000000100023730	add	x4, sp, #0x78
0000000100023734	mov	w2, #0x0
0000000100023738	mov	x0, x28
000000010002373c	mov	x1, x24
0000000100023740	bl	0x10001e2e0
0000000100023744	str	w0, [sp, #0x74]
0000000100023748	cbz	w0, 0x1000239a0
000000010002374c	mov	x21, #0x0
0000000100023750	cbnz	x21, 0x100023b84
0000000100023754	b	0x100023c54
0000000100023758	str	x28, [sp, #0x78]
000000010002375c	ldr	q0, [x19, #0x10]
0000000100023760	str	q0, [sp, #0x90]
0000000100023764	ldr	q0, [x19]
0000000100023768	str	q0, [sp, #0x80]
000000010002376c	str	x24, [sp]
0000000100023770	orr	w2, wzr, #0x3
0000000100023774	add	x0, sp, #0x80
0000000100023778	adr	x1, #93154 ; literal pool for: "mach-lookup"
000000010002377c	nop
0000000100023780	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
0000000100023784	cbz	w0, 0x100023804
0000000100023788	mov	x21, #0x0
000000010002378c	orr	w0, wzr, #0x1
0000000100023790	cbnz	x21, 0x100023b84
0000000100023794	b	0x100023c54
0000000100023798	str	x28, [sp, #0x80]
000000010002379c	ldr	w1, [x19, #0x14]
00000001000237a0	add	x0, sp, #0x80
00000001000237a4	mov	w2, #0x0
00000001000237a8	bl	0x100023d80
00000001000237ac	cbz	x0, 0x1000238dc
00000001000237b0	mov	x1, x24
00000001000237b4	bl	0x100017fe8
00000001000237b8	cbz	x0, 0x10002387c
00000001000237bc	ldr	x1, [sp, #0x60]
00000001000237c0	bl	0x10002826c
00000001000237c4	cbz	x0, 0x10002387c
00000001000237c8	bl	0x100028764
00000001000237cc	ldr	x21, [x0, #0xc0]
00000001000237d0	cbz	x21, 0x1000237ec
00000001000237d4	add	x0, x21, #0x88
00000001000237d8	mov	x1, x24
00000001000237dc	bl	0x100031700 ; symbol stub for: _strcmp
00000001000237e0	cbz	w0, 0x1000237ec
00000001000237e4	ldr	x21, [x21, #0x8]
00000001000237e8	cbnz	x21, 0x1000237d4
00000001000237ec	str	x21, [sp, #0x68]
00000001000237f0	cmp	x21, #0x0
00000001000237f4	orr	w8, wzr, #0x3
00000001000237f8	csel	w0, w8, wzr, eq
00000001000237fc	cbnz	x21, 0x100023b84
0000000100023800	b	0x100023c54
0000000100023804	add	x0, sp, #0x78
0000000100023808	ldr	x1, [sp, #0x60]
000000010002380c	mov	w2, #0x0
0000000100023810	bl	0x100023d80
0000000100023814	mov	x20, x0
0000000100023818	cbz	x20, 0x1000238ec
000000010002381c	ldr	x21, [x20, #0xb8]
0000000100023820	adrp	x20, 32 ; 0x100043000
0000000100023824	cbz	x21, 0x100023840
0000000100023828	add	x0, x21, #0x88
000000010002382c	mov	x1, x24
0000000100023830	bl	0x100031700 ; symbol stub for: _strcmp
0000000100023834	cbz	w0, 0x1000239c4
0000000100023838	ldr	x21, [x21, #0x8]
000000010002383c	cbnz	x21, 0x100023828
0000000100023840	nop
0000000100023844	nop
0000000100023848	ldr	x0, #0x20bd8
000000010002384c	add	x8, x28, #0x3a8
0000000100023850	str	x8, [sp]
0000000100023854	ldr	x8, [sp, #0x60]
0000000100023858	stp	x8, x24, [sp, #0x8]
000000010002385c	mov	w1, #0x0
0000000100023860	adr	x2, #92856 ; literal pool for: "%s: could not find endpoint in pid namespace: pid = %d, name = %s"
0000000100023864	nop
0000000100023868	bl	0x1000270c8
000000010002386c	mov	x21, #0x0
0000000100023870	mov	w0, #0x0
0000000100023874	cbnz	x21, 0x100023b84
0000000100023878	b	0x100023c54
000000010002387c	mov	x21, #0x0
0000000100023880	orr	w0, wzr, #0x3
0000000100023884	cbnz	x21, 0x100023b84
0000000100023888	b	0x100023c54
000000010002388c	ldr	x8, [x28, #0x60]
0000000100023890	adr	x9, #129416
0000000100023894	nop
0000000100023898	cmp	x8, x9
000000010002389c	csel	x3, x19, xzr, ne
00000001000238a0	b.ne	0x100023b44
00000001000238a4	cbz	x19, 0x100023b44
00000001000238a8	ldr	q0, [x19, #0x10]
00000001000238ac	str	q0, [sp, #0x90]
00000001000238b0	ldr	q0, [x19]
00000001000238b4	str	q0, [sp, #0x80]
00000001000238b8	str	x24, [sp]
00000001000238bc	orr	w2, wzr, #0xc
00000001000238c0	add	x0, sp, #0x80
00000001000238c4	adr	x1, #92822 ; literal pool for: "mach-lookup"
00000001000238c8	nop
00000001000238cc	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
00000001000238d0	cbz	w0, 0x100023b40
00000001000238d4	orr	w0, wzr, #0x1
00000001000238d8	b	0x100023c58
00000001000238dc	mov	x21, #0x0
00000001000238e0	mov	w0, #0x71
00000001000238e4	cbnz	x21, 0x100023b84
00000001000238e8	b	0x100023c54
00000001000238ec	ldr	x0, [sp, #0x60]
00000001000238f0	bl	0x100015490
00000001000238f4	mov	x20, x0
00000001000238f8	cbz	x20, 0x100023960
00000001000238fc	ldr	x8, [x20, #0xe0]
0000000100023900	ldr	x9, [x8, #0x60]
0000000100023904	adr	x10, #129300
0000000100023908	nop
000000010002390c	cmp	x9, x10
0000000100023910	b.ne	0x10002381c
0000000100023914	ldr	x8, [x8, #0x48]
0000000100023918	cbz	x8, 0x100023930
000000010002391c	ldr	w9, [x8, #0x14]
0000000100023920	cmp	w9, #0x4
0000000100023924	b.eq	0x100023930
0000000100023928	ldr	x8, [x8]
000000010002392c	cbnz	x8, 0x10002391c
0000000100023930	nop
0000000100023934	ldr	x0, #0x203c4
0000000100023938	ldr	w1, [x8, #0x10]
000000010002393c	bl	0x100023f80
0000000100023940	str	x0, [sp, #0x80]
0000000100023944	cbz	x0, 0x10002395c
0000000100023948	orr	w2, wzr, #0x1
000000010002394c	add	x0, sp, #0x80
0000000100023950	ldr	x1, [sp, #0x60]
0000000100023954	bl	0x100023d80
0000000100023958	mov	x20, x0
000000010002395c	cbnz	x20, 0x10002381c
0000000100023960	nop
0000000100023964	nop
0000000100023968	ldr	x0, #0x20ab8
000000010002396c	add	x8, x28, #0x3a8
0000000100023970	str	x8, [sp]
0000000100023974	ldr	x8, [sp, #0x60]
0000000100023978	stp	x8, x24, [sp, #0x8]
000000010002397c	mov	w1, #0x0
0000000100023980	adr	x2, #92502 ; literal pool for: "%s: could not find active service for lookup: pid = %d, name = %s"
0000000100023984	nop
0000000100023988	bl	0x1000270c8
000000010002398c	mov	x21, #0x0
0000000100023990	orr	w0, wzr, #0x3
0000000100023994	adrp	x20, 32 ; 0x100043000
0000000100023998	cbnz	x21, 0x100023b84
000000010002399c	b	0x100023c54
00000001000239a0	ldr	x0, [sp, #0x78]
00000001000239a4	ldr	x8, [x0, #0x40]
00000001000239a8	cbz	x8, 0x1000239d0
00000001000239ac	orr	w1, wzr, #0x3
00000001000239b0	mov	x0, x28
00000001000239b4	adr	x2, #92714 ; literal pool for: "Cannot look up instances for shared endpoints."
00000001000239b8	nop
00000001000239bc	bl	0x100019bfc
00000001000239c0	b	0x100023b78
00000001000239c4	str	x21, [sp, #0x68]
00000001000239c8	cbnz	x21, 0x100023b84
00000001000239cc	b	0x100023c54
00000001000239d0	bl	0x10002f310
00000001000239d4	mov	x21, x0
00000001000239d8	ldrb	w8, [x21, #0x135]
00000001000239dc	tbnz	w8, #0x1, 0x100023b64
00000001000239e0	mov	x8, x21
00000001000239e4	ldr	x20, [x8, #0xd8]!
00000001000239e8	str	x8, [sp, #0x48]
00000001000239ec	cbz	x20, 0x100023a10
00000001000239f0	mov	x0, x20
00000001000239f4	bl	0x1000163a8
00000001000239f8	mov	x1, x0
00000001000239fc	mov	x0, x23
0000000100023a00	bl	0x100031850 ; symbol stub for: _uuid_compare
0000000100023a04	cbz	w0, 0x100023c90
0000000100023a08	ldr	x20, [x20, #0x18]
0000000100023a0c	cbnz	x20, 0x1000239f0
0000000100023a10	str	x27, [sp, #0x40]
0000000100023a14	ldr	x27, [x21, #0xe0]
0000000100023a18	adr	x8, #-14336
0000000100023a1c	nop
0000000100023a20	str	x8, [sp, #0x80]
0000000100023a24	adr	x8, #-13368
0000000100023a28	nop
0000000100023a2c	str	x8, [sp, #0x88]
0000000100023a30	adr	x8, #-13016
0000000100023a34	nop
0000000100023a38	str	x8, [sp, #0x90]
0000000100023a3c	adr	x8, #-12496
0000000100023a40	nop
0000000100023a44	str	x8, [sp, #0x98]
0000000100023a48	adr	x8, #-12420
0000000100023a4c	nop
0000000100023a50	str	x8, [sp, #0xa0]
0000000100023a54	adr	x8, #-12220
0000000100023a58	nop
0000000100023a5c	str	x8, [sp, #0xa8]
0000000100023a60	adr	x8, #-12024
0000000100023a64	nop
0000000100023a68	stp	x8, x27, [sp, #0xb0]
0000000100023a6c	mov	w2, #-0x1
0000000100023a70	add	x4, sp, #0x80
0000000100023a74	add	x6, sp, #0x74
0000000100023a78	mov	x0, x21
0000000100023a7c	mov	x1, x23
0000000100023a80	mov	x3, x19
0000000100023a84	mov	x5, #0x0
0000000100023a88	bl	0x1000045bc
0000000100023a8c	mov	x20, x0
0000000100023a90	cbz	x20, 0x100023cf0
0000000100023a94	stp	x21, x23, [sp, #0x30]
0000000100023a98	ldr	x23, [x21, #0xa8]
0000000100023a9c	adr	x21, #-21880
0000000100023aa0	nop
0000000100023aa4	cbz	x23, 0x100023ad4
0000000100023aa8	mov	x0, x23
0000000100023aac	mov	x1, x21
0000000100023ab0	mov	x2, x20
0000000100023ab4	bl	0x10002f230
0000000100023ab8	mov	x2, x0
0000000100023abc	orr	w3, wzr, #0x40
0000000100023ac0	mov	x0, x27
0000000100023ac4	mov	x1, x20
0000000100023ac8	bl	0x10001e764
0000000100023acc	ldr	x23, [x23, #0x8]
0000000100023ad0	cbnz	x23, 0x100023aa8
0000000100023ad4	mov	x0, x27
0000000100023ad8	mov	x1, x20
0000000100023adc	bl	0x100020c5c
0000000100023ae0	ldr	x0, [sp, #0x30]
0000000100023ae4	ldr	w8, [x0, #0xf0]
0000000100023ae8	add	w8, w8, #0x1
0000000100023aec	str	w8, [x0, #0xf0]
0000000100023af0	ldr	x8, [x0, #0xd8]
0000000100023af4	str	x8, [x20, #0x18]
0000000100023af8	cbz	x8, 0x100023b04
0000000100023afc	add	x9, x20, #0x18
0000000100023b00	str	x9, [x8, #0x20]
0000000100023b04	str	x20, [x0, #0xd8]
0000000100023b08	ldr	x8, [sp, #0x48]
0000000100023b0c	str	x8, [x20, #0x20]
0000000100023b10	ldrh	w8, [x20, #0x134]
0000000100023b14	orr	w8, w8, #0x200
0000000100023b18	strh	w8, [x20, #0x134]
0000000100023b1c	str	x0, [x20, #0xe8]
0000000100023b20	mov	w1, #0x13
0000000100023b24	bl	0x10000e3f4
0000000100023b28	ldp	x23, x27, [sp, #0x38]
0000000100023b2c	tbz	w22, #0x5, 0x100023cb8
0000000100023b30	ldrh	w8, [x20, #0x134]
0000000100023b34	orr	w8, w8, #0x20
0000000100023b38	strh	w8, [x20, #0x134]
0000000100023b3c	b	0x100023cb8
0000000100023b40	mov	x3, #0x0
0000000100023b44	orr	w2, wzr, #0x1
0000000100023b48	add	x4, sp, #0x68
0000000100023b4c	mov	x0, x28
0000000100023b50	mov	x1, x24
0000000100023b54	bl	0x10001e2e0
0000000100023b58	ldr	x21, [sp, #0x68]
0000000100023b5c	cbnz	x21, 0x100023b84
0000000100023b60	b	0x100023c54
0000000100023b64	orr	w1, wzr, #0x3
0000000100023b68	mov	x0, x21
0000000100023b6c	adr	x2, #92321 ; literal pool for: "Cannot look up instances for sub-instances."
0000000100023b70	nop
0000000100023b74	bl	0x1000118ec
0000000100023b78	mov	x21, #0x0
0000000100023b7c	mov	w0, #0x89
0000000100023b80	cbz	x21, 0x100023c54
0000000100023b84	ldr	x8, [x21, #0x40]
0000000100023b88	cbz	x8, 0x100023b94
0000000100023b8c	str	x8, [sp, #0x68]
0000000100023b90	mov	x21, x8
0000000100023b94	tbz	w22, #0x3, 0x100023bb0
0000000100023b98	ldr	x8, [x20, #0xcf8]
0000000100023b9c	cmp	x8, x28
0000000100023ba0	b.eq	0x100023bb0
0000000100023ba4	orr	w0, wzr, #0x1
0000000100023ba8	tbz	w22, #0x4, 0x100023c58
0000000100023bac	b	0x100023d38
0000000100023bb0	ldrb	w8, [x21, #0x50]
0000000100023bb4	ubfx	w8, w8, #6, #1
0000000100023bb8	ldr	w9, [sp, #0x5c]
0000000100023bbc	cmp	w9, w8
0000000100023bc0	b.ne	0x100023be4
0000000100023bc4	mov	x0, x21
0000000100023bc8	bl	0x10002f2ac
0000000100023bcc	str	w0, [x27]
0000000100023bd0	cmp	w0, #0x0
0000000100023bd4	mov	w8, #0x91
0000000100023bd8	csel	w0, w8, wzr, eq
0000000100023bdc	tbz	w22, #0x4, 0x100023c58
0000000100023be0	b	0x100023d38
0000000100023be4	add	x1, sp, #0x80
0000000100023be8	mov	x0, x19
0000000100023bec	bl	0x1000293c0
0000000100023bf0	ldr	w8, [sp, #0x80]
0000000100023bf4	stp	x0, x8, [sp, #0x8]
0000000100023bf8	orr	w1, wzr, #0x4
0000000100023bfc	str	x24, [sp]
0000000100023c00	mov	x0, x28
0000000100023c04	adr	x2, #91688 ; literal pool for: "failed lookup due to non-launching property mismatch: name = %s, requestor = %s.%d"
0000000100023c08	nop
0000000100023c0c	bl	0x100019bfc
0000000100023c10	nop
0000000100023c14	nop
0000000100023c18	ldr	x20, #0x20808
0000000100023c1c	add	x21, x28, #0x3a8
0000000100023c20	add	x1, sp, #0x80
0000000100023c24	mov	x0, x19
0000000100023c28	bl	0x1000293c0
0000000100023c2c	ldr	w8, [sp, #0x80]
0000000100023c30	stp	x0, x8, [sp, #0x10]
0000000100023c34	stp	x21, x24, [sp]
0000000100023c38	mov	w1, #0x0
0000000100023c3c	mov	x0, x20
0000000100023c40	adrp	x20, 32 ; 0x100043000
0000000100023c44	adr	x2, #91707 ; literal pool for: "%s: failed lookup due to non-launching property mismatch: name = %s, requestor = %s.%d"
0000000100023c48	nop
0000000100023c4c	bl	0x1000270c8
0000000100023c50	orr	w0, wzr, #0x3
0000000100023c54	tbnz	w22, #0x4, 0x100023d38
0000000100023c58	ldr	x8, [x25, #0x60]
0000000100023c5c	adr	x9, #128444
0000000100023c60	nop
0000000100023c64	cmp	x8, x9
0000000100023c68	b.eq	0x100023d38
0000000100023c6c	ldr	x28, [x28, #0xc0]
0000000100023c70	ldr	x8, [x20, #0xcf8]
0000000100023c74	cmp	x28, x8
0000000100023c78	b.eq	0x100023c80
0000000100023c7c	cbnz	x28, 0x100023d74
0000000100023c80	cmp	w0, #0x3
0000000100023c84	b.ne	0x100023d38
0000000100023c88	cbnz	x28, 0x1000236c4
0000000100023c8c	b	0x100023d38
0000000100023c90	tbz	w22, #0x5, 0x100023cb8
0000000100023c94	add	x1, sp, #0x80
0000000100023c98	mov	x0, x19
0000000100023c9c	bl	0x1000293c0
0000000100023ca0	str	x0, [sp]
0000000100023ca4	orr	w1, wzr, #0x4
0000000100023ca8	mov	x0, x20
0000000100023cac	adr	x2, #92086 ; literal pool for: "Caller wanted oneshot behavior for pre-existing instance: caller = %s"
0000000100023cb0	nop
0000000100023cb4	bl	0x1000118ec
0000000100023cb8	ldr	x21, [x20, #0xc8]
0000000100023cbc	cbz	x21, 0x100023ce4
0000000100023cc0	adrp	x20, 32 ; 0x100043000
0000000100023cc4	add	x0, x21, #0x88
0000000100023cc8	mov	x1, x24
0000000100023ccc	bl	0x100031700 ; symbol stub for: _strcmp
0000000100023cd0	cbz	w0, 0x100023d24
0000000100023cd4	ldr	x21, [x21, #0x8]
0000000100023cd8	cbnz	x21, 0x100023cc4
0000000100023cdc	orr	w0, wzr, #0x3
0000000100023ce0	b	0x100023d28
0000000100023ce4	orr	w0, wzr, #0x3
0000000100023ce8	adrp	x20, 32 ; 0x100043000
0000000100023cec	b	0x100023d28
0000000100023cf0	ldr	w20, [sp, #0x74]
0000000100023cf4	mov	x0, x20
0000000100023cf8	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100023cfc	stp	x20, x0, [sp]
0000000100023d00	orr	w1, wzr, #0x3
0000000100023d04	mov	x0, x21
0000000100023d08	adr	x2, #91953 ; literal pool for: "Could not create copy of service: %d: %s"
0000000100023d0c	nop
0000000100023d10	bl	0x1000118ec
0000000100023d14	mov	x21, #0x0
0000000100023d18	ldr	w0, [sp, #0x74]
0000000100023d1c	ldr	x27, [sp, #0x40]
0000000100023d20	b	0x100023994
0000000100023d24	str	x21, [sp, #0x68]
0000000100023d28	str	w0, [sp, #0x74]
0000000100023d2c	cbnz	x21, 0x100023b84
0000000100023d30	b	0x100023c54
0000000100023d34	orr	w0, wzr, #0x1
0000000100023d38	ldur	x8, [x29, #-0x58]
0000000100023d3c	nop
0000000100023d40	ldr	x9, #0x1c2d8 ; literal pool symbol address: ___stack_chk_guard
0000000100023d44	ldr	x9, [x9]
0000000100023d48	cmp	x9, x8
0000000100023d4c	b.ne	0x100023d70
0000000100023d50	ldp	x29, x30, [sp, #0x120]
0000000100023d54	ldp	x20, x19, [sp, #0x110]
0000000100023d58	ldp	x22, x21, [sp, #0x100]
0000000100023d5c	ldp	x24, x23, [sp, #0xf0]
0000000100023d60	ldp	x26, x25, [sp, #0xe0]
0000000100023d64	ldp	x28, x27, [sp, #0xd0]
0000000100023d68	add	sp, sp, #0x130
0000000100023d6c	ret
0000000100023d70	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100023d74	adr	x0, #91267 ; literal pool for: "Domain is nested too deeply"
0000000100023d78	nop
0000000100023d7c	bl	0x100028f84
0000000100023d80	sub	sp, sp, #0x130
0000000100023d84	stp	x24, x23, [sp, #0xf0]
0000000100023d88	stp	x22, x21, [sp, #0x100]
0000000100023d8c	stp	x20, x19, [sp, #0x110]
0000000100023d90	stp	x29, x30, [sp, #0x120]
0000000100023d94	add	x29, sp, #0x120
0000000100023d98	mov	x21, x2
0000000100023d9c	mov	x19, x0
0000000100023da0	add	x23, sp, #0x18
0000000100023da4	nop
0000000100023da8	ldr	x8, #0x1c270 ; literal pool symbol address: ___stack_chk_guard
0000000100023dac	ldr	x8, [x8]
0000000100023db0	str	x8, [x23]
0000000100023db4	str	w1, [sp, #0x24]
0000000100023db8	add	x0, sp, #0x24
0000000100023dbc	orr	w1, wzr, #0x4
0000000100023dc0	bl	0x10000d840
0000000100023dc4	mov	x8, #0x4ec5
0000000100023dc8	movk	x8, #0xc4ec, lsl #16
0000000100023dcc	movk	x8, #0xec4e, lsl #32
0000000100023dd0	movk	x8, #0x4ec4, lsl #48
0000000100023dd4	umulh	x8, x0, x8
0000000100023dd8	lsr	x8, x8, #2
0000000100023ddc	mov	w9, #0xd
0000000100023de0	msub	x8, x8, x9, x0
0000000100023de4	ldr	x9, [x19]
0000000100023de8	add	x8, x9, x8, lsl #3
0000000100023dec	ldr	x20, [x8, #0x1e0]
0000000100023df0	cbz	x20, 0x100023e10
0000000100023df4	mov	x0, x20
0000000100023df8	bl	0x100015ed8
0000000100023dfc	ldr	w8, [sp, #0x24]
0000000100023e00	cmp	w0, w8
0000000100023e04	b.eq	0x100023f48
0000000100023e08	ldr	x20, [x20, #0x28]
0000000100023e0c	cbnz	x20, 0x100023df4
0000000100023e10	add	x0, sp, #0x24
0000000100023e14	orr	w1, wzr, #0x4
0000000100023e18	bl	0x10000d840
0000000100023e1c	mov	x8, #0x2493
0000000100023e20	movk	x8, #0x9249, lsl #16
0000000100023e24	movk	x8, #0x4924, lsl #32
0000000100023e28	movk	x8, #0x2492, lsl #48
0000000100023e2c	umulh	x8, x0, x8
0000000100023e30	sub	x9, x0, x8
0000000100023e34	add	x8, x8, x9, lsr #1
0000000100023e38	lsr	x9, x8, #2
0000000100023e3c	lsl	x9, x9, #3
0000000100023e40	sub	x8, x9, x8, lsr #2
0000000100023e44	sub	x8, x0, x8
0000000100023e48	ldr	x19, [x19]
0000000100023e4c	add	x8, x19, x8, lsl #3
0000000100023e50	ldr	x20, [x8, #0x248]
0000000100023e54	cbz	x20, 0x100023e70
0000000100023e58	ldr	w8, [sp, #0x24]
0000000100023e5c	ldr	w9, [x20, #0x110]
0000000100023e60	cmp	w9, w8
0000000100023e64	b.eq	0x100023f48
0000000100023e68	ldr	x20, [x20, #0x28]
0000000100023e6c	cbnz	x20, 0x100023e5c
0000000100023e70	cbz	w21, 0x100023e94
0000000100023e74	ldr	w21, [sp, #0x24]
0000000100023e78	add	x20, sp, #0x28
0000000100023e7c	add	x1, sp, #0x28
0000000100023e80	mov	x0, x21
0000000100023e84	bl	0x100029340
0000000100023e88	cbz	w0, 0x100023e9c
0000000100023e8c	cmp	w0, #0x3
0000000100023e90	b.ne	0x100023eb0
0000000100023e94	mov	x20, #0x0
0000000100023e98	b	0x100023f48
0000000100023e9c	add	x8, x20, #0x10
0000000100023ea0	adr	x4, #91382 ; literal pool for: "com.apple.xpc.launchd.unmanaged.%s.%d"
0000000100023ea4	nop
0000000100023ea8	str	x8, [sp]
0000000100023eac	b	0x100023ebc
0000000100023eb0	adr	x4, #91318 ; literal pool for: "com.apple.xpc.launchd.unmanaged.confusing.%d.%d"
0000000100023eb4	nop
0000000100023eb8	str	x0, [sp]
0000000100023ebc	str	x21, [sp, #0x8]
0000000100023ec0	add	x0, sp, #0x68
0000000100023ec4	orr	w1, wzr, #0x80
0000000100023ec8	orr	w3, wzr, #0x80
0000000100023ecc	mov	w2, #0x0
0000000100023ed0	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100023ed4	add	x0, sp, #0x68
0000000100023ed8	bl	0x10003173c ; symbol stub for: _strlen
0000000100023edc	add	x22, x0, #0x1
0000000100023ee0	add	x0, x0, #0x461
0000000100023ee4	bl	0x10000d464
0000000100023ee8	mov	x20, x0
0000000100023eec	orr	w1, wzr, #0x6
0000000100023ef0	mov	x0, x19
0000000100023ef4	bl	0x10000e3f4
0000000100023ef8	str	x0, [x20, #0xe0]
0000000100023efc	str	w21, [x20, #0x110]
0000000100023f00	add	x21, x20, #0x460
0000000100023f04	add	x1, sp, #0x68
0000000100023f08	mov	x3, #-0x1
0000000100023f0c	mov	x0, x21
0000000100023f10	mov	x2, x22
0000000100023f14	bl	0x100030b0c ; symbol stub for: ___strlcpy_chk
0000000100023f18	mov	x0, x19
0000000100023f1c	mov	x1, x20
0000000100023f20	bl	0x100021168
0000000100023f24	nop
0000000100023f28	nop
0000000100023f2c	ldr	x0, #0x204f4
0000000100023f30	add	x8, x19, #0x3a8
0000000100023f34	stp	x21, x8, [sp]
0000000100023f38	adr	x2, #91268 ; literal pool for: "%s: added unmanaged active to: %s"
0000000100023f3c	nop
0000000100023f40	mov	w1, #0x0
0000000100023f44	bl	0x1000270c8
0000000100023f48	ldr	x8, [x23]
0000000100023f4c	nop
0000000100023f50	ldr	x9, #0x1c0c8 ; literal pool symbol address: ___stack_chk_guard
0000000100023f54	ldr	x9, [x9]
0000000100023f58	cmp	x9, x8
0000000100023f5c	b.ne	0x100023f7c
0000000100023f60	mov	x0, x20
0000000100023f64	ldp	x29, x30, [sp, #0x120]
0000000100023f68	ldp	x20, x19, [sp, #0x110]
0000000100023f6c	ldp	x22, x21, [sp, #0x100]
0000000100023f70	ldp	x24, x23, [sp, #0xf0]
0000000100023f74	add	sp, sp, #0x130
0000000100023f78	ret
0000000100023f7c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100023f80	stp	x20, x19, [sp, #-0x20]!
0000000100023f84	stp	x29, x30, [sp, #0x10]
0000000100023f88	add	x29, sp, #0x10
0000000100023f8c	mov	x19, x1
0000000100023f90	ldr	w8, [x0, #0x78]
0000000100023f94	cmp	w8, w19
0000000100023f98	b.eq	0x100023fc0
0000000100023f9c	ldr	x20, [x0, #0x118]
0000000100023fa0	cbz	x20, 0x100023fbc
0000000100023fa4	mov	x1, x19
0000000100023fa8	mov	x0, x20
0000000100023fac	bl	0x100023f80
0000000100023fb0	cbnz	x0, 0x100023fc0
0000000100023fb4	ldr	x20, [x20, #0x8]
0000000100023fb8	cbnz	x20, 0x100023fa4
0000000100023fbc	mov	x0, #0x0
0000000100023fc0	ldp	x29, x30, [sp, #0x10]
0000000100023fc4	ldp	x20, x19, [sp], #0x20
0000000100023fc8	ret
0000000100023fcc	sub	sp, sp, #0x90
0000000100023fd0	stp	x26, x25, [sp, #0x40]
0000000100023fd4	stp	x24, x23, [sp, #0x50]
0000000100023fd8	stp	x22, x21, [sp, #0x60]
0000000100023fdc	stp	x20, x19, [sp, #0x70]
0000000100023fe0	stp	x29, x30, [sp, #0x80]
0000000100023fe4	add	x29, sp, #0x80
0000000100023fe8	mov	x21, x4
0000000100023fec	mov	x25, x3
0000000100023ff0	mov	x22, x2
0000000100023ff4	mov	x23, x1
0000000100023ff8	mov	x19, x0
0000000100023ffc	str	x19, [sp, #0x18]
0000000100024000	ldr	w1, [x23, #0x14]
0000000100024004	orr	w2, wzr, #0x1
0000000100024008	add	x0, sp, #0x18
000000010002400c	bl	0x100023d80
0000000100024010	mov	x20, x0
0000000100024014	cbz	x20, 0x10002404c
0000000100024018	tbnz	w25, #0x1, 0x100024054
000000010002401c	tbnz	w25, #0x4, 0x1000240a0
0000000100024020	ldrb	w8, [x20, #0x135]
0000000100024024	tbz	w8, #0x1, 0x1000241b4
0000000100024028	ldr	x24, [x20, #0xc8]
000000010002402c	cbz	x24, 0x1000241b4
0000000100024030	add	x0, x24, #0x88
0000000100024034	mov	x1, x22
0000000100024038	bl	0x100031700 ; symbol stub for: _strcmp
000000010002403c	cbz	w0, 0x1000241a4
0000000100024040	ldr	x24, [x24, #0x8]
0000000100024044	cbnz	x24, 0x100024030
0000000100024048	b	0x1000241b4
000000010002404c	mov	w24, #0x71
0000000100024050	b	0x100024398
0000000100024054	ldr	q0, [x23, #0x10]
0000000100024058	str	q0, [sp, #0x30]
000000010002405c	ldr	q0, [x23]
0000000100024060	str	q0, [sp, #0x20]
0000000100024064	str	x22, [sp]
0000000100024068	adr	x1, #91381 ; literal pool for: "mach-register"
000000010002406c	nop
0000000100024070	orr	w2, wzr, #0x3
0000000100024074	add	x0, sp, #0x20
0000000100024078	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
000000010002407c	cbz	w0, 0x1000240b0
0000000100024080	adr	x3, #91334 ; literal pool for: "pid-local registration"
0000000100024084	nop
0000000100024088	orr	w24, wzr, #0x1
000000010002408c	orr	w2, wzr, #0x1
0000000100024090	mov	x0, x19
0000000100024094	mov	x1, x23
0000000100024098	bl	0x10001dc6c
000000010002409c	b	0x100024398
00000001000240a0	ldr	w8, [x20, #0x110]
00000001000240a4	cbz	w8, 0x1000240e0
00000001000240a8	mov	w24, #0x2d
00000001000240ac	b	0x100024220
00000001000240b0	ldr	x23, [x20, #0xb8]
00000001000240b4	cbz	x23, 0x1000240d0
00000001000240b8	add	x0, x23, #0x88
00000001000240bc	mov	x1, x22
00000001000240c0	bl	0x100031700 ; symbol stub for: _strcmp
00000001000240c4	cbz	w0, 0x100024138
00000001000240c8	ldr	x23, [x23, #0x8]
00000001000240cc	cbnz	x23, 0x1000240b8
00000001000240d0	ldr	w23, [x21]
00000001000240d4	cbz	w23, 0x100024140
00000001000240d8	mov	w3, #0x13
00000001000240dc	b	0x100024158
00000001000240e0	ldr	x23, [x20, #0xc0]
00000001000240e4	cbz	x23, 0x100024100
00000001000240e8	add	x0, x23, #0x88
00000001000240ec	mov	x1, x22
00000001000240f0	bl	0x100031700 ; symbol stub for: _strcmp
00000001000240f4	cbz	w0, 0x100024114
00000001000240f8	ldr	x23, [x23, #0x8]
00000001000240fc	cbnz	x23, 0x1000240e8
0000000100024100	mov	x0, x19
0000000100024104	mov	x1, x20
0000000100024108	mov	x2, x22
000000010002410c	bl	0x10001e498
0000000100024110	mov	x23, x0
0000000100024114	mov	x0, x23
0000000100024118	mov	x1, x21
000000010002411c	bl	0x10002ed08
0000000100024120	mov	x24, x0
0000000100024124	cbnz	w24, 0x100024220
0000000100024128	ldrb	w8, [x23, #0x50]
000000010002412c	orr	w8, w8, #0x4
0000000100024130	strb	w8, [x23, #0x50]
0000000100024134	b	0x100024370
0000000100024138	mov	w24, #0x25
000000010002413c	b	0x100024220
0000000100024140	orr	w0, wzr, #0x2
0000000100024144	orr	w1, wzr, #0x6
0000000100024148	mov	x2, #0x0
000000010002414c	bl	0x1000087d4
0000000100024150	mov	x23, x0
0000000100024154	orr	w3, wzr, #0x10
0000000100024158	adr	x4, #-23604
000000010002415c	nop
0000000100024160	mov	x2, x23
0000000100024164	mov	x0, x20
0000000100024168	mov	x1, x22
000000010002416c	mov	x5, x20
0000000100024170	bl	0x10002ec64
0000000100024174	mov	x8, x0
0000000100024178	ldrb	w9, [x8, #0x50]
000000010002417c	mov	w10, #0x5
0000000100024180	orr	w9, w9, w10
0000000100024184	strb	w9, [x8, #0x50]
0000000100024188	str	w23, [x21]
000000010002418c	orr	w3, wzr, #0x2
0000000100024190	mov	x0, x19
0000000100024194	mov	x1, x20
0000000100024198	mov	x2, x8
000000010002419c	bl	0x10001e764
00000001000241a0	b	0x100024370
00000001000241a4	mov	x0, x24
00000001000241a8	mov	x1, x21
00000001000241ac	bl	0x10002ed08
00000001000241b0	cbz	w0, 0x1000242ec
00000001000241b4	str	xzr, [sp, #0x20]
00000001000241b8	add	x4, sp, #0x20
00000001000241bc	mov	w2, #0x0
00000001000241c0	mov	x0, x19
00000001000241c4	mov	x1, x22
00000001000241c8	mov	x3, #0x0
00000001000241cc	bl	0x10001e2e0
00000001000241d0	cmp	w0, #0x0
00000001000241d4	cset	w8, ne
00000001000241d8	tst	w25, w8
00000001000241dc	orr	w8, wzr, #0x3
00000001000241e0	csinc	w24, w8, wzr, ne
00000001000241e4	cbz	w0, 0x100024230
00000001000241e8	cmp	w24, #0x3
00000001000241ec	b.ne	0x100024220
00000001000241f0	ldr	q0, [x23, #0x10]
00000001000241f4	str	q0, [sp, #0x30]
00000001000241f8	ldr	q0, [x23]
00000001000241fc	str	q0, [sp, #0x20]
0000000100024200	str	x22, [sp]
0000000100024204	adr	x1, #90969 ; literal pool for: "mach-register"
0000000100024208	nop
000000010002420c	orr	w2, wzr, #0x2
0000000100024210	add	x0, sp, #0x20
0000000100024214	bl	0x100031658 ; symbol stub for: _sandbox_check_by_audit_token
0000000100024218	cbz	w0, 0x100024274
000000010002421c	orr	w24, wzr, #0x1
0000000100024220	mov	x0, x19
0000000100024224	mov	x1, x20
0000000100024228	bl	0x100021168
000000010002422c	b	0x10002438c
0000000100024230	ldr	x26, [sp, #0x20]
0000000100024234	ldr	x8, [x26, #0x40]
0000000100024238	cbz	x8, 0x100024284
000000010002423c	add	x8, x20, #0x460
0000000100024240	add	x9, x26, #0x88
0000000100024244	stp	x8, x9, [sp]
0000000100024248	adr	x2, #90915 ; literal pool for: "Service \"%s\" tried to register for aliased endpoint: %s"
000000010002424c	nop
0000000100024250	orr	w1, wzr, #0x3
0000000100024254	mov	x0, x19
0000000100024258	bl	0x100019bfc
000000010002425c	orr	w24, wzr, #0x1
0000000100024260	mov	x0, x19
0000000100024264	mov	x1, x20
0000000100024268	bl	0x100021168
000000010002426c	cbnz	w24, 0x10002438c
0000000100024270	b	0x10002437c
0000000100024274	ldr	w23, [x21]
0000000100024278	cbz	w23, 0x100024308
000000010002427c	mov	w3, #0x13
0000000100024280	b	0x100024320
0000000100024284	ldrb	w8, [x26, #0x50]
0000000100024288	ubfx	w8, w8, #6, #1
000000010002428c	ubfx	w9, w25, #8, #1
0000000100024290	cmp	w9, w8
0000000100024294	b.ne	0x1000242c8
0000000100024298	mov	x0, x26
000000010002429c	bl	0x10002f310
00000001000242a0	cmp	x0, x20
00000001000242a4	b.eq	0x1000243b8
00000001000242a8	add	x8, x20, #0x460
00000001000242ac	add	x9, x26, #0x88
00000001000242b0	add	x10, x0, #0x460
00000001000242b4	stp	x9, x10, [sp, #0x8]
00000001000242b8	str	x8, [sp]
00000001000242bc	adr	x2, #90934 ; literal pool for: "Service \"%s\" tried to register for endpoint \"%s\" already registered by owner: %s"
00000001000242c0	nop
00000001000242c4	b	0x100024250
00000001000242c8	add	x8, x20, #0x460
00000001000242cc	add	x9, x26, #0x88
00000001000242d0	stp	x8, x9, [sp]
00000001000242d4	adr	x2, #90831 ; literal pool for: "Preventing \"%s\" from registering for %s due to non-launching property mismatch"
00000001000242d8	nop
00000001000242dc	orr	w1, wzr, #0x3
00000001000242e0	mov	x0, x19
00000001000242e4	bl	0x100019bfc
00000001000242e8	b	0x1000241f0
00000001000242ec	ldrh	w8, [x20, #0x134]
00000001000242f0	orr	w8, w8, #0x2000
00000001000242f4	strh	w8, [x20, #0x134]
00000001000242f8	ldrb	w8, [x24, #0x50]
00000001000242fc	orr	w8, w8, #0x4
0000000100024300	strb	w8, [x24, #0x50]
0000000100024304	b	0x100024370
0000000100024308	orr	w0, wzr, #0x2
000000010002430c	orr	w1, wzr, #0x2
0000000100024310	mov	x2, #0x0
0000000100024314	bl	0x1000087d4
0000000100024318	mov	x23, x0
000000010002431c	orr	w3, wzr, #0x10
0000000100024320	adr	x4, #-24060
0000000100024324	nop
0000000100024328	mov	x2, x23
000000010002432c	mov	x0, x20
0000000100024330	mov	x1, x22
0000000100024334	mov	x5, x20
0000000100024338	bl	0x10002ec64
000000010002433c	mov	x22, x0
0000000100024340	ldrb	w8, [x22, #0x50]
0000000100024344	orr	w8, w8, #0x4
0000000100024348	strb	w8, [x22, #0x50]
000000010002434c	str	w23, [x21]
0000000100024350	orr	w3, wzr, #0x1
0000000100024354	mov	x0, x19
0000000100024358	mov	x1, x20
000000010002435c	mov	x2, x22
0000000100024360	bl	0x10001e764
0000000100024364	mov	x0, x19
0000000100024368	mov	x1, x22
000000010002436c	bl	0x100022250
0000000100024370	mov	x0, x19
0000000100024374	mov	x1, x20
0000000100024378	bl	0x100021168
000000010002437c	mov	x0, x19
0000000100024380	mov	x1, x20
0000000100024384	bl	0x100021168
0000000100024388	mov	w24, #0x0
000000010002438c	mov	x0, x19
0000000100024390	mov	x1, x20
0000000100024394	bl	0x100021418
0000000100024398	mov	x0, x24
000000010002439c	ldp	x29, x30, [sp, #0x80]
00000001000243a0	ldp	x20, x19, [sp, #0x70]
00000001000243a4	ldp	x22, x21, [sp, #0x60]
00000001000243a8	ldp	x24, x23, [sp, #0x50]
00000001000243ac	ldp	x26, x25, [sp, #0x40]
00000001000243b0	add	sp, sp, #0x90
00000001000243b4	ret
00000001000243b8	ldr	w8, [x21]
00000001000243bc	cbz	w8, 0x1000243e4
00000001000243c0	add	x8, x20, #0x460
00000001000243c4	stp	x8, x22, [sp]
00000001000243c8	adr	x2, #90747 ; literal pool for: "Service tried to register a port for an endpoint declared in its launchd.plist(5): service = %s, endpoint = %s"
00000001000243cc	nop
00000001000243d0	orr	w1, wzr, #0x3
00000001000243d4	mov	x0, x19
00000001000243d8	bl	0x100019bfc
00000001000243dc	orr	w24, wzr, #0x38
00000001000243e0	b	0x100024260
00000001000243e4	mov	x0, x26
00000001000243e8	mov	x1, x21
00000001000243ec	bl	0x10002ed08
00000001000243f0	mov	x24, x0
00000001000243f4	cbnz	w24, 0x1000241e8
00000001000243f8	ldrh	w8, [x20, #0x134]
00000001000243fc	orr	w8, w8, #0x2000
0000000100024400	strh	w8, [x20, #0x134]
0000000100024404	ldrb	w8, [x26, #0x50]
0000000100024408	orr	w8, w8, #0x4
000000010002440c	strb	w8, [x26, #0x50]
0000000100024410	b	0x100024260
0000000100024414	stp	x26, x25, [sp, #-0x50]!
0000000100024418	stp	x24, x23, [sp, #0x10]
000000010002441c	stp	x22, x21, [sp, #0x20]
0000000100024420	stp	x20, x19, [sp, #0x30]
0000000100024424	stp	x29, x30, [sp, #0x40]
0000000100024428	add	x29, sp, #0x40
000000010002442c	mov	x19, x1
0000000100024430	mov	x8, x0
0000000100024434	ldr	w0, [x8, #0x14]
0000000100024438	mov	x1, x8
000000010002443c	bl	0x1000292ec
0000000100024440	cbz	x0, 0x100024510
0000000100024444	adr	x1, #69324 ; literal pool for: "com.apple.private.xpc.launchd.enable-disable-system-services"
0000000100024448	nop
000000010002444c	bl	0x100031a54 ; symbol stub for: _xpc_dictionary_get_array
0000000100024450	mov	x20, x0
0000000100024454	cbz	x20, 0x100024510
0000000100024458	mov	x0, x20
000000010002445c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100024460	nop
0000000100024464	ldr	x21, #0x1bc34 ; literal pool symbol address: __xpc_type_array
0000000100024468	cmp	x0, x21
000000010002446c	b.ne	0x100024528
0000000100024470	mov	x0, x19
0000000100024474	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100024478	cmp	x0, x21
000000010002447c	b.ne	0x100024528
0000000100024480	mov	x0, x20
0000000100024484	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100024488	mov	x21, x0
000000010002448c	mov	x0, x19
0000000100024490	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100024494	mov	x22, x0
0000000100024498	cbz	x21, 0x100024504
000000010002449c	cbz	x22, 0x10002450c
00000001000244a0	mov	x23, #0x0
00000001000244a4	mov	x0, x19
00000001000244a8	mov	x1, x23
00000001000244ac	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
00000001000244b0	mov	x24, x0
00000001000244b4	cbz	x24, 0x100024510
00000001000244b8	mov	x25, #0x0
00000001000244bc	mov	x0, x20
00000001000244c0	mov	x1, x25
00000001000244c4	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
00000001000244c8	mov	x8, x0
00000001000244cc	cbz	x8, 0x100024510
00000001000244d0	mov	x0, x24
00000001000244d4	mov	x1, x8
00000001000244d8	bl	0x100031700 ; symbol stub for: _strcmp
00000001000244dc	cbz	w0, 0x1000244f0
00000001000244e0	add	x25, x25, #0x1
00000001000244e4	cmp	x25, x21
00000001000244e8	b.lo	0x1000244bc
00000001000244ec	b	0x100024504
00000001000244f0	add	x23, x23, #0x1
00000001000244f4	orr	w0, wzr, #0x1
00000001000244f8	cmp	x23, x22
00000001000244fc	b.lo	0x1000244a4
0000000100024500	b	0x100024510
0000000100024504	mov	w0, #0x0
0000000100024508	b	0x100024510
000000010002450c	orr	w0, wzr, #0x1
0000000100024510	ldp	x29, x30, [sp, #0x40]
0000000100024514	ldp	x20, x19, [sp, #0x30]
0000000100024518	ldp	x22, x21, [sp, #0x20]
000000010002451c	ldp	x24, x23, [sp, #0x10]
0000000100024520	ldp	x26, x25, [sp], #0x50
0000000100024524	ret
0000000100024528	adr	x0, #90527 ; literal pool for: "Given object not of required type."
000000010002452c	nop
0000000100024530	bl	0x1000298d0
0000000100024534	sub	sp, sp, #0x50
0000000100024538	stp	x24, x23, [sp, #0x10]
000000010002453c	stp	x22, x21, [sp, #0x20]
0000000100024540	stp	x20, x19, [sp, #0x30]
0000000100024544	stp	x29, x30, [sp, #0x40]
0000000100024548	add	x29, sp, #0x40
000000010002454c	mov	x19, x1
0000000100024550	mov	x20, x0
0000000100024554	mov	x0, #0x0
0000000100024558	mov	x1, #0x0
000000010002455c	mov	x2, #0x0
0000000100024560	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100024564	mov	x21, x0
0000000100024568	ldr	x22, [x20, #0xa8]
000000010002456c	cbz	x22, 0x100024588
0000000100024570	add	x1, x22, #0x88
0000000100024574	mov	w2, #0x0
0000000100024578	mov	x0, x21
000000010002457c	bl	0x100031afc ; symbol stub for: _xpc_dictionary_set_mach_send
0000000100024580	ldr	x22, [x22, #0x8]
0000000100024584	cbnz	x22, 0x100024570
0000000100024588	ldr	x22, [x20, #0xb0]
000000010002458c	cbz	x22, 0x1000245a8
0000000100024590	add	x1, x22, #0x88
0000000100024594	mov	w2, #0x0
0000000100024598	mov	x0, x21
000000010002459c	bl	0x100031afc ; symbol stub for: _xpc_dictionary_set_mach_send
00000001000245a0	ldr	x22, [x22, #0x8]
00000001000245a4	cbnz	x22, 0x100024590
00000001000245a8	mov	x0, x21
00000001000245ac	bl	0x100031a78 ; symbol stub for: _xpc_dictionary_get_count
00000001000245b0	cbz	x0, 0x1000245c8
00000001000245b4	adr	x1, #64710 ; literal pool for: "MachServices"
00000001000245b8	nop
00000001000245bc	mov	x0, x19
00000001000245c0	mov	x2, x21
00000001000245c4	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000245c8	mov	x0, x21
00000001000245cc	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000245d0	mov	x0, #0x0
00000001000245d4	mov	x1, #0x0
00000001000245d8	mov	x2, #0x0
00000001000245dc	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
00000001000245e0	mov	x21, x0
00000001000245e4	ldr	x22, [x20, #0xb8]
00000001000245e8	cbz	x22, 0x100024604
00000001000245ec	add	x1, x22, #0x88
00000001000245f0	mov	w2, #0x0
00000001000245f4	mov	x0, x21
00000001000245f8	bl	0x100031afc ; symbol stub for: _xpc_dictionary_set_mach_send
00000001000245fc	ldr	x22, [x22, #0x8]
0000000100024600	cbnz	x22, 0x1000245ec
0000000100024604	mov	x0, x21
0000000100024608	bl	0x100031a78 ; symbol stub for: _xpc_dictionary_get_count
000000010002460c	cbz	x0, 0x100024624
0000000100024610	adr	x1, #90738 ; literal pool for: "PerJobMachServices"
0000000100024614	nop
0000000100024618	mov	x0, x19
000000010002461c	mov	x2, x21
0000000100024620	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100024624	mov	x0, x21
0000000100024628	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010002462c	mov	x0, #0x0
0000000100024630	mov	x1, #0x0
0000000100024634	mov	x2, #0x0
0000000100024638	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010002463c	mov	x21, x0
0000000100024640	ldr	x20, [x20, #0xd0]
0000000100024644	cbz	x20, 0x1000246bc
0000000100024648	stp	xzr, xzr, [sp]
000000010002464c	mov	x0, #0x0
0000000100024650	mov	x1, #0x0
0000000100024654	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
0000000100024658	mov	x22, x0
000000010002465c	add	x1, sp, #0x8
0000000100024660	mov	x2, sp
0000000100024664	mov	x0, x20
0000000100024668	bl	0x1000102c8
000000010002466c	ldr	x8, [sp]
0000000100024670	cbz	x8, 0x10002469c
0000000100024674	mov	x23, #0x0
0000000100024678	ldr	x8, [sp, #0x8]
000000010002467c	ldr	w2, [x8, x23, lsl #2]
0000000100024680	mov	x1, #-0x1
0000000100024684	mov	x0, x22
0000000100024688	bl	0x1000318f8 ; symbol stub for: _xpc_array_set_fd
000000010002468c	add	x23, x23, #0x1
0000000100024690	ldr	x8, [sp]
0000000100024694	cmp	x23, x8
0000000100024698	b.lo	0x100024678
000000010002469c	add	x1, x20, #0xc0
00000001000246a0	mov	x0, x21
00000001000246a4	mov	x2, x22
00000001000246a8	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000246ac	mov	x0, x22
00000001000246b0	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000246b4	ldr	x20, [x20, #0x8]
00000001000246b8	cbnz	x20, 0x100024648
00000001000246bc	mov	x0, x21
00000001000246c0	bl	0x100031a78 ; symbol stub for: _xpc_dictionary_get_count
00000001000246c4	cbz	x0, 0x1000246dc
00000001000246c8	adr	x1, #64388 ; literal pool for: "Sockets"
00000001000246cc	nop
00000001000246d0	mov	x0, x19
00000001000246d4	mov	x2, x21
00000001000246d8	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000246dc	mov	x0, x21
00000001000246e0	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000246e4	ldp	x29, x30, [sp, #0x40]
00000001000246e8	ldp	x20, x19, [sp, #0x30]
00000001000246ec	ldp	x22, x21, [sp, #0x20]
00000001000246f0	ldp	x24, x23, [sp, #0x10]
00000001000246f4	add	sp, sp, #0x50
00000001000246f8	ret
00000001000246fc	stp	x22, x21, [sp, #-0x30]!
0000000100024700	stp	x20, x19, [sp, #0x10]
0000000100024704	stp	x29, x30, [sp, #0x20]
0000000100024708	add	x29, sp, #0x20
000000010002470c	mov	x21, x1
0000000100024710	mov	x20, x0
0000000100024714	ldp	x19, x22, [x2]
0000000100024718	bl	0x10000e708
000000010002471c	cbz	w0, 0x100024780
0000000100024720	ldrb	w8, [x19, #0x3a0]
0000000100024724	tst	w8, #0x3
0000000100024728	b.eq	0x100024734
000000010002472c	orr	w2, wzr, #0x7c
0000000100024730	b	0x100024760
0000000100024734	ldp	x8, x3, [x19, #0x60]
0000000100024738	ldr	x8, [x8, #0x68]
000000010002473c	orr	w1, wzr, #0x3
0000000100024740	orr	w2, wzr, #0x4
0000000100024744	mov	x0, x19
0000000100024748	mov	x4, x22
000000010002474c	mov	x5, #0x0
0000000100024750	mov	x6, #0x0
0000000100024754	blr	x8
0000000100024758	mov	x2, x0
000000010002475c	cbz	w2, 0x100024780
0000000100024760	adr	x3, #90452 ; literal pool for: "set dyld environment variable"
0000000100024764	nop
0000000100024768	mov	x0, x19
000000010002476c	mov	x1, x22
0000000100024770	ldp	x29, x30, [sp, #0x20]
0000000100024774	ldp	x20, x19, [sp, #0x10]
0000000100024778	ldp	x22, x21, [sp], #0x30
000000010002477c	b	0x10001dc6c
0000000100024780	mov	x0, x21
0000000100024784	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100024788	nop
000000010002478c	ldr	x8, #0x1b954 ; literal pool symbol address: __xpc_type_string
0000000100024790	cmp	x0, x8
0000000100024794	b.eq	0x1000247b8
0000000100024798	nop
000000010002479c	ldr	x8, #0x1b93c ; literal pool symbol address: __xpc_type_null
00000001000247a0	cmp	x0, x8
00000001000247a4	b.eq	0x1000247d0
00000001000247a8	ldp	x29, x30, [sp, #0x20]
00000001000247ac	ldp	x20, x19, [sp, #0x10]
00000001000247b0	ldp	x22, x21, [sp], #0x30
00000001000247b4	ret
00000001000247b8	mov	x0, x21
00000001000247bc	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
00000001000247c0	mov	x2, x0
00000001000247c4	mov	x0, x19
00000001000247c8	mov	x1, x20
00000001000247cc	b	0x1000247dc
00000001000247d0	mov	x0, x19
00000001000247d4	mov	x1, x20
00000001000247d8	mov	x2, #0x0
00000001000247dc	ldp	x29, x30, [sp, #0x20]
00000001000247e0	ldp	x20, x19, [sp, #0x10]
00000001000247e4	ldp	x22, x21, [sp], #0x30
00000001000247e8	b	0x1000247ec
00000001000247ec	sub	sp, sp, #0x60
00000001000247f0	stp	x24, x23, [sp, #0x20]
00000001000247f4	stp	x22, x21, [sp, #0x30]
00000001000247f8	stp	x20, x19, [sp, #0x40]
00000001000247fc	stp	x29, x30, [sp, #0x50]
0000000100024800	add	x29, sp, #0x50
0000000100024804	mov	x21, x2
0000000100024808	mov	x20, x1
000000010002480c	mov	x19, x0
0000000100024810	mov	x23, x19
0000000100024814	ldr	x22, [x23, #0x50]!
0000000100024818	cbz	x22, 0x100024838
000000010002481c	mov	x0, x22
0000000100024820	mov	x1, x20
0000000100024824	bl	0x10000e684
0000000100024828	ldr	x8, [x22]
000000010002482c	tbnz	w0, #0x0, 0x100024840
0000000100024830	mov	x22, x8
0000000100024834	cbnz	x8, 0x10002481c
0000000100024838	cbnz	x21, 0x100024868
000000010002483c	b	0x1000248dc
0000000100024840	cbz	x8, 0x10002484c
0000000100024844	ldr	x9, [x22, #0x8]
0000000100024848	str	x9, [x8, #0x8]
000000010002484c	ldr	x9, [x22, #0x8]
0000000100024850	str	x8, [x9]
0000000100024854	mov	x8, #-0x1
0000000100024858	stp	x8, x8, [x22]
000000010002485c	mov	x0, x22
0000000100024860	bl	0x10000e704
0000000100024864	cbz	x21, 0x1000248dc
0000000100024868	str	xzr, [sp, #0x18]
000000010002486c	strb	wzr, [sp, #0x17]
0000000100024870	add	x2, sp, #0x18
0000000100024874	add	x4, sp, #0x17
0000000100024878	mov	w3, #0x0
000000010002487c	mov	x0, x20
0000000100024880	mov	x1, x21
0000000100024884	bl	0x10000e4dc
0000000100024888	cbz	x0, 0x1000248a8
000000010002488c	ldr	x8, [x23]
0000000100024890	str	x8, [x0]
0000000100024894	cbz	x8, 0x10002489c
0000000100024898	str	x0, [x8, #0x8]
000000010002489c	str	x0, [x23]
00000001000248a0	str	x23, [x0, #0x8]
00000001000248a4	b	0x1000248dc
00000001000248a8	ldrb	w8, [sp, #0x17]
00000001000248ac	adr	x9, #88339 ; literal pool for: "change"
00000001000248b0	nop
00000001000248b4	adr	x10, #88338 ; literal pool for: "set"
00000001000248b8	nop
00000001000248bc	cmp	w8, #0x0
00000001000248c0	csel	x8, x10, x9, eq
00000001000248c4	stp	x8, x20, [sp]
00000001000248c8	adr	x2, #90122 ; literal pool for: "Service tried to %s global environment variable with reserved name: %s"
00000001000248cc	nop
00000001000248d0	orr	w1, wzr, #0x3
00000001000248d4	mov	x0, x19
00000001000248d8	bl	0x100019bfc
00000001000248dc	ldp	x29, x30, [sp, #0x50]
00000001000248e0	ldp	x20, x19, [sp, #0x40]
00000001000248e4	ldp	x22, x21, [sp, #0x30]
00000001000248e8	ldp	x24, x23, [sp, #0x20]
00000001000248ec	add	sp, sp, #0x60
00000001000248f0	ret
00000001000248f4	sub	sp, sp, #0xc0
00000001000248f8	stp	x28, x27, [sp, #0x60]
00000001000248fc	stp	x26, x25, [sp, #0x70]
0000000100024900	stp	x24, x23, [sp, #0x80]
0000000100024904	stp	x22, x21, [sp, #0x90]
0000000100024908	stp	x20, x19, [sp, #0xa0]
000000010002490c	stp	x29, x30, [sp, #0xb0]
0000000100024910	add	x29, sp, #0xb0
0000000100024914	mov	x19, x1
0000000100024918	mov	x20, x0
000000010002491c	nop
0000000100024920	ldr	x8, #0x1b6f8 ; literal pool symbol address: ___stack_chk_guard
0000000100024924	ldr	x8, [x8]
0000000100024928	add	x9, sp, #0x18
000000010002492c	str	x8, [sp, #0x58]
0000000100024930	add	x25, x9, #0x10
0000000100024934	adr	x26, #65937 ; literal pool for: "(unknown)"
0000000100024938	nop
000000010002493c	orr	w21, wzr, #0x400
0000000100024940	adr	x22, #90292 ; literal pool for: "%s.%d"
0000000100024944	nop
0000000100024948	adr	x23, #90290 ; literal pool for: "<-%s.%d"
000000010002494c	nop
0000000100024950	mov	x24, x20
0000000100024954	add	x1, sp, #0x18
0000000100024958	mov	x0, x24
000000010002495c	bl	0x100029340
0000000100024960	cmp	w0, #0x0
0000000100024964	csel	x8, x25, x26, eq
0000000100024968	cmp	w24, w20
000000010002496c	b.ne	0x100024994
0000000100024970	subs	x27, x21, #0x1
0000000100024974	b.eq	0x1000249c8
0000000100024978	stp	x8, x20, [sp]
000000010002497c	mov	x3, #-0x1
0000000100024980	mov	w2, #0x0
0000000100024984	mov	x0, x19
0000000100024988	mov	x1, x21
000000010002498c	mov	x4, x22
0000000100024990	b	0x1000249b4
0000000100024994	subs	x27, x21, #0x1
0000000100024998	b.eq	0x1000249c8
000000010002499c	stp	x8, x24, [sp]
00000001000249a0	mov	x3, #-0x1
00000001000249a4	mov	w2, #0x0
00000001000249a8	mov	x0, x19
00000001000249ac	mov	x1, x21
00000001000249b0	mov	x4, x23
00000001000249b4	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
00000001000249b8	sxtw	x8, w0
00000001000249bc	cmp	x21, w0, sxtw
00000001000249c0	csel	x8, x8, x27, hi
00000001000249c4	b	0x1000249cc
00000001000249c8	mov	x8, #0x0
00000001000249cc	cmp	w24, #0x1
00000001000249d0	b.eq	0x1000249e4
00000001000249d4	add	x19, x19, x8
00000001000249d8	ldr	w24, [sp, #0x1c]
00000001000249dc	subs	x21, x21, x8
00000001000249e0	b.ne	0x100024954
00000001000249e4	ldr	x8, [sp, #0x58]
00000001000249e8	nop
00000001000249ec	ldr	x9, #0x1b62c ; literal pool symbol address: ___stack_chk_guard
00000001000249f0	ldr	x9, [x9]
00000001000249f4	cmp	x9, x8
00000001000249f8	b.ne	0x100024a1c
00000001000249fc	ldp	x29, x30, [sp, #0xb0]
0000000100024a00	ldp	x20, x19, [sp, #0xa0]
0000000100024a04	ldp	x22, x21, [sp, #0x90]
0000000100024a08	ldp	x24, x23, [sp, #0x80]
0000000100024a0c	ldp	x26, x25, [sp, #0x70]
0000000100024a10	ldp	x28, x27, [sp, #0x60]
0000000100024a14	add	sp, sp, #0xc0
0000000100024a18	ret
0000000100024a1c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100024a20	sub	sp, sp, #0x40
0000000100024a24	stp	x22, x21, [sp, #0x10]
0000000100024a28	stp	x20, x19, [sp, #0x20]
0000000100024a2c	stp	x29, x30, [sp, #0x30]
0000000100024a30	add	x29, sp, #0x30
0000000100024a34	mov	x19, x0
0000000100024a38	ldp	x20, x21, [x19, #0x20]
0000000100024a3c	nop
0000000100024a40	nop
0000000100024a44	ldr	x0, #0x1f9dc
0000000100024a48	add	x8, x20, #0x3a8
0000000100024a4c	str	x8, [sp]
0000000100024a50	adr	x2, #90308 ; literal pool for: "%s: obliteration complete, sending reply"
0000000100024a54	nop
0000000100024a58	mov	w1, #0x0
0000000100024a5c	bl	0x1000270c8
0000000100024a60	mov	x0, x21
0000000100024a64	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
0000000100024a68	orr	w8, w0, #0x20
0000000100024a6c	cmp	w8, #0x20
0000000100024a70	b.eq	0x100024a8c
0000000100024a74	sxtw	x2, w0
0000000100024a78	adr	x0, #-44724
0000000100024a7c	nop
0000000100024a80	mov	x1, x20
0000000100024a84	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100024a88	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100024a8c	ldr	x0, [x19, #0x20]
0000000100024a90	orr	w1, wzr, #0xe
0000000100024a94	bl	0x10000e4a4
0000000100024a98	ldr	x0, [x19, #0x28]
0000000100024a9c	ldp	x29, x30, [sp, #0x30]
0000000100024aa0	ldp	x20, x19, [sp, #0x20]
0000000100024aa4	ldp	x22, x21, [sp, #0x10]
0000000100024aa8	add	sp, sp, #0x40
0000000100024aac	b	0x100031b68 ; symbol stub for: _xpc_release
0000000100024ab0	sub	sp, sp, #0x90
0000000100024ab4	stp	x20, x19, [sp, #0x70]
0000000100024ab8	stp	x29, x30, [sp, #0x80]
0000000100024abc	add	x29, sp, #0x80
0000000100024ac0	mov	x20, x1
0000000100024ac4	mov	x19, x0
0000000100024ac8	nop
0000000100024acc	ldr	x8, #0x1b54c ; literal pool symbol address: ___stack_chk_guard
0000000100024ad0	ldr	x8, [x8]
0000000100024ad4	stur	x8, [x29, #-0x18]
0000000100024ad8	orr	x8, xzr, #0xfffffffffffffffe
0000000100024adc	stp	x8, x8, [sp, #0x18]
0000000100024ae0	add	x1, sp, #0x18
0000000100024ae4	add	x2, sp, #0x20
0000000100024ae8	mov	x0, x20
0000000100024aec	bl	0x100029624
0000000100024af0	mov	x0, x20
0000000100024af4	bl	0x100029818
0000000100024af8	mov	x20, x0
0000000100024afc	cbz	x20, 0x100024b94
0000000100024b00	ldr	x8, [sp, #0x20]
0000000100024b04	cmn	x8, #0x1
0000000100024b08	b.eq	0x100024b1c
0000000100024b0c	adr	x4, #65961 ; literal pool for: "%lld"
0000000100024b10	nop
0000000100024b14	str	x8, [sp]
0000000100024b18	b	0x100024b24
0000000100024b1c	adr	x4, #90199 ; literal pool for: "unlimited"
0000000100024b20	nop
0000000100024b24	sub	x0, x29, #0x38
0000000100024b28	orr	w1, wzr, #0x20
0000000100024b2c	orr	w3, wzr, #0x20
0000000100024b30	mov	w2, #0x0
0000000100024b34	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100024b38	ldr	x8, [sp, #0x18]
0000000100024b3c	cmn	x8, #0x1
0000000100024b40	b.eq	0x100024b54
0000000100024b44	adr	x4, #65905 ; literal pool for: "%lld"
0000000100024b48	nop
0000000100024b4c	str	x8, [sp]
0000000100024b50	b	0x100024b5c
0000000100024b54	adr	x4, #90143 ; literal pool for: "unlimited"
0000000100024b58	nop
0000000100024b5c	add	x0, sp, #0x28
0000000100024b60	orr	w1, wzr, #0x20
0000000100024b64	orr	w3, wzr, #0x20
0000000100024b68	mov	w2, #0x0
0000000100024b6c	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100024b70	sub	x8, x29, #0x38
0000000100024b74	str	x8, [sp, #0x10]
0000000100024b78	add	x8, sp, #0x28
0000000100024b7c	stp	x20, x8, [sp]
0000000100024b80	adr	x2, #90109 ; literal pool for: "%-12s%-15s%-15s"
0000000100024b84	nop
0000000100024b88	orr	w1, wzr, #0x1
0000000100024b8c	mov	x0, x19
0000000100024b90	bl	0x10002a548
0000000100024b94	ldur	x8, [x29, #-0x18]
0000000100024b98	nop
0000000100024b9c	ldr	x9, #0x1b47c ; literal pool symbol address: ___stack_chk_guard
0000000100024ba0	ldr	x9, [x9]
0000000100024ba4	cmp	x9, x8
0000000100024ba8	b.ne	0x100024bbc
0000000100024bac	ldp	x29, x30, [sp, #0x80]
0000000100024bb0	ldp	x20, x19, [sp, #0x70]
0000000100024bb4	add	sp, sp, #0x90
0000000100024bb8	ret
0000000100024bbc	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100024bc0	sub	sp, sp, #0x110
0000000100024bc4	stp	d9, d8, [sp, #0xa0]
0000000100024bc8	stp	x28, x27, [sp, #0xb0]
0000000100024bcc	stp	x26, x25, [sp, #0xc0]
0000000100024bd0	stp	x24, x23, [sp, #0xd0]
0000000100024bd4	stp	x22, x21, [sp, #0xe0]
0000000100024bd8	stp	x20, x19, [sp, #0xf0]
0000000100024bdc	stp	x29, x30, [sp, #0x100]
0000000100024be0	add	x29, sp, #0x100
0000000100024be4	mov	x19, x1
0000000100024be8	mov	x20, x0
0000000100024bec	nop
0000000100024bf0	ldr	x8, #0x1b428 ; literal pool symbol address: ___stack_chk_guard
0000000100024bf4	ldr	x8, [x8]
0000000100024bf8	stur	x8, [x29, #-0x68]
0000000100024bfc	add	x8, x20, #0x3a8
0000000100024c00	str	x8, [sp]
0000000100024c04	adr	x2, #77699 ; literal pool for: "%s = {"
0000000100024c08	nop
0000000100024c0c	mov	x0, x19
0000000100024c10	mov	x1, #0x0
0000000100024c14	bl	0x10002a548
0000000100024c18	ldr	x8, [x20, #0x60]
0000000100024c1c	ldr	x8, [x8, #0x70]
0000000100024c20	str	x8, [sp]
0000000100024c24	adr	x2, #69006 ; literal pool for: "type = %s"
0000000100024c28	nop
0000000100024c2c	orr	w1, wzr, #0x1
0000000100024c30	mov	x0, x19
0000000100024c34	bl	0x10002a548
0000000100024c38	ldr	x8, [x20, #0x68]
0000000100024c3c	str	x8, [sp]
0000000100024c40	adr	x2, #90249 ; literal pool for: "handle = %lu"
0000000100024c44	nop
0000000100024c48	orr	w1, wzr, #0x1
0000000100024c4c	mov	x0, x19
0000000100024c50	bl	0x10002a548
0000000100024c54	ldr	w8, [x20, #0x94]
0000000100024c58	str	x8, [sp]
0000000100024c5c	adr	x2, #77618 ; literal pool for: "active count = %d"
0000000100024c60	nop
0000000100024c64	orr	w1, wzr, #0x1
0000000100024c68	mov	x0, x19
0000000100024c6c	bl	0x10002a548
0000000100024c70	ldr	w8, [x20, #0x98]
0000000100024c74	str	x8, [sp]
0000000100024c78	adr	x2, #90206 ; literal pool for: "on-demand count = %d"
0000000100024c7c	nop
0000000100024c80	orr	w1, wzr, #0x1
0000000100024c84	mov	x0, x19
0000000100024c88	bl	0x10002a548
0000000100024c8c	ldr	w8, [x20, #0x9c]
0000000100024c90	cbz	w8, 0x100024cf0
0000000100024c94	ldr	w9, [x20, #0xa0]
0000000100024c98	ucvtf	d0, w9
0000000100024c9c	ucvtf	d1, w8
0000000100024ca0	fdiv	d8, d0, d1
0000000100024ca4	str	x8, [sp]
0000000100024ca8	adr	x2, #90179 ; literal pool for: "service count = %u"
0000000100024cac	nop
0000000100024cb0	orr	w1, wzr, #0x1
0000000100024cb4	mov	x0, x19
0000000100024cb8	bl	0x10002a548
0000000100024cbc	ldr	w8, [x20, #0xa0]
0000000100024cc0	str	x8, [sp]
0000000100024cc4	adr	x2, #90170 ; literal pool for: "active service count = %u"
0000000100024cc8	nop
0000000100024ccc	orr	w1, wzr, #0x1
0000000100024cd0	mov	x0, x19
0000000100024cd4	bl	0x10002a548
0000000100024cd8	str	d8, [sp]
0000000100024cdc	adr	x2, #90172 ; literal pool for: "activity ratio = %.2f"
0000000100024ce0	nop
0000000100024ce4	orr	w1, wzr, #0x1
0000000100024ce8	mov	x0, x19
0000000100024cec	bl	0x10002a548
0000000100024cf0	adrp	x24, 31 ; 0x100043000
0000000100024cf4	ldr	x8, [x24, #0xcf8]
0000000100024cf8	cmp	x8, x20
0000000100024cfc	b.ne	0x100024d24
0000000100024d00	nop
0000000100024d04	nop
0000000100024d08	ldr	w8, 0x10004350c
0000000100024d0c	str	x8, [sp]
0000000100024d10	adr	x2, #90142 ; literal pool for: "maximum allowed shutdown time = %d s"
0000000100024d14	nop
0000000100024d18	orr	w1, wzr, #0x1
0000000100024d1c	mov	x0, x19
0000000100024d20	bl	0x10002a548
0000000100024d24	ldr	x0, [x20, #0xc8]
0000000100024d28	cbz	x0, 0x100024d48
0000000100024d2c	bl	0x10003197c ; symbol stub for: _xpc_bundle_get_path
0000000100024d30	str	x0, [sp]
0000000100024d34	adr	x2, #90143 ; literal pool for: "originator = %s"
0000000100024d38	nop
0000000100024d3c	orr	w1, wzr, #0x1
0000000100024d40	mov	x0, x19
0000000100024d44	bl	0x10002a548
0000000100024d48	ldr	x8, [x20, #0x110]
0000000100024d4c	ldr	w9, [x20, #0x104]
0000000100024d50	stp	x8, x9, [sp]
0000000100024d54	adr	x2, #90127 ; literal pool for: "creator = %s.%d"
0000000100024d58	nop
0000000100024d5c	orr	w1, wzr, #0x1
0000000100024d60	mov	x0, x19
0000000100024d64	bl	0x10002a548
0000000100024d68	ldr	w8, [x20, #0xf4]
0000000100024d6c	str	x8, [sp]
0000000100024d70	adr	x2, #90115 ; literal pool for: "creator euid = %d"
0000000100024d74	nop
0000000100024d78	orr	w1, wzr, #0x1
0000000100024d7c	mov	x0, x19
0000000100024d80	bl	0x10002a548
0000000100024d84	ldr	x8, [x20, #0x60]
0000000100024d88	adr	x22, #124048
0000000100024d8c	nop
0000000100024d90	cmp	x8, x22
0000000100024d94	b.ne	0x100024db4
0000000100024d98	ldr	x8, [x20, #0x70]
0000000100024d9c	str	x8, [sp]
0000000100024da0	adr	x2, #90085 ; literal pool for: "uniqueid = %llu"
0000000100024da4	nop
0000000100024da8	orr	w1, wzr, #0x1
0000000100024dac	mov	x0, x19
0000000100024db0	bl	0x10002a548
0000000100024db4	adr	x2, #90081 ; literal pool for: "security context = {"
0000000100024db8	nop
0000000100024dbc	orr	w1, wzr, #0x1
0000000100024dc0	mov	x0, x19
0000000100024dc4	bl	0x10002a548
0000000100024dc8	ldrb	w8, [x20, #0x58]
0000000100024dcc	tbnz	w8, #0x0, 0x100024ddc
0000000100024dd0	adr	x2, #90083 ; literal pool for: "uid unset"
0000000100024dd4	nop
0000000100024dd8	b	0x100024dec
0000000100024ddc	ldr	w8, [x20, #0x30]
0000000100024de0	str	x8, [sp]
0000000100024de4	adr	x2, #90054 ; literal pool for: "uid = %u"
0000000100024de8	nop
0000000100024dec	orr	w1, wzr, #0x2
0000000100024df0	mov	x0, x19
0000000100024df4	bl	0x10002a548
0000000100024df8	ldr	w8, [x20, #0x34]
0000000100024dfc	str	x8, [sp]
0000000100024e00	adr	x2, #90045 ; literal pool for: "persona id = %u"
0000000100024e04	nop
0000000100024e08	orr	w1, wzr, #0x2
0000000100024e0c	mov	x0, x19
0000000100024e10	bl	0x10002a548
0000000100024e14	adr	x2, #67439 ; literal pool for: "}"
0000000100024e18	nop
0000000100024e1c	orr	w1, wzr, #0x1
0000000100024e20	mov	x0, x19
0000000100024e24	bl	0x10002a548
0000000100024e28	mov	x0, x19
0000000100024e2c	bl	0x10002a5c4
0000000100024e30	ldr	x8, [x20, #0xe0]
0000000100024e34	cbz	x8, 0x100024e68
0000000100024e38	mov	x9, #0x34db
0000000100024e3c	movk	x9, #0xd7b6, lsl #16
0000000100024e40	movk	x9, #0xde82, lsl #32
0000000100024e44	movk	x9, #0x431b, lsl #48
0000000100024e48	umulh	x8, x8, x9
0000000100024e4c	lsr	x8, x8, #18
0000000100024e50	str	x8, [sp]
0000000100024e54	adr	x2, #89977 ; literal pool for: "bringup time = %llu ms"
0000000100024e58	nop
0000000100024e5c	orr	w1, wzr, #0x1
0000000100024e60	mov	x0, x19
0000000100024e64	bl	0x10002a548
0000000100024e68	ldr	x8, [x20, #0xd0]
0000000100024e6c	cbz	x8, 0x100024eb8
0000000100024e70	adr	x2, #89972 ; literal pool for: "xpc service paths = {"
0000000100024e74	nop
0000000100024e78	orr	w1, wzr, #0x1
0000000100024e7c	mov	x0, x19
0000000100024e80	bl	0x10002a548
0000000100024e84	stp	xzr, x19, [sp, #0x58]
0000000100024e88	orr	w8, wzr, #0x2
0000000100024e8c	str	x8, [sp, #0x68]
0000000100024e90	ldr	x0, [x20, #0xd0]
0000000100024e94	adr	x2, #1984
0000000100024e98	nop
0000000100024e9c	add	x1, sp, #0x58
0000000100024ea0	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100024ea4	adr	x2, #67295 ; literal pool for: "}"
0000000100024ea8	nop
0000000100024eac	orr	w1, wzr, #0x1
0000000100024eb0	mov	x0, x19
0000000100024eb4	bl	0x10002a548
0000000100024eb8	ldr	w8, [x20, #0x7c]
0000000100024ebc	str	x8, [sp]
0000000100024ec0	adr	x2, #89914 ; literal pool for: "death port = 0x%x"
0000000100024ec4	nop
0000000100024ec8	orr	w1, wzr, #0x1
0000000100024ecc	mov	x0, x19
0000000100024ed0	bl	0x10002a548
0000000100024ed4	mov	x0, x19
0000000100024ed8	bl	0x10002a5c4
0000000100024edc	ldrh	w8, [x20, #0xa4]
0000000100024ee0	str	x8, [sp]
0000000100024ee4	adr	x2, #89896 ; literal pool for: "in-progress bootstraps = %hu"
0000000100024ee8	nop
0000000100024eec	orr	w1, wzr, #0x1
0000000100024ef0	mov	x0, x19
0000000100024ef4	bl	0x10002a548
0000000100024ef8	ldr	x8, [x20, #0xa8]
0000000100024efc	cbz	x8, 0x100024f14
0000000100024f00	mov	x9, #0x0
0000000100024f04	add	x9, x9, #0x1
0000000100024f08	ldr	x8, [x8]
0000000100024f0c	cbnz	x8, 0x100024f04
0000000100024f10	b	0x100024f18
0000000100024f14	mov	x9, #0x0
0000000100024f18	str	x9, [sp]
0000000100024f1c	adr	x2, #89869 ; literal pool for: "pended requests = %lu"
0000000100024f20	nop
0000000100024f24	orr	w1, wzr, #0x1
0000000100024f28	mov	x0, x19
0000000100024f2c	bl	0x10002a548
0000000100024f30	adr	x2, #89871 ; literal pool for: "pending requests = {"
0000000100024f34	nop
0000000100024f38	orr	w1, wzr, #0x1
0000000100024f3c	mov	x0, x19
0000000100024f40	bl	0x10002a548
0000000100024f44	ldr	x23, [x20, #0xa8]
0000000100024f48	cbz	x23, 0x100024f94
0000000100024f4c	adr	x21, #89864 ; literal pool for: "caller = %s.%d, event = %d"
0000000100024f50	nop
0000000100024f54	ldr	x0, [x23, #0x18]
0000000100024f58	add	x1, sp, #0x38
0000000100024f5c	bl	0x100031a60 ; symbol stub for: _xpc_dictionary_get_audit_token
0000000100024f60	add	x0, sp, #0x38
0000000100024f64	add	x1, sp, #0x58
0000000100024f68	bl	0x1000293c0
0000000100024f6c	ldr	w8, [sp, #0x4c]
0000000100024f70	ldr	w9, [x23, #0x20]
0000000100024f74	stp	x8, x9, [sp, #0x8]
0000000100024f78	orr	w1, wzr, #0x2
0000000100024f7c	str	x0, [sp]
0000000100024f80	mov	x0, x19
0000000100024f84	mov	x2, x21
0000000100024f88	bl	0x10002a548
0000000100024f8c	ldr	x23, [x23]
0000000100024f90	cbnz	x23, 0x100024f54
0000000100024f94	adr	x2, #67055 ; literal pool for: "}"
0000000100024f98	nop
0000000100024f9c	orr	w1, wzr, #0x1
0000000100024fa0	mov	x0, x19
0000000100024fa4	bl	0x10002a548
0000000100024fa8	adr	x2, #89799 ; literal pool for: "subdomains = {"
0000000100024fac	nop
0000000100024fb0	orr	w1, wzr, #0x1
0000000100024fb4	mov	x0, x19
0000000100024fb8	bl	0x10002a548
0000000100024fbc	ldr	x23, [x20, #0x118]
0000000100024fc0	cbz	x23, 0x100025004
0000000100024fc4	adr	x21, #66790 ; literal pool for: "%s"
0000000100024fc8	nop
0000000100024fcc	ldr	x8, [x23, #0x60]
0000000100024fd0	cmp	x8, x22
0000000100024fd4	b.eq	0x100024ff4
0000000100024fd8	add	x8, x23, #0x3a8
0000000100024fdc	str	x8, [sp]
0000000100024fe0	orr	w1, wzr, #0x2
0000000100024fe4	mov	x0, x19
0000000100024fe8	mov	x2, x21
0000000100024fec	bl	0x10002a548
0000000100024ff0	b	0x100024ffc
0000000100024ff4	ldr	x8, [x23, #0xd0]
0000000100024ff8	cbz	x8, 0x100024fd8
0000000100024ffc	ldr	x23, [x23, #0x8]
0000000100025000	cbnz	x23, 0x100024fcc
0000000100025004	adr	x2, #66943 ; literal pool for: "}"
0000000100025008	nop
000000010002500c	orr	w1, wzr, #0x1
0000000100025010	mov	x0, x19
0000000100025014	bl	0x10002a548
0000000100025018	adr	x2, #89702 ; literal pool for: "pending attachments = {"
000000010002501c	nop
0000000100025020	orr	w1, wzr, #0x1
0000000100025024	mov	x0, x19
0000000100025028	bl	0x10002a548
000000010002502c	str	x20, [sp, #0x30]
0000000100025030	ldr	x20, [x20, #0x28]
0000000100025034	cbz	x20, 0x100025060
0000000100025038	adr	x21, #66674 ; literal pool for: "%s"
000000010002503c	nop
0000000100025040	ldr	x8, [x20, #0x10]
0000000100025044	str	x8, [sp]
0000000100025048	orr	w1, wzr, #0x2
000000010002504c	mov	x0, x19
0000000100025050	mov	x2, x21
0000000100025054	bl	0x10002a548
0000000100025058	ldr	x20, [x20]
000000010002505c	cbnz	x20, 0x100025040
0000000100025060	adr	x2, #66851 ; literal pool for: "}"
0000000100025064	nop
0000000100025068	orr	w1, wzr, #0x1
000000010002506c	mov	x0, x19
0000000100025070	bl	0x10002a548
0000000100025074	ldr	x8, [x24, #0xcf8]
0000000100025078	ldr	x20, [sp, #0x30]
000000010002507c	cmp	x8, x20
0000000100025080	b.ne	0x100025090
0000000100025084	mov	x0, x19
0000000100025088	mov	x1, #0x0
000000010002508c	bl	0x100016464
0000000100025090	mov	x0, x19
0000000100025094	bl	0x10002a5c4
0000000100025098	adr	x2, #76919 ; literal pool for: "environment = {"
000000010002509c	nop
00000001000250a0	orr	w1, wzr, #0x1
00000001000250a4	mov	x0, x19
00000001000250a8	bl	0x10002a548
00000001000250ac	ldr	x21, [x20, #0x50]
00000001000250b0	cbz	x21, 0x1000250cc
00000001000250b4	orr	w1, wzr, #0x2
00000001000250b8	mov	x0, x21
00000001000250bc	mov	x2, x19
00000001000250c0	bl	0x10000e610
00000001000250c4	ldr	x21, [x21]
00000001000250c8	cbnz	x21, 0x1000250b4
00000001000250cc	adr	x2, #66743 ; literal pool for: "}"
00000001000250d0	nop
00000001000250d4	orr	w1, wzr, #0x1
00000001000250d8	mov	x0, x19
00000001000250dc	bl	0x10002a548
00000001000250e0	mov	x0, x19
00000001000250e4	bl	0x10002a5c4
00000001000250e8	adr	x2, #89518 ; literal pool for: "services = {"
00000001000250ec	nop
00000001000250f0	orr	w1, wzr, #0x1
00000001000250f4	mov	x0, x19
00000001000250f8	bl	0x10002a548
00000001000250fc	mov	x22, #0x0
0000000100025100	add	x8, x20, x22, lsl #3
0000000100025104	ldr	x21, [x8, #0x128]
0000000100025108	cbz	x21, 0x100025124
000000010002510c	orr	w2, wzr, #0x2
0000000100025110	mov	x0, x21
0000000100025114	mov	x1, x19
0000000100025118	bl	0x100017e04
000000010002511c	ldr	x21, [x21, #0x48]
0000000100025120	cbnz	x21, 0x10002510c
0000000100025124	add	x22, x22, #0x1
0000000100025128	cmp	x22, #0x17
000000010002512c	b.ne	0x100025100
0000000100025130	adr	x21, #66643 ; literal pool for: "}"
0000000100025134	nop
0000000100025138	orr	w1, wzr, #0x1
000000010002513c	mov	x0, x19
0000000100025140	mov	x2, x21
0000000100025144	bl	0x10002a548
0000000100025148	mov	x0, x19
000000010002514c	bl	0x10002a5c4
0000000100025150	adr	x2, #89427 ; literal pool for: "unmanaged processes = {"
0000000100025154	nop
0000000100025158	orr	w1, wzr, #0x1
000000010002515c	mov	x0, x19
0000000100025160	bl	0x10002a548
0000000100025164	mov	x28, #0x0
0000000100025168	adr	x22, #76319 ; literal pool for: "%s = {"
000000010002516c	nop
0000000100025170	adr	x23, #76318 ; literal pool for: "active count = %d"
0000000100025174	nop
0000000100025178	adr	x24, #77446 ; literal pool for: "dynamic endpoints = {"
000000010002517c	nop
0000000100025180	adr	x25, #77460 ; literal pool for: "pid-local endpoints = {"
0000000100025184	nop
0000000100025188	add	x8, x20, x28, lsl #3
000000010002518c	ldr	x27, [x8, #0x248]
0000000100025190	cbz	x27, 0x10002525c
0000000100025194	add	x8, x27, #0x460
0000000100025198	str	x8, [sp]
000000010002519c	orr	w1, wzr, #0x2
00000001000251a0	mov	x0, x19
00000001000251a4	mov	x2, x22
00000001000251a8	bl	0x10002a548
00000001000251ac	ldrsh	x8, [x27, #0x114]
00000001000251b0	str	x8, [sp]
00000001000251b4	orr	w1, wzr, #0x3
00000001000251b8	mov	x0, x19
00000001000251bc	mov	x2, x23
00000001000251c0	bl	0x10002a548
00000001000251c4	orr	w1, wzr, #0x3
00000001000251c8	mov	x0, x19
00000001000251cc	mov	x2, x24
00000001000251d0	bl	0x10002a548
00000001000251d4	ldr	x26, [x27, #0xb0]
00000001000251d8	cbz	x26, 0x1000251f4
00000001000251dc	orr	w2, wzr, #0x4
00000001000251e0	mov	x0, x26
00000001000251e4	mov	x1, x19
00000001000251e8	bl	0x10002f360
00000001000251ec	ldr	x26, [x26, #0x8]
00000001000251f0	cbnz	x26, 0x1000251dc
00000001000251f4	orr	w1, wzr, #0x3
00000001000251f8	mov	x0, x19
00000001000251fc	mov	x2, x21
0000000100025200	bl	0x10002a548
0000000100025204	orr	w1, wzr, #0x3
0000000100025208	mov	x0, x19
000000010002520c	mov	x2, x25
0000000100025210	bl	0x10002a548
0000000100025214	ldr	x26, [x27, #0xb8]
0000000100025218	cbz	x26, 0x100025234
000000010002521c	orr	w2, wzr, #0x4
0000000100025220	mov	x0, x26
0000000100025224	mov	x1, x19
0000000100025228	bl	0x10002f360
000000010002522c	ldr	x26, [x26, #0x8]
0000000100025230	cbnz	x26, 0x10002521c
0000000100025234	orr	w1, wzr, #0x3
0000000100025238	mov	x0, x19
000000010002523c	mov	x2, x21
0000000100025240	bl	0x10002a548
0000000100025244	orr	w1, wzr, #0x2
0000000100025248	mov	x0, x19
000000010002524c	mov	x2, x21
0000000100025250	bl	0x10002a548
0000000100025254	ldr	x27, [x27, #0x48]
0000000100025258	cbnz	x27, 0x100025194
000000010002525c	add	x28, x28, #0x1
0000000100025260	cmp	x28, #0x7
0000000100025264	b.ne	0x100025188
0000000100025268	adr	x2, #66331 ; literal pool for: "}"
000000010002526c	nop
0000000100025270	orr	w1, wzr, #0x1
0000000100025274	mov	x0, x19
0000000100025278	bl	0x10002a548
000000010002527c	mov	x0, x19
0000000100025280	bl	0x10002a5c4
0000000100025284	adr	x2, #77164 ; literal pool for: "endpoints = {"
0000000100025288	nop
000000010002528c	orr	w1, wzr, #0x1
0000000100025290	mov	x0, x19
0000000100025294	bl	0x10002a548
0000000100025298	mov	x23, #0x0
000000010002529c	mov	w25, #0x4d
00000001000252a0	mov	w26, #0x41
00000001000252a4	mov	w27, #0x44
00000001000252a8	adr	x21, #89249 ; literal pool for: "%#8x %4c%4c   %s"
00000001000252ac	nop
00000001000252b0	add	x8, x20, x23, lsl #3
00000001000252b4	ldr	x28, [x8, #0x280]
00000001000252b8	cbz	x28, 0x100025320
00000001000252bc	ldr	x8, [x28, #0x40]
00000001000252c0	cmp	x8, #0x0
00000001000252c4	csel	x22, x28, x8, eq
00000001000252c8	ldrb	w24, [x22, #0x50]
00000001000252cc	cbz	x8, 0x1000252d8
00000001000252d0	mov	w20, #0x41
00000001000252d4	b	0x1000252ec
00000001000252d8	mov	x0, x22
00000001000252dc	bl	0x10002f334
00000001000252e0	cmp	w0, #0x0
00000001000252e4	mov	w8, #0x55
00000001000252e8	csel	w20, w25, w8, ne
00000001000252ec	mov	x0, x22
00000001000252f0	bl	0x10002f2ec
00000001000252f4	tst	w24, #0x4
00000001000252f8	csel	w8, w27, w26, eq
00000001000252fc	add	x9, x22, #0x88
0000000100025300	stp	x8, x9, [sp, #0x10]
0000000100025304	orr	w1, wzr, #0x2
0000000100025308	stp	x0, x20, [sp]
000000010002530c	mov	x0, x19
0000000100025310	mov	x2, x21
0000000100025314	bl	0x10002a548
0000000100025318	ldr	x28, [x28, #0x18]
000000010002531c	cbnz	x28, 0x1000252bc
0000000100025320	add	x23, x23, #0x1
0000000100025324	cmp	x23, #0x1f
0000000100025328	ldr	x20, [sp, #0x30]
000000010002532c	b.ne	0x1000252b0
0000000100025330	adr	x2, #66131 ; literal pool for: "}"
0000000100025334	nop
0000000100025338	orr	w1, wzr, #0x1
000000010002533c	mov	x0, x19
0000000100025340	bl	0x10002a548
0000000100025344	mov	x0, x19
0000000100025348	bl	0x10002a5c4
000000010002534c	adr	x2, #88943 ; literal pool for: "task-special ports = {"
0000000100025350	nop
0000000100025354	orr	w1, wzr, #0x1
0000000100025358	mov	x0, x19
000000010002535c	bl	0x10002a548
0000000100025360	ldr	x25, [x20, #0x48]
0000000100025364	adrp	x28, 30 ; 0x100043000
0000000100025368	cbz	x25, 0x1000253fc
000000010002536c	adr	x26, #83512 ; literal pool for: "exception"
0000000100025370	nop
0000000100025374	adr	x27, #63313 ; literal pool for: "(unknown)"
0000000100025378	nop
000000010002537c	adr	x21, #89054 ; literal pool for: "%#8x %-4u %12s  %s"
0000000100025380	nop
0000000100025384	ldr	w0, [x25, #0x14]
0000000100025388	mov	x22, x26
000000010002538c	cmp	w0, #0x80
0000000100025390	b.eq	0x10002539c
0000000100025394	bl	0x1000312e0 ; symbol stub for: _mach_task_special_port_description
0000000100025398	mov	x22, x0
000000010002539c	ldr	w23, [x25, #0x10]
00000001000253a0	ldr	x24, [x28, #0xcf8]
00000001000253a4	mov	x1, x23
00000001000253a8	mov	x0, x24
00000001000253ac	bl	0x100023f80
00000001000253b0	cbz	x0, 0x1000253bc
00000001000253b4	add	x8, x0, #0x3a8
00000001000253b8	b	0x1000253d8
00000001000253bc	mov	x1, x23
00000001000253c0	mov	x0, x24
00000001000253c4	bl	0x10001d804
00000001000253c8	add	x8, x0, #0x88
00000001000253cc	cmp	x0, #0x0
00000001000253d0	csel	x8, x27, x8, eq
00000001000253d4	ldr	w23, [x25, #0x10]
00000001000253d8	ldr	w9, [x25, #0x14]
00000001000253dc	stp	x22, x8, [sp, #0x10]
00000001000253e0	orr	w1, wzr, #0x3
00000001000253e4	stp	x23, x9, [sp]
00000001000253e8	mov	x0, x19
00000001000253ec	mov	x2, x21
00000001000253f0	bl	0x10002a548
00000001000253f4	ldr	x25, [x25]
00000001000253f8	cbnz	x25, 0x100025384
00000001000253fc	adr	x2, #65927 ; literal pool for: "}"
0000000100025400	nop
0000000100025404	orr	w1, wzr, #0x1
0000000100025408	mov	x0, x19
000000010002540c	bl	0x10002a548
0000000100025410	mov	x0, x19
0000000100025414	bl	0x10002a5c4
0000000100025418	adr	x2, #88762 ; literal pool for: "disabled services = {"
000000010002541c	nop
0000000100025420	orr	w1, wzr, #0x1
0000000100025424	mov	x0, x19
0000000100025428	bl	0x10002a548
000000010002542c	ldr	x0, [x20, #0x378]
0000000100025430	cbz	x0, 0x100025468
0000000100025434	bl	0x1000319ac ; symbol stub for: _xpc_copy
0000000100025438	mov	x21, x0
000000010002543c	adr	x1, #79009 ; literal pool for: "_dirty"
0000000100025440	nop
0000000100025444	mov	x2, #0x0
0000000100025448	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010002544c	mov	w2, #0x0
0000000100025450	mov	x0, x19
0000000100025454	mov	x1, #0x0
0000000100025458	mov	x3, x21
000000010002545c	bl	0x10000d8ec
0000000100025460	mov	x0, x21
0000000100025464	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100025468	adr	x21, #65819 ; literal pool for: "}"
000000010002546c	nop
0000000100025470	orr	w1, wzr, #0x1
0000000100025474	mov	x0, x19
0000000100025478	mov	x2, x21
000000010002547c	bl	0x10002a548
0000000100025480	mov	x0, x19
0000000100025484	bl	0x10002a5c4
0000000100025488	adr	x2, #77307 ; literal pool for: "properties = {"
000000010002548c	nop
0000000100025490	orr	w1, wzr, #0x1
0000000100025494	mov	x0, x19
0000000100025498	bl	0x10002a548
000000010002549c	ldrh	w8, [x20, #0x3a0]
00000001000254a0	adr	x23, #67050 ; literal pool for: "1"
00000001000254a4	nop
00000001000254a8	adr	x24, #67044 ; literal pool for: "0"
00000001000254ac	nop
00000001000254b0	tst	w8, #0x1
00000001000254b4	csel	x8, x24, x23, eq
00000001000254b8	adr	x9, #88624 ; literal pool for: "shutting down"
00000001000254bc	nop
00000001000254c0	stp	x9, x8, [sp]
00000001000254c4	adr	x22, #77262 ; literal pool for: "%s = %s"
00000001000254c8	nop
00000001000254cc	orr	w1, wzr, #0x2
00000001000254d0	mov	x0, x19
00000001000254d4	mov	x2, x22
00000001000254d8	bl	0x10002a548
00000001000254dc	ldrh	w8, [x20, #0x3a0]
00000001000254e0	tst	w8, #0x2
00000001000254e4	csel	x8, x24, x23, eq
00000001000254e8	adr	x9, #88590 ; literal pool for: "slain"
00000001000254ec	nop
00000001000254f0	stp	x9, x8, [sp]
00000001000254f4	orr	w1, wzr, #0x2
00000001000254f8	mov	x0, x19
00000001000254fc	mov	x2, x22
0000000100025500	bl	0x10002a548
0000000100025504	ldrh	w8, [x20, #0x3a0]
0000000100025508	tst	w8, #0x4
000000010002550c	csel	x8, x24, x23, eq
0000000100025510	adr	x9, #88556 ; literal pool for: "uncorked"
0000000100025514	nop
0000000100025518	stp	x9, x8, [sp]
000000010002551c	orr	w1, wzr, #0x2
0000000100025520	mov	x0, x19
0000000100025524	mov	x2, x22
0000000100025528	bl	0x10002a548
000000010002552c	ldrh	w8, [x20, #0x3a0]
0000000100025530	tst	w8, #0x8
0000000100025534	csel	x8, x24, x23, eq
0000000100025538	adr	x9, #88525 ; literal pool for: "origin resolved"
000000010002553c	nop
0000000100025540	stp	x9, x8, [sp]
0000000100025544	orr	w1, wzr, #0x2
0000000100025548	mov	x0, x19
000000010002554c	mov	x2, x22
0000000100025550	bl	0x10002a548
0000000100025554	ldrh	w8, [x20, #0x3a0]
0000000100025558	tst	w8, #0x20
000000010002555c	csel	x8, x24, x23, eq
0000000100025560	adr	x9, #88501 ; literal pool for: "deactivated"
0000000100025564	nop
0000000100025568	stp	x9, x8, [sp]
000000010002556c	orr	w1, wzr, #0x2
0000000100025570	mov	x0, x19
0000000100025574	mov	x2, x22
0000000100025578	bl	0x10002a548
000000010002557c	ldrh	w8, [x20, #0x3a0]
0000000100025580	tst	w8, #0x40
0000000100025584	csel	x8, x24, x23, eq
0000000100025588	adr	x9, #88473 ; literal pool for: "inactive"
000000010002558c	nop
0000000100025590	stp	x9, x8, [sp]
0000000100025594	orr	w1, wzr, #0x2
0000000100025598	mov	x0, x19
000000010002559c	mov	x2, x22
00000001000255a0	bl	0x10002a548
00000001000255a4	ldrh	w8, [x20, #0x3a0]
00000001000255a8	tst	w8, #0x80
00000001000255ac	csel	x8, x24, x23, eq
00000001000255b0	adr	x9, #88442 ; literal pool for: "in initial on-demand"
00000001000255b4	nop
00000001000255b8	stp	x9, x8, [sp]
00000001000255bc	orr	w1, wzr, #0x2
00000001000255c0	mov	x0, x19
00000001000255c4	mov	x2, x22
00000001000255c8	bl	0x10002a548
00000001000255cc	ldrh	w8, [x20, #0x3a0]
00000001000255d0	tst	w8, #0x100
00000001000255d4	csel	x8, x24, x23, eq
00000001000255d8	adr	x9, #88423 ; literal pool for: "exec hack"
00000001000255dc	nop
00000001000255e0	stp	x9, x8, [sp]
00000001000255e4	orr	w1, wzr, #0x2
00000001000255e8	mov	x0, x19
00000001000255ec	mov	x2, x22
00000001000255f0	bl	0x10002a548
00000001000255f4	orr	w1, wzr, #0x1
00000001000255f8	mov	x0, x19
00000001000255fc	mov	x2, x21
0000000100025600	bl	0x10002a548
0000000100025604	mov	x0, x19
0000000100025608	mov	x1, #0x0
000000010002560c	mov	x2, x21
0000000100025610	bl	0x10002a548
0000000100025614	ldur	x8, [x29, #-0x68]
0000000100025618	nop
000000010002561c	ldr	x9, #0x1a9fc ; literal pool symbol address: ___stack_chk_guard
0000000100025620	ldr	x9, [x9]
0000000100025624	cmp	x9, x8
0000000100025628	b.ne	0x100025650
000000010002562c	ldp	x29, x30, [sp, #0x100]
0000000100025630	ldp	x20, x19, [sp, #0xf0]
0000000100025634	ldp	x22, x21, [sp, #0xe0]
0000000100025638	ldp	x24, x23, [sp, #0xd0]
000000010002563c	ldp	x26, x25, [sp, #0xc0]
0000000100025640	ldp	x28, x27, [sp, #0xb0]
0000000100025644	ldp	d9, d8, [sp, #0xa0]
0000000100025648	add	sp, sp, #0x110
000000010002564c	ret
0000000100025650	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100025654	sub	sp, sp, #0x20
0000000100025658	stp	x29, x30, [sp, #0x10]
000000010002565c	add	x29, sp, #0x10
0000000100025660	ldp	x8, x1, [x2, #0x8]
0000000100025664	str	x0, [sp]
0000000100025668	adr	x2, #65090 ; literal pool for: "%s"
000000010002566c	nop
0000000100025670	mov	x0, x8
0000000100025674	bl	0x10002a548
0000000100025678	ldp	x29, x30, [sp, #0x10]
000000010002567c	add	sp, sp, #0x20
0000000100025680	ret
0000000100025684	stp	x29, x30, [sp, #-0x10]!
0000000100025688	mov	x29, sp
000000010002568c	ldr	x0, [x0, #0x20]
0000000100025690	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100025694	orr	w0, wzr, #0x1
0000000100025698	ldp	x29, x30, [sp], #0x10
000000010002569c	ret
00000001000256a0	sub	sp, sp, #0x40
00000001000256a4	stp	x22, x21, [sp, #0x10]
00000001000256a8	stp	x20, x19, [sp, #0x20]
00000001000256ac	stp	x29, x30, [sp, #0x30]
00000001000256b0	add	x29, sp, #0x30
00000001000256b4	mov	x19, x0
00000001000256b8	ldp	x22, x21, [x19]
00000001000256bc	ldr	x20, [x19, #0x10]
00000001000256c0	nop
00000001000256c4	nop
00000001000256c8	ldr	x0, #0x1ed58
00000001000256cc	nop
00000001000256d0	ldr	x8, #0x1e628
00000001000256d4	add	x8, x8, #0x3a8
00000001000256d8	str	x8, [sp]
00000001000256dc	adr	x2, #88809 ; literal pool for: "%s: extension removal request finished, sending reply"
00000001000256e0	nop
00000001000256e4	mov	w1, #0x0
00000001000256e8	bl	0x1000270c8
00000001000256ec	mov	x0, x20
00000001000256f0	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
00000001000256f4	orr	w8, w0, #0x20
00000001000256f8	cmp	w8, #0x20
00000001000256fc	b.eq	0x100025718
0000000100025700	sxtw	x2, w0
0000000100025704	adr	x0, #-47936
0000000100025708	nop
000000010002570c	mov	x1, x22
0000000100025710	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100025714	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100025718	mov	x0, x21
000000010002571c	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100025720	mov	x0, x20
0000000100025724	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100025728	mov	x0, x19
000000010002572c	ldp	x29, x30, [sp, #0x30]
0000000100025730	ldp	x20, x19, [sp, #0x20]
0000000100025734	ldp	x22, x21, [sp, #0x10]
0000000100025738	add	sp, sp, #0x40
000000010002573c	b	0x10000e470
0000000100025740	stp	x20, x19, [sp, #-0x20]!
0000000100025744	stp	x29, x30, [sp, #0x10]
0000000100025748	add	x29, sp, #0x10
000000010002574c	mov	x19, x0
0000000100025750	bl	0x100030d88 ; symbol stub for: _dispatch_group_leave
0000000100025754	mov	x0, x19
0000000100025758	ldp	x29, x30, [sp, #0x10]
000000010002575c	ldp	x20, x19, [sp], #0x20
0000000100025760	b	0x100030e60 ; symbol stub for: _dispatch_release
0000000100025764	stp	x22, x21, [sp, #-0x30]!
0000000100025768	stp	x20, x19, [sp, #0x10]
000000010002576c	stp	x29, x30, [sp, #0x20]
0000000100025770	add	x29, sp, #0x20
0000000100025774	mov	x19, x1
0000000100025778	mov	x20, x0
000000010002577c	bl	0x100024bc0
0000000100025780	mov	x22, #0x0
0000000100025784	add	x8, x20, x22, lsl #3
0000000100025788	ldr	x21, [x8, #0x128]
000000010002578c	cbz	x21, 0x1000257a8
0000000100025790	mov	x0, x21
0000000100025794	mov	x1, x19
0000000100025798	mov	x2, #0x0
000000010002579c	bl	0x1000164fc
00000001000257a0	ldr	x21, [x21, #0x48]
00000001000257a4	cbnz	x21, 0x100025790
00000001000257a8	add	x22, x22, #0x1
00000001000257ac	cmp	x22, #0x17
00000001000257b0	b.ne	0x100025784
00000001000257b4	ldr	x20, [x20, #0x118]
00000001000257b8	cbz	x20, 0x1000257d0
00000001000257bc	mov	x0, x20
00000001000257c0	mov	x1, x19
00000001000257c4	bl	0x100025764
00000001000257c8	ldr	x20, [x20, #0x8]
00000001000257cc	cbnz	x20, 0x1000257bc
00000001000257d0	ldp	x29, x30, [sp, #0x20]
00000001000257d4	ldp	x20, x19, [sp, #0x10]
00000001000257d8	ldp	x22, x21, [sp], #0x30
00000001000257dc	ret
00000001000257e0	sub	sp, sp, #0x40
00000001000257e4	stp	x22, x21, [sp, #0x10]
00000001000257e8	stp	x20, x19, [sp, #0x20]
00000001000257ec	stp	x29, x30, [sp, #0x30]
00000001000257f0	add	x29, sp, #0x30
00000001000257f4	mov	x19, x1
00000001000257f8	mov	x20, x0
00000001000257fc	nop
0000000100025800	ldr	x8, #0x1e4f8
0000000100025804	cmp	x8, x20
0000000100025808	b.ne	0x100025830
000000010002580c	nop
0000000100025810	nop
0000000100025814	ldr	x8, #0x1ebec
0000000100025818	str	x8, [sp]
000000010002581c	adr	x2, #88621 ; literal pool for: "JetsamProperties loaded from path : %s"
0000000100025820	nop
0000000100025824	mov	x0, x19
0000000100025828	mov	x1, #0x0
000000010002582c	bl	0x10002a548
0000000100025830	mov	x22, #0x0
0000000100025834	add	x8, x20, x22, lsl #3
0000000100025838	ldr	x21, [x8, #0x128]
000000010002583c	cbz	x21, 0x100025858
0000000100025840	mov	x0, x21
0000000100025844	mov	x1, x19
0000000100025848	mov	x2, #0x0
000000010002584c	bl	0x100017db4
0000000100025850	ldr	x21, [x21, #0x48]
0000000100025854	cbnz	x21, 0x100025840
0000000100025858	add	x22, x22, #0x1
000000010002585c	cmp	x22, #0x17
0000000100025860	b.ne	0x100025834
0000000100025864	ldr	x20, [x20, #0x118]
0000000100025868	cbz	x20, 0x100025880
000000010002586c	mov	x0, x20
0000000100025870	mov	x1, x19
0000000100025874	bl	0x1000257e0
0000000100025878	ldr	x20, [x20, #0x8]
000000010002587c	cbnz	x20, 0x10002586c
0000000100025880	ldp	x29, x30, [sp, #0x30]
0000000100025884	ldp	x20, x19, [sp, #0x20]
0000000100025888	ldp	x22, x21, [sp, #0x10]
000000010002588c	add	sp, sp, #0x40
0000000100025890	ret
0000000100025894	cmp	w0, #0x24
0000000100025898	b.gt	0x1000258b8
000000010002589c	cbz	w0, 0x1000258e4
00000001000258a0	cmp	w0, #0x1
00000001000258a4	b.eq	0x1000258d8
00000001000258a8	cmp	w0, #0x3
00000001000258ac	b.eq	0x1000258d0
00000001000258b0	mov	w0, #0x451
00000001000258b4	ret
00000001000258b8	cmp	w0, #0x25
00000001000258bc	b.eq	0x1000258e0
00000001000258c0	cmp	w0, #0x38
00000001000258c4	b.eq	0x1000258e8
00000001000258c8	cmp	w0, #0x91
00000001000258cc	b.ne	0x1000258b0
00000001000258d0	mov	w0, #0x44e
00000001000258d4	ret
00000001000258d8	mov	w0, #0x44c
00000001000258dc	ret
00000001000258e0	mov	w0, #0x44f
00000001000258e4	ret
00000001000258e8	mov	w0, #0x44d
00000001000258ec	ret
00000001000258f0	stp	x28, x27, [sp, #-0x50]!
00000001000258f4	stp	x24, x23, [sp, #0x10]
00000001000258f8	stp	x22, x21, [sp, #0x20]
00000001000258fc	stp	x20, x19, [sp, #0x30]
0000000100025900	stp	x29, x30, [sp, #0x40]
0000000100025904	add	x29, sp, #0x40
0000000100025908	sub	sp, sp, #0x420
000000010002590c	mov	x20, x4
0000000100025910	mov	x23, x3
0000000100025914	mov	x22, x2
0000000100025918	mov	x21, x1
000000010002591c	mov	x19, x0
0000000100025920	nop
0000000100025924	ldr	x8, #0x1a6f4 ; literal pool symbol address: ___stack_chk_guard
0000000100025928	ldr	x8, [x8]
000000010002592c	stur	x8, [x29, #-0x48]
0000000100025930	adr	x1, #88523 ; literal pool for: "SubmitJob"
0000000100025934	nop
0000000100025938	mov	x0, x22
000000010002593c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025940	cbz	w0, 0x100025a7c
0000000100025944	adr	x1, #88513 ; literal pool for: "RemoveJob"
0000000100025948	nop
000000010002594c	mov	x0, x22
0000000100025950	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025954	cbz	w0, 0x100025b08
0000000100025958	adr	x1, #88503 ; literal pool for: "StartJob"
000000010002595c	nop
0000000100025960	mov	x0, x22
0000000100025964	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025968	cbz	w0, 0x100025b74
000000010002596c	adr	x1, #88492 ; literal pool for: "StopJob"
0000000100025970	nop
0000000100025974	mov	x0, x22
0000000100025978	bl	0x100031700 ; symbol stub for: _strcmp
000000010002597c	cbz	w0, 0x100025bdc
0000000100025980	adr	x1, #88480 ; literal pool for: "GetJob"
0000000100025984	nop
0000000100025988	mov	x0, x22
000000010002598c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025990	cbz	w0, 0x100025c44
0000000100025994	adr	x1, #88467 ; literal pool for: "GetJobs"
0000000100025998	nop
000000010002599c	mov	x0, x22
00000001000259a0	bl	0x100031700 ; symbol stub for: _strcmp
00000001000259a4	cbz	w0, 0x100025d14
00000001000259a8	adr	x1, #88455 ; literal pool for: "CheckIn"
00000001000259ac	nop
00000001000259b0	mov	x0, x22
00000001000259b4	bl	0x100031700 ; symbol stub for: _strcmp
00000001000259b8	cbz	w0, 0x100025d54
00000001000259bc	adr	x1, #88443 ; literal pool for: "SetUserEnvironment"
00000001000259c0	nop
00000001000259c4	mov	x0, x22
00000001000259c8	bl	0x100031700 ; symbol stub for: _strcmp
00000001000259cc	cbz	w0, 0x100025d80
00000001000259d0	adr	x1, #88442 ; literal pool for: "UnsetUserEnvironment"
00000001000259d4	nop
00000001000259d8	mov	x0, x22
00000001000259dc	bl	0x100031700 ; symbol stub for: _strcmp
00000001000259e0	cbz	w0, 0x100025ee4
00000001000259e4	adr	x1, #88443 ; literal pool for: "Shutdown"
00000001000259e8	nop
00000001000259ec	mov	x0, x22
00000001000259f0	bl	0x100031700 ; symbol stub for: _strcmp
00000001000259f4	cbz	w0, 0x100025f4c
00000001000259f8	adr	x1, #88432 ; literal pool for: "SingleUser"
00000001000259fc	nop
0000000100025a00	mov	x0, x22
0000000100025a04	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025a08	cbz	w0, 0x100025fa8
0000000100025a0c	adr	x1, #88472 ; literal pool for: "GetResourceLimits"
0000000100025a10	nop
0000000100025a14	mov	x0, x22
0000000100025a18	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025a1c	cbz	w0, 0x100025f9c
0000000100025a20	adr	x1, #88489 ; literal pool for: "SetResourceLimits"
0000000100025a24	nop
0000000100025a28	mov	x0, x22
0000000100025a2c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025a30	cbz	w0, 0x100025f9c
0000000100025a34	adr	x1, #88487 ; literal pool for: "GetResourceUsageSelf"
0000000100025a38	nop
0000000100025a3c	mov	x0, x22
0000000100025a40	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025a44	cbz	w0, 0x100026008
0000000100025a48	adr	x1, #88488 ; literal pool for: "GetResourceUsageChildren"
0000000100025a4c	nop
0000000100025a50	mov	x0, x22
0000000100025a54	bl	0x100031700 ; symbol stub for: _strcmp
0000000100025a58	cbnz	w0, 0x100025c60
0000000100025a5c	ldur	x8, [x29, #-0x48]
0000000100025a60	nop
0000000100025a64	ldr	x9, #0x1a5b4 ; literal pool symbol address: ___stack_chk_guard
0000000100025a68	ldr	x9, [x9]
0000000100025a6c	cmp	x9, x8
0000000100025a70	b.ne	0x100026180
0000000100025a74	mov	w2, #-0x1
0000000100025a78	b	0x100026024
0000000100025a7c	cbz	x23, 0x100025c60
0000000100025a80	mov	x0, x23
0000000100025a84	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025a88	nop
0000000100025a8c	ldr	x8, #0x1a634 ; literal pool symbol address: __xpc_type_dictionary
0000000100025a90	cmp	x0, x8
0000000100025a94	b.eq	0x100025ab0
0000000100025a98	mov	x0, x23
0000000100025a9c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025aa0	nop
0000000100025aa4	ldr	x8, #0x1a5f4 ; literal pool symbol address: __xpc_type_array
0000000100025aa8	cmp	x0, x8
0000000100025aac	b.ne	0x100025c60
0000000100025ab0	mov	x0, x23
0000000100025ab4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025ab8	nop
0000000100025abc	ldr	x8, #0x1a5dc ; literal pool symbol address: __xpc_type_array
0000000100025ac0	cmp	x0, x8
0000000100025ac4	b.eq	0x100025c9c
0000000100025ac8	str	xzr, [sp, #0x18]
0000000100025acc	add	x3, sp, #0x18
0000000100025ad0	mov	x0, x19
0000000100025ad4	mov	x1, x21
0000000100025ad8	mov	x2, x23
0000000100025adc	bl	0x100026460
0000000100025ae0	mov	x22, x0
0000000100025ae4	cbnz	w22, 0x100025c64
0000000100025ae8	ldr	x8, [sp, #0x18]
0000000100025aec	cbz	x8, 0x100025af8
0000000100025af0	ldrh	w9, [x8, #0x134]
0000000100025af4	tbnz	w9, #0x3, 0x100025ed0
0000000100025af8	mov	x0, #0x0
0000000100025afc	bl	0x100031bbc ; symbol stub for: _xpc_uint64_create
0000000100025b00	mov	w22, #0x0
0000000100025b04	b	0x100025f94
0000000100025b08	cbz	x23, 0x100025c60
0000000100025b0c	mov	x0, x23
0000000100025b10	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025b14	nop
0000000100025b18	ldr	x8, #0x1a5c8 ; literal pool symbol address: __xpc_type_string
0000000100025b1c	cmp	x0, x8
0000000100025b20	b.ne	0x100025c60
0000000100025b24	mov	x0, x23
0000000100025b28	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100025b2c	mov	x23, x0
0000000100025b30	mov	x0, x19
0000000100025b34	mov	x1, x23
0000000100025b38	bl	0x10001e1b8
0000000100025b3c	mov	x24, x0
0000000100025b40	cbz	x24, 0x100025d0c
0000000100025b44	orr	w1, wzr, #0x3
0000000100025b48	mov	w2, #0x88
0000000100025b4c	mov	x0, x19
0000000100025b50	mov	x3, x21
0000000100025b54	mov	x4, #0x0
0000000100025b58	mov	x5, #0x0
0000000100025b5c	bl	0x10001e964
0000000100025b60	mov	x22, x0
0000000100025b64	cbz	w22, 0x100025e80
0000000100025b68	adr	x3, #88327 ; literal pool for: "service removal"
0000000100025b6c	nop
0000000100025b70	b	0x100025d40
0000000100025b74	cbz	x23, 0x100025c60
0000000100025b78	mov	x0, x23
0000000100025b7c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025b80	nop
0000000100025b84	ldr	x8, #0x1a55c ; literal pool symbol address: __xpc_type_string
0000000100025b88	cmp	x0, x8
0000000100025b8c	b.ne	0x100025c60
0000000100025b90	mov	x0, x23
0000000100025b94	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100025b98	mov	x1, x0
0000000100025b9c	mov	x0, x19
0000000100025ba0	bl	0x10001e1b8
0000000100025ba4	mov	x23, x0
0000000100025ba8	cbz	x23, 0x100025d0c
0000000100025bac	orr	w1, wzr, #0x3
0000000100025bb0	mov	w2, #0x88
0000000100025bb4	mov	x0, x19
0000000100025bb8	mov	x3, x21
0000000100025bbc	mov	x4, #0x0
0000000100025bc0	mov	x5, #0x0
0000000100025bc4	bl	0x10001e964
0000000100025bc8	mov	x22, x0
0000000100025bcc	cbz	w22, 0x100025f2c
0000000100025bd0	adr	x3, #88289 ; literal pool for: "service start"
0000000100025bd4	nop
0000000100025bd8	b	0x100025d40
0000000100025bdc	cbz	x23, 0x100025c60
0000000100025be0	mov	x0, x23
0000000100025be4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025be8	nop
0000000100025bec	ldr	x8, #0x1a4f4 ; literal pool symbol address: __xpc_type_string
0000000100025bf0	cmp	x0, x8
0000000100025bf4	b.ne	0x100025c60
0000000100025bf8	mov	x0, x23
0000000100025bfc	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100025c00	mov	x1, x0
0000000100025c04	mov	x0, x19
0000000100025c08	bl	0x10001e1b8
0000000100025c0c	mov	x23, x0
0000000100025c10	cbz	x23, 0x100025d0c
0000000100025c14	orr	w1, wzr, #0x3
0000000100025c18	mov	w2, #0x88
0000000100025c1c	mov	x0, x19
0000000100025c20	mov	x3, x21
0000000100025c24	mov	x4, #0x0
0000000100025c28	mov	x5, #0x0
0000000100025c2c	bl	0x10001e964
0000000100025c30	mov	x22, x0
0000000100025c34	cbz	w22, 0x100025f7c
0000000100025c38	adr	x3, #84936 ; literal pool for: "service stop"
0000000100025c3c	nop
0000000100025c40	b	0x100025d40
0000000100025c44	cbz	x23, 0x100025c60
0000000100025c48	mov	x0, x23
0000000100025c4c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025c50	nop
0000000100025c54	ldr	x8, #0x1a48c ; literal pool symbol address: __xpc_type_string
0000000100025c58	cmp	x0, x8
0000000100025c5c	b.eq	0x100025db4
0000000100025c60	mov	w22, #0x16
0000000100025c64	ldur	x8, [x29, #-0x48]
0000000100025c68	nop
0000000100025c6c	ldr	x9, #0x1a3ac ; literal pool symbol address: ___stack_chk_guard
0000000100025c70	ldr	x9, [x9]
0000000100025c74	cmp	x9, x8
0000000100025c78	b.ne	0x100026180
0000000100025c7c	mov	x0, x22
0000000100025c80	add	sp, sp, #0x420
0000000100025c84	ldp	x29, x30, [sp, #0x40]
0000000100025c88	ldp	x20, x19, [sp, #0x30]
0000000100025c8c	ldp	x22, x21, [sp, #0x20]
0000000100025c90	ldp	x24, x23, [sp, #0x10]
0000000100025c94	ldp	x28, x27, [sp], #0x50
0000000100025c98	ret
0000000100025c9c	mov	x0, #0x0
0000000100025ca0	mov	x1, #0x0
0000000100025ca4	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
0000000100025ca8	str	x0, [x20]
0000000100025cac	mov	x0, x23
0000000100025cb0	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100025cb4	cbz	x0, 0x100025d04
0000000100025cb8	mov	x22, #0x0
0000000100025cbc	mov	x0, x23
0000000100025cc0	mov	x1, x22
0000000100025cc4	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100025cc8	mov	x2, x0
0000000100025ccc	mov	x0, x19
0000000100025cd0	mov	x1, x21
0000000100025cd4	mov	x3, #0x0
0000000100025cd8	bl	0x100026460
0000000100025cdc	ldr	x8, [x20]
0000000100025ce0	sxtw	x2, w0
0000000100025ce4	mov	x1, #-0x1
0000000100025ce8	mov	x0, x8
0000000100025cec	bl	0x100031928 ; symbol stub for: _xpc_array_set_uint64
0000000100025cf0	add	x22, x22, #0x1
0000000100025cf4	mov	x0, x23
0000000100025cf8	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100025cfc	cmp	x22, x0
0000000100025d00	b.lo	0x100025cbc
0000000100025d04	mov	w22, #0x0
0000000100025d08	b	0x100025c64
0000000100025d0c	orr	w22, wzr, #0x3
0000000100025d10	b	0x100025c64
0000000100025d14	orr	w1, wzr, #0x4
0000000100025d18	orr	w2, wzr, #0x80
0000000100025d1c	mov	x0, x19
0000000100025d20	mov	x3, x21
0000000100025d24	mov	x4, #0x0
0000000100025d28	mov	x5, #0x0
0000000100025d2c	bl	0x10001e964
0000000100025d30	mov	x22, x0
0000000100025d34	cbz	w22, 0x100025e04
0000000100025d38	adr	x3, #88393 ; literal pool for: "all services read"
0000000100025d3c	nop
0000000100025d40	mov	x2, x22
0000000100025d44	mov	x0, x19
0000000100025d48	mov	x1, x21
0000000100025d4c	bl	0x10001dc6c
0000000100025d50	b	0x100025c64
0000000100025d54	ldur	x8, [x29, #-0x48]
0000000100025d58	nop
0000000100025d5c	ldr	x9, #0x1a2bc ; literal pool symbol address: ___stack_chk_guard
0000000100025d60	ldr	x9, [x9]
0000000100025d64	cmp	x9, x8
0000000100025d68	b.ne	0x100026180
0000000100025d6c	orr	w3, wzr, #0x1
0000000100025d70	mov	x0, x19
0000000100025d74	mov	x1, x21
0000000100025d78	mov	x2, #0x0
0000000100025d7c	b	0x100025de4
0000000100025d80	cbz	x23, 0x100025c60
0000000100025d84	mov	x0, x23
0000000100025d88	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025d8c	nop
0000000100025d90	ldr	x8, #0x1a330 ; literal pool symbol address: __xpc_type_dictionary
0000000100025d94	cmp	x0, x8
0000000100025d98	b.ne	0x100025c60
0000000100025d9c	ldr	x8, [x19, #0x60]
0000000100025da0	ldrb	w9, [x8, #0x88]
0000000100025da4	tbnz	w9, #0x1, 0x100025fd8
0000000100025da8	adr	x2, #88299 ; literal pool for: "LAUNCH_KEY_SETUSERENVIRONMENT is only valid for user domains."
0000000100025dac	nop
0000000100025db0	b	0x100025ff4
0000000100025db4	mov	x0, x23
0000000100025db8	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100025dbc	mov	x2, x0
0000000100025dc0	ldur	x8, [x29, #-0x48]
0000000100025dc4	nop
0000000100025dc8	ldr	x9, #0x1a250 ; literal pool symbol address: ___stack_chk_guard
0000000100025dcc	ldr	x9, [x9]
0000000100025dd0	cmp	x9, x8
0000000100025dd4	b.ne	0x100026180
0000000100025dd8	mov	w3, #0x0
0000000100025ddc	mov	x0, x19
0000000100025de0	mov	x1, x21
0000000100025de4	mov	x4, x20
0000000100025de8	add	sp, sp, #0x420
0000000100025dec	ldp	x29, x30, [sp, #0x40]
0000000100025df0	ldp	x20, x19, [sp, #0x30]
0000000100025df4	ldp	x22, x21, [sp, #0x20]
0000000100025df8	ldp	x24, x23, [sp, #0x10]
0000000100025dfc	ldp	x28, x27, [sp], #0x50
0000000100025e00	b	0x1000261ec
0000000100025e04	mov	x0, #0x0
0000000100025e08	mov	x1, #0x0
0000000100025e0c	mov	x2, #0x0
0000000100025e10	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100025e14	mov	x21, x0
0000000100025e18	mov	x24, #0x0
0000000100025e1c	add	x8, x19, x24, lsl #3
0000000100025e20	ldr	x22, [x8, #0x128]
0000000100025e24	cbz	x22, 0x100025e68
0000000100025e28	mov	x0, x22
0000000100025e2c	bl	0x100015efc
0000000100025e30	mov	x23, x0
0000000100025e34	add	x1, x22, #0x460
0000000100025e38	cbz	x23, 0x100025e54
0000000100025e3c	mov	x0, x21
0000000100025e40	mov	x2, x23
0000000100025e44	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100025e48	mov	x0, x23
0000000100025e4c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100025e50	b	0x100025e60
0000000100025e54	mov	w2, #0x99
0000000100025e58	mov	x0, x21
0000000100025e5c	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
0000000100025e60	ldr	x22, [x22, #0x48]
0000000100025e64	cbnz	x22, 0x100025e28
0000000100025e68	add	x24, x24, #0x1
0000000100025e6c	cmp	x24, #0x17
0000000100025e70	b.ne	0x100025e1c
0000000100025e74	mov	w22, #0x0
0000000100025e78	str	x21, [x20]
0000000100025e7c	b	0x100025c64
0000000100025e80	ldrh	w8, [x24, #0x134]
0000000100025e84	orr	w8, w8, #0x10
0000000100025e88	strh	w8, [x24, #0x134]
0000000100025e8c	mov	x0, x19
0000000100025e90	mov	x1, x24
0000000100025e94	bl	0x100021964
0000000100025e98	mov	x22, x0
0000000100025e9c	cbz	w22, 0x100025f8c
0000000100025ea0	cmp	w22, #0x24
0000000100025ea4	b.eq	0x100025c64
0000000100025ea8	mov	x0, x22
0000000100025eac	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100025eb0	stp	x22, x0, [sp, #0x8]
0000000100025eb4	str	x23, [sp]
0000000100025eb8	adr	x2, #87495 ; literal pool for: "Could not stop service: name = %s, error = %d: %s"
0000000100025ebc	nop
0000000100025ec0	orr	w1, wzr, #0x3
0000000100025ec4	mov	x0, x24
0000000100025ec8	bl	0x1000118ec
0000000100025ecc	b	0x100025c64
0000000100025ed0	and	w9, w9, #0xfffffff7
0000000100025ed4	strh	w9, [x8, #0x134]
0000000100025ed8	str	x8, [x19, #0x388]
0000000100025edc	mov	w22, #0x24
0000000100025ee0	b	0x100025c64
0000000100025ee4	cbz	x23, 0x100025c60
0000000100025ee8	mov	x0, x23
0000000100025eec	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100025ef0	nop
0000000100025ef4	ldr	x8, #0x1a1ec ; literal pool symbol address: __xpc_type_string
0000000100025ef8	cmp	x0, x8
0000000100025efc	b.ne	0x100025c60
0000000100025f00	mov	x0, x23
0000000100025f04	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100025f08	mov	x20, x0
0000000100025f0c	ldr	x8, [x19, #0x60]
0000000100025f10	ldrb	w9, [x8, #0x88]
0000000100025f14	tbnz	w9, #0x1, 0x100025fec
0000000100025f18	ldrb	w9, [x19, #0x3a0]
0000000100025f1c	tst	w9, #0x3
0000000100025f20	b.eq	0x100026108
0000000100025f24	orr	w22, wzr, #0x7c
0000000100025f28	b	0x100026134
0000000100025f2c	mov	w1, #0x9
0000000100025f30	mov	x0, x23
0000000100025f34	bl	0x100015574
0000000100025f38	and	w8, w0, #0xfffffffe
0000000100025f3c	cmp	w8, #0x24
0000000100025f40	csel	w22, wzr, w0, eq
0000000100025f44	cbnz	w22, 0x100025c64
0000000100025f48	b	0x100025f8c
0000000100025f4c	orr	w1, wzr, #0x3
0000000100025f50	mov	w2, #0x88
0000000100025f54	mov	x0, x19
0000000100025f58	mov	x3, x21
0000000100025f5c	mov	x4, #0x0
0000000100025f60	mov	x5, #0x0
0000000100025f64	bl	0x10001e964
0000000100025f68	mov	x22, x0
0000000100025f6c	cbz	w22, 0x100025fc4
0000000100025f70	adr	x3, #87994 ; literal pool for: "domain shutdown"
0000000100025f74	nop
0000000100025f78	b	0x100025d40
0000000100025f7c	mov	x0, x23
0000000100025f80	bl	0x100015694
0000000100025f84	mov	x22, x0
0000000100025f88	cbnz	w22, 0x100025c64
0000000100025f8c	mov	x0, #0x0
0000000100025f90	bl	0x100031bbc ; symbol stub for: _xpc_uint64_create
0000000100025f94	str	x0, [x20]
0000000100025f98	b	0x100025c64
0000000100025f9c	adr	x2, #87066 ; literal pool for: "rlimit(3)? Really?"
0000000100025fa0	nop
0000000100025fa4	b	0x100025fb0
0000000100025fa8	adr	x2, #86987 ; literal pool for: "LAUNCH_KEY_SINGLEUSER never did anything anyway."
0000000100025fac	nop
0000000100025fb0	mov	w1, #0x5
0000000100025fb4	mov	x0, x19
0000000100025fb8	bl	0x100019bfc
0000000100025fbc	orr	w22, wzr, #0x7e
0000000100025fc0	b	0x100025c64
0000000100025fc4	ldrb	w8, [x19, #0x3a0]
0000000100025fc8	tst	w8, #0x3
0000000100025fcc	b.eq	0x10002604c
0000000100025fd0	mov	w22, #0x25
0000000100025fd4	b	0x100025c64
0000000100025fd8	ldrb	w9, [x19, #0x3a0]
0000000100025fdc	tst	w9, #0x3
0000000100025fe0	b.eq	0x1000260d0
0000000100025fe4	orr	w22, wzr, #0x7c
0000000100025fe8	b	0x1000260fc
0000000100025fec	adr	x2, #87781 ; literal pool for: "LAUNCH_KEY_UNSETUSERENVIRONMENT is only valid for user domains."
0000000100025ff0	nop
0000000100025ff4	orr	w1, wzr, #0x3
0000000100025ff8	mov	x0, x19
0000000100025ffc	bl	0x100019bfc
0000000100026000	mov	w22, #0x7d
0000000100026004	b	0x100025c64
0000000100026008	ldur	x8, [x29, #-0x48]
000000010002600c	nop
0000000100026010	ldr	x9, #0x1a008 ; literal pool symbol address: ___stack_chk_guard
0000000100026014	ldr	x9, [x9]
0000000100026018	cmp	x9, x8
000000010002601c	b.ne	0x100026180
0000000100026020	mov	w2, #0x0
0000000100026024	mov	x0, x19
0000000100026028	mov	x1, x21
000000010002602c	mov	x3, x20
0000000100026030	add	sp, sp, #0x420
0000000100026034	ldp	x29, x30, [sp, #0x40]
0000000100026038	ldp	x20, x19, [sp, #0x30]
000000010002603c	ldp	x22, x21, [sp, #0x20]
0000000100026040	ldp	x24, x23, [sp, #0x10]
0000000100026044	ldp	x28, x27, [sp], #0x50
0000000100026048	b	0x10002638c
000000010002604c	ldr	w0, [x21, #0x14]
0000000100026050	add	x21, sp, #0x18
0000000100026054	add	x1, sp, #0x18
0000000100026058	bl	0x1000248f4
000000010002605c	str	x21, [sp]
0000000100026060	adr	x2, #87770 ; literal pool for: "legacy shutdown initiated by: %s"
0000000100026064	nop
0000000100026068	mov	w1, #0x5
000000010002606c	movk	w1, #0x1, lsl #16
0000000100026070	mov	x0, x19
0000000100026074	bl	0x100019bfc
0000000100026078	nop
000000010002607c	nop
0000000100026080	ldr	x0, #0x1e3a0
0000000100026084	add	x8, x19, #0x3a8
0000000100026088	stp	x8, x21, [sp]
000000010002608c	adr	x2, #87759 ; literal pool for: "%s: legacy shutdown, caller = %s"
0000000100026090	nop
0000000100026094	mov	w1, #0x0
0000000100026098	bl	0x1000270c8
000000010002609c	ldr	w0, [x19, #0x7c]
00000001000260a0	mov	w1, #-0x1
00000001000260a4	mov	x2, x19
00000001000260a8	bl	0x1000088a4
00000001000260ac	mov	x22, x0
00000001000260b0	cbz	w22, 0x100026140
00000001000260b4	sxtw	x2, w22
00000001000260b8	adr	x0, #-50420
00000001000260bc	nop
00000001000260c0	mov	x1, x19
00000001000260c4	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
00000001000260c8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000260cc	b	0x100025c64
00000001000260d0	ldr	x8, [x8, #0x68]
00000001000260d4	ldr	x3, [x19, #0x68]
00000001000260d8	orr	w1, wzr, #0x3
00000001000260dc	orr	w2, wzr, #0x8
00000001000260e0	mov	x0, x19
00000001000260e4	mov	x4, x21
00000001000260e8	mov	x5, #0x0
00000001000260ec	mov	x6, #0x0
00000001000260f0	blr	x8
00000001000260f4	mov	x22, x0
00000001000260f8	cbz	w22, 0x100026148
00000001000260fc	adr	x3, #83865 ; literal pool for: "set domain environment"
0000000100026100	nop
0000000100026104	b	0x100025d40
0000000100026108	ldr	x8, [x8, #0x68]
000000010002610c	ldr	x3, [x19, #0x68]
0000000100026110	orr	w1, wzr, #0x3
0000000100026114	orr	w2, wzr, #0x8
0000000100026118	mov	x0, x19
000000010002611c	mov	x4, x21
0000000100026120	mov	x5, #0x0
0000000100026124	mov	x6, #0x0
0000000100026128	blr	x8
000000010002612c	mov	x22, x0
0000000100026130	cbz	w22, 0x10002616c
0000000100026134	adr	x3, #87517 ; literal pool for: "unset domain environment"
0000000100026138	nop
000000010002613c	b	0x100025d40
0000000100026140	str	wzr, [x19, #0x7c]
0000000100026144	b	0x100025f8c
0000000100026148	mov	x0, #0x0
000000010002614c	bl	0x100031bbc ; symbol stub for: _xpc_uint64_create
0000000100026150	str	x0, [x20]
0000000100026154	adr	x2, #1900
0000000100026158	nop
000000010002615c	mov	x0, x23
0000000100026160	mov	x1, x19
0000000100026164	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
0000000100026168	b	0x100025c64
000000010002616c	mov	x0, x19
0000000100026170	mov	x1, x20
0000000100026174	mov	x2, #0x0
0000000100026178	bl	0x1000247ec
000000010002617c	b	0x100025c64
0000000100026180	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100026184	sub	sp, sp, #0x30
0000000100026188	stp	x20, x19, [sp, #0x10]
000000010002618c	stp	x29, x30, [sp, #0x20]
0000000100026190	add	x29, sp, #0x20
0000000100026194	mov	x19, x2
0000000100026198	mov	x8, x1
000000010002619c	mov	x9, x0
00000001000261a0	ldp	x0, x1, [x19]
00000001000261a4	str	xzr, [sp, #0x8]
00000001000261a8	add	x4, sp, #0x8
00000001000261ac	mov	x2, x9
00000001000261b0	mov	x3, x8
00000001000261b4	bl	0x1000258f0
00000001000261b8	cbz	w0, 0x1000261c8
00000001000261bc	sxtw	x0, w0
00000001000261c0	bl	0x100031bbc ; symbol stub for: _xpc_uint64_create
00000001000261c4	str	x0, [sp, #0x8]
00000001000261c8	ldr	x0, [x19, #0x10]
00000001000261cc	cbz	x0, 0x1000261d4
00000001000261d0	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000261d4	ldr	x8, [sp, #0x8]
00000001000261d8	str	x8, [x19, #0x10]
00000001000261dc	ldp	x29, x30, [sp, #0x20]
00000001000261e0	ldp	x20, x19, [sp, #0x10]
00000001000261e4	add	sp, sp, #0x30
00000001000261e8	ret
00000001000261ec	sub	sp, sp, #0xb0
00000001000261f0	stp	x24, x23, [sp, #0x70]
00000001000261f4	stp	x22, x21, [sp, #0x80]
00000001000261f8	stp	x20, x19, [sp, #0x90]
00000001000261fc	stp	x29, x30, [sp, #0xa0]
0000000100026200	add	x29, sp, #0xa0
0000000100026204	mov	x20, x4
0000000100026208	mov	x23, x3
000000010002620c	mov	x21, x1
0000000100026210	mov	x19, x0
0000000100026214	nop
0000000100026218	ldr	x8, #0x19e00 ; literal pool symbol address: ___stack_chk_guard
000000010002621c	ldr	x8, [x8]
0000000100026220	stur	x8, [x29, #-0x38]
0000000100026224	str	x19, [sp, #0x20]
0000000100026228	cbz	x2, 0x100026250
000000010002622c	cbz	w23, 0x100026250
0000000100026230	str	x2, [sp]
0000000100026234	adr	x2, #86667 ; literal pool for: "Caller tried to check into a named job: %s"
0000000100026238	nop
000000010002623c	orr	w1, wzr, #0x3
0000000100026240	mov	x0, x19
0000000100026244	bl	0x100019bfc
0000000100026248	orr	w23, wzr, #0x1
000000010002624c	b	0x100026284
0000000100026250	cbz	x2, 0x100026264
0000000100026254	mov	x0, x19
0000000100026258	mov	x1, x2
000000010002625c	bl	0x10001e1b8
0000000100026260	b	0x100026270
0000000100026264	ldr	w1, [x21, #0x14]
0000000100026268	add	x0, sp, #0x20
000000010002626c	bl	0x100023d80
0000000100026270	mov	x22, x0
0000000100026274	cbz	x22, 0x100026280
0000000100026278	ldr	w8, [x22, #0x110]
000000010002627c	cbz	w8, 0x1000262b8
0000000100026280	orr	w23, wzr, #0x3
0000000100026284	ldur	x8, [x29, #-0x38]
0000000100026288	nop
000000010002628c	ldr	x9, #0x19d8c ; literal pool symbol address: ___stack_chk_guard
0000000100026290	ldr	x9, [x9]
0000000100026294	cmp	x9, x8
0000000100026298	b.ne	0x100026388
000000010002629c	mov	x0, x23
00000001000262a0	ldp	x29, x30, [sp, #0xa0]
00000001000262a4	ldp	x20, x19, [sp, #0x90]
00000001000262a8	ldp	x22, x21, [sp, #0x80]
00000001000262ac	ldp	x24, x23, [sp, #0x70]
00000001000262b0	add	sp, sp, #0xb0
00000001000262b4	ret
00000001000262b8	tbz	w23, #0x0, 0x1000262f4
00000001000262bc	mov	x0, x22
00000001000262c0	bl	0x100015ed8
00000001000262c4	ldr	w8, [x21, #0x14]
00000001000262c8	cmp	w0, w8
00000001000262cc	b.ne	0x100026334
00000001000262d0	mov	x0, x22
00000001000262d4	bl	0x100015efc
00000001000262d8	mov	x21, x0
00000001000262dc	orr	w3, wzr, #0x1
00000001000262e0	mov	x0, x19
00000001000262e4	mov	x1, x22
00000001000262e8	mov	x2, x21
00000001000262ec	bl	0x100026684
00000001000262f0	b	0x10002637c
00000001000262f4	orr	w1, wzr, #0x4
00000001000262f8	mov	w2, #0x88
00000001000262fc	mov	x0, x19
0000000100026300	mov	x3, x21
0000000100026304	mov	x4, #0x0
0000000100026308	mov	x5, #0x0
000000010002630c	bl	0x10001e964
0000000100026310	mov	x23, x0
0000000100026314	cbz	w23, 0x10002635c
0000000100026318	adr	x3, #86482 ; literal pool for: "service read"
000000010002631c	nop
0000000100026320	mov	x2, x23
0000000100026324	mov	x0, x19
0000000100026328	mov	x1, x21
000000010002632c	bl	0x10001dc6c
0000000100026330	b	0x100026284
0000000100026334	add	x1, sp, #0x28
0000000100026338	mov	x0, x21
000000010002633c	bl	0x1000293c0
0000000100026340	add	x8, x22, #0x460
0000000100026344	ldr	w9, [x21, #0x14]
0000000100026348	stp	x9, x8, [sp, #0x8]
000000010002634c	str	x0, [sp]
0000000100026350	adr	x2, #86439 ; literal pool for: "Unprivileged caller tried to check into job's endpoints: caller = %s.%d, owner = %s"
0000000100026354	nop
0000000100026358	b	0x10002623c
000000010002635c	mov	x0, x22
0000000100026360	bl	0x100015ed8
0000000100026364	mov	x0, x22
0000000100026368	bl	0x100015efc
000000010002636c	mov	x21, x0
0000000100026370	mov	x0, x22
0000000100026374	mov	x1, x21
0000000100026378	bl	0x100024534
000000010002637c	mov	w23, #0x0
0000000100026380	str	x21, [x20]
0000000100026384	b	0x100026284
0000000100026388	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002638c	sub	sp, sp, #0xd0
0000000100026390	stp	x24, x23, [sp, #0x90]
0000000100026394	stp	x22, x21, [sp, #0xa0]
0000000100026398	stp	x20, x19, [sp, #0xb0]
000000010002639c	stp	x29, x30, [sp, #0xc0]
00000001000263a0	add	x29, sp, #0xc0
00000001000263a4	mov	x20, x3
00000001000263a8	mov	x23, x2
00000001000263ac	mov	x22, x1
00000001000263b0	mov	x19, x0
00000001000263b4	orr	w1, wzr, #0x4
00000001000263b8	mov	w2, #0x88
00000001000263bc	mov	x3, x22
00000001000263c0	mov	x4, #0x0
00000001000263c4	mov	x5, #0x0
00000001000263c8	bl	0x10001e964
00000001000263cc	mov	x21, x0
00000001000263d0	cbz	w21, 0x1000263f0
00000001000263d4	adr	x3, #86952 ; literal pool for: "read resource usage"
00000001000263d8	nop
00000001000263dc	mov	x2, x21
00000001000263e0	mov	x0, x19
00000001000263e4	mov	x1, x22
00000001000263e8	bl	0x10001dc6c
00000001000263ec	b	0x100026444
00000001000263f0	mov	x1, sp
00000001000263f4	mov	x0, x23
00000001000263f8	bl	0x1000310f4 ; symbol stub for: _getrusage
00000001000263fc	cbz	w0, 0x100026430
0000000100026400	cmn	w0, #0x1
0000000100026404	b.ne	0x100026424
0000000100026408	bl	0x100030adc ; symbol stub for: ___error
000000010002640c	ldrsw	x2, [x0]
0000000100026410	adr	x0, #-51276
0000000100026414	nop
0000000100026418	mov	x1, x19
000000010002641c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
0000000100026420	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026424	bl	0x100030adc ; symbol stub for: ___error
0000000100026428	ldr	w21, [x0]
000000010002642c	b	0x100026444
0000000100026430	mov	x0, sp
0000000100026434	mov	w1, #0x90
0000000100026438	bl	0x1000319c4 ; symbol stub for: _xpc_data_create
000000010002643c	mov	w21, #0x0
0000000100026440	str	x0, [x20]
0000000100026444	mov	x0, x21
0000000100026448	ldp	x29, x30, [sp, #0xc0]
000000010002644c	ldp	x20, x19, [sp, #0xb0]
0000000100026450	ldp	x22, x21, [sp, #0xa0]
0000000100026454	ldp	x24, x23, [sp, #0x90]
0000000100026458	add	sp, sp, #0xd0
000000010002645c	ret
0000000100026460	sub	sp, sp, #0x190
0000000100026464	stp	x26, x25, [sp, #0x140]
0000000100026468	stp	x24, x23, [sp, #0x150]
000000010002646c	stp	x22, x21, [sp, #0x160]
0000000100026470	stp	x20, x19, [sp, #0x170]
0000000100026474	stp	x29, x30, [sp, #0x180]
0000000100026478	add	x29, sp, #0x180
000000010002647c	mov	x22, x3
0000000100026480	mov	x21, x2
0000000100026484	mov	x20, x1
0000000100026488	mov	x19, x0
000000010002648c	nop
0000000100026490	ldr	x8, #0x19b88 ; literal pool symbol address: ___stack_chk_guard
0000000100026494	ldr	x8, [x8]
0000000100026498	stur	x8, [x29, #-0x48]
000000010002649c	adr	x1, #52200 ; literal pool for: "Label"
00000001000264a0	nop
00000001000264a4	mov	x0, x21
00000001000264a8	bl	0x100020c34
00000001000264ac	mov	x23, x0
00000001000264b0	orr	w1, wzr, #0x3
00000001000264b4	mov	w2, #0x88
00000001000264b8	mov	x0, x19
00000001000264bc	mov	x3, x20
00000001000264c0	mov	x4, #0x0
00000001000264c4	mov	x5, #0x0
00000001000264c8	bl	0x10001e964
00000001000264cc	mov	x24, x0
00000001000264d0	str	w24, [sp, #0x74]
00000001000264d4	cbz	w24, 0x100026528
00000001000264d8	adr	x3, #85809 ; literal pool for: "service submission"
00000001000264dc	nop
00000001000264e0	mov	x2, x24
00000001000264e4	mov	x0, x19
00000001000264e8	mov	x1, x20
00000001000264ec	bl	0x10001dc6c
00000001000264f0	ldur	x8, [x29, #-0x48]
00000001000264f4	nop
00000001000264f8	ldr	x9, #0x19b20 ; literal pool symbol address: ___stack_chk_guard
00000001000264fc	ldr	x9, [x9]
0000000100026500	cmp	x9, x8
0000000100026504	b.ne	0x100026680
0000000100026508	mov	x0, x24
000000010002650c	ldp	x29, x30, [sp, #0x180]
0000000100026510	ldp	x20, x19, [sp, #0x170]
0000000100026514	ldp	x22, x21, [sp, #0x160]
0000000100026518	ldp	x24, x23, [sp, #0x150]
000000010002651c	ldp	x26, x25, [sp, #0x140]
0000000100026520	add	sp, sp, #0x190
0000000100026524	ret
0000000100026528	adr	x8, #-25360
000000010002652c	nop
0000000100026530	str	x8, [sp, #0x30]
0000000100026534	adr	x8, #-24392
0000000100026538	nop
000000010002653c	str	x8, [sp, #0x38]
0000000100026540	adr	x8, #-24040
0000000100026544	nop
0000000100026548	str	x8, [sp, #0x40]
000000010002654c	adr	x8, #-23520
0000000100026550	nop
0000000100026554	str	x8, [sp, #0x48]
0000000100026558	adr	x8, #-23444
000000010002655c	nop
0000000100026560	str	x8, [sp, #0x50]
0000000100026564	adr	x8, #-23244
0000000100026568	nop
000000010002656c	str	x8, [sp, #0x58]
0000000100026570	adr	x8, #-23048
0000000100026574	nop
0000000100026578	cmp	w23, #0x0
000000010002657c	stp	x8, x19, [sp, #0x60]
0000000100026580	orr	w8, wzr, #0x200
0000000100026584	mov	w9, #0x280
0000000100026588	csel	x24, x9, x8, ne
000000010002658c	sub	x25, x29, #0x88
0000000100026590	sub	x1, x29, #0x88
0000000100026594	mov	x0, x20
0000000100026598	bl	0x1000293c0
000000010002659c	mov	x23, x0
00000001000265a0	add	x8, x25, #0x10
00000001000265a4	ldr	w9, [x20, #0x14]
00000001000265a8	adr	x4, #51938 ; literal pool for: "(submitted by %s.%d)"
00000001000265ac	nop
00000001000265b0	stp	x8, x9, [sp]
00000001000265b4	add	x0, sp, #0x78
00000001000265b8	orr	w1, wzr, #0x80
00000001000265bc	orr	w3, wzr, #0x80
00000001000265c0	mov	w2, #0x0
00000001000265c4	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
00000001000265c8	add	x2, sp, #0x78
00000001000265cc	add	x4, sp, #0x30
00000001000265d0	add	x6, sp, #0x74
00000001000265d4	mov	x0, x19
00000001000265d8	mov	x1, x21
00000001000265dc	mov	x3, x20
00000001000265e0	mov	x5, x24
00000001000265e4	bl	0x100003db8
00000001000265e8	mov	x25, x0
00000001000265ec	cbz	x25, 0x100026610
00000001000265f0	mov	x0, x19
00000001000265f4	mov	x1, x25
00000001000265f8	bl	0x100020c5c
00000001000265fc	str	wzr, [sp, #0x74]
0000000100026600	mov	w24, #0x0
0000000100026604	cbz	x22, 0x1000264f0
0000000100026608	str	x25, [x22]
000000010002660c	b	0x1000264f0
0000000100026610	ldr	w24, [sp, #0x74]
0000000100026614	cbz	w24, 0x1000264f0
0000000100026618	cmp	w24, #0x25
000000010002661c	b.eq	0x100026628
0000000100026620	cmp	w24, #0x11
0000000100026624	b.ne	0x100026634
0000000100026628	mov	w24, #0x0
000000010002662c	str	wzr, [sp, #0x74]
0000000100026630	b	0x1000264f0
0000000100026634	adr	x1, #51792 ; literal pool for: "Label"
0000000100026638	nop
000000010002663c	mov	x0, x21
0000000100026640	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100026644	mov	x21, x0
0000000100026648	ldr	w22, [sp, #0x74]
000000010002664c	ldr	w20, [x20, #0x14]
0000000100026650	mov	x0, x22
0000000100026654	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100026658	stp	x22, x0, [sp, #0x18]
000000010002665c	stp	x20, x21, [sp, #0x8]
0000000100026660	str	x23, [sp]
0000000100026664	adr	x2, #85432 ; literal pool for: "Could not import service from caller: caller = %s.%d, service = %s, error = %d: %s"
0000000100026668	nop
000000010002666c	orr	w1, wzr, #0x3
0000000100026670	mov	x0, x19
0000000100026674	bl	0x100019bfc
0000000100026678	ldr	w24, [sp, #0x74]
000000010002667c	b	0x1000264f0
0000000100026680	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100026684	sub	sp, sp, #0xa0
0000000100026688	stp	x28, x27, [sp, #0x40]
000000010002668c	stp	x26, x25, [sp, #0x50]
0000000100026690	stp	x24, x23, [sp, #0x60]
0000000100026694	stp	x22, x21, [sp, #0x70]
0000000100026698	stp	x20, x19, [sp, #0x80]
000000010002669c	stp	x29, x30, [sp, #0x90]
00000001000266a0	add	x29, sp, #0x90
00000001000266a4	mov	x22, x3
00000001000266a8	mov	x19, x2
00000001000266ac	mov	x20, x1
00000001000266b0	mov	x21, x0
00000001000266b4	mov	x0, #0x0
00000001000266b8	mov	x1, #0x0
00000001000266bc	mov	x2, #0x0
00000001000266c0	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
00000001000266c4	mov	x23, x0
00000001000266c8	ldr	x24, [x20, #0xd0]
00000001000266cc	cbz	x24, 0x10002679c
00000001000266d0	adr	x25, #85627 ; literal pool for: "Could not activate socket group: %s: %d: %s"
00000001000266d4	nop
00000001000266d8	add	x27, x24, #0xc0
00000001000266dc	mov	x0, x23
00000001000266e0	mov	x1, x27
00000001000266e4	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000266e8	cbz	x0, 0x1000266f8
00000001000266ec	bl	0x100031b74 ; symbol stub for: _xpc_retain
00000001000266f0	mov	x26, x0
00000001000266f4	b	0x100026714
00000001000266f8	mov	x1, #0x0
00000001000266fc	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
0000000100026700	mov	x26, x0
0000000100026704	mov	x0, x23
0000000100026708	mov	x1, x27
000000010002670c	mov	x2, x26
0000000100026710	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100026714	str	xzr, [sp, #0x18]
0000000100026718	str	xzr, [sp, #0x38]
000000010002671c	add	x1, sp, #0x18
0000000100026720	add	x3, sp, #0x38
0000000100026724	mov	x0, x24
0000000100026728	mov	x2, #0x0
000000010002672c	bl	0x100010220
0000000100026730	mov	x28, x0
0000000100026734	cbz	w28, 0x10002675c
0000000100026738	mov	x0, x28
000000010002673c	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100026740	stp	x28, x0, [sp, #0x8]
0000000100026744	orr	w1, wzr, #0x3
0000000100026748	str	x27, [sp]
000000010002674c	mov	x0, x20
0000000100026750	mov	x2, x25
0000000100026754	bl	0x1000118ec
0000000100026758	b	0x10002678c
000000010002675c	ldr	x8, [sp, #0x38]
0000000100026760	cbz	x8, 0x10002678c
0000000100026764	mov	x27, #0x0
0000000100026768	ldr	x8, [sp, #0x18]
000000010002676c	ldr	w2, [x8, x27, lsl #2]
0000000100026770	mov	x1, #-0x1
0000000100026774	mov	x0, x26
0000000100026778	bl	0x1000318f8 ; symbol stub for: _xpc_array_set_fd
000000010002677c	add	x27, x27, #0x1
0000000100026780	ldr	x8, [sp, #0x38]
0000000100026784	cmp	x27, x8
0000000100026788	b.lo	0x100026768
000000010002678c	mov	x0, x26
0000000100026790	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100026794	ldr	x24, [x24, #0x8]
0000000100026798	cbnz	x24, 0x1000266d8
000000010002679c	adr	x1, #55984 ; literal pool for: "Sockets"
00000001000267a0	nop
00000001000267a4	mov	x0, x19
00000001000267a8	mov	x2, x23
00000001000267ac	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000267b0	mov	x0, x23
00000001000267b4	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000267b8	cbz	w22, 0x1000268a0
00000001000267bc	mov	x0, #0x0
00000001000267c0	mov	x1, #0x0
00000001000267c4	mov	x2, #0x0
00000001000267c8	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
00000001000267cc	mov	x22, x0
00000001000267d0	ldrb	w8, [x20, #0x135]
00000001000267d4	tbz	w8, #0x1, 0x1000267ec
00000001000267d8	adr	x2, #85407 ; literal pool for: "The launch(3) APIs cannot be used to check in MultipleInstance endpoints."
00000001000267dc	nop
00000001000267e0	orr	w1, wzr, #0x4
00000001000267e4	mov	x0, x20
00000001000267e8	bl	0x1000118ec
00000001000267ec	ldr	x26, [x20, #0xa8]
00000001000267f0	cbz	x26, 0x100026884
00000001000267f4	mov	x27, #0x202020202020202
00000001000267f8	adr	x23, #85533 ; literal pool for: "Endpoint has been activated through legacy launch(3) APIs. Please switch to XPC or bootstrap_check_in(): %s"
00000001000267fc	nop
0000000100026800	adr	x24, #85441 ; literal pool for: "Failed to activate endpoint for legacy check-in. Please just don't use this API: %s"
0000000100026804	nop
0000000100026808	str	wzr, [sp, #0x38]
000000010002680c	stp	x27, x27, [sp, #0x28]
0000000100026810	stp	x27, x27, [sp, #0x18]
0000000100026814	mov	x0, x20
0000000100026818	bl	0x100015ed8
000000010002681c	str	w0, [sp, #0x2c]
0000000100026820	add	x25, x26, #0x88
0000000100026824	add	x1, sp, #0x18
0000000100026828	add	x4, sp, #0x38
000000010002682c	mov	x0, x21
0000000100026830	mov	x2, x25
0000000100026834	mov	x3, #0x0
0000000100026838	bl	0x100023fcc
000000010002683c	cbz	w0, 0x100026858
0000000100026840	str	x25, [sp]
0000000100026844	orr	w1, wzr, #0x3
0000000100026848	mov	x0, x20
000000010002684c	mov	x2, x24
0000000100026850	bl	0x1000118ec
0000000100026854	b	0x10002687c
0000000100026858	str	x25, [sp]
000000010002685c	orr	w1, wzr, #0x4
0000000100026860	mov	x0, x20
0000000100026864	mov	x2, x23
0000000100026868	bl	0x1000118ec
000000010002686c	ldr	w2, [sp, #0x38]
0000000100026870	mov	x0, x22
0000000100026874	mov	x1, x25
0000000100026878	bl	0x100031af0 ; symbol stub for: _xpc_dictionary_set_mach_recv
000000010002687c	ldr	x26, [x26, #0x8]
0000000100026880	cbnz	x26, 0x100026808
0000000100026884	adr	x1, #55798 ; literal pool for: "MachServices"
0000000100026888	nop
000000010002688c	mov	x0, x19
0000000100026890	mov	x2, x22
0000000100026894	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100026898	mov	x0, x22
000000010002689c	bl	0x100031b68 ; symbol stub for: _xpc_release
00000001000268a0	ldp	x29, x30, [sp, #0x90]
00000001000268a4	ldp	x20, x19, [sp, #0x80]
00000001000268a8	ldp	x22, x21, [sp, #0x70]
00000001000268ac	ldp	x24, x23, [sp, #0x60]
00000001000268b0	ldp	x26, x25, [sp, #0x50]
00000001000268b4	ldp	x28, x27, [sp, #0x40]
00000001000268b8	add	sp, sp, #0xa0
00000001000268bc	ret
00000001000268c0	stp	x22, x21, [sp, #-0x30]!
00000001000268c4	stp	x20, x19, [sp, #0x10]
00000001000268c8	stp	x29, x30, [sp, #0x20]
00000001000268cc	add	x29, sp, #0x20
00000001000268d0	mov	x19, x2
00000001000268d4	mov	x21, x1
00000001000268d8	mov	x20, x0
00000001000268dc	mov	x0, x21
00000001000268e0	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000268e4	nop
00000001000268e8	ldr	x8, #0x197f8 ; literal pool symbol address: __xpc_type_string
00000001000268ec	cmp	x0, x8
00000001000268f0	b.eq	0x100026904
00000001000268f4	ldp	x29, x30, [sp, #0x20]
00000001000268f8	ldp	x20, x19, [sp, #0x10]
00000001000268fc	ldp	x22, x21, [sp], #0x30
0000000100026900	ret
0000000100026904	mov	x0, x21
0000000100026908	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010002690c	mov	x2, x0
0000000100026910	mov	x0, x19
0000000100026914	mov	x1, x20
0000000100026918	ldp	x29, x30, [sp, #0x20]
000000010002691c	ldp	x20, x19, [sp, #0x10]
0000000100026920	ldp	x22, x21, [sp], #0x30
0000000100026924	b	0x1000247ec
0000000100026928	sub	sp, sp, #0x40
000000010002692c	stp	x22, x21, [sp, #0x10]
0000000100026930	stp	x20, x19, [sp, #0x20]
0000000100026934	stp	x29, x30, [sp, #0x30]
0000000100026938	add	x29, sp, #0x30
000000010002693c	mov	x20, x1
0000000100026940	mov	x19, x0
0000000100026944	str	w20, [x19, #0x7c]
0000000100026948	mov	w21, w20
000000010002694c	bl	0x10000d8e0
0000000100026950	mov	x3, x0
0000000100026954	nop
0000000100026958	ldr	x0, #0x196f0 ; literal pool symbol address: __dispatch_source_type_mach_send
000000010002695c	orr	w2, wzr, #0x1
0000000100026960	mov	x1, x21
0000000100026964	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
0000000100026968	str	x0, [x19, #0x88]
000000010002696c	mov	w1, #0xb
0000000100026970	mov	x0, x19
0000000100026974	bl	0x10000e820
0000000100026978	ldr	x0, [x19, #0x88]
000000010002697c	mov	x1, x19
0000000100026980	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100026984	ldr	x0, [x19, #0x88]
0000000100026988	adr	x1, #-15208
000000010002698c	nop
0000000100026990	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100026994	ldr	x0, [x19, #0x88]
0000000100026998	adr	x1, #332
000000010002699c	nop
00000001000269a0	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
00000001000269a4	ldr	x0, [x19, #0x88]
00000001000269a8	bl	0x100030e6c ; symbol stub for: _dispatch_resume
00000001000269ac	ldr	x8, [x19, #0x60]
00000001000269b0	adr	x9, #116840
00000001000269b4	nop
00000001000269b8	cmp	x8, x9
00000001000269bc	b.ne	0x100026a88
00000001000269c0	ldr	x21, [x19, #0x68]
00000001000269c4	bl	0x10000d8e0
00000001000269c8	mov	x3, x0
00000001000269cc	nop
00000001000269d0	ldr	x0, #0x19680 ; literal pool symbol address: __dispatch_source_type_proc
00000001000269d4	orr	w2, wzr, #0x20000000
00000001000269d8	mov	x1, x21
00000001000269dc	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
00000001000269e0	str	x0, [x19, #0x80]
00000001000269e4	mov	w1, #0xd
00000001000269e8	mov	x0, x19
00000001000269ec	bl	0x10000e820
00000001000269f0	ldr	x0, [x19, #0x80]
00000001000269f4	mov	x1, x19
00000001000269f8	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
00000001000269fc	ldr	x0, [x19, #0x80]
0000000100026a00	adr	x1, #296
0000000100026a04	nop
0000000100026a08	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100026a0c	ldr	w0, [x19, #0x68]
0000000100026a10	bl	0x100015490
0000000100026a14	cbz	x0, 0x100026a20
0000000100026a18	bl	0x100016408
0000000100026a1c	cbz	w0, 0x100026a58
0000000100026a20	nop
0000000100026a24	nop
0000000100026a28	ldr	x0, #0x1d9f8
0000000100026a2c	add	x8, x19, #0x3a8
0000000100026a30	str	x8, [sp]
0000000100026a34	adr	x2, #85492 ; literal pool for: "%s: uncorking exec source upfront"
0000000100026a38	nop
0000000100026a3c	mov	w1, #0x0
0000000100026a40	bl	0x1000270c8
0000000100026a44	ldr	x0, [x19, #0x80]
0000000100026a48	bl	0x100030e6c ; symbol stub for: _dispatch_resume
0000000100026a4c	mov	x0, x19
0000000100026a50	bl	0x1000212a4
0000000100026a54	b	0x100026a88
0000000100026a58	nop
0000000100026a5c	nop
0000000100026a60	ldr	x0, #0x1d9c0
0000000100026a64	add	x8, x19, #0x3a8
0000000100026a68	str	x8, [sp]
0000000100026a6c	adr	x2, #85470 ; literal pool for: "%s: deferring exec source uncork"
0000000100026a70	nop
0000000100026a74	mov	w1, #0x0
0000000100026a78	bl	0x1000270c8
0000000100026a7c	ldrh	w8, [x19, #0x3a0]
0000000100026a80	orr	w8, w8, #0x400
0000000100026a84	strh	w8, [x19, #0x3a0]
0000000100026a88	str	wzr, [sp, #0xc]
0000000100026a8c	add	w8, w20, #0x1
0000000100026a90	cmp	w8, #0x2
0000000100026a94	b.lo	0x100026ac8
0000000100026a98	nop
0000000100026a9c	ldr	x8, #0x19684 ; literal pool symbol address: _mach_task_self_
0000000100026aa0	ldr	w0, [x8]
0000000100026aa4	add	x2, sp, #0xc
0000000100026aa8	mov	x1, x20
0000000100026aac	bl	0x1000312c8 ; symbol stub for: _mach_port_type
0000000100026ab0	cbz	w0, 0x100026ac0
0000000100026ab4	sxtw	x0, w0
0000000100026ab8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100026abc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026ac0	ldrb	w8, [sp, #0xe]
0000000100026ac4	tbz	w8, #0x4, 0x100026ad0
0000000100026ac8	mov	x0, x19
0000000100026acc	bl	0x100022cf8
0000000100026ad0	ldp	x29, x30, [sp, #0x30]
0000000100026ad4	ldp	x20, x19, [sp, #0x20]
0000000100026ad8	ldp	x22, x21, [sp, #0x10]
0000000100026adc	add	sp, sp, #0x40
0000000100026ae0	ret
0000000100026ae4	stp	x20, x19, [sp, #-0x20]!
0000000100026ae8	stp	x29, x30, [sp, #0x10]
0000000100026aec	add	x29, sp, #0x10
0000000100026af0	mov	x19, x0
0000000100026af4	bl	0x100030ed8 ; symbol stub for: _dispatch_source_get_handle
0000000100026af8	add	w8, w0, #0x1
0000000100026afc	cmp	w8, #0x2
0000000100026b00	b.lo	0x100026b18
0000000100026b04	bl	0x10000888c
0000000100026b08	cbz	w0, 0x100026b18
0000000100026b0c	sxtw	x0, w0
0000000100026b10	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100026b14	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026b18	mov	x0, x19
0000000100026b1c	ldp	x29, x30, [sp, #0x10]
0000000100026b20	ldp	x20, x19, [sp], #0x20
0000000100026b24	b	0x100030e60 ; symbol stub for: _dispatch_release
0000000100026b28	sub	sp, sp, #0x30
0000000100026b2c	stp	x20, x19, [sp, #0x10]
0000000100026b30	stp	x29, x30, [sp, #0x20]
0000000100026b34	add	x29, sp, #0x20
0000000100026b38	mov	x19, x0
0000000100026b3c	nop
0000000100026b40	nop
0000000100026b44	ldr	x0, #0x1d8dc
0000000100026b48	add	x8, x19, #0x3a8
0000000100026b4c	str	x8, [sp]
0000000100026b50	adr	x2, #85275 ; literal pool for: "%s: domain exec event"
0000000100026b54	nop
0000000100026b58	mov	w1, #0x0
0000000100026b5c	bl	0x1000270c8
0000000100026b60	ldrh	w8, [x19, #0x3a0]
0000000100026b64	orr	w8, w8, #0x100
0000000100026b68	strh	w8, [x19, #0x3a0]
0000000100026b6c	mov	x0, x19
0000000100026b70	ldp	x29, x30, [sp, #0x20]
0000000100026b74	ldp	x20, x19, [sp, #0x10]
0000000100026b78	add	sp, sp, #0x30
0000000100026b7c	b	0x100022e20
0000000100026b80	sub	sp, sp, #0x30
0000000100026b84	stp	x20, x19, [sp, #0x10]
0000000100026b88	stp	x29, x30, [sp, #0x20]
0000000100026b8c	add	x29, sp, #0x20
0000000100026b90	mov	x19, x0
0000000100026b94	str	wzr, [sp, #0xc]
0000000100026b98	ldr	w20, [x19, #0x14]
0000000100026b9c	bl	0x1000310d0 ; symbol stub for: _getpid
0000000100026ba0	cmp	w20, w0
0000000100026ba4	b.ne	0x100026bb0
0000000100026ba8	orr	w0, wzr, #0x1
0000000100026bac	b	0x100026bf0
0000000100026bb0	ldr	w0, [x19, #0x14]
0000000100026bb4	add	x2, sp, #0xc
0000000100026bb8	orr	w3, wzr, #0x4
0000000100026bbc	mov	w1, #0x0
0000000100026bc0	mov	x4, x19
0000000100026bc4	bl	0x100030d10 ; symbol stub for: _csops_audittoken
0000000100026bc8	cbz	w0, 0x100026be8
0000000100026bcc	bl	0x100030adc ; symbol stub for: ___error
0000000100026bd0	ldrsw	x0, [x0]
0000000100026bd4	cbz	w0, 0x100026bf0
0000000100026bd8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100026bdc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026be0	mov	w0, #0x0
0000000100026be4	b	0x100026bf0
0000000100026be8	ldrb	w8, [sp, #0xf]
0000000100026bec	ubfx	w0, w8, #2, #1
0000000100026bf0	ldp	x29, x30, [sp, #0x20]
0000000100026bf4	ldp	x20, x19, [sp, #0x10]
0000000100026bf8	add	sp, sp, #0x30
0000000100026bfc	ret
0000000100026c00	stp	x20, x19, [sp, #-0x20]!
0000000100026c04	stp	x29, x30, [sp, #0x10]
0000000100026c08	add	x29, sp, #0x10
0000000100026c0c	mov	x19, x0
0000000100026c10	ldr	x0, [x19, #0x18]
0000000100026c14	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100026c18	ldr	x0, [x19, #0x10]
0000000100026c1c	cbz	x0, 0x100026c2c
0000000100026c20	bl	0x100030fa4 ; symbol stub for: _fclose
0000000100026c24	cmn	w0, #0x1
0000000100026c28	b.eq	0x100026c38
0000000100026c2c	ldp	x29, x30, [sp, #0x10]
0000000100026c30	ldp	x20, x19, [sp], #0x20
0000000100026c34	ret
0000000100026c38	bl	0x100030adc ; symbol stub for: ___error
0000000100026c3c	ldrsw	x0, [x0]
0000000100026c40	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100026c44	ldp	x29, x30, [sp, #0x10]
0000000100026c48	ldp	x20, x19, [sp], #0x20
0000000100026c4c	b	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026c50	stp	x28, x27, [sp, #-0x60]!
0000000100026c54	stp	x26, x25, [sp, #0x10]
0000000100026c58	stp	x24, x23, [sp, #0x20]
0000000100026c5c	stp	x22, x21, [sp, #0x30]
0000000100026c60	stp	x20, x19, [sp, #0x40]
0000000100026c64	stp	x29, x30, [sp, #0x50]
0000000100026c68	add	x29, sp, #0x50
0000000100026c6c	sub	sp, sp, #0x450
0000000100026c70	mov	x20, x5
0000000100026c74	mov	x21, x4
0000000100026c78	mov	x23, x3
0000000100026c7c	mov	x24, x2
0000000100026c80	mov	x25, x1
0000000100026c84	nop
0000000100026c88	ldr	x8, #0x19390 ; literal pool symbol address: ___stack_chk_guard
0000000100026c8c	ldr	x8, [x8]
0000000100026c90	stur	x8, [x29, #-0x58]
0000000100026c94	stp	x0, xzr, [x29, #-0x68]
0000000100026c98	orr	w1, wzr, #0x6
0000000100026c9c	sub	x0, x29, #0x68
0000000100026ca0	mov	x2, #0x0
0000000100026ca4	bl	0x100031064 ; symbol stub for: _fts_open
0000000100026ca8	mov	x19, x0
0000000100026cac	cbz	x19, 0x100026ecc
0000000100026cb0	mov	x0, x19
0000000100026cb4	bl	0x100031070 ; symbol stub for: _fts_read
0000000100026cb8	cbz	x0, 0x100026ecc
0000000100026cbc	mov	w1, #0x0
0000000100026cc0	mov	x0, x19
0000000100026cc4	bl	0x10003104c ; symbol stub for: _fts_children
0000000100026cc8	mov	x26, x0
0000000100026ccc	cbz	x26, 0x100026edc
0000000100026cd0	str	w20, [sp, #0x1c]
0000000100026cd4	str	x19, [sp, #0x20]
0000000100026cd8	mov	x28, #0x0
0000000100026cdc	mov	x22, #0x0
0000000100026ce0	mov	w27, #0x0
0000000100026ce4	mov	w20, #0x0
0000000100026ce8	ldrh	w8, [x26, #0x58]
0000000100026cec	cmp	w8, #0x8
0000000100026cf0	b.ne	0x100026de0
0000000100026cf4	cbz	x25, 0x100026d08
0000000100026cf8	add	x0, x26, #0x68
0000000100026cfc	mov	x1, x25
0000000100026d00	bl	0x10000d7a4
0000000100026d04	cbz	w0, 0x100026de0
0000000100026d08	cbz	x24, 0x100026d1c
0000000100026d0c	add	x0, x26, #0x68
0000000100026d10	mov	x1, x24
0000000100026d14	bl	0x10000d7e4
0000000100026d18	cbz	w0, 0x100026de0
0000000100026d1c	ldr	x19, [x26, #0x60]
0000000100026d20	cmp	x23, #0x1
0000000100026d24	b.lt	0x100026dac
0000000100026d28	add	x0, sp, #0x28
0000000100026d2c	mov	x1, #0x0
0000000100026d30	bl	0x100031118 ; symbol stub for: _gettimeofday
0000000100026d34	cmn	w0, #0x1
0000000100026d38	b.ne	0x100026d4c
0000000100026d3c	bl	0x100030adc ; symbol stub for: ___error
0000000100026d40	ldrsw	x0, [x0]
0000000100026d44	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100026d48	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026d4c	ldr	x8, [sp, #0x28]
0000000100026d50	ldr	x9, [x19, #0x30]
0000000100026d54	sub	x8, x8, x9
0000000100026d58	cmp	x8, x23
0000000100026d5c	b.le	0x100026dac
0000000100026d60	ldr	x8, [x26, #0x30]
0000000100026d64	add	x9, x26, #0x68
0000000100026d68	stp	x8, x9, [sp]
0000000100026d6c	add	x0, sp, #0x38
0000000100026d70	orr	w1, wzr, #0x400
0000000100026d74	orr	w3, wzr, #0x400
0000000100026d78	mov	w2, #0x0
0000000100026d7c	adr	x4, #61124 ; literal pool for: "%s/%s"
0000000100026d80	nop
0000000100026d84	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100026d88	add	x0, sp, #0x38
0000000100026d8c	bl	0x10003182c ; symbol stub for: _unlink
0000000100026d90	cmn	w0, #0x1
0000000100026d94	b.ne	0x100026de0
0000000100026d98	bl	0x100030adc ; symbol stub for: ___error
0000000100026d9c	ldrsw	x0, [x0]
0000000100026da0	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100026da4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026da8	b	0x100026de0
0000000100026dac	cmp	w27, w20
0000000100026db0	b.lo	0x100026dd0
0000000100026db4	mov	w8, w20
0000000100026db8	lsl	x1, x8, #3
0000000100026dbc	add	w20, w20, #0x10
0000000100026dc0	lsl	x2, x20, #3
0000000100026dc4	mov	x0, x22
0000000100026dc8	bl	0x10000d4c0
0000000100026dcc	mov	x22, x0
0000000100026dd0	str	x26, [x22, w27, uxtw #3]
0000000100026dd4	add	w27, w27, #0x1
0000000100026dd8	ldr	x8, [x19, #0x60]
0000000100026ddc	add	x28, x8, x28
0000000100026de0	ldr	x26, [x26, #0x10]
0000000100026de4	cbnz	x26, 0x100026ce8
0000000100026de8	cbz	w27, 0x100026ec4
0000000100026dec	mov	w8, #0x0
0000000100026df0	mov	w23, w27
0000000100026df4	ldr	w10, [sp, #0x1c]
0000000100026df8	mov	w20, w10
0000000100026dfc	sub	w9, w27, #0x1
0000000100026e00	mov	x27, x10
0000000100026e04	adr	x24, #60988 ; literal pool for: "%s/%s"
0000000100026e08	nop
0000000100026e0c	add	x26, x22, w9, uxtw #3
0000000100026e10	adr	x25, #110384
0000000100026e14	nop
0000000100026e18	cmp	w27, #0x0
0000000100026e1c	cset	w9, ne
0000000100026e20	cmp	x21, #0x0
0000000100026e24	cset	w10, ne
0000000100026e28	cmp	x28, x21
0000000100026e2c	cset	w11, hi
0000000100026e30	and	w11, w10, w11
0000000100026e34	cmp	x23, x20
0000000100026e38	cset	w10, hi
0000000100026e3c	tbnz	w11, #0x0, 0x100026e48
0000000100026e40	and	w9, w9, w10
0000000100026e44	cbz	w9, 0x100026ec4
0000000100026e48	tbnz	w8, #0x0, 0x100026e60
0000000100026e4c	orr	w2, wzr, #0x8
0000000100026e50	mov	x0, x22
0000000100026e54	mov	x1, x23
0000000100026e58	mov	x3, x25
0000000100026e5c	bl	0x1000315b0 ; symbol stub for: _qsort_b
0000000100026e60	ldr	x19, [x26]
0000000100026e64	ldr	x8, [x19, #0x30]
0000000100026e68	add	x9, x19, #0x68
0000000100026e6c	stp	x8, x9, [sp]
0000000100026e70	add	x0, sp, #0x38
0000000100026e74	orr	w1, wzr, #0x400
0000000100026e78	orr	w3, wzr, #0x400
0000000100026e7c	mov	w2, #0x0
0000000100026e80	mov	x4, x24
0000000100026e84	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100026e88	add	x0, sp, #0x38
0000000100026e8c	bl	0x10003182c ; symbol stub for: _unlink
0000000100026e90	cmn	w0, #0x1
0000000100026e94	b.ne	0x100026ea8
0000000100026e98	bl	0x100030adc ; symbol stub for: ___error
0000000100026e9c	ldrsw	x0, [x0]
0000000100026ea0	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100026ea4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026ea8	ldr	x8, [x19, #0x60]
0000000100026eac	ldr	x8, [x8, #0x60]
0000000100026eb0	sub	x28, x28, x8
0000000100026eb4	sub	x26, x26, #0x8
0000000100026eb8	orr	w8, wzr, #0x1
0000000100026ebc	sub	x23, x23, #0x1
0000000100026ec0	cbnz	w23, 0x100026e18
0000000100026ec4	ldr	x19, [sp, #0x20]
0000000100026ec8	b	0x100026ee0
0000000100026ecc	bl	0x100030adc ; symbol stub for: ___error
0000000100026ed0	ldr	w20, [x0]
0000000100026ed4	cbnz	x19, 0x100026ef0
0000000100026ed8	b	0x100026f10
0000000100026edc	mov	x22, #0x0
0000000100026ee0	mov	x0, x22
0000000100026ee4	bl	0x100031010 ; symbol stub for: _free
0000000100026ee8	mov	w20, #0x0
0000000100026eec	cbz	x19, 0x100026f10
0000000100026ef0	mov	x0, x19
0000000100026ef4	bl	0x100031058 ; symbol stub for: _fts_close
0000000100026ef8	cmn	w0, #0x1
0000000100026efc	b.ne	0x100026f10
0000000100026f00	bl	0x100030adc ; symbol stub for: ___error
0000000100026f04	ldrsw	x0, [x0]
0000000100026f08	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100026f0c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100026f10	ldur	x8, [x29, #-0x58]
0000000100026f14	nop
0000000100026f18	ldr	x9, #0x19100 ; literal pool symbol address: ___stack_chk_guard
0000000100026f1c	ldr	x9, [x9]
0000000100026f20	cmp	x9, x8
0000000100026f24	b.ne	0x100026f4c
0000000100026f28	mov	x0, x20
0000000100026f2c	add	sp, sp, #0x450
0000000100026f30	ldp	x29, x30, [sp, #0x50]
0000000100026f34	ldp	x20, x19, [sp, #0x40]
0000000100026f38	ldp	x22, x21, [sp, #0x30]
0000000100026f3c	ldp	x24, x23, [sp, #0x20]
0000000100026f40	ldp	x26, x25, [sp, #0x10]
0000000100026f44	ldp	x28, x27, [sp], #0x60
0000000100026f48	ret
0000000100026f4c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100026f50	ldr	x8, [x1]
0000000100026f54	ldr	x8, [x8, #0x60]
0000000100026f58	ldr	x9, [x2]
0000000100026f5c	ldr	x9, [x9, #0x60]
0000000100026f60	ldr	x10, [x9, #0x30]
0000000100026f64	ldr	x11, [x8, #0x30]
0000000100026f68	cmp	x10, x11
0000000100026f6c	b.ne	0x100026f8c
0000000100026f70	ldr	x9, [x9, #0x38]
0000000100026f74	ldr	x8, [x8, #0x38]
0000000100026f78	mov	w10, #-0x1
0000000100026f7c	cmp	x9, x8
0000000100026f80	cset	w8, ne
0000000100026f84	csel	w0, w10, w8, lt
0000000100026f88	ret
0000000100026f8c	mov	w8, #-0x1
0000000100026f90	cneg	w0, w8, ge
0000000100026f94	ret
0000000100026f98	sub	sp, sp, #0x40
0000000100026f9c	stp	x22, x21, [sp, #0x10]
0000000100026fa0	stp	x20, x19, [sp, #0x20]
0000000100026fa4	stp	x29, x30, [sp, #0x30]
0000000100026fa8	add	x29, sp, #0x30
0000000100026fac	mov	x21, x1
0000000100026fb0	mov	x20, x0
0000000100026fb4	bl	0x10003173c ; symbol stub for: _strlen
0000000100026fb8	add	x0, x0, #0x1
0000000100026fbc	bl	0x10000ecb8
0000000100026fc0	mov	x19, x0
0000000100026fc4	add	x0, x19, #0x38
0000000100026fc8	mov	x1, x20
0000000100026fcc	bl	0x10003170c ; symbol stub for: _strcpy
0000000100026fd0	bl	0x10000a2bc
0000000100026fd4	mov	x2, x0
0000000100026fd8	mov	x0, x20
0000000100026fdc	mov	x1, #0x0
0000000100026fe0	bl	0x100030e54 ; symbol stub for: _dispatch_queue_create_with_target$V2
0000000100026fe4	mov	x8, x0
0000000100026fe8	str	x8, [x19, #0x18]
0000000100026fec	str	x21, [x19, #0x8]
0000000100026ff0	adrp	x9, 29 ; 0x100043000
0000000100026ff4	ldr	w10, [x9, #0xe50]
0000000100026ff8	cmp	w10, #0x3
0000000100026ffc	b.hi	0x100027094
0000000100027000	adr	x11, #118360
0000000100027004	nop
0000000100027008	str	x19, [x11, x10, lsl #3]
000000010002700c	add	w10, w10, #0x1
0000000100027010	str	w10, [x9, #0xe50]
0000000100027014	nop
0000000100027018	ldr	x0, #0x19050 ; literal pool symbol address: __dispatch_source_type_timer
000000010002701c	mov	x1, #0x0
0000000100027020	mov	x2, #0x0
0000000100027024	mov	x3, x8
0000000100027028	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
000000010002702c	mov	x20, x0
0000000100027030	cbz	x20, 0x10002708c
0000000100027034	mov	x1, #0xa000
0000000100027038	movk	x1, #0x30b8, lsl #16
000000010002703c	movk	x1, #0x346, lsl #32
0000000100027040	mov	x0, #0x0
0000000100027044	bl	0x100030f44 ; symbol stub for: _dispatch_walltime
0000000100027048	mov	x1, x0
000000010002704c	mov	x2, #0x914f0000
0000000100027050	movk	x2, #0x4e94, lsl #32
0000000100027054	mov	x3, #0x5800
0000000100027058	movk	x3, #0xf847, lsl #16
000000010002705c	movk	x3, #0xd, lsl #32
0000000100027060	mov	x0, x20
0000000100027064	bl	0x100030f14 ; symbol stub for: _dispatch_source_set_timer
0000000100027068	adr	x1, #1152
000000010002706c	nop
0000000100027070	mov	x0, x20
0000000100027074	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
0000000100027078	mov	x0, x20
000000010002707c	mov	x1, x19
0000000100027080	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
0000000100027084	mov	x0, x20
0000000100027088	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010002708c	str	x20, [x19, #0x28]
0000000100027090	b	0x1000270b0
0000000100027094	str	x20, [sp]
0000000100027098	adr	x2, #84417 ; literal pool for: "Will not clean up log file \"%s\""
000000010002709c	nop
00000001000270a0	mov	w1, #0x5
00000001000270a4	movk	w1, #0x1, lsl #16
00000001000270a8	mov	x0, #0x0
00000001000270ac	bl	0x100029dbc
00000001000270b0	mov	x0, x19
00000001000270b4	ldp	x29, x30, [sp, #0x30]
00000001000270b8	ldp	x20, x19, [sp, #0x20]
00000001000270bc	ldp	x22, x21, [sp, #0x10]
00000001000270c0	add	sp, sp, #0x40
00000001000270c4	ret
00000001000270c8	sub	sp, sp, #0x70
00000001000270cc	stp	x20, x19, [sp, #0x50]
00000001000270d0	stp	x29, x30, [sp, #0x60]
00000001000270d4	add	x29, sp, #0x60
00000001000270d8	mov	x20, x1
00000001000270dc	mov	x19, x0
00000001000270e0	ldr	x8, [x19, #0x8]
00000001000270e4	ldrb	w8, [x8]
00000001000270e8	adr	x9, #119697
00000001000270ec	nop
00000001000270f0	ldrb	w9, [x9]
00000001000270f4	cmp	w8, #0x0
00000001000270f8	ccmp	w9, #0x0, #0x0, ne
00000001000270fc	b.ne	0x1000271d8
0000000100027100	add	x8, x19, #0x20
0000000100027104	ldxr	w9, [x8]
0000000100027108	add	w10, w9, #0x1
000000010002710c	stxr	w11, w10, [x8]
0000000100027110	cbnz	w11, 0x100027104
0000000100027114	mov	w8, #0x2710
0000000100027118	cmp	w9, w8
000000010002711c	b.lt	0x100027134
0000000100027120	mov	x0, x19
0000000100027124	ldp	x29, x30, [sp, #0x60]
0000000100027128	ldp	x20, x19, [sp, #0x50]
000000010002712c	add	sp, sp, #0x70
0000000100027130	b	0x1000275d4
0000000100027134	add	x8, x29, #0x10
0000000100027138	stp	xzr, x8, [x29, #-0x20]
000000010002713c	sub	x0, x29, #0x20
0000000100027140	mov	x1, x2
0000000100027144	mov	x2, x8
0000000100027148	bl	0x100031880 ; symbol stub for: _vasprintf
000000010002714c	cmn	w0, #0x1
0000000100027150	b.eq	0x1000271d8
0000000100027154	tbnz	w20, #0x0, 0x100027170
0000000100027158	stp	xzr, xzr, [sp, #0x30]
000000010002715c	add	x0, sp, #0x30
0000000100027160	mov	x1, #0x0
0000000100027164	bl	0x100031118 ; symbol stub for: _gettimeofday
0000000100027168	ldr	x3, [sp, #0x30]
000000010002716c	b	0x100027174
0000000100027170	mov	x3, #0x0
0000000100027174	ldur	x2, [x29, #-0x20]
0000000100027178	mov	w1, #0x23
000000010002717c	mov	x0, x19
0000000100027180	bl	0x10000e39c
0000000100027184	nop
0000000100027188	ldr	x8, #0x18e88 ; literal pool symbol address: __NSConcreteStackBlock
000000010002718c	str	x8, [sp, #0x8]
0000000100027190	nop
0000000100027194	ldr	d0, 0x10003de90
0000000100027198	adr	x8, #80
000000010002719c	nop
00000001000271a0	str	d0, [sp, #0x10]
00000001000271a4	str	x8, [sp, #0x18]
00000001000271a8	adr	x8, #109496
00000001000271ac	nop
00000001000271b0	stp	x8, x0, [sp, #0x20]
00000001000271b4	orr	w0, wzr, #0x2
00000001000271b8	add	x1, sp, #0x8
00000001000271bc	bl	0x100030d40 ; symbol stub for: _dispatch_block_create
00000001000271c0	mov	x20, x0
00000001000271c4	ldr	x0, [x19, #0x18]
00000001000271c8	mov	x1, x20
00000001000271cc	bl	0x100030d28 ; symbol stub for: _dispatch_async
00000001000271d0	mov	x0, x20
00000001000271d4	bl	0x100030aa0 ; symbol stub for: __Block_release
00000001000271d8	ldp	x29, x30, [sp, #0x60]
00000001000271dc	ldp	x20, x19, [sp, #0x50]
00000001000271e0	add	sp, sp, #0x70
00000001000271e4	ret
00000001000271e8	stp	x26, x25, [sp, #-0x50]!
00000001000271ec	stp	x24, x23, [sp, #0x10]
00000001000271f0	stp	x22, x21, [sp, #0x20]
00000001000271f4	stp	x20, x19, [sp, #0x30]
00000001000271f8	stp	x29, x30, [sp, #0x40]
00000001000271fc	add	x29, sp, #0x40
0000000100027200	sub	sp, sp, #0x8c0
0000000100027204	nop
0000000100027208	ldr	x8, #0x18e10 ; literal pool symbol address: ___stack_chk_guard
000000010002720c	ldr	x8, [x8]
0000000100027210	stur	x8, [x29, #-0x48]
0000000100027214	ldr	x20, [x0, #0x20]
0000000100027218	ldp	x21, x19, [x20]
000000010002721c	ldr	x22, [x20, #0x10]
0000000100027220	ldrb	w8, [x21, #0x30]
0000000100027224	tbnz	w8, #0x0, 0x100027368
0000000100027228	add	x0, sp, #0x38
000000010002722c	mov	x1, #0x0
0000000100027230	bl	0x100031118 ; symbol stub for: _gettimeofday
0000000100027234	cmn	w0, #0x1
0000000100027238	b.ne	0x10002724c
000000010002723c	bl	0x100030adc ; symbol stub for: ___error
0000000100027240	ldrsw	x0, [x0]
0000000100027244	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100027248	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002724c	add	x0, sp, #0x38
0000000100027250	add	x1, sp, #0x438
0000000100027254	bl	0x1000311fc ; symbol stub for: _localtime_r
0000000100027258	ldr	w8, [sp, #0x44c]
000000010002725c	add	w8, w8, #0x76c
0000000100027260	ldr	w9, [sp, #0x448]
0000000100027264	add	w9, w9, #0x1
0000000100027268	ldr	w10, [sp, #0x444]
000000010002726c	ldr	w11, [sp, #0x440]
0000000100027270	ldr	w12, [sp, #0x43c]
0000000100027274	ldr	w13, [sp, #0x438]
0000000100027278	stp	x12, x13, [sp, #0x20]
000000010002727c	stp	x10, x11, [sp, #0x10]
0000000100027280	adr	x4, #84071 ; literal pool for: "%d-%02d-%02d.%02d.%02d.%02d"
0000000100027284	nop
0000000100027288	stp	x8, x9, [sp]
000000010002728c	sub	x23, x29, #0xc8
0000000100027290	sub	x0, x29, #0xc8
0000000100027294	orr	w1, wzr, #0x80
0000000100027298	orr	w3, wzr, #0x80
000000010002729c	mov	w2, #0x0
00000001000272a0	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
00000001000272a4	adr	x25, #115220
00000001000272a8	nop
00000001000272ac	ldr	x8, [x25]
00000001000272b0	add	x24, x21, #0x38
00000001000272b4	stp	x24, x23, [sp, #0x8]
00000001000272b8	adr	x4, #83984 ; literal pool for: "%s/%s.%s.log"
00000001000272bc	nop
00000001000272c0	str	x8, [sp]
00000001000272c4	add	x0, sp, #0x438
00000001000272c8	orr	w1, wzr, #0x400
00000001000272cc	orr	w3, wzr, #0x400
00000001000272d0	mov	w2, #0x0
00000001000272d4	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
00000001000272d8	adr	x1, #79990 ; literal pool for: "w"
00000001000272dc	nop
00000001000272e0	add	x0, sp, #0x438
00000001000272e4	bl	0x100030fec ; symbol stub for: _fopen
00000001000272e8	add	x23, x21, #0x10
00000001000272ec	str	x0, [x21, #0x10]
00000001000272f0	cbz	x0, 0x100027370
00000001000272f4	ldrb	w8, [x21, #0x30]
00000001000272f8	orr	w8, w8, #0x1
00000001000272fc	strb	w8, [x21, #0x30]
0000000100027300	ldr	x8, [x25]
0000000100027304	adr	x4, #83921 ; literal pool for: "%s/%s.current.log"
0000000100027308	nop
000000010002730c	stp	x8, x24, [sp]
0000000100027310	add	x0, sp, #0x38
0000000100027314	orr	w1, wzr, #0x400
0000000100027318	orr	w3, wzr, #0x400
000000010002731c	mov	w2, #0x0
0000000100027320	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100027324	add	x0, sp, #0x38
0000000100027328	bl	0x10003182c ; symbol stub for: _unlink
000000010002732c	cmn	w0, #0x1
0000000100027330	b.ne	0x100027344
0000000100027334	bl	0x100030adc ; symbol stub for: ___error
0000000100027338	ldr	w8, [x0]
000000010002733c	cmp	w8, #0x2
0000000100027340	b.ne	0x10002735c
0000000100027344	add	x0, sp, #0x438
0000000100027348	bl	0x100030c14 ; symbol stub for: _basename
000000010002734c	add	x1, sp, #0x38
0000000100027350	bl	0x1000317cc ; symbol stub for: _symlink
0000000100027354	cmn	w0, #0x1
0000000100027358	b.ne	0x10002739c
000000010002735c	bl	0x100030adc ; symbol stub for: ___error
0000000100027360	ldrsw	x0, [x0]
0000000100027364	b	0x100027394
0000000100027368	add	x23, x21, #0x10
000000010002736c	b	0x10002739c
0000000100027370	bl	0x100030adc ; symbol stub for: ___error
0000000100027374	ldr	w8, [x0]
0000000100027378	cmp	w8, #0x2
000000010002737c	b.eq	0x10002739c
0000000100027380	cmp	w8, #0x1e
0000000100027384	b.eq	0x10002739c
0000000100027388	bl	0x100030adc ; symbol stub for: ___error
000000010002738c	ldrsw	x0, [x0]
0000000100027390	cbz	w0, 0x10002739c
0000000100027394	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100027398	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002739c	ldr	x0, [x23]
00000001000273a0	cbz	x0, 0x100027428
00000001000273a4	cbz	x22, 0x1000273e0
00000001000273a8	stur	x22, [x29, #-0xc8]
00000001000273ac	sub	x0, x29, #0xc8
00000001000273b0	add	x1, sp, #0x438
00000001000273b4	bl	0x1000311fc ; symbol stub for: _localtime_r
00000001000273b8	add	x22, sp, #0x38
00000001000273bc	add	x0, sp, #0x438
00000001000273c0	add	x1, sp, #0x38
00000001000273c4	bl	0x100030bfc ; symbol stub for: _asctime_r
00000001000273c8	strb	wzr, [sp, #0x50]
00000001000273cc	ldr	x0, [x23]
00000001000273d0	stp	x22, x19, [sp]
00000001000273d4	adr	x1, #83687 ; literal pool for: "%26s\t%s\n"
00000001000273d8	nop
00000001000273dc	b	0x1000273ec
00000001000273e0	str	x19, [sp]
00000001000273e4	adr	x1, #83680 ; literal pool for: "%s\n"
00000001000273e8	nop
00000001000273ec	bl	0x100030ff8 ; symbol stub for: _fprintf
00000001000273f0	ldr	x0, [x23]
00000001000273f4	bl	0x100030fc8 ; symbol stub for: _fflush
00000001000273f8	adr	x22, #114976
00000001000273fc	nop
0000000100027400	ldr	x8, [x22]
0000000100027404	cmp	x8, #0x1
0000000100027408	b.lt	0x100027428
000000010002740c	ldr	x0, [x23]
0000000100027410	bl	0x100031034 ; symbol stub for: _ftell
0000000100027414	ldr	x8, [x22]
0000000100027418	cmp	x0, x8
000000010002741c	b.le	0x100027428
0000000100027420	mov	x0, x21
0000000100027424	bl	0x100027580
0000000100027428	mov	x0, x21
000000010002742c	bl	0x1000275d4
0000000100027430	mov	x0, x20
0000000100027434	bl	0x10000e470
0000000100027438	mov	x0, x19
000000010002743c	bl	0x100031010 ; symbol stub for: _free
0000000100027440	ldur	x8, [x29, #-0x48]
0000000100027444	nop
0000000100027448	ldr	x9, #0x18bd0 ; literal pool symbol address: ___stack_chk_guard
000000010002744c	ldr	x9, [x9]
0000000100027450	cmp	x9, x8
0000000100027454	b.ne	0x100027474
0000000100027458	add	sp, sp, #0x8c0
000000010002745c	ldp	x29, x30, [sp, #0x40]
0000000100027460	ldp	x20, x19, [sp, #0x30]
0000000100027464	ldp	x22, x21, [sp, #0x20]
0000000100027468	ldp	x24, x23, [sp, #0x10]
000000010002746c	ldp	x26, x25, [sp], #0x50
0000000100027470	ret
0000000100027474	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100027478	stp	x22, x21, [sp, #-0x30]!
000000010002747c	stp	x20, x19, [sp, #0x10]
0000000100027480	stp	x29, x30, [sp, #0x20]
0000000100027484	add	x29, sp, #0x20
0000000100027488	adrp	x20, 28 ; 0x100043000
000000010002748c	ldr	w8, [x20, #0xe50]
0000000100027490	cbz	w8, 0x1000274d8
0000000100027494	mov	x21, #0x0
0000000100027498	adr	x22, #117184
000000010002749c	nop
00000001000274a0	ldr	x9, [x22, x21, lsl #3]
00000001000274a4	cbz	x9, 0x1000274cc
00000001000274a8	ldr	x19, [x9, #0x28]
00000001000274ac	cbz	x19, 0x1000274cc
00000001000274b0	mov	x0, x19
00000001000274b4	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
00000001000274b8	mov	x0, x19
00000001000274bc	bl	0x100030e60 ; symbol stub for: _dispatch_release
00000001000274c0	ldr	x8, [x22, x21, lsl #3]
00000001000274c4	str	xzr, [x8, #0x28]
00000001000274c8	ldr	w8, [x20, #0xe50]
00000001000274cc	add	x21, x21, #0x1
00000001000274d0	cmp	x21, w8, uxtw
00000001000274d4	b.lo	0x1000274a0
00000001000274d8	ldp	x29, x30, [sp, #0x20]
00000001000274dc	ldp	x20, x19, [sp, #0x10]
00000001000274e0	ldp	x22, x21, [sp], #0x30
00000001000274e4	ret
00000001000274e8	sub	sp, sp, #0x30
00000001000274ec	stp	x20, x19, [sp, #0x10]
00000001000274f0	stp	x29, x30, [sp, #0x20]
00000001000274f4	add	x29, sp, #0x20
00000001000274f8	mov	x19, x0
00000001000274fc	add	x20, x19, #0x38
0000000100027500	str	x20, [sp]
0000000100027504	adr	x2, #83317 ; literal pool for: "cleaning log files: %s"
0000000100027508	nop
000000010002750c	orr	w1, wzr, #0x6
0000000100027510	mov	x0, #0x0
0000000100027514	bl	0x100029dbc
0000000100027518	nop
000000010002751c	nop
0000000100027520	ldr	x0, #0x1bf98
0000000100027524	nop
0000000100027528	nop
000000010002752c	ldr	x8, #0x1bfec
0000000100027530	add	x4, x8, x8, lsl #2
0000000100027534	mov	w3, #0xa300
0000000100027538	movk	w3, #0x2, lsl #16
000000010002753c	mov	w5, #0x0
0000000100027540	mov	x1, x20
0000000100027544	mov	x2, #0x0
0000000100027548	bl	0x100026c50
000000010002754c	cbz	w0, 0x10002756c
0000000100027550	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100027554	str	x0, [sp]
0000000100027558	adr	x2, #83256 ; literal pool for: "warning: failed to clean up log files: %s\n"
000000010002755c	nop
0000000100027560	orr	w1, wzr, #0x3
0000000100027564	mov	x0, #0x0
0000000100027568	bl	0x100029dbc
000000010002756c	mov	x0, x19
0000000100027570	ldp	x29, x30, [sp, #0x20]
0000000100027574	ldp	x20, x19, [sp, #0x10]
0000000100027578	add	sp, sp, #0x30
000000010002757c	b	0x100027580
0000000100027580	stp	x20, x19, [sp, #-0x20]!
0000000100027584	stp	x29, x30, [sp, #0x10]
0000000100027588	add	x29, sp, #0x10
000000010002758c	mov	x19, x0
0000000100027590	ldrb	w8, [x19, #0x30]
0000000100027594	tbz	w8, #0x0, 0x1000275c8
0000000100027598	and	w8, w8, #0xfe
000000010002759c	strb	w8, [x19, #0x30]
00000001000275a0	ldr	x0, [x19, #0x10]
00000001000275a4	cbz	x0, 0x1000275c8
00000001000275a8	bl	0x100030fa4 ; symbol stub for: _fclose
00000001000275ac	cmn	w0, #0x1
00000001000275b0	b.ne	0x1000275c4
00000001000275b4	bl	0x100030adc ; symbol stub for: ___error
00000001000275b8	ldrsw	x0, [x0]
00000001000275bc	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000275c0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000275c4	str	xzr, [x19, #0x10]
00000001000275c8	ldp	x29, x30, [sp, #0x10]
00000001000275cc	ldp	x20, x19, [sp], #0x20
00000001000275d0	ret
00000001000275d4	add	x8, x0, #0x20
00000001000275d8	ldxr	w10, [x8]
00000001000275dc	sub	w9, w10, #0x1
00000001000275e0	stxr	w11, w9, [x8]
00000001000275e4	cbnz	w11, 0x1000275d8
00000001000275e8	cmp	w10, #0x0
00000001000275ec	b.le	0x1000275f4
00000001000275f0	ret
00000001000275f4	stp	x29, x30, [sp, #-0x10]!
00000001000275f8	mov	x29, sp
00000001000275fc	lsr	w8, w9, #31
0000000100027600	eor	w0, w8, #0x1
0000000100027604	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100027608	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002760c	brk	#0x1
0000000100027610	stp	x29, x30, [sp, #-0x10]!
0000000100027614	mov	x29, sp
0000000100027618	ldr	x8, [x0, #0x8]
000000010002761c	cmn	x8, #0x1
0000000100027620	b.ne	0x100027648
0000000100027624	ldr	x8, [x0, #0x10]
0000000100027628	cmn	x8, #0x1
000000010002762c	b.ne	0x100027648
0000000100027630	ldr	x8, [x0, #0x28]
0000000100027634	cbnz	x8, 0x100027658
0000000100027638	ldr	x0, [x0, #0x20]
000000010002763c	mov	w1, #0x0
0000000100027640	ldp	x29, x30, [sp], #0x10
0000000100027644	b	0x10000e4a4
0000000100027648	mov	x0, #0x0
000000010002764c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100027650	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100027654	brk	#0x1
0000000100027658	mov	x0, #0x0
000000010002765c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100027660	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100027664	brk	#0x1
0000000100027668	stp	x20, x19, [sp, #-0x20]!
000000010002766c	stp	x29, x30, [sp, #0x10]
0000000100027670	add	x29, sp, #0x10
0000000100027674	mov	x19, x0
0000000100027678	ldr	x8, [x19, #0x20]
000000010002767c	cbnz	x8, 0x1000276e0
0000000100027680	ldr	x0, [x19, #0x18]
0000000100027684	bl	0x10002c3a0
0000000100027688	cbnz	x0, 0x1000276f0
000000010002768c	ldr	x0, [x19, #0x30]
0000000100027690	bl	0x10002c3a0
0000000100027694	cbnz	x0, 0x100027700
0000000100027698	ldr	x8, [x19, #0x28]
000000010002769c	cbz	x8, 0x1000276c0
00000001000276a0	ldr	x8, [x19, #0x8]
00000001000276a4	cbz	x8, 0x1000276b0
00000001000276a8	ldr	x9, [x19, #0x10]
00000001000276ac	str	x9, [x8, #0x10]
00000001000276b0	ldr	x9, [x19, #0x10]
00000001000276b4	str	x8, [x9]
00000001000276b8	mov	x8, #-0x1
00000001000276bc	stp	x8, x8, [x19, #0x8]
00000001000276c0	ldr	x0, [x19, #0x18]
00000001000276c4	mov	w1, #0x0
00000001000276c8	bl	0x10000e4a4
00000001000276cc	ldr	x0, [x19, #0x30]
00000001000276d0	mov	w1, #0x0
00000001000276d4	ldp	x29, x30, [sp, #0x10]
00000001000276d8	ldp	x20, x19, [sp], #0x20
00000001000276dc	b	0x10000e4a4
00000001000276e0	mov	x0, #0x0
00000001000276e4	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000276e8	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000276ec	brk	#0x1
00000001000276f0	mov	x0, #0x0
00000001000276f4	bl	0x100030b48 ; symbol stub for: __os_assert_log
00000001000276f8	bl	0x100030b78 ; symbol stub for: __os_crash
00000001000276fc	brk	#0x1
0000000100027700	mov	x0, #0x0
0000000100027704	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100027708	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002770c	brk	#0x1
0000000100027710	ldr	x8, [x0, #0x8]
0000000100027714	cbnz	x8, 0x10002771c
0000000100027718	ret
000000010002771c	stp	x29, x30, [sp, #-0x10]!
0000000100027720	mov	x29, sp
0000000100027724	mov	x0, #0x0
0000000100027728	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002772c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100027730	brk	#0x1
0000000100027734	stp	x29, x30, [sp, #-0x10]!
0000000100027738	mov	x29, sp
000000010002773c	ldr	x8, [x0, #0x8]
0000000100027740	cmn	x8, #0x1
0000000100027744	b.ne	0x100027778
0000000100027748	ldr	x8, [x0, #0x10]
000000010002774c	cmn	x8, #0x1
0000000100027750	b.ne	0x100027778
0000000100027754	ldr	x8, [x0, #0x18]
0000000100027758	cmn	x8, #0x1
000000010002775c	b.ne	0x100027788
0000000100027760	ldr	x8, [x0, #0x20]
0000000100027764	cmn	x8, #0x1
0000000100027768	b.ne	0x100027788
000000010002776c	ldr	x0, [x0, #0x30]
0000000100027770	ldp	x29, x30, [sp], #0x10
0000000100027774	b	0x100031b68 ; symbol stub for: _xpc_release
0000000100027778	mov	x0, #0x0
000000010002777c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100027780	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100027784	brk	#0x1
0000000100027788	mov	x0, #0x0
000000010002778c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100027790	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100027794	brk	#0x1
0000000100027798	adr	x1, #16
000000010002779c	nop
00000001000277a0	orr	w0, wzr, #0x4
00000001000277a4	b	0x10002d3e8
00000001000277a8	sub	sp, sp, #0x70
00000001000277ac	stp	x26, x25, [sp, #0x20]
00000001000277b0	stp	x24, x23, [sp, #0x30]
00000001000277b4	stp	x22, x21, [sp, #0x40]
00000001000277b8	stp	x20, x19, [sp, #0x50]
00000001000277bc	stp	x29, x30, [sp, #0x60]
00000001000277c0	add	x29, sp, #0x60
00000001000277c4	mov	x19, x3
00000001000277c8	mov	x20, x2
00000001000277cc	mov	x21, x1
00000001000277d0	bl	0x10002d3b4
00000001000277d4	mov	x22, x0
00000001000277d8	sub	w8, w21, #0x190
00000001000277dc	cmp	w8, #0x7
00000001000277e0	b.hi	0x100027bf4
00000001000277e4	mov	w0, #0x2d
00000001000277e8	adr	x9, #1780
00000001000277ec	nop
00000001000277f0	ldrsw	x8, [x9, x8, lsl #2]
00000001000277f4	add	x8, x8, x9
00000001000277f8	br	x8
00000001000277fc	ldr	w0, [x22, #0x14]
0000000100027800	bl	0x100015490
0000000100027804	mov	x21, x0
0000000100027808	cbz	x21, 0x100027bfc
000000010002780c	adr	x1, #58033 ; literal pool for: "stream"
0000000100027810	nop
0000000100027814	mov	x0, x20
0000000100027818	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010002781c	mov	x22, x0
0000000100027820	adr	x1, #62227 ; literal pool for: "name"
0000000100027824	nop
0000000100027828	mov	x0, x20
000000010002782c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100027830	mov	x23, x0
0000000100027834	adr	x1, #83030 ; literal pool for: "descriptor"
0000000100027838	nop
000000010002783c	mov	x0, x20
0000000100027840	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100027844	mov	x24, x0
0000000100027848	mov	w0, #0x16
000000010002784c	cbz	x22, 0x100027da8
0000000100027850	cbz	x23, 0x100027da8
0000000100027854	cbz	x24, 0x100027870
0000000100027858	mov	x0, x24
000000010002785c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100027860	nop
0000000100027864	ldr	x8, #0x1885c ; literal pool symbol address: __xpc_type_dictionary
0000000100027868	cmp	x0, x8
000000010002786c	b.ne	0x100027be4
0000000100027870	mov	x0, x20
0000000100027874	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100027878	cbz	w0, 0x100027be4
000000010002787c	mov	x0, x21
0000000100027880	mov	x1, x22
0000000100027884	mov	x2, x23
0000000100027888	bl	0x100028890
000000010002788c	mov	x25, x0
0000000100027890	cbz	x25, 0x1000278a8
0000000100027894	mov	x0, x25
0000000100027898	bl	0x100028784
000000010002789c	mov	w1, #0x0
00000001000278a0	mov	x0, x25
00000001000278a4	bl	0x10000e4a4
00000001000278a8	cbz	x24, 0x1000278c0
00000001000278ac	mov	x0, x21
00000001000278b0	mov	x1, x22
00000001000278b4	mov	x2, x23
00000001000278b8	mov	x3, x24
00000001000278bc	bl	0x100028668
00000001000278c0	mov	x0, x20
00000001000278c4	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
00000001000278c8	mov	x8, x0
00000001000278cc	mov	w0, #0x0
00000001000278d0	str	x8, [x19]
00000001000278d4	b	0x100027da8
00000001000278d8	ldr	w0, [x22, #0x14]
00000001000278dc	bl	0x100015490
00000001000278e0	mov	x23, x0
00000001000278e4	cbz	x23, 0x100027bec
00000001000278e8	adr	x1, #57813 ; literal pool for: "stream"
00000001000278ec	nop
00000001000278f0	mov	x0, x20
00000001000278f4	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
00000001000278f8	mov	x22, x0
00000001000278fc	adr	x1, #82847 ; literal pool for: "token"
0000000100027900	nop
0000000100027904	mov	x0, x20
0000000100027908	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010002790c	mov	x21, x0
0000000100027910	mov	w0, #0x16
0000000100027914	cbz	x22, 0x100027da8
0000000100027918	cbz	x21, 0x100027da8
000000010002791c	mov	x0, x20
0000000100027920	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100027924	cbz	w0, 0x100027be4
0000000100027928	ldr	x23, [x23, #0xa0]
000000010002792c	cbz	x23, 0x100027c04
0000000100027930	ldr	x24, [x23, #0x20]
0000000100027934	add	x0, x24, #0x18
0000000100027938	mov	x1, x22
000000010002793c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100027940	cbz	w0, 0x100027d58
0000000100027944	ldr	x23, [x23, #0x8]
0000000100027948	orr	w0, wzr, #0x3
000000010002794c	cbnz	x23, 0x100027930
0000000100027950	b	0x100027da8
0000000100027954	ldr	w0, [x22, #0x14]
0000000100027958	bl	0x100015490
000000010002795c	mov	x23, x0
0000000100027960	cbz	x23, 0x100027bfc
0000000100027964	mov	x0, x20
0000000100027968	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
000000010002796c	cbz	w0, 0x100027be4
0000000100027970	adr	x1, #57677 ; literal pool for: "stream"
0000000100027974	nop
0000000100027978	mov	x0, x20
000000010002797c	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100027980	mov	x22, x0
0000000100027984	adr	x1, #61871 ; literal pool for: "name"
0000000100027988	nop
000000010002798c	mov	x0, x20
0000000100027990	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100027994	mov	x8, x0
0000000100027998	cbz	x22, 0x100027c0c
000000010002799c	cbz	x8, 0x100027c88
00000001000279a0	mov	x0, x23
00000001000279a4	mov	x1, x22
00000001000279a8	mov	x2, x8
00000001000279ac	bl	0x100028890
00000001000279b0	cbz	x0, 0x100027c04
00000001000279b4	ldr	x0, [x0, #0x30]
00000001000279b8	bl	0x100031b74 ; symbol stub for: _xpc_retain
00000001000279bc	mov	x21, x0
00000001000279c0	b	0x100027cd0
00000001000279c4	ldr	w0, [x22, #0x14]
00000001000279c8	bl	0x100015490
00000001000279cc	mov	x19, x0
00000001000279d0	cbz	x19, 0x100027bec
00000001000279d4	adr	x1, #57577 ; literal pool for: "stream"
00000001000279d8	nop
00000001000279dc	mov	x0, x20
00000001000279e0	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
00000001000279e4	mov	x21, x0
00000001000279e8	cbz	x21, 0x100027be4
00000001000279ec	mov	x0, x20
00000001000279f0	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
00000001000279f4	cbz	w0, 0x100027be4
00000001000279f8	ldr	x22, [x19, #0xa0]
00000001000279fc	cbz	x22, 0x100027a1c
0000000100027a00	ldr	x8, [x22, #0x20]
0000000100027a04	add	x0, x8, #0x18
0000000100027a08	mov	x1, x21
0000000100027a0c	bl	0x100031700 ; symbol stub for: _strcmp
0000000100027a10	cbz	w0, 0x100027d08
0000000100027a14	ldr	x22, [x22, #0x8]
0000000100027a18	cbnz	x22, 0x100027a00
0000000100027a1c	ldrb	w8, [x19, #0x134]
0000000100027a20	tst	w8, #0x10
0000000100027a24	orr	w8, wzr, #0x7c
0000000100027a28	b	0x100027da0
0000000100027a2c	ldr	w0, [x22, #0x14]
0000000100027a30	bl	0x100015490
0000000100027a34	mov	x23, x0
0000000100027a38	cbz	x23, 0x100027bec
0000000100027a3c	adr	x1, #57473 ; literal pool for: "stream"
0000000100027a40	nop
0000000100027a44	mov	x0, x20
0000000100027a48	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100027a4c	mov	x24, x0
0000000100027a50	cbz	x24, 0x100027be4
0000000100027a54	mov	x0, x20
0000000100027a58	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100027a5c	cbz	w0, 0x100027be4
0000000100027a60	ldr	x21, [x23, #0xa0]
0000000100027a64	cbz	x21, 0x100027a84
0000000100027a68	ldr	x8, [x21, #0x20]
0000000100027a6c	add	x0, x8, #0x18
0000000100027a70	mov	x1, x24
0000000100027a74	bl	0x100031700 ; symbol stub for: _strcmp
0000000100027a78	cbz	w0, 0x100027ac4
0000000100027a7c	ldr	x21, [x21, #0x8]
0000000100027a80	cbnz	x21, 0x100027a68
0000000100027a84	ldrb	w8, [x23, #0x134]
0000000100027a88	tbnz	w8, #0x4, 0x100027d00
0000000100027a8c	orr	w1, wzr, #0x7
0000000100027a90	mov	x0, x22
0000000100027a94	bl	0x100009be8
0000000100027a98	cbz	w0, 0x100027c04
0000000100027a9c	str	wzr, [sp, #0x1c]
0000000100027aa0	orr	w2, wzr, #0x1
0000000100027aa4	add	x3, sp, #0x1c
0000000100027aa8	mov	x0, x23
0000000100027aac	mov	x1, x24
0000000100027ab0	bl	0x100027efc
0000000100027ab4	mov	x21, x0
0000000100027ab8	ldr	w0, [sp, #0x1c]
0000000100027abc	cbnz	w0, 0x100027da8
0000000100027ac0	cbz	x21, 0x100027ecc
0000000100027ac4	mov	x0, x20
0000000100027ac8	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100027acc	mov	x20, x0
0000000100027ad0	mov	x0, #0x0
0000000100027ad4	mov	x1, #0x0
0000000100027ad8	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
0000000100027adc	mov	x22, x0
0000000100027ae0	ldr	x8, [x21, #0x20]
0000000100027ae4	ldr	x23, [x8, #0x8]
0000000100027ae8	cbz	x23, 0x100027b10
0000000100027aec	ldr	x2, [x23, #0x40]
0000000100027af0	mov	x1, #-0x1
0000000100027af4	mov	x0, x22
0000000100027af8	bl	0x100031928 ; symbol stub for: _xpc_array_set_uint64
0000000100027afc	ldr	x1, [x23, #0x30]
0000000100027b00	mov	x0, x22
0000000100027b04	bl	0x1000318b0 ; symbol stub for: _xpc_array_append_value
0000000100027b08	ldr	x23, [x23, #0x18]
0000000100027b0c	cbnz	x23, 0x100027aec
0000000100027b10	adr	x1, #82321 ; literal pool for: "events"
0000000100027b14	nop
0000000100027b18	mov	x0, x20
0000000100027b1c	mov	x2, x22
0000000100027b20	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100027b24	mov	x0, x22
0000000100027b28	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100027b2c	ldr	x8, [x21, #0x18]
0000000100027b30	ldr	x0, [x8, #0xe0]
0000000100027b34	bl	0x10001ea24
0000000100027b38	ldrb	w8, [x0, #0x40]
0000000100027b3c	and	w2, w8, #0x1
0000000100027b40	adr	x1, #82280 ; literal pool for: "initial-load-completed"
0000000100027b44	nop
0000000100027b48	mov	x0, x20
0000000100027b4c	bl	0x100031acc ; symbol stub for: _xpc_dictionary_set_bool
0000000100027b50	mov	w0, #0x0
0000000100027b54	str	x20, [x19]
0000000100027b58	ldrb	w8, [x21, #0x30]
0000000100027b5c	and	w8, w8, #0xfe
0000000100027b60	strb	w8, [x21, #0x30]
0000000100027b64	b	0x100027da8
0000000100027b68	ldr	w0, [x22, #0x14]
0000000100027b6c	bl	0x100015490
0000000100027b70	mov	x23, x0
0000000100027b74	cbz	x23, 0x100027bec
0000000100027b78	adr	x1, #57157 ; literal pool for: "stream"
0000000100027b7c	nop
0000000100027b80	mov	x0, x20
0000000100027b84	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
0000000100027b88	mov	x21, x0
0000000100027b8c	adr	x1, #82191 ; literal pool for: "token"
0000000100027b90	nop
0000000100027b94	mov	x0, x20
0000000100027b98	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
0000000100027b9c	mov	x22, x0
0000000100027ba0	mov	w0, #0x16
0000000100027ba4	cbz	x21, 0x100027da8
0000000100027ba8	cbz	x22, 0x100027da8
0000000100027bac	mov	x0, x20
0000000100027bb0	bl	0x100031a48 ; symbol stub for: _xpc_dictionary_expects_reply
0000000100027bb4	cbz	w0, 0x100027be4
0000000100027bb8	ldr	x23, [x23, #0xa0]
0000000100027bbc	cbz	x23, 0x100027c04
0000000100027bc0	ldr	x24, [x23, #0x20]
0000000100027bc4	add	x0, x24, #0x18
0000000100027bc8	mov	x1, x21
0000000100027bcc	bl	0x100031700 ; symbol stub for: _strcmp
0000000100027bd0	cbz	w0, 0x100027d78
0000000100027bd4	ldr	x23, [x23, #0x8]
0000000100027bd8	orr	w0, wzr, #0x3
0000000100027bdc	cbnz	x23, 0x100027bc0
0000000100027be0	b	0x100027da8
0000000100027be4	mov	w0, #0x16
0000000100027be8	b	0x100027da8
0000000100027bec	orr	w0, wzr, #0x1
0000000100027bf0	b	0x100027da8
0000000100027bf4	mov	w0, #0x21
0000000100027bf8	b	0x100027da8
0000000100027bfc	mov	w0, #0x71
0000000100027c00	b	0x100027da8
0000000100027c04	orr	w0, wzr, #0x3
0000000100027c08	b	0x100027da8
0000000100027c0c	mov	x0, #0x0
0000000100027c10	mov	x1, #0x0
0000000100027c14	mov	x2, #0x0
0000000100027c18	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100027c1c	mov	x21, x0
0000000100027c20	ldr	x24, [x23, #0x98]
0000000100027c24	cbz	x24, 0x100027cd0
0000000100027c28	ldr	x8, [x24, #0x38]
0000000100027c2c	add	x22, x8, #0x18
0000000100027c30	mov	x0, x21
0000000100027c34	mov	x1, x22
0000000100027c38	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100027c3c	mov	x23, x0
0000000100027c40	cbnz	x23, 0x100027c6c
0000000100027c44	mov	x1, #0x0
0000000100027c48	mov	x2, #0x0
0000000100027c4c	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100027c50	mov	x23, x0
0000000100027c54	mov	x0, x21
0000000100027c58	mov	x1, x22
0000000100027c5c	mov	x2, x23
0000000100027c60	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100027c64	mov	x0, x23
0000000100027c68	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100027c6c	add	x1, x24, #0x50
0000000100027c70	ldr	x2, [x24, #0x30]
0000000100027c74	mov	x0, x23
0000000100027c78	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100027c7c	ldr	x24, [x24, #0x8]
0000000100027c80	cbnz	x24, 0x100027c28
0000000100027c84	b	0x100027cd0
0000000100027c88	mov	x0, #0x0
0000000100027c8c	mov	x1, #0x0
0000000100027c90	mov	x2, #0x0
0000000100027c94	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
0000000100027c98	mov	x21, x0
0000000100027c9c	ldr	x23, [x23, #0x98]
0000000100027ca0	cbz	x23, 0x100027cd0
0000000100027ca4	ldr	x8, [x23, #0x38]
0000000100027ca8	add	x0, x8, #0x18
0000000100027cac	mov	x1, x22
0000000100027cb0	bl	0x100031700 ; symbol stub for: _strcmp
0000000100027cb4	cbnz	w0, 0x100027cc8
0000000100027cb8	add	x1, x23, #0x50
0000000100027cbc	ldr	x2, [x23, #0x30]
0000000100027cc0	mov	x0, x21
0000000100027cc4	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100027cc8	ldr	x23, [x23, #0x8]
0000000100027ccc	cbnz	x23, 0x100027ca4
0000000100027cd0	mov	x0, x20
0000000100027cd4	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100027cd8	mov	x20, x0
0000000100027cdc	adr	x1, #81849 ; literal pool for: "event"
0000000100027ce0	nop
0000000100027ce4	mov	x2, x21
0000000100027ce8	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
0000000100027cec	mov	x0, x21
0000000100027cf0	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100027cf4	mov	w0, #0x0
0000000100027cf8	str	x20, [x19]
0000000100027cfc	b	0x100027da8
0000000100027d00	orr	w0, wzr, #0x7c
0000000100027d04	b	0x100027da8
0000000100027d08	ldrb	w8, [x22, #0x30]
0000000100027d0c	tbnz	w8, #0x0, 0x100027dc4
0000000100027d10	ldr	x0, [x22, #0x28]
0000000100027d14	cbz	x0, 0x100027d40
0000000100027d18	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
0000000100027d1c	orr	w8, w0, #0x20
0000000100027d20	cmp	w8, #0x20
0000000100027d24	b.eq	0x100027d34
0000000100027d28	sxtw	x0, w0
0000000100027d2c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100027d30	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100027d34	ldr	x0, [x22, #0x28]
0000000100027d38	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100027d3c	str	xzr, [x22, #0x28]
0000000100027d40	mov	x0, x20
0000000100027d44	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100027d48	mov	x8, x0
0000000100027d4c	mov	w0, #0x0
0000000100027d50	str	x8, [x22, #0x28]
0000000100027d54	b	0x100027da8
0000000100027d58	ldr	x22, [x24, #0x8]
0000000100027d5c	cbz	x22, 0x100027d94
0000000100027d60	ldr	x8, [x22, #0x40]
0000000100027d64	cmp	x8, x21
0000000100027d68	b.eq	0x100027dfc
0000000100027d6c	ldr	x22, [x22, #0x18]
0000000100027d70	cbnz	x22, 0x100027d60
0000000100027d74	b	0x100027d94
0000000100027d78	ldr	x21, [x24, #0x8]
0000000100027d7c	cbz	x21, 0x100027d94
0000000100027d80	ldr	x8, [x21, #0x40]
0000000100027d84	cmp	x8, x22
0000000100027d88	b.eq	0x100027e1c
0000000100027d8c	ldr	x21, [x21, #0x18]
0000000100027d90	cbnz	x21, 0x100027d80
0000000100027d94	ldrb	w8, [x23, #0x30]
0000000100027d98	tst	w8, #0x1
0000000100027d9c	mov	w8, #0x84
0000000100027da0	orr	w9, wzr, #0x3
0000000100027da4	csel	w0, w9, w8, eq
0000000100027da8	ldp	x29, x30, [sp, #0x60]
0000000100027dac	ldp	x20, x19, [sp, #0x50]
0000000100027db0	ldp	x22, x21, [sp, #0x40]
0000000100027db4	ldp	x24, x23, [sp, #0x30]
0000000100027db8	ldp	x26, x25, [sp, #0x20]
0000000100027dbc	add	sp, sp, #0x70
0000000100027dc0	ret
0000000100027dc4	mov	x0, x20
0000000100027dc8	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100027dcc	mov	x19, x0
0000000100027dd0	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
0000000100027dd4	orr	w8, w0, #0x20
0000000100027dd8	cmp	w8, #0x20
0000000100027ddc	b.eq	0x100027dec
0000000100027de0	sxtw	x0, w0
0000000100027de4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100027de8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100027dec	mov	x0, x19
0000000100027df0	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100027df4	mov	w0, #0x0
0000000100027df8	b	0x100027da8
0000000100027dfc	mov	x0, x20
0000000100027e00	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
0000000100027e04	mov	x20, x0
0000000100027e08	add	x2, x22, #0x50
0000000100027e0c	adr	x1, #60711 ; literal pool for: "name"
0000000100027e10	nop
0000000100027e14	bl	0x100031b08 ; symbol stub for: _xpc_dictionary_set_string
0000000100027e18	b	0x100027cf4
0000000100027e1c	adr	x1, #81571 ; literal pool for: "state"
0000000100027e20	nop
0000000100027e24	mov	x0, x20
0000000100027e28	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
0000000100027e2c	ldrb	w8, [x21, #0x48]
0000000100027e30	and	w9, w8, #0xfe
0000000100027e34	orr	w9, w9, w0
0000000100027e38	strb	w9, [x21, #0x48]
0000000100027e3c	cbz	w0, 0x1000278c0
0000000100027e40	ldr	x0, [x21, #0x28]
0000000100027e44	tst	w8, #0x2
0000000100027e48	mov	w8, #0xb
0000000100027e4c	orr	w9, wzr, #0x8
0000000100027e50	csel	w1, w9, w8, eq
0000000100027e54	bl	0x100015574
0000000100027e58	mov	x22, x0
0000000100027e5c	mov	w8, w22
0000000100027e60	cmp	w22, #0x25
0000000100027e64	orr	w9, wzr, #0x1
0000000100027e68	lsl	x8, x9, x8
0000000100027e6c	mov	x9, #0x1000100010001
0000000100027e70	movk	x9, #0x30, lsl #32
0000000100027e74	movk	x9, #0x0, lsl #48
0000000100027e78	and	x8, x8, x9
0000000100027e7c	ccmp	x8, #0x0, #0x4, ls
0000000100027e80	b.eq	0x100027ea4
0000000100027e84	ldrb	w8, [x21, #0x48]
0000000100027e88	tbz	w8, #0x1, 0x1000278c0
0000000100027e8c	mov	x0, x21
0000000100027e90	bl	0x100028784
0000000100027e94	mov	w1, #0x0
0000000100027e98	mov	x0, x21
0000000100027e9c	bl	0x10000e4a4
0000000100027ea0	b	0x1000278c0
0000000100027ea4	ldr	x23, [x21, #0x28]
0000000100027ea8	mov	x0, x22
0000000100027eac	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100027eb0	stp	x22, x0, [sp]
0000000100027eb4	adr	x2, #81425 ; literal pool for: "Could not spawn service in response to XPC event state change: %d: %s"
0000000100027eb8	nop
0000000100027ebc	orr	w1, wzr, #0x3
0000000100027ec0	mov	x0, x23
0000000100027ec4	bl	0x1000118ec
0000000100027ec8	b	0x100027e84
0000000100027ecc	mov	x0, #0x0
0000000100027ed0	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100027ed4	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100027ed8	brk	#0x1
0000000100027edc	.long	0xfffff920
0000000100027ee0	.long	0xfffffa78
0000000100027ee4	.long	0xfffff9fc
0000000100027ee8	.long	0xfffffb50
0000000100027eec	.long	0xfffffc8c
0000000100027ef0	.long	0xfffffecc
0000000100027ef4	.long	0xfffffae8
0000000100027ef8	.long	0xfffffecc
0000000100027efc	sub	sp, sp, #0xa0
0000000100027f00	stp	x24, x23, [sp, #0x60]
0000000100027f04	stp	x22, x21, [sp, #0x70]
0000000100027f08	stp	x20, x19, [sp, #0x80]
0000000100027f0c	stp	x29, x30, [sp, #0x90]
0000000100027f10	add	x29, sp, #0x90
0000000100027f14	mov	x19, x3
0000000100027f18	mov	x23, x2
0000000100027f1c	mov	x21, x1
0000000100027f20	mov	x20, x0
0000000100027f24	ldr	x0, [x20, #0xe0]
0000000100027f28	bl	0x10001ea24
0000000100027f2c	mov	x22, x0
0000000100027f30	add	x8, sp, #0x40
0000000100027f34	stp	xzr, x8, [sp, #0x40]
0000000100027f38	nop
0000000100027f3c	ldr	d0, 0x10003df48
0000000100027f40	str	d0, [sp, #0x50]
0000000100027f44	mov	x1, x21
0000000100027f48	bl	0x10002809c
0000000100027f4c	str	x0, [sp, #0x58]
0000000100027f50	ldr	x8, [sp, #0x48]
0000000100027f54	ldr	x8, [x8, #0x18]
0000000100027f58	tbnz	w23, #0x0, 0x100027fac
0000000100027f5c	cbnz	x8, 0x100027fac
0000000100027f60	nop
0000000100027f64	ldr	x8, #0x180ac ; literal pool symbol address: __NSConcreteStackBlock
0000000100027f68	str	x8, [sp, #0x10]
0000000100027f6c	nop
0000000100027f70	ldr	d0, 0x10003df50
0000000100027f74	str	d0, [sp, #0x18]
0000000100027f78	adr	x8, #476
0000000100027f7c	nop
0000000100027f80	str	x8, [sp, #0x20]
0000000100027f84	adr	x8, #105980
0000000100027f88	nop
0000000100027f8c	str	x8, [sp, #0x28]
0000000100027f90	add	x8, sp, #0x40
0000000100027f94	stp	x8, x21, [sp, #0x30]
0000000100027f98	add	x1, sp, #0x10
0000000100027f9c	mov	x0, x22
0000000100027fa0	bl	0x1000280f0
0000000100027fa4	ldr	x8, [sp, #0x48]
0000000100027fa8	ldr	x8, [x8, #0x18]
0000000100027fac	cbz	x8, 0x100027fe4
0000000100027fb0	ldr	x8, [x8, #0x18]
0000000100027fb4	add	x8, x8, #0x460
0000000100027fb8	stp	x21, x8, [sp]
0000000100027fbc	adr	x2, #80936 ; literal pool for: "Event stream %s is already monitored by %s, ignoring"
0000000100027fc0	nop
0000000100027fc4	orr	w1, wzr, #0x3
0000000100027fc8	mov	x0, x20
0000000100027fcc	bl	0x1000118ec
0000000100027fd0	mov	x23, #0x0
0000000100027fd4	cbz	x19, 0x100028074
0000000100027fd8	mov	w8, #0x11
0000000100027fdc	str	w8, [x19]
0000000100027fe0	b	0x100028074
0000000100027fe4	and	w24, w23, #0x1
0000000100027fe8	mov	x0, #0x0
0000000100027fec	bl	0x10000e9d4
0000000100027ff0	mov	x23, x0
0000000100027ff4	mov	x0, x21
0000000100027ff8	bl	0x10003173c ; symbol stub for: _strlen
0000000100027ffc	add	x0, x0, #0x1
0000000100028000	bl	0x10000eac4
0000000100028004	str	x0, [x23, #0x20]
0000000100028008	add	x0, x0, #0x18
000000010002800c	mov	x1, x21
0000000100028010	bl	0x10003170c ; symbol stub for: _strcpy
0000000100028014	ldr	x8, [x23, #0x20]
0000000100028018	str	x23, [x8, #0x10]
000000010002801c	mov	x8, x20
0000000100028020	ldr	x9, [x8, #0xa0]!
0000000100028024	str	x9, [x23, #0x8]
0000000100028028	cbz	x9, 0x100028034
000000010002802c	add	x10, x23, #0x8
0000000100028030	str	x10, [x9, #0x10]
0000000100028034	str	x23, [x20, #0xa0]
0000000100028038	str	x8, [x23, #0x10]
000000010002803c	ldr	x0, [x22, #0x18]
0000000100028040	mov	x1, x21
0000000100028044	mov	x2, x23
0000000100028048	bl	0x10002c1c0
000000010002804c	str	x20, [x23, #0x18]
0000000100028050	ldrb	w8, [x23, #0x30]
0000000100028054	and	w8, w8, #0xfffffffd
0000000100028058	orr	w8, w8, w24, lsl #1
000000010002805c	strb	w8, [x23, #0x30]
0000000100028060	mov	x0, x23
0000000100028064	mov	x1, x22
0000000100028068	bl	0x1000281b4
000000010002806c	cbz	x19, 0x100028074
0000000100028070	str	wzr, [x19]
0000000100028074	orr	w1, wzr, #0x8
0000000100028078	add	x0, sp, #0x40
000000010002807c	bl	0x100030a94 ; symbol stub for: __Block_object_dispose
0000000100028080	mov	x0, x23
0000000100028084	ldp	x29, x30, [sp, #0x90]
0000000100028088	ldp	x20, x19, [sp, #0x80]
000000010002808c	ldp	x22, x21, [sp, #0x70]
0000000100028090	ldp	x24, x23, [sp, #0x60]
0000000100028094	add	sp, sp, #0xa0
0000000100028098	ret
000000010002809c	stp	x20, x19, [sp, #-0x20]!
00000001000280a0	stp	x29, x30, [sp, #0x10]
00000001000280a4	add	x29, sp, #0x10
00000001000280a8	mov	x19, x1
00000001000280ac	mov	x20, x0
00000001000280b0	ldr	x0, [x20, #0x18]
00000001000280b4	bl	0x10002c284
00000001000280b8	cbnz	x0, 0x1000280e4
00000001000280bc	ldr	x20, [x20, #0x28]
00000001000280c0	cbz	x20, 0x1000280e0
00000001000280c4	ldr	x0, [x20, #0x18]
00000001000280c8	mov	x1, x19
00000001000280cc	bl	0x10002c284
00000001000280d0	cbz	x0, 0x1000280bc
00000001000280d4	ldrb	w8, [x0, #0x30]
00000001000280d8	tbnz	w8, #0x1, 0x1000280bc
00000001000280dc	b	0x1000280e4
00000001000280e0	mov	x0, #0x0
00000001000280e4	ldp	x29, x30, [sp, #0x10]
00000001000280e8	ldp	x20, x19, [sp], #0x20
00000001000280ec	ret
00000001000280f0	stp	x22, x21, [sp, #-0x30]!
00000001000280f4	stp	x20, x19, [sp, #0x10]
00000001000280f8	stp	x29, x30, [sp, #0x20]
00000001000280fc	add	x29, sp, #0x20
0000000100028100	mov	x19, x1
0000000100028104	mov	x20, x0
0000000100028108	ldr	x1, [x20, #0x20]
000000010002810c	cbz	x1, 0x100028144
0000000100028110	ldr	x21, [x1, #0x8]
0000000100028114	ldr	x8, [x19, #0x10]
0000000100028118	mov	x0, x19
000000010002811c	blr	x8
0000000100028120	mov	x1, x21
0000000100028124	cbnz	x21, 0x100028110
0000000100028128	ldr	x0, [x20, #0x20]
000000010002812c	cbz	x0, 0x100028144
0000000100028130	ldr	x20, [x0, #0x8]
0000000100028134	mov	x1, x19
0000000100028138	bl	0x1000280f0
000000010002813c	mov	x0, x20
0000000100028140	cbnz	x20, 0x100028130
0000000100028144	ldp	x29, x30, [sp, #0x20]
0000000100028148	ldp	x20, x19, [sp, #0x10]
000000010002814c	ldp	x22, x21, [sp], #0x30
0000000100028150	ret
0000000100028154	stp	x20, x19, [sp, #-0x20]!
0000000100028158	stp	x29, x30, [sp, #0x10]
000000010002815c	add	x29, sp, #0x10
0000000100028160	mov	x19, x0
0000000100028164	ldr	x8, [x19, #0x20]
0000000100028168	ldr	x8, [x8, #0x8]
000000010002816c	ldr	x8, [x8, #0x18]
0000000100028170	cbnz	x8, 0x10002818c
0000000100028174	ldr	x0, [x1, #0x18]
0000000100028178	ldr	x1, [x19, #0x28]
000000010002817c	bl	0x10002c284
0000000100028180	ldr	x8, [x19, #0x20]
0000000100028184	ldr	x8, [x8, #0x8]
0000000100028188	str	x0, [x8, #0x18]
000000010002818c	ldp	x29, x30, [sp, #0x10]
0000000100028190	ldp	x20, x19, [sp], #0x20
0000000100028194	ret
0000000100028198	add	x0, x0, #0x20
000000010002819c	ldr	x1, [x1, #0x20]
00000001000281a0	orr	w2, wzr, #0x8
00000001000281a4	b	0x100030a88 ; symbol stub for: __Block_object_assign
00000001000281a8	ldr	x0, [x0, #0x20]
00000001000281ac	orr	w1, wzr, #0x8
00000001000281b0	b	0x100030a94 ; symbol stub for: __Block_object_dispose
00000001000281b4	stp	x24, x23, [sp, #-0x40]!
00000001000281b8	stp	x22, x21, [sp, #0x10]
00000001000281bc	stp	x20, x19, [sp, #0x20]
00000001000281c0	stp	x29, x30, [sp, #0x30]
00000001000281c4	add	x29, sp, #0x30
00000001000281c8	mov	x20, x1
00000001000281cc	mov	x19, x0
00000001000281d0	ldr	x0, [x20, #0x30]
00000001000281d4	ldr	x8, [x19, #0x20]
00000001000281d8	add	x1, x8, #0x18
00000001000281dc	bl	0x10002c284
00000001000281e0	mov	x21, x0
00000001000281e4	cbz	x21, 0x10002822c
00000001000281e8	ldr	x22, [x21, #0x8]
00000001000281ec	cbz	x22, 0x100028214
00000001000281f0	ldr	x23, [x22, #0x18]
00000001000281f4	mov	w1, #0x0
00000001000281f8	mov	x0, x22
00000001000281fc	bl	0x100028414
0000000100028200	ldr	x1, [x19, #0x20]
0000000100028204	mov	x0, x22
0000000100028208	bl	0x10002849c
000000010002820c	mov	x22, x23
0000000100028210	cbnz	x23, 0x1000281f0
0000000100028214	ldr	x0, [x20, #0x30]
0000000100028218	add	x1, x21, #0x18
000000010002821c	mov	x2, #0x0
0000000100028220	bl	0x10002c1c0
0000000100028224	orr	w0, wzr, #0x1
0000000100028228	b	0x100028258
000000010002822c	ldrb	w8, [x19, #0x30]
0000000100028230	tbnz	w8, #0x1, 0x100028254
0000000100028234	ldr	x20, [x20, #0x20]
0000000100028238	cbz	x20, 0x100028254
000000010002823c	mov	x0, x19
0000000100028240	mov	x1, x20
0000000100028244	bl	0x1000281b4
0000000100028248	cbnz	w0, 0x100028224
000000010002824c	ldr	x20, [x20, #0x8]
0000000100028250	cbnz	x20, 0x10002823c
0000000100028254	mov	w0, #0x0
0000000100028258	ldp	x29, x30, [sp, #0x30]
000000010002825c	ldp	x20, x19, [sp, #0x20]
0000000100028260	ldp	x22, x21, [sp, #0x10]
0000000100028264	ldp	x24, x23, [sp], #0x40
0000000100028268	ret
000000010002826c	ldr	x8, [x0, #0x20]
0000000100028270	ldr	x0, [x8, #0x8]
0000000100028274	cbz	x0, 0x10002828c
0000000100028278	ldr	x8, [x0, #0x40]
000000010002827c	cmp	x8, x1
0000000100028280	b.eq	0x10002828c
0000000100028284	ldr	x0, [x0, #0x18]
0000000100028288	cbnz	x0, 0x100028278
000000010002828c	ret
0000000100028290	ldr	x8, [x0, #0x20]
0000000100028294	add	x0, x8, #0x18
0000000100028298	ret
000000010002829c	ldrb	w8, [x0, #0x30]
00000001000282a0	and	w0, w8, #0x1
00000001000282a4	ret
00000001000282a8	stp	x22, x21, [sp, #-0x30]!
00000001000282ac	stp	x20, x19, [sp, #0x10]
00000001000282b0	stp	x29, x30, [sp, #0x20]
00000001000282b4	add	x29, sp, #0x20
00000001000282b8	mov	x19, x0
00000001000282bc	ldr	x8, [x19, #0x18]
00000001000282c0	ldr	x0, [x8, #0xe0]
00000001000282c4	bl	0x10001ea24
00000001000282c8	ldr	x8, [x19, #0x8]
00000001000282cc	cbz	x8, 0x1000282d8
00000001000282d0	ldr	x9, [x19, #0x10]
00000001000282d4	str	x9, [x8, #0x10]
00000001000282d8	ldr	x9, [x19, #0x10]
00000001000282dc	str	x8, [x9]
00000001000282e0	mov	x8, #-0x1
00000001000282e4	stp	x8, x8, [x19, #0x8]
00000001000282e8	ldr	x0, [x0, #0x18]
00000001000282ec	ldr	x8, [x19, #0x20]
00000001000282f0	add	x1, x8, #0x18
00000001000282f4	mov	x2, #0x0
00000001000282f8	bl	0x10002c1c0
00000001000282fc	ldr	x8, [x19, #0x20]
0000000100028300	ldr	x20, [x8, #0x8]
0000000100028304	cbz	x20, 0x100028348
0000000100028308	ldr	x22, [x20, #0x18]
000000010002830c	ldr	x8, [x20, #0x28]
0000000100028310	ldr	x0, [x8, #0xe0]
0000000100028314	bl	0x10001ea24
0000000100028318	ldr	x8, [x19, #0x20]
000000010002831c	add	x1, x8, #0x18
0000000100028320	bl	0x10002839c
0000000100028324	mov	x21, x0
0000000100028328	mov	w1, #0x0
000000010002832c	mov	x0, x20
0000000100028330	bl	0x100028414
0000000100028334	mov	x0, x20
0000000100028338	mov	x1, x21
000000010002833c	bl	0x10002849c
0000000100028340	mov	x20, x22
0000000100028344	cbnz	x22, 0x100028308
0000000100028348	ldr	x0, [x19, #0x28]
000000010002834c	cbz	x0, 0x10002838c
0000000100028350	adr	x1, #60779 ; literal pool for: "error"
0000000100028354	nop
0000000100028358	orr	w2, wzr, #0x7c
000000010002835c	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
0000000100028360	ldr	x0, [x19, #0x28]
0000000100028364	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
0000000100028368	orr	w8, w0, #0x20
000000010002836c	cmp	w8, #0x20
0000000100028370	b.eq	0x100028380
0000000100028374	sxtw	x0, w0
0000000100028378	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002837c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100028380	ldr	x0, [x19, #0x28]
0000000100028384	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100028388	str	xzr, [x19, #0x28]
000000010002838c	ldp	x29, x30, [sp, #0x20]
0000000100028390	ldp	x20, x19, [sp, #0x10]
0000000100028394	ldp	x22, x21, [sp], #0x30
0000000100028398	ret
000000010002839c	stp	x22, x21, [sp, #-0x30]!
00000001000283a0	stp	x20, x19, [sp, #0x10]
00000001000283a4	stp	x29, x30, [sp, #0x20]
00000001000283a8	add	x29, sp, #0x20
00000001000283ac	mov	x19, x1
00000001000283b0	mov	x21, x0
00000001000283b4	ldr	x0, [x21, #0x30]
00000001000283b8	bl	0x10002c284
00000001000283bc	mov	x20, x0
00000001000283c0	cbnz	x20, 0x100028400
00000001000283c4	mov	x0, x19
00000001000283c8	bl	0x10003173c ; symbol stub for: _strlen
00000001000283cc	add	x0, x0, #0x1
00000001000283d0	bl	0x10000eac4
00000001000283d4	mov	x20, x0
00000001000283d8	add	x0, x20, #0x18
00000001000283dc	mov	x1, x19
00000001000283e0	bl	0x10003170c ; symbol stub for: _strcpy
00000001000283e4	ldr	x0, [x21, #0x30]
00000001000283e8	mov	x1, x19
00000001000283ec	mov	x2, x20
00000001000283f0	bl	0x10002c1c0
00000001000283f4	mov	w1, #0x0
00000001000283f8	mov	x0, x20
00000001000283fc	bl	0x10000e4a4
0000000100028400	mov	x0, x20
0000000100028404	ldp	x29, x30, [sp, #0x20]
0000000100028408	ldp	x20, x19, [sp, #0x10]
000000010002840c	ldp	x22, x21, [sp], #0x30
0000000100028410	ret
0000000100028414	stp	x20, x19, [sp, #-0x20]!
0000000100028418	stp	x29, x30, [sp, #0x10]
000000010002841c	add	x29, sp, #0x10
0000000100028420	ldr	x19, [x0, #0x38]
0000000100028424	stp	xzr, xzr, [x0, #0x38]
0000000100028428	ldr	x8, [x0, #0x18]
000000010002842c	cbz	x8, 0x100028438
0000000100028430	ldr	x9, [x0, #0x20]
0000000100028434	str	x9, [x8, #0x20]
0000000100028438	ldr	x9, [x0, #0x20]
000000010002843c	str	x8, [x9]
0000000100028440	mov	x8, #-0x1
0000000100028444	stp	x8, x8, [x0, #0x18]
0000000100028448	ldr	x8, [x19, #0x10]
000000010002844c	cbz	x8, 0x100028460
0000000100028450	mov	x0, x8
0000000100028454	ldp	x29, x30, [sp, #0x10]
0000000100028458	ldp	x20, x19, [sp], #0x20
000000010002845c	b	0x100028834
0000000100028460	cbz	w1, 0x10002846c
0000000100028464	ldr	x8, [x19, #0x8]
0000000100028468	cbz	x8, 0x100028478
000000010002846c	ldp	x29, x30, [sp, #0x10]
0000000100028470	ldp	x20, x19, [sp], #0x20
0000000100028474	ret
0000000100028478	ldr	x8, [x0, #0x28]
000000010002847c	ldr	x0, [x8, #0xe0]
0000000100028480	bl	0x10001ea24
0000000100028484	ldr	x0, [x0, #0x30]
0000000100028488	add	x1, x19, #0x18
000000010002848c	mov	x2, #0x0
0000000100028490	ldp	x29, x30, [sp, #0x10]
0000000100028494	ldp	x20, x19, [sp], #0x20
0000000100028498	b	0x10002c1c0
000000010002849c	stp	x20, x19, [sp, #-0x20]!
00000001000284a0	stp	x29, x30, [sp, #0x10]
00000001000284a4	add	x29, sp, #0x10
00000001000284a8	mov	x19, x1
00000001000284ac	mov	x20, x0
00000001000284b0	ldr	x8, [x20, #0x38]
00000001000284b4	cbnz	x8, 0x100028528
00000001000284b8	str	x19, [x20, #0x38]
00000001000284bc	mov	x8, x19
00000001000284c0	ldr	x9, [x8, #0x8]!
00000001000284c4	str	x9, [x20, #0x18]
00000001000284c8	cbz	x9, 0x1000284d4
00000001000284cc	add	x10, x20, #0x18
00000001000284d0	str	x10, [x9, #0x20]
00000001000284d4	str	x20, [x19, #0x8]
00000001000284d8	str	x8, [x20, #0x20]
00000001000284dc	ldr	x8, [x19, #0x10]
00000001000284e0	cbz	x8, 0x10002851c
00000001000284e4	ldr	x8, [x8, #0x18]
00000001000284e8	ldr	x0, [x8, #0xe0]
00000001000284ec	bl	0x10001ea24
00000001000284f0	ldr	x8, [x0, #0x38]
00000001000284f4	adds	x9, x8, #0x1
00000001000284f8	str	x9, [x0, #0x38]
00000001000284fc	str	x8, [x20, #0x40]
0000000100028500	b.ne	0x10002850c
0000000100028504	add	x8, x8, #0x2
0000000100028508	str	x8, [x0, #0x38]
000000010002850c	ldr	x0, [x19, #0x10]
0000000100028510	ldp	x29, x30, [sp, #0x10]
0000000100028514	ldp	x20, x19, [sp], #0x20
0000000100028518	b	0x100028834
000000010002851c	ldp	x29, x30, [sp, #0x10]
0000000100028520	ldp	x20, x19, [sp], #0x20
0000000100028524	ret
0000000100028528	mov	x0, #0x0
000000010002852c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100028530	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100028534	brk	#0x1
0000000100028538	sub	sp, sp, #0x40
000000010002853c	stp	x22, x21, [sp, #0x10]
0000000100028540	stp	x20, x19, [sp, #0x20]
0000000100028544	stp	x29, x30, [sp, #0x30]
0000000100028548	add	x29, sp, #0x30
000000010002854c	mov	x19, x2
0000000100028550	mov	x20, x1
0000000100028554	mov	x21, x0
0000000100028558	add	x8, x21, #0x50
000000010002855c	str	x8, [sp]
0000000100028560	adr	x2, #79545 ; literal pool for: "%s => {"
0000000100028564	nop
0000000100028568	mov	x0, x20
000000010002856c	mov	x1, x19
0000000100028570	bl	0x10002a548
0000000100028574	add	x22, x19, #0x1
0000000100028578	ldrb	w8, [x21, #0x48]
000000010002857c	adr	x9, #54542 ; literal pool for: "1"
0000000100028580	nop
0000000100028584	adr	x10, #54536 ; literal pool for: "0"
0000000100028588	nop
000000010002858c	tst	w8, #0x1
0000000100028590	csel	x8, x10, x9, eq
0000000100028594	str	x8, [sp]
0000000100028598	adr	x2, #79522 ; literal pool for: "keepalive = %s"
000000010002859c	nop
00000001000285a0	mov	x0, x20
00000001000285a4	mov	x1, x22
00000001000285a8	bl	0x10002a548
00000001000285ac	ldr	x8, [x21, #0x28]
00000001000285b0	add	x8, x8, #0x460
00000001000285b4	str	x8, [sp]
00000001000285b8	adr	x2, #79505 ; literal pool for: "service = %s"
00000001000285bc	nop
00000001000285c0	mov	x0, x20
00000001000285c4	mov	x1, x22
00000001000285c8	bl	0x10002a548
00000001000285cc	ldr	x8, [x21, #0x38]
00000001000285d0	add	x8, x8, #0x18
00000001000285d4	str	x8, [sp]
00000001000285d8	adr	x2, #79486 ; literal pool for: "stream = %s"
00000001000285dc	nop
00000001000285e0	mov	x0, x20
00000001000285e4	mov	x1, x22
00000001000285e8	bl	0x10002a548
00000001000285ec	ldr	x8, [x21, #0x38]
00000001000285f0	ldr	x8, [x8, #0x10]
00000001000285f4	cbz	x8, 0x100028618
00000001000285f8	ldr	x8, [x8, #0x18]
00000001000285fc	add	x8, x8, #0x460
0000000100028600	str	x8, [sp]
0000000100028604	adr	x2, #79454 ; literal pool for: "monitor = %s"
0000000100028608	nop
000000010002860c	mov	x0, x20
0000000100028610	mov	x1, x22
0000000100028614	bl	0x10002a548
0000000100028618	adr	x2, #79447 ; literal pool for: "descriptor = "
000000010002861c	nop
0000000100028620	mov	x0, x20
0000000100028624	mov	x1, x22
0000000100028628	bl	0x10002a42c
000000010002862c	ldr	x3, [x21, #0x30]
0000000100028630	mov	w2, #0x0
0000000100028634	mov	x0, x20
0000000100028638	mov	x1, x22
000000010002863c	bl	0x10000d8ec
0000000100028640	adr	x2, #53059 ; literal pool for: "}"
0000000100028644	nop
0000000100028648	mov	x0, x20
000000010002864c	mov	x1, x19
0000000100028650	bl	0x10002a548
0000000100028654	ldp	x29, x30, [sp, #0x30]
0000000100028658	ldp	x20, x19, [sp, #0x20]
000000010002865c	ldp	x22, x21, [sp, #0x10]
0000000100028660	add	sp, sp, #0x40
0000000100028664	ret
0000000100028668	stp	x24, x23, [sp, #-0x40]!
000000010002866c	stp	x22, x21, [sp, #0x10]
0000000100028670	stp	x20, x19, [sp, #0x20]
0000000100028674	stp	x29, x30, [sp, #0x30]
0000000100028678	add	x29, sp, #0x30
000000010002867c	mov	x22, x3
0000000100028680	mov	x23, x2
0000000100028684	mov	x19, x1
0000000100028688	mov	x20, x0
000000010002868c	mov	x0, x23
0000000100028690	bl	0x10003173c ; symbol stub for: _strlen
0000000100028694	add	x0, x0, #0x1
0000000100028698	bl	0x10000eb3c
000000010002869c	mov	x21, x0
00000001000286a0	add	x0, x21, #0x50
00000001000286a4	mov	x1, x23
00000001000286a8	bl	0x10003170c ; symbol stub for: _strcpy
00000001000286ac	str	x20, [x21, #0x28]
00000001000286b0	mov	x0, x22
00000001000286b4	bl	0x100031b74 ; symbol stub for: _xpc_retain
00000001000286b8	str	x0, [x21, #0x30]
00000001000286bc	adr	x1, #79205 ; literal pool for: "com.apple.launchd.helper"
00000001000286c0	nop
00000001000286c4	mov	x0, x19
00000001000286c8	bl	0x100031700 ; symbol stub for: _strcmp
00000001000286cc	cmp	w0, #0x0
00000001000286d0	cset	w8, eq
00000001000286d4	ldrb	w9, [x21, #0x48]
00000001000286d8	and	w9, w9, #0xfffffffd
00000001000286dc	orr	w8, w9, w8, lsl #1
00000001000286e0	strb	w8, [x21, #0x48]
00000001000286e4	mov	x8, x20
00000001000286e8	ldr	x9, [x8, #0x98]!
00000001000286ec	str	x9, [x21, #0x8]
00000001000286f0	cbz	x9, 0x1000286fc
00000001000286f4	add	x10, x21, #0x8
00000001000286f8	str	x10, [x9, #0x10]
00000001000286fc	str	x21, [x20, #0x98]
0000000100028700	str	x8, [x21, #0x10]
0000000100028704	ldr	x0, [x20, #0xe0]
0000000100028708	bl	0x10001ea24
000000010002870c	mov	x22, x0
0000000100028710	mov	x1, x19
0000000100028714	bl	0x10002809c
0000000100028718	cbz	x0, 0x100028724
000000010002871c	ldr	x1, [x0, #0x20]
0000000100028720	b	0x100028734
0000000100028724	mov	x0, x22
0000000100028728	mov	x1, x19
000000010002872c	bl	0x10002839c
0000000100028730	mov	x1, x0
0000000100028734	mov	x0, x21
0000000100028738	bl	0x10002849c
000000010002873c	ldr	x0, [x20, #0xe0]
0000000100028740	mov	x1, x20
0000000100028744	mov	x2, x19
0000000100028748	bl	0x10001e498
000000010002874c	mov	x0, x21
0000000100028750	ldp	x29, x30, [sp, #0x30]
0000000100028754	ldp	x20, x19, [sp, #0x20]
0000000100028758	ldp	x22, x21, [sp, #0x10]
000000010002875c	ldp	x24, x23, [sp], #0x40
0000000100028760	ret
0000000100028764	ldr	x0, [x0, #0x28]
0000000100028768	ret
000000010002876c	ldrb	w8, [x0, #0x48]
0000000100028770	and	w0, w8, #0x1
0000000100028774	ret
0000000100028778	ldrb	w8, [x0, #0x48]
000000010002877c	ubfx	w0, w8, #1, #1
0000000100028780	ret
0000000100028784	ldr	x8, [x0, #0x8]
0000000100028788	cbz	x8, 0x100028794
000000010002878c	ldr	x9, [x0, #0x10]
0000000100028790	str	x9, [x8, #0x10]
0000000100028794	ldr	x9, [x0, #0x10]
0000000100028798	str	x8, [x9]
000000010002879c	mov	x8, #-0x1
00000001000287a0	stp	x8, x8, [x0, #0x8]
00000001000287a4	orr	w1, wzr, #0x1
00000001000287a8	b	0x100028414
00000001000287ac	stp	x20, x19, [sp, #-0x20]!
00000001000287b0	stp	x29, x30, [sp, #0x10]
00000001000287b4	add	x29, sp, #0x10
00000001000287b8	mov	x20, x0
00000001000287bc	mov	x0, #0x0
00000001000287c0	bl	0x10000ea4c
00000001000287c4	mov	x19, x0
00000001000287c8	cbz	x20, 0x1000287ec
00000001000287cc	str	x20, [x19, #0x28]
00000001000287d0	ldr	x8, [x20, #0x20]!
00000001000287d4	str	x8, [x19, #0x8]
00000001000287d8	cbz	x8, 0x1000287e4
00000001000287dc	add	x9, x19, #0x8
00000001000287e0	str	x9, [x8, #0x10]
00000001000287e4	str	x19, [x20]
00000001000287e8	str	x20, [x19, #0x10]
00000001000287ec	bl	0x10002c3bc
00000001000287f0	str	x0, [x19, #0x18]
00000001000287f4	bl	0x10002c3bc
00000001000287f8	orr	w8, wzr, #0x1
00000001000287fc	stp	x0, x8, [x19, #0x30]
0000000100028800	mov	x0, x19
0000000100028804	ldp	x29, x30, [sp, #0x10]
0000000100028808	ldp	x20, x19, [sp], #0x20
000000010002880c	ret
0000000100028810	ldrb	w8, [x0, #0x40]
0000000100028814	orr	w8, w8, #0x1
0000000100028818	strb	w8, [x0, #0x40]
000000010002881c	ldr	x0, [x0, #0x18]
0000000100028820	adr	x1, #103856
0000000100028824	nop
0000000100028828	b	0x10002c32c
000000010002882c	mov	x0, x2
0000000100028830	b	0x100028834
0000000100028834	stp	x20, x19, [sp, #-0x20]!
0000000100028838	stp	x29, x30, [sp, #0x10]
000000010002883c	add	x29, sp, #0x10
0000000100028840	mov	x19, x0
0000000100028844	ldrb	w8, [x19, #0x30]
0000000100028848	orr	w8, w8, #0x1
000000010002884c	strb	w8, [x19, #0x30]
0000000100028850	ldr	x0, [x19, #0x28]
0000000100028854	cbz	x0, 0x100028880
0000000100028858	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
000000010002885c	orr	w8, w0, #0x20
0000000100028860	cmp	w8, #0x20
0000000100028864	b.eq	0x100028874
0000000100028868	sxtw	x0, w0
000000010002886c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100028870	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100028874	ldr	x0, [x19, #0x28]
0000000100028878	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010002887c	str	xzr, [x19, #0x28]
0000000100028880	ldr	x0, [x19, #0x18]
0000000100028884	ldp	x29, x30, [sp, #0x10]
0000000100028888	ldp	x20, x19, [sp], #0x20
000000010002888c	b	0x100015508
0000000100028890	stp	x22, x21, [sp, #-0x30]!
0000000100028894	stp	x20, x19, [sp, #0x10]
0000000100028898	stp	x29, x30, [sp, #0x20]
000000010002889c	add	x29, sp, #0x20
00000001000288a0	mov	x20, x2
00000001000288a4	mov	x21, x1
00000001000288a8	ldr	x19, [x0, #0x98]
00000001000288ac	cbz	x19, 0x1000288dc
00000001000288b0	ldr	x8, [x19, #0x38]
00000001000288b4	add	x0, x8, #0x18
00000001000288b8	mov	x1, x21
00000001000288bc	bl	0x100031700 ; symbol stub for: _strcmp
00000001000288c0	cbnz	w0, 0x1000288d4
00000001000288c4	add	x0, x19, #0x50
00000001000288c8	mov	x1, x20
00000001000288cc	bl	0x100031700 ; symbol stub for: _strcmp
00000001000288d0	cbz	w0, 0x1000288dc
00000001000288d4	ldr	x19, [x19, #0x8]
00000001000288d8	cbnz	x19, 0x1000288b0
00000001000288dc	mov	x0, x19
00000001000288e0	ldp	x29, x30, [sp, #0x20]
00000001000288e4	ldp	x20, x19, [sp, #0x10]
00000001000288e8	ldp	x22, x21, [sp], #0x30
00000001000288ec	ret
00000001000288f0	stp	x28, x27, [sp, #-0x30]!
00000001000288f4	stp	x20, x19, [sp, #0x10]
00000001000288f8	stp	x29, x30, [sp, #0x20]
00000001000288fc	add	x29, sp, #0x20
0000000100028900	sub	sp, sp, #0x410
0000000100028904	mov	x19, x0
0000000100028908	nop
000000010002890c	ldr	x8, #0x1770c ; literal pool symbol address: ___stack_chk_guard
0000000100028910	ldr	x8, [x8]
0000000100028914	stur	x8, [x29, #-0x28]
0000000100028918	tbnz	w19, #0x1f, 0x100028950
000000010002891c	add	x20, sp, #0x8
0000000100028920	str	x20, [sp]
0000000100028924	mov	w1, #0x32
0000000100028928	mov	x0, x19
000000010002892c	bl	0x100030fb0 ; symbol stub for: _fcntl
0000000100028930	cmn	w0, #0x1
0000000100028934	b.ne	0x100028968
0000000100028938	bl	0x100030adc ; symbol stub for: ___error
000000010002893c	ldr	w8, [x0]
0000000100028940	cmp	w8, #0x23
0000000100028944	b.eq	0x100028920
0000000100028948	mov	x0, #0x0
000000010002894c	b	0x100028970
0000000100028950	bl	0x100030adc ; symbol stub for: ___error
0000000100028954	mov	x8, x0
0000000100028958	mov	x0, #0x0
000000010002895c	mov	w9, #0x9
0000000100028960	str	w9, [x8]
0000000100028964	b	0x100028970
0000000100028968	add	x0, sp, #0x8
000000010002896c	bl	0x10000d520
0000000100028970	ldur	x8, [x29, #-0x28]
0000000100028974	nop
0000000100028978	ldr	x9, #0x176a0 ; literal pool symbol address: ___stack_chk_guard
000000010002897c	ldr	x9, [x9]
0000000100028980	cmp	x9, x8
0000000100028984	b.ne	0x10002899c
0000000100028988	add	sp, sp, #0x410
000000010002898c	ldp	x29, x30, [sp, #0x20]
0000000100028990	ldp	x20, x19, [sp, #0x10]
0000000100028994	ldp	x28, x27, [sp], #0x30
0000000100028998	ret
000000010002899c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
00000001000289a0	stp	x22, x21, [sp, #-0x30]!
00000001000289a4	stp	x20, x19, [sp, #0x10]
00000001000289a8	stp	x29, x30, [sp, #0x20]
00000001000289ac	add	x29, sp, #0x20
00000001000289b0	mov	x20, x1
00000001000289b4	mov	x21, x0
00000001000289b8	ldr	x0, [x20, #0x60]
00000001000289bc	bl	0x10000d408
00000001000289c0	mov	x19, x0
00000001000289c4	ldr	x2, [x20, #0x60]
00000001000289c8	mov	x0, x21
00000001000289cc	mov	x1, x19
00000001000289d0	bl	0x100031604 ; symbol stub for: _read
00000001000289d4	mov	x8, x0
00000001000289d8	ldr	x9, [x20, #0x60]
00000001000289dc	cmp	x8, x9
00000001000289e0	b.ne	0x100028a1c
00000001000289e4	mov	x0, x19
00000001000289e8	mov	x1, x8
00000001000289ec	bl	0x1000319b8 ; symbol stub for: _xpc_create_from_plist
00000001000289f0	mov	x20, x0
00000001000289f4	cbz	x20, 0x100028a44
00000001000289f8	mov	x0, x20
00000001000289fc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100028a00	nop
0000000100028a04	ldr	x8, #0x176bc ; literal pool symbol address: __xpc_type_dictionary
0000000100028a08	cmp	x0, x8
0000000100028a0c	b.eq	0x100028a44
0000000100028a10	mov	x0, x20
0000000100028a14	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100028a18	b	0x100028a40
0000000100028a1c	cmn	x8, #0x1
0000000100028a20	b.ne	0x100028a3c
0000000100028a24	bl	0x100030adc ; symbol stub for: ___error
0000000100028a28	ldrsw	x0, [x0]
0000000100028a2c	cbz	w0, 0x100028a40
0000000100028a30	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100028a34	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100028a38	b	0x100028a40
0000000100028a3c	cbnz	x8, 0x100028a60
0000000100028a40	mov	x20, #0x0
0000000100028a44	mov	x0, x19
0000000100028a48	bl	0x100031010 ; symbol stub for: _free
0000000100028a4c	mov	x0, x20
0000000100028a50	ldp	x29, x30, [sp, #0x20]
0000000100028a54	ldp	x20, x19, [sp, #0x10]
0000000100028a58	ldp	x22, x21, [sp], #0x30
0000000100028a5c	ret
0000000100028a60	mov	x0, x8
0000000100028a64	b	0x100028a30
0000000100028a68	sub	sp, sp, #0xb0
0000000100028a6c	stp	x20, x19, [sp, #0x90]
0000000100028a70	stp	x29, x30, [sp, #0xa0]
0000000100028a74	add	x29, sp, #0xa0
0000000100028a78	mov	w1, #0x0
0000000100028a7c	bl	0x1000313f4 ; symbol stub for: _open
0000000100028a80	mov	x19, x0
0000000100028a84	cmn	w19, #0x1
0000000100028a88	b.eq	0x100028adc
0000000100028a8c	mov	x1, sp
0000000100028a90	mov	x0, x19
0000000100028a94	bl	0x100031028 ; symbol stub for: _fstat
0000000100028a98	cbnz	w0, 0x100028ab4
0000000100028a9c	ldr	w8, [sp, #0x10]
0000000100028aa0	cbnz	w8, 0x100028ab4
0000000100028aa4	ldrb	w8, [sp, #0x4]
0000000100028aa8	mov	w9, #0x12
0000000100028aac	tst	w8, w9
0000000100028ab0	b.eq	0x100028af4
0000000100028ab4	mov	x20, #0x0
0000000100028ab8	mov	x0, x19
0000000100028abc	bl	0x100030c74 ; symbol stub for: _close
0000000100028ac0	cmn	w0, #0x1
0000000100028ac4	b.ne	0x100028ae0
0000000100028ac8	bl	0x100030adc ; symbol stub for: ___error
0000000100028acc	ldrsw	x0, [x0]
0000000100028ad0	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100028ad4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100028ad8	b	0x100028ae0
0000000100028adc	mov	x20, #0x0
0000000100028ae0	mov	x0, x20
0000000100028ae4	ldp	x29, x30, [sp, #0xa0]
0000000100028ae8	ldp	x20, x19, [sp, #0x90]
0000000100028aec	add	sp, sp, #0xb0
0000000100028af0	ret
0000000100028af4	mov	x1, sp
0000000100028af8	mov	x0, x19
0000000100028afc	bl	0x1000289a0
0000000100028b00	mov	x20, x0
0000000100028b04	b	0x100028ab8
0000000100028b08	stp	x24, x23, [sp, #-0x40]!
0000000100028b0c	stp	x22, x21, [sp, #0x10]
0000000100028b10	stp	x20, x19, [sp, #0x20]
0000000100028b14	stp	x29, x30, [sp, #0x30]
0000000100028b18	add	x29, sp, #0x30
0000000100028b1c	mov	x23, x3
0000000100028b20	mov	x22, x2
0000000100028b24	mov	x19, x1
0000000100028b28	mov	x21, x0
0000000100028b2c	nop
0000000100028b30	ldr	x8, #0x1b348
0000000100028b34	cmn	x8, #0x1
0000000100028b38	b.ne	0x100028bf4
0000000100028b3c	bl	0x100030d70 ; symbol stub for: _dispatch_group_create
0000000100028b40	mov	x20, x0
0000000100028b44	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
0000000100028b48	mov	w0, #0xc8
0000000100028b4c	bl	0x10000d464
0000000100028b50	mov	x24, x0
0000000100028b54	str	x20, [x24, #0x8]
0000000100028b58	mov	x0, x21
0000000100028b5c	bl	0x10000d520
0000000100028b60	stp	x0, x23, [x24, #0x10]
0000000100028b64	str	x22, [x24, #0x20]
0000000100028b68	mov	x0, x20
0000000100028b6c	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
0000000100028b70	nop
0000000100028b74	ldr	x4, #0x1b30c
0000000100028b78	adr	x6, #192
0000000100028b7c	nop
0000000100028b80	mov	w2, #0x0
0000000100028b84	mov	w3, #0x0
0000000100028b88	mov	x0, #0x0
0000000100028b8c	mov	x1, x21
0000000100028b90	mov	x5, x24
0000000100028b94	bl	0x100030dc4 ; symbol stub for: _dispatch_io_create_with_path_f
0000000100028b98	mov	x21, x0
0000000100028b9c	str	x21, [x24]
0000000100028ba0	mov	x1, #-0x1
0000000100028ba4	bl	0x100030de8 ; symbol stub for: _dispatch_io_set_low_water
0000000100028ba8	adr	x3, #152
0000000100028bac	nop
0000000100028bb0	mov	x0, x20
0000000100028bb4	mov	x1, x19
0000000100028bb8	mov	x2, x24
0000000100028bbc	bl	0x100030da0 ; symbol stub for: _dispatch_group_notify_f
0000000100028bc0	mov	x0, x20
0000000100028bc4	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
0000000100028bc8	adr	x2, #268
0000000100028bcc	nop
0000000100028bd0	mov	x0, x21
0000000100028bd4	mov	x1, x24
0000000100028bd8	bl	0x100030dac ; symbol stub for: _dispatch_io_barrier_f
0000000100028bdc	mov	x0, x20
0000000100028be0	ldp	x29, x30, [sp, #0x30]
0000000100028be4	ldp	x20, x19, [sp, #0x20]
0000000100028be8	ldp	x22, x21, [sp, #0x10]
0000000100028bec	ldp	x24, x23, [sp], #0x40
0000000100028bf0	b	0x100030d88 ; symbol stub for: _dispatch_group_leave
0000000100028bf4	adr	x0, #111236
0000000100028bf8	nop
0000000100028bfc	adr	x2, #20
0000000100028c00	nop
0000000100028c04	mov	x1, #0x0
0000000100028c08	bl	0x100030e30 ; symbol stub for: _dispatch_once_f
0000000100028c0c	b	0x100028b3c
0000000100028c10	stp	x29, x30, [sp, #-0x10]!
0000000100028c14	mov	x29, sp
0000000100028c18	adr	x0, #78067 ; literal pool for: "com.apple.xpc.io"
0000000100028c1c	nop
0000000100028c20	mov	x1, #0x0
0000000100028c24	bl	0x100030e48 ; symbol stub for: _dispatch_queue_create
0000000100028c28	adrp	x8, 27 ; 0x100043000
0000000100028c2c	str	x0, [x8, #0xe80]
0000000100028c30	ldp	x29, x30, [sp], #0x10
0000000100028c34	ret
0000000100028c38	ldr	x0, [x0, #0x8]
0000000100028c3c	b	0x100030d88 ; symbol stub for: _dispatch_group_leave
0000000100028c40	stp	x22, x21, [sp, #-0x30]!
0000000100028c44	stp	x20, x19, [sp, #0x10]
0000000100028c48	stp	x29, x30, [sp, #0x20]
0000000100028c4c	add	x29, sp, #0x20
0000000100028c50	mov	x19, x0
0000000100028c54	ldr	x0, [x19, #0x28]
0000000100028c58	ldr	w3, [x19, #0xc0]
0000000100028c5c	cmp	x0, #0x0
0000000100028c60	ccmp	w3, #0x0, #0x0, eq
0000000100028c64	b.eq	0x100028cb4
0000000100028c68	ldp	x8, x4, [x19, #0x18]
0000000100028c6c	add	x2, x19, #0x30
0000000100028c70	ldr	x1, [x19, #0x10]
0000000100028c74	blr	x8
0000000100028c78	ldp	x0, x21, [x19]
0000000100028c7c	ldr	x20, [x19, #0x28]
0000000100028c80	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100028c84	mov	x0, x21
0000000100028c88	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100028c8c	cbz	x20, 0x100028c98
0000000100028c90	mov	x0, x20
0000000100028c94	bl	0x100030e60 ; symbol stub for: _dispatch_release
0000000100028c98	ldr	x0, [x19, #0x10]
0000000100028c9c	bl	0x100031010 ; symbol stub for: _free
0000000100028ca0	mov	x0, x19
0000000100028ca4	ldp	x29, x30, [sp, #0x20]
0000000100028ca8	ldp	x20, x19, [sp, #0x10]
0000000100028cac	ldp	x22, x21, [sp], #0x30
0000000100028cb0	b	0x100031010 ; symbol stub for: _free
0000000100028cb4	stp	x20, x21, [sp, #-0x10]!
0000000100028cb8	adrp	x20, 19 ; 0x10003b000
0000000100028cbc	add	x20, x20, #0xd1c ; literal pool for: "Data corruption: Callout scheduled with NULL data and zero error."
0000000100028cc0	adrp	x21, 27 ; 0x100043000
0000000100028cc4	add	x21, x21, #0x528
0000000100028cc8	str	x20, [x21, #0x8]
0000000100028ccc	ldp	x20, x21, [sp], #0x10
0000000100028cd0	brk	#0x1
0000000100028cd4	stp	x24, x23, [sp, #-0x40]!
0000000100028cd8	stp	x22, x21, [sp, #0x10]
0000000100028cdc	stp	x20, x19, [sp, #0x20]
0000000100028ce0	stp	x29, x30, [sp, #0x30]
0000000100028ce4	add	x29, sp, #0x30
0000000100028ce8	mov	x21, x0
0000000100028cec	ldp	x20, x19, [x21]
0000000100028cf0	ldr	x23, [x21, #0x10]
0000000100028cf4	mov	x0, x20
0000000100028cf8	bl	0x100030dd0 ; symbol stub for: _dispatch_io_get_descriptor
0000000100028cfc	mov	x22, x0
0000000100028d00	cmn	w22, #0x1
0000000100028d04	b.eq	0x100028d10
0000000100028d08	mov	w24, #0x0
0000000100028d0c	b	0x100028d2c
0000000100028d10	orr	w1, wzr, #0x8000
0000000100028d14	mov	x0, x23
0000000100028d18	bl	0x1000313f4 ; symbol stub for: _open
0000000100028d1c	mov	x22, x0
0000000100028d20	cmn	w22, #0x1
0000000100028d24	b.eq	0x100028dcc
0000000100028d28	orr	w24, wzr, #0x1
0000000100028d2c	add	x1, x21, #0x30
0000000100028d30	mov	x0, x22
0000000100028d34	bl	0x100031028 ; symbol stub for: _fstat
0000000100028d38	cbz	w0, 0x100028d50
0000000100028d3c	bl	0x100030adc ; symbol stub for: ___error
0000000100028d40	ldr	w23, [x0]
0000000100028d44	tbnz	w24, #0x0, 0x100028d88
0000000100028d48	cbnz	w23, 0x100028da4
0000000100028d4c	b	0x100028dd8
0000000100028d50	ldrh	w8, [x21, #0x34]
0000000100028d54	and	w8, w8, #0xf000
0000000100028d58	cmp	w8, #0x6, lsl #12
0000000100028d5c	b.ge	0x100028d74
0000000100028d60	cmp	w8, #0x1, lsl #12
0000000100028d64	b.eq	0x100028d80
0000000100028d68	cmp	w8, #0x2, lsl #12
0000000100028d6c	b.eq	0x100028d80
0000000100028d70	b	0x100028e08
0000000100028d74	b.eq	0x100028d80
0000000100028d78	cmp	w8, #0xc, lsl #12
0000000100028d7c	b.ne	0x100028e08
0000000100028d80	mov	w23, #0x1d
0000000100028d84	cbz	w24, 0x100028da4
0000000100028d88	mov	x0, x22
0000000100028d8c	bl	0x100030c74 ; symbol stub for: _close
0000000100028d90	cmn	w0, #0x1
0000000100028d94	b.eq	0x100028e40
0000000100028d98	cmp	w23, #0x15
0000000100028d9c	mov	w8, #0x68
0000000100028da0	csel	w23, w23, w8, eq
0000000100028da4	str	w23, [x21, #0xc0]
0000000100028da8	mov	x0, x20
0000000100028dac	mov	x1, #0x0
0000000100028db0	bl	0x100030db8 ; symbol stub for: _dispatch_io_close
0000000100028db4	mov	x0, x19
0000000100028db8	ldp	x29, x30, [sp, #0x30]
0000000100028dbc	ldp	x20, x19, [sp, #0x20]
0000000100028dc0	ldp	x22, x21, [sp, #0x10]
0000000100028dc4	ldp	x24, x23, [sp], #0x40
0000000100028dc8	b	0x100030d88 ; symbol stub for: _dispatch_group_leave
0000000100028dcc	bl	0x100030adc ; symbol stub for: ___error
0000000100028dd0	ldr	w23, [x0]
0000000100028dd4	cbnz	w23, 0x100028da4
0000000100028dd8	mov	x0, x19
0000000100028ddc	bl	0x100030d7c ; symbol stub for: _dispatch_group_enter
0000000100028de0	nop
0000000100028de4	ldr	x3, #0x1b09c
0000000100028de8	adr	x5, #212
0000000100028dec	nop
0000000100028df0	mov	x2, #-0x1
0000000100028df4	mov	x0, x20
0000000100028df8	mov	x1, #0x0
0000000100028dfc	mov	x4, x21
0000000100028e00	bl	0x100030ddc ; symbol stub for: _dispatch_io_read_f
0000000100028e04	b	0x100028db4
0000000100028e08	mov	x0, x22
0000000100028e0c	bl	0x1000288f0
0000000100028e10	mov	x23, x0
0000000100028e14	cbz	x23, 0x100028d3c
0000000100028e18	ldr	x0, [x21, #0x10]
0000000100028e1c	bl	0x100031010 ; symbol stub for: _free
0000000100028e20	str	x23, [x21, #0x10]
0000000100028e24	ldrh	w8, [x21, #0x34]
0000000100028e28	and	w8, w8, #0xf000
0000000100028e2c	cmp	w8, #0x4, lsl #12
0000000100028e30	mov	w8, #0x15
0000000100028e34	csel	w23, w8, wzr, eq
0000000100028e38	tbz	w24, #0x0, 0x100028d48
0000000100028e3c	b	0x100028d88
0000000100028e40	bl	0x100030adc ; symbol stub for: ___error
0000000100028e44	ldrsw	x0, [x0]
0000000100028e48	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100028e4c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100028e50	brk	#0x1
0000000100028e54	sub	sp, sp, #0x50
0000000100028e58	stp	x20, x19, [sp, #0x30]
0000000100028e5c	stp	x29, x30, [sp, #0x40]
0000000100028e60	add	x29, sp, #0x40
0000000100028e64	mov	x19, x2
0000000100028e68	mov	x20, x1
0000000100028e6c	cbnz	x0, 0x100028e74
0000000100028e70	bl	0x100030ad0 ; symbol stub for: __NSGetMachExecuteHeader
0000000100028e74	str	xzr, [sp, #0x8]
0000000100028e78	add	x1, sp, #0x10
0000000100028e7c	bl	0x100030f50 ; symbol stub for: _dladdr
0000000100028e80	cbz	w0, 0x100028ea8
0000000100028e84	ldr	x0, [sp, #0x18]
0000000100028e88	add	x3, sp, #0x8
0000000100028e8c	mov	x1, x20
0000000100028e90	mov	x2, x19
0000000100028e94	bl	0x100031100 ; symbol stub for: _getsectiondata
0000000100028e98	cbz	x0, 0x100028eac
0000000100028e9c	ldr	x1, [sp, #0x8]
0000000100028ea0	bl	0x1000319b8 ; symbol stub for: _xpc_create_from_plist
0000000100028ea4	b	0x100028eac
0000000100028ea8	mov	x0, #0x0
0000000100028eac	ldp	x29, x30, [sp, #0x40]
0000000100028eb0	ldp	x20, x19, [sp, #0x30]
0000000100028eb4	add	sp, sp, #0x50
0000000100028eb8	ret
0000000100028ebc	stp	x22, x21, [sp, #-0x30]!
0000000100028ec0	stp	x20, x19, [sp, #0x10]
0000000100028ec4	stp	x29, x30, [sp, #0x20]
0000000100028ec8	add	x29, sp, #0x20
0000000100028ecc	mov	x21, x1
0000000100028ed0	mov	x22, x0
0000000100028ed4	ldp	x20, x19, [x22]
0000000100028ed8	ldrb	w8, [x22, #0xc4]
0000000100028edc	cbz	w8, 0x100028f04
0000000100028ee0	cbz	w21, 0x100028f2c
0000000100028ee4	mov	x0, x20
0000000100028ee8	mov	x1, #0x0
0000000100028eec	bl	0x100030db8 ; symbol stub for: _dispatch_io_close
0000000100028ef0	mov	x0, x19
0000000100028ef4	ldp	x29, x30, [sp, #0x20]
0000000100028ef8	ldp	x20, x19, [sp, #0x10]
0000000100028efc	ldp	x22, x21, [sp], #0x30
0000000100028f00	b	0x100030d88 ; symbol stub for: _dispatch_group_leave
0000000100028f04	cbz	x2, 0x100028f18
0000000100028f08	str	x2, [x22, #0x28]
0000000100028f0c	mov	x0, x2
0000000100028f10	bl	0x100030e78 ; symbol stub for: _dispatch_retain
0000000100028f14	b	0x100028f20
0000000100028f18	cbz	w3, 0x100028f3c
0000000100028f1c	str	w3, [x22, #0xc0]
0000000100028f20	orr	w8, wzr, #0x1
0000000100028f24	strb	w8, [x22, #0xc4]
0000000100028f28	cbnz	w21, 0x100028ee4
0000000100028f2c	ldp	x29, x30, [sp, #0x20]
0000000100028f30	ldp	x20, x19, [sp, #0x10]
0000000100028f34	ldp	x22, x21, [sp], #0x30
0000000100028f38	ret
0000000100028f3c	cbz	w21, 0x100028f60
0000000100028f40	stp	x20, x21, [sp, #-0x10]!
0000000100028f44	adrp	x20, 19 ; 0x10003b000
0000000100028f48	add	x20, x20, #0xd5e ; literal pool for: "Data corruption: Received NULL data and zero error."
0000000100028f4c	adrp	x21, 27 ; 0x100043000
0000000100028f50	add	x21, x21, #0x528
0000000100028f54	str	x20, [x21, #0x8]
0000000100028f58	ldp	x20, x21, [sp], #0x10
0000000100028f5c	brk	#0x1
0000000100028f60	stp	x20, x21, [sp, #-0x10]!
0000000100028f64	adrp	x20, 19 ; 0x10003b000
0000000100028f68	add	x20, x20, #0xd92 ; literal pool for: "Data corruption: Received NULL data and zero error on terminating invocation."
0000000100028f6c	adrp	x21, 27 ; 0x100043000
0000000100028f70	add	x21, x21, #0x528
0000000100028f74	str	x20, [x21, #0x8]
0000000100028f78	ldp	x20, x21, [sp], #0x10
0000000100028f7c	brk	#0x1
0000000100028f80	ret
0000000100028f84	stp	x29, x30, [sp, #-0x10]!
0000000100028f88	mov	x29, sp
0000000100028f8c	mov	x8, x0
0000000100028f90	orr	w0, wzr, #0x7
0000000100028f94	orr	w1, wzr, #0x1
0000000100028f98	mov	x2, x8
0000000100028f9c	mov	x3, #0x0
0000000100028fa0	bl	0x100030bd8 ; symbol stub for: _abort_with_reason
0000000100028fa4	ret
0000000100028fa8	ret
0000000100028fac	stp	x29, x30, [sp, #-0x10]!
0000000100028fb0	mov	x29, sp
0000000100028fb4	bl	0x100031220 ; symbol stub for: _mach_host_self
0000000100028fb8	orr	w1, wzr, #0x1000
0000000100028fbc	bl	0x100031160 ; symbol stub for: _host_reboot
0000000100028fc0	brk	#0x1
0000000100028fc4	stp	x29, x30, [sp, #-0x10]!
0000000100028fc8	mov	x29, sp
0000000100028fcc	orr	w0, wzr, #0x8000000
0000000100028fd0	bl	0x1000313c4 ; symbol stub for: _notify_set_options
0000000100028fd4	adr	x0, #77324 ; literal pool for: "mdns"
0000000100028fd8	nop
0000000100028fdc	orr	w1, wzr, #0x1
0000000100028fe0	bl	0x1000316a0 ; symbol stub for: _si_search_module_set_flags
0000000100028fe4	adr	x0, #77313 ; literal pool for: "ds"
0000000100028fe8	nop
0000000100028fec	orr	w1, wzr, #0x1
0000000100028ff0	bl	0x1000316a0 ; symbol stub for: _si_search_module_set_flags
0000000100028ff4	mov	w0, #0x100
0000000100028ff8	movk	w0, #0x1c00, lsl #16
0000000100028ffc	ldp	x29, x30, [sp], #0x10
0000000100029000	b	0x100031424 ; symbol stub for: _os_trace_set_mode
0000000100029004	stp	x28, x27, [sp, #-0x40]!
0000000100029008	stp	x22, x21, [sp, #0x10]
000000010002900c	stp	x20, x19, [sp, #0x20]
0000000100029010	stp	x29, x30, [sp, #0x30]
0000000100029014	add	x29, sp, #0x30
0000000100029018	sub	sp, sp, #0x410
000000010002901c	mov	x20, x1
0000000100029020	mov	x21, x0
0000000100029024	nop
0000000100029028	ldr	x8, #0x16ff0 ; literal pool symbol address: ___stack_chk_guard
000000010002902c	ldr	x8, [x8]
0000000100029030	stur	x8, [x29, #-0x38]
0000000100029034	str	xzr, [sp]
0000000100029038	mov	w2, #0xb
000000010002903c	mov	x3, sp
0000000100029040	mov	w4, #0x408
0000000100029044	bl	0x100029130
0000000100029048	tbnz	w0, #0x1f, 0x10002906c
000000010002904c	cbnz	w0, 0x1000290d4
0000000100029050	mov	x8, sp
0000000100029054	add	x0, x8, #0x8
0000000100029058	ldr	w8, [sp, #0x4]
000000010002905c	sub	x1, x8, #0x8
0000000100029060	bl	0x10000d57c
0000000100029064	mov	x20, x0
0000000100029068	b	0x1000290f8
000000010002906c	bl	0x100030adc ; symbol stub for: ___error
0000000100029070	ldr	w8, [x0]
0000000100029074	cmp	w8, #0x22
0000000100029078	b.ne	0x1000290d4
000000010002907c	ldr	w22, [sp, #0x4]
0000000100029080	mov	x0, x22
0000000100029084	bl	0x10000d408
0000000100029088	mov	x19, x0
000000010002908c	mov	w2, #0xb
0000000100029090	mov	x0, x21
0000000100029094	mov	x1, x20
0000000100029098	mov	x3, x19
000000010002909c	mov	x4, x22
00000001000290a0	bl	0x100029130
00000001000290a4	cbz	w0, 0x1000290dc
00000001000290a8	bl	0x100030adc ; symbol stub for: ___error
00000001000290ac	ldr	w8, [x0]
00000001000290b0	cmp	w8, #0x3
00000001000290b4	b.eq	0x1000290cc
00000001000290b8	bl	0x100030adc ; symbol stub for: ___error
00000001000290bc	ldrsw	x0, [x0]
00000001000290c0	cbz	w0, 0x1000290cc
00000001000290c4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000290c8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000290cc	mov	x20, #0x0
00000001000290d0	b	0x1000290f0
00000001000290d4	mov	x20, #0x0
00000001000290d8	b	0x1000290f8
00000001000290dc	add	x0, x19, #0x8
00000001000290e0	ldr	w8, [x19, #0x4]
00000001000290e4	sub	x1, x8, #0x8
00000001000290e8	bl	0x10000d57c
00000001000290ec	mov	x20, x0
00000001000290f0	mov	x0, x19
00000001000290f4	bl	0x100031010 ; symbol stub for: _free
00000001000290f8	ldur	x8, [x29, #-0x38]
00000001000290fc	nop
0000000100029100	ldr	x9, #0x16f18 ; literal pool symbol address: ___stack_chk_guard
0000000100029104	ldr	x9, [x9]
0000000100029108	cmp	x9, x8
000000010002910c	b.ne	0x10002912c
0000000100029110	mov	x0, x20
0000000100029114	add	sp, sp, #0x410
0000000100029118	ldp	x29, x30, [sp, #0x30]
000000010002911c	ldp	x20, x19, [sp, #0x20]
0000000100029120	ldp	x22, x21, [sp, #0x10]
0000000100029124	ldp	x28, x27, [sp], #0x40
0000000100029128	ret
000000010002912c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100029130	stp	x20, x19, [sp, #-0x20]!
0000000100029134	stp	x29, x30, [sp, #0x10]
0000000100029138	add	x29, sp, #0x10
000000010002913c	mov	x19, x3
0000000100029140	mov	x8, x1
0000000100029144	cbz	x8, 0x100029160
0000000100029148	mov	x1, x2
000000010002914c	mov	x2, x19
0000000100029150	mov	x3, x4
0000000100029154	mov	x4, x8
0000000100029158	bl	0x100030d10 ; symbol stub for: _csops_audittoken
000000010002915c	b	0x100029170
0000000100029160	mov	x1, x2
0000000100029164	mov	x2, x19
0000000100029168	mov	x3, x4
000000010002916c	bl	0x100030d04 ; symbol stub for: _csops
0000000100029170	ldp	w8, w9, [x19]
0000000100029174	rev	w8, w8
0000000100029178	str	w8, [x19]
000000010002917c	rev	w8, w9
0000000100029180	str	w8, [x19, #0x4]
0000000100029184	ldp	x29, x30, [sp, #0x10]
0000000100029188	ldp	x20, x19, [sp], #0x20
000000010002918c	ret
0000000100029190	stp	x28, x27, [sp, #-0x40]!
0000000100029194	stp	x22, x21, [sp, #0x10]
0000000100029198	stp	x20, x19, [sp, #0x20]
000000010002919c	stp	x29, x30, [sp, #0x30]
00000001000291a0	add	x29, sp, #0x30
00000001000291a4	sub	sp, sp, #0x410
00000001000291a8	mov	x20, x1
00000001000291ac	mov	x21, x0
00000001000291b0	nop
00000001000291b4	ldr	x8, #0x16e64 ; literal pool symbol address: ___stack_chk_guard
00000001000291b8	ldr	x8, [x8]
00000001000291bc	stur	x8, [x29, #-0x38]
00000001000291c0	str	xzr, [sp]
00000001000291c4	orr	w2, wzr, #0x7
00000001000291c8	mov	x3, sp
00000001000291cc	mov	w4, #0x408
00000001000291d0	bl	0x100029130
00000001000291d4	tbnz	w0, #0x1f, 0x100029210
00000001000291d8	mov	x20, #0x0
00000001000291dc	cbnz	w0, 0x1000292b4
00000001000291e0	ldr	w8, [sp]
00000001000291e4	mov	w9, #0x7171
00000001000291e8	movk	w9, #0xfade, lsl #16
00000001000291ec	cmp	w8, w9
00000001000291f0	b.ne	0x1000292b4
00000001000291f4	mov	x8, sp
00000001000291f8	add	x0, x8, #0x8
00000001000291fc	ldr	w8, [sp, #0x4]
0000000100029200	sub	x1, x8, #0x8
0000000100029204	bl	0x1000319c4 ; symbol stub for: _xpc_data_create
0000000100029208	mov	x20, x0
000000010002920c	b	0x1000292b4
0000000100029210	bl	0x100030adc ; symbol stub for: ___error
0000000100029214	ldr	w8, [x0]
0000000100029218	cmp	w8, #0x22
000000010002921c	b.ne	0x100029274
0000000100029220	ldr	w22, [sp, #0x4]
0000000100029224	mov	x0, x22
0000000100029228	bl	0x10000d408
000000010002922c	mov	x19, x0
0000000100029230	orr	w2, wzr, #0x7
0000000100029234	mov	x0, x21
0000000100029238	mov	x1, x20
000000010002923c	mov	x3, x19
0000000100029240	mov	x4, x22
0000000100029244	bl	0x100029130
0000000100029248	cbz	w0, 0x10002927c
000000010002924c	bl	0x100030adc ; symbol stub for: ___error
0000000100029250	ldr	w8, [x0]
0000000100029254	cmp	w8, #0x3
0000000100029258	b.eq	0x1000292a8
000000010002925c	bl	0x100030adc ; symbol stub for: ___error
0000000100029260	ldrsw	x0, [x0]
0000000100029264	cbz	w0, 0x1000292a8
0000000100029268	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002926c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100029270	b	0x1000292a8
0000000100029274	mov	x20, #0x0
0000000100029278	b	0x1000292b4
000000010002927c	ldr	w8, [x19]
0000000100029280	mov	w9, #0x7171
0000000100029284	movk	w9, #0xfade, lsl #16
0000000100029288	cmp	w8, w9
000000010002928c	b.ne	0x1000292a8
0000000100029290	add	x0, x19, #0x8
0000000100029294	ldr	w8, [x19, #0x4]
0000000100029298	sub	x1, x8, #0x8
000000010002929c	bl	0x1000319c4 ; symbol stub for: _xpc_data_create
00000001000292a0	mov	x20, x0
00000001000292a4	b	0x1000292ac
00000001000292a8	mov	x20, #0x0
00000001000292ac	mov	x0, x19
00000001000292b0	bl	0x100031010 ; symbol stub for: _free
00000001000292b4	ldur	x8, [x29, #-0x38]
00000001000292b8	nop
00000001000292bc	ldr	x9, #0x16d5c ; literal pool symbol address: ___stack_chk_guard
00000001000292c0	ldr	x9, [x9]
00000001000292c4	cmp	x9, x8
00000001000292c8	b.ne	0x1000292e8
00000001000292cc	mov	x0, x20
00000001000292d0	add	sp, sp, #0x410
00000001000292d4	ldp	x29, x30, [sp, #0x30]
00000001000292d8	ldp	x20, x19, [sp, #0x20]
00000001000292dc	ldp	x22, x21, [sp, #0x10]
00000001000292e0	ldp	x28, x27, [sp], #0x40
00000001000292e4	ret
00000001000292e8	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
00000001000292ec	stp	x20, x19, [sp, #-0x20]!
00000001000292f0	stp	x29, x30, [sp, #0x10]
00000001000292f4	add	x29, sp, #0x10
00000001000292f8	bl	0x100029190
00000001000292fc	mov	x19, x0
0000000100029300	cbz	x19, 0x100029334
0000000100029304	mov	x0, x19
0000000100029308	bl	0x1000319dc ; symbol stub for: _xpc_data_get_bytes_ptr
000000010002930c	mov	x20, x0
0000000100029310	mov	x0, x19
0000000100029314	bl	0x1000319e8 ; symbol stub for: _xpc_data_get_length
0000000100029318	mov	x1, x0
000000010002931c	mov	x0, x20
0000000100029320	bl	0x1000319b8 ; symbol stub for: _xpc_create_from_plist
0000000100029324	mov	x20, x0
0000000100029328	mov	x0, x19
000000010002932c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100029330	mov	x0, x20
0000000100029334	ldp	x29, x30, [sp, #0x10]
0000000100029338	ldp	x20, x19, [sp], #0x20
000000010002933c	ret
0000000100029340	stp	x29, x30, [sp, #-0x10]!
0000000100029344	mov	x29, sp
0000000100029348	mov	x8, x1
000000010002934c	mov	w1, #0xd
0000000100029350	orr	w4, wzr, #0x40
0000000100029354	orr	w2, wzr, #0x1
0000000100029358	mov	x3, x8
000000010002935c	bl	0x100031574 ; symbol stub for: _proc_pidinfo
0000000100029360	cmp	w0, #0x40
0000000100029364	b.ne	0x100029370
0000000100029368	mov	w0, #0x0
000000010002936c	b	0x100029378
0000000100029370	bl	0x100030adc ; symbol stub for: ___error
0000000100029374	ldr	w0, [x0]
0000000100029378	ldp	x29, x30, [sp], #0x10
000000010002937c	ret
0000000100029380	stp	x29, x30, [sp, #-0x10]!
0000000100029384	mov	x29, sp
0000000100029388	mov	x8, x1
000000010002938c	mov	w1, #0x12
0000000100029390	orr	w4, wzr, #0xc0
0000000100029394	orr	w2, wzr, #0x1
0000000100029398	mov	x3, x8
000000010002939c	bl	0x100031574 ; symbol stub for: _proc_pidinfo
00000001000293a0	cmp	w0, #0xc0
00000001000293a4	b.ne	0x1000293b0
00000001000293a8	mov	w0, #0x0
00000001000293ac	b	0x1000293b8
00000001000293b0	bl	0x100030adc ; symbol stub for: ___error
00000001000293b4	ldr	w0, [x0]
00000001000293b8	ldp	x29, x30, [sp], #0x10
00000001000293bc	ret
00000001000293c0	stp	x20, x19, [sp, #-0x20]!
00000001000293c4	stp	x29, x30, [sp, #0x10]
00000001000293c8	add	x29, sp, #0x10
00000001000293cc	mov	x19, x1
00000001000293d0	ldr	w0, [x0, #0x14]
00000001000293d4	bl	0x100029340
00000001000293d8	adr	x8, #76304 ; literal pool for: "(dead-on-arrival)"
00000001000293dc	nop
00000001000293e0	add	x9, x19, #0x10
00000001000293e4	cmp	w0, #0x3
00000001000293e8	adr	x10, #76306 ; literal pool for: "(confusing)"
00000001000293ec	nop
00000001000293f0	csel	x8, x8, x10, eq
00000001000293f4	cmp	w0, #0x0
00000001000293f8	csel	x0, x9, x8, eq
00000001000293fc	ldp	x29, x30, [sp, #0x10]
0000000100029400	ldp	x20, x19, [sp], #0x20
0000000100029404	ret
0000000100029408	stp	x29, x30, [sp, #-0x10]!
000000010002940c	mov	x29, sp
0000000100029410	mov	x8, x1
0000000100029414	mov	w1, #0x14
0000000100029418	mov	w4, #0x28
000000010002941c	orr	w2, wzr, #0x1
0000000100029420	mov	x3, x8
0000000100029424	bl	0x100031574 ; symbol stub for: _proc_pidinfo
0000000100029428	cmp	w0, #0x28
000000010002942c	b.ne	0x100029438
0000000100029430	mov	w0, #0x0
0000000100029434	b	0x100029440
0000000100029438	bl	0x100030adc ; symbol stub for: ___error
000000010002943c	ldr	w0, [x0]
0000000100029440	ldp	x29, x30, [sp], #0x10
0000000100029444	ret
0000000100029448	sub	sp, sp, #0xc0
000000010002944c	stp	x22, x21, [sp, #0x90]
0000000100029450	stp	x20, x19, [sp, #0xa0]
0000000100029454	stp	x29, x30, [sp, #0xb0]
0000000100029458	add	x29, sp, #0xb0
000000010002945c	mov	x19, x1
0000000100029460	mov	x20, x0
0000000100029464	nop
0000000100029468	ldr	x8, #0x16bb0 ; literal pool symbol address: ___stack_chk_guard
000000010002946c	ldr	x8, [x8]
0000000100029470	stur	x8, [x29, #-0x28]
0000000100029474	bl	0x100030adc ; symbol stub for: ___error
0000000100029478	str	wzr, [x0]
000000010002947c	orr	w8, wzr, #0x80
0000000100029480	str	x8, [sp]
0000000100029484	add	x1, sp, #0x8
0000000100029488	mov	x2, sp
000000010002948c	mov	x0, x20
0000000100029490	mov	x3, #0x0
0000000100029494	mov	x4, #0x0
0000000100029498	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002949c	mov	x21, x0
00000001000294a0	ldr	x8, [sp]
00000001000294a4	cbz	x8, 0x1000294b0
00000001000294a8	cbnz	w21, 0x1000294c8
00000001000294ac	b	0x1000294d8
00000001000294b0	orr	w8, wzr, #0x80
00000001000294b4	str	x8, [sp]
00000001000294b8	bl	0x100030adc ; symbol stub for: ___error
00000001000294bc	orr	w8, wzr, #0xc
00000001000294c0	str	w8, [x0]
00000001000294c4	cbz	w21, 0x1000294d8
00000001000294c8	bl	0x100030adc ; symbol stub for: ___error
00000001000294cc	ldr	w8, [x0]
00000001000294d0	cmp	w8, #0xc
00000001000294d4	b.ne	0x100029568
00000001000294d8	ldr	x8, [sp]
00000001000294dc	cmp	x8, #0x80
00000001000294e0	b.ne	0x100029554
00000001000294e4	bl	0x100030adc ; symbol stub for: ___error
00000001000294e8	ldr	w8, [x0]
00000001000294ec	cmp	w8, #0xc
00000001000294f0	b.ne	0x100029554
00000001000294f4	mov	x2, sp
00000001000294f8	mov	x0, x20
00000001000294fc	mov	x1, #0x0
0000000100029500	mov	x3, #0x0
0000000100029504	mov	x4, #0x0
0000000100029508	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002950c	mov	x8, x0
0000000100029510	mov	x0, #0x0
0000000100029514	cbnz	w8, 0x100029590
0000000100029518	ldr	x0, [sp]
000000010002951c	cmp	x0, #0x81
0000000100029520	b.lo	0x100029570
0000000100029524	bl	0x10000d408
0000000100029528	mov	x22, x0
000000010002952c	mov	x2, sp
0000000100029530	mov	x0, x20
0000000100029534	mov	x1, x22
0000000100029538	mov	x3, #0x0
000000010002953c	mov	x4, #0x0
0000000100029540	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
0000000100029544	mov	x21, x0
0000000100029548	mov	x20, x22
000000010002954c	cbnz	w21, 0x100029560
0000000100029550	b	0x100029578
0000000100029554	mov	x20, #0x0
0000000100029558	add	x22, sp, #0x8
000000010002955c	cbz	w21, 0x100029578
0000000100029560	str	xzr, [sp]
0000000100029564	b	0x100029584
0000000100029568	mov	x0, #0x0
000000010002956c	b	0x100029590
0000000100029570	mov	x20, #0x0
0000000100029574	add	x22, sp, #0x8
0000000100029578	mov	x0, x22
000000010002957c	bl	0x100031718 ; symbol stub for: _strdup
0000000100029580	str	x0, [x19]
0000000100029584	mov	x0, x20
0000000100029588	bl	0x100031010 ; symbol stub for: _free
000000010002958c	ldr	x0, [sp]
0000000100029590	ldur	x8, [x29, #-0x28]
0000000100029594	nop
0000000100029598	ldr	x9, #0x16a80 ; literal pool symbol address: ___stack_chk_guard
000000010002959c	ldr	x9, [x9]
00000001000295a0	cmp	x9, x8
00000001000295a4	b.ne	0x1000295bc
00000001000295a8	ldp	x29, x30, [sp, #0xb0]
00000001000295ac	ldp	x20, x19, [sp, #0xa0]
00000001000295b0	ldp	x22, x21, [sp, #0x90]
00000001000295b4	add	sp, sp, #0xc0
00000001000295b8	ret
00000001000295bc	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
00000001000295c0	sub	sp, sp, #0x30
00000001000295c4	stp	x20, x19, [sp, #0x10]
00000001000295c8	stp	x29, x30, [sp, #0x20]
00000001000295cc	add	x29, sp, #0x20
00000001000295d0	mov	x19, x1
00000001000295d4	bl	0x1000317a8 ; symbol stub for: _strstr
00000001000295d8	mov	x20, x0
00000001000295dc	cbz	x20, 0x10002960c
00000001000295e0	str	xzr, [sp, #0x8]
00000001000295e4	mov	x0, x19
00000001000295e8	bl	0x10003173c ; symbol stub for: _strlen
00000001000295ec	add	x19, x20, x0
00000001000295f0	mov	w2, #0xa
00000001000295f4	add	x1, sp, #0x8
00000001000295f8	mov	x0, x19
00000001000295fc	bl	0x1000317b4 ; symbol stub for: _strtoul
0000000100029600	ldr	x8, [sp, #0x8]
0000000100029604	cmp	x19, x8
0000000100029608	csel	x0, xzr, x0, eq
000000010002960c	ldp	x29, x30, [sp, #0x20]
0000000100029610	ldp	x20, x19, [sp, #0x10]
0000000100029614	add	sp, sp, #0x30
0000000100029618	ret
000000010002961c	mov	w0, #0x0
0000000100029620	ret
0000000100029624	sub	sp, sp, #0x30
0000000100029628	stp	x20, x19, [sp, #0x10]
000000010002962c	stp	x29, x30, [sp, #0x20]
0000000100029630	add	x29, sp, #0x20
0000000100029634	mov	x19, x2
0000000100029638	mov	x20, x1
000000010002963c	mov	x1, sp
0000000100029640	bl	0x1000310e8 ; symbol stub for: _getrlimit
0000000100029644	cbnz	w0, 0x10002967c
0000000100029648	ldr	x8, [sp]
000000010002964c	orr	x9, xzr, #0x7fffffffffffffff
0000000100029650	cmp	x8, x9
0000000100029654	b.ne	0x100029660
0000000100029658	mov	x8, #-0x1
000000010002965c	str	x8, [sp]
0000000100029660	ldr	x10, [sp, #0x8]
0000000100029664	cmp	x10, x9
0000000100029668	b.ne	0x100029674
000000010002966c	mov	x10, #-0x1
0000000100029670	str	x10, [sp, #0x8]
0000000100029674	str	x8, [x20]
0000000100029678	str	x10, [x19]
000000010002967c	ldp	x29, x30, [sp, #0x20]
0000000100029680	ldp	x20, x19, [sp, #0x10]
0000000100029684	add	sp, sp, #0x30
0000000100029688	ret
000000010002968c	sub	sp, sp, #0x40
0000000100029690	stp	x20, x19, [sp, #0x20]
0000000100029694	stp	x29, x30, [sp, #0x30]
0000000100029698	add	x29, sp, #0x30
000000010002969c	mov	x19, x0
00000001000296a0	cmp	w19, #0x8
00000001000296a4	mov	w8, #0x2800
00000001000296a8	orr	x9, xzr, #0x7fffffffffffffff
00000001000296ac	csel	x8, x8, x9, eq
00000001000296b0	cmn	x1, #0x1
00000001000296b4	csel	x9, x8, x1, eq
00000001000296b8	cmn	x2, #0x1
00000001000296bc	csel	x8, x8, x2, eq
00000001000296c0	stp	x8, x9, [sp, #0x10]
00000001000296c4	stp	x9, x8, [sp]
00000001000296c8	cmp	w19, #0x8
00000001000296cc	b.ne	0x100029708
00000001000296d0	adr	x0, #75632 ; literal pool for: "kern.maxfiles"
00000001000296d4	nop
00000001000296d8	add	x3, sp, #0x10
00000001000296dc	orr	w4, wzr, #0x8
00000001000296e0	mov	x1, #0x0
00000001000296e4	mov	x2, #0x0
00000001000296e8	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
00000001000296ec	cbz	w0, 0x1000296fc
00000001000296f0	sxtw	x0, w0
00000001000296f4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000296f8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000296fc	adr	x0, #75602 ; literal pool for: "kern.maxfilesperproc"
0000000100029700	nop
0000000100029704	b	0x100029744
0000000100029708	cmp	w19, #0x7
000000010002970c	b.ne	0x100029768
0000000100029710	adr	x0, #75603 ; literal pool for: "kern.maxproc"
0000000100029714	nop
0000000100029718	add	x3, sp, #0x10
000000010002971c	orr	w4, wzr, #0x8
0000000100029720	mov	x1, #0x0
0000000100029724	mov	x2, #0x0
0000000100029728	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002972c	cbz	w0, 0x10002973c
0000000100029730	sxtw	x0, w0
0000000100029734	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100029738	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002973c	adr	x0, #75572 ; literal pool for: "kern.maxprocperuid"
0000000100029740	nop
0000000100029744	add	x3, sp, #0x18
0000000100029748	orr	w4, wzr, #0x8
000000010002974c	mov	x1, #0x0
0000000100029750	mov	x2, #0x0
0000000100029754	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
0000000100029758	cbz	w0, 0x100029768
000000010002975c	sxtw	x0, w0
0000000100029760	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100029764	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100029768	mov	x1, sp
000000010002976c	mov	x0, x19
0000000100029770	bl	0x10003167c ; symbol stub for: _setrlimit
0000000100029774	cbz	w0, 0x100029784
0000000100029778	sxtw	x0, w0
000000010002977c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100029780	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100029784	ldp	x29, x30, [sp, #0x30]
0000000100029788	ldp	x20, x19, [sp, #0x20]
000000010002978c	add	sp, sp, #0x40
0000000100029790	ret
0000000100029794	stp	x24, x23, [sp, #-0x40]!
0000000100029798	stp	x22, x21, [sp, #0x10]
000000010002979c	stp	x20, x19, [sp, #0x20]
00000001000297a0	stp	x29, x30, [sp, #0x30]
00000001000297a4	add	x29, sp, #0x30
00000001000297a8	mov	x19, x2
00000001000297ac	mov	x20, x1
00000001000297b0	mov	x21, x0
00000001000297b4	mov	x22, #0x0
00000001000297b8	adr	x8, #105504
00000001000297bc	nop
00000001000297c0	add	x23, x8, #0x8
00000001000297c4	ldur	x0, [x23, #-0x8]
00000001000297c8	mov	x1, x21
00000001000297cc	bl	0x100031700 ; symbol stub for: _strcmp
00000001000297d0	cbz	w0, 0x1000297f8
00000001000297d4	add	x22, x22, #0x1
00000001000297d8	add	x23, x23, #0x10
00000001000297dc	cmp	x22, #0x8
00000001000297e0	b.ls	0x1000297c4
00000001000297e4	ldp	x29, x30, [sp, #0x30]
00000001000297e8	ldp	x20, x19, [sp, #0x20]
00000001000297ec	ldp	x22, x21, [sp, #0x10]
00000001000297f0	ldp	x24, x23, [sp], #0x40
00000001000297f4	ret
00000001000297f8	ldr	w0, [x23]
00000001000297fc	mov	x1, x20
0000000100029800	mov	x2, x19
0000000100029804	ldp	x29, x30, [sp, #0x30]
0000000100029808	ldp	x20, x19, [sp, #0x20]
000000010002980c	ldp	x22, x21, [sp, #0x10]
0000000100029810	ldp	x24, x23, [sp], #0x40
0000000100029814	b	0x10002968c
0000000100029818	mov	x8, #0x0
000000010002981c	adr	x9, #105404
0000000100029820	nop
0000000100029824	add	x9, x9, #0x8
0000000100029828	ldr	w10, [x9]
000000010002982c	cmp	w10, w0
0000000100029830	b.eq	0x10002984c
0000000100029834	add	x8, x8, #0x1
0000000100029838	add	x9, x9, #0x10
000000010002983c	cmp	x8, #0x9
0000000100029840	b.lo	0x100029828
0000000100029844	mov	x0, #0x0
0000000100029848	ret
000000010002984c	ldur	x0, [x9, #-0x8]
0000000100029850	ret
0000000100029854	sub	sp, sp, #0x60
0000000100029858	stp	x29, x30, [sp, #0x50]
000000010002985c	add	x29, sp, #0x50
0000000100029860	nop
0000000100029864	ldr	x8, #0x167b4 ; literal pool symbol address: ___stack_chk_guard
0000000100029868	ldr	x8, [x8]
000000010002986c	stur	x8, [x29, #-0x8]
0000000100029870	add	x1, sp, #0x8
0000000100029874	bl	0x100029340
0000000100029878	cbz	w0, 0x100029890
000000010002987c	mov	x0, #0x0
0000000100029880	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100029884	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100029888	mov	w0, #0x0
000000010002988c	b	0x100029898
0000000100029890	ldrb	w8, [sp, #0x28]
0000000100029894	ubfx	w0, w8, #1, #1
0000000100029898	ldur	x8, [x29, #-0x8]
000000010002989c	nop
00000001000298a0	ldr	x9, #0x16778 ; literal pool symbol address: ___stack_chk_guard
00000001000298a4	ldr	x9, [x9]
00000001000298a8	cmp	x9, x8
00000001000298ac	b.ne	0x1000298bc
00000001000298b0	ldp	x29, x30, [sp, #0x50]
00000001000298b4	add	sp, sp, #0x60
00000001000298b8	ret
00000001000298bc	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
00000001000298c0	nop
00000001000298c4	nop
00000001000298c8	ldr	x0, #0x19c68
00000001000298cc	ret
00000001000298d0	sub	sp, sp, #0xd0
00000001000298d4	stp	x20, x19, [sp, #0xb0]
00000001000298d8	stp	x29, x30, [sp, #0xc0]
00000001000298dc	add	x29, sp, #0xc0
00000001000298e0	str	x0, [sp]
00000001000298e4	adr	x4, #75167 ; literal pool for: "XPC API Misuse: %s"
00000001000298e8	nop
00000001000298ec	add	x19, sp, #0x10
00000001000298f0	add	x0, sp, #0x10
00000001000298f4	mov	w1, #0xa0
00000001000298f8	mov	w3, #0xa0
00000001000298fc	mov	w2, #0x0
0000000100029900	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100029904	adr	x8, #105516
0000000100029908	nop
000000010002990c	str	x19, [x8]
0000000100029910	brk	#0x1
0000000100029914	nop
0000000100029918	ldr	x8, #0x16760 ; literal pool symbol address: __os_alloc_once_table
000000010002991c	ldr	x9, [x8, #0x10]
0000000100029920	cmn	x9, #0x1
0000000100029924	b.ne	0x100029930
0000000100029928	ldr	x0, [x8, #0x18]
000000010002992c	ret
0000000100029930	stp	x29, x30, [sp, #-0x10]!
0000000100029934	mov	x29, sp
0000000100029938	add	x0, x8, #0x10
000000010002993c	mov	w1, #0x1d8
0000000100029940	mov	x2, #0x0
0000000100029944	bl	0x100030b3c ; symbol stub for: __os_alloc_once
0000000100029948	ldp	x29, x30, [sp], #0x10
000000010002994c	ret
0000000100029950	nop
0000000100029954	nop
0000000100029958	ldr	x0, #0x19bd8
000000010002995c	ret
0000000100029960	stp	x20, x19, [sp, #-0x20]!
0000000100029964	stp	x29, x30, [sp, #0x10]
0000000100029968	add	x29, sp, #0x10
000000010002996c	mov	x19, x0
0000000100029970	ldr	x0, [x19, #0x10]
0000000100029974	bl	0x100031010 ; symbol stub for: _free
0000000100029978	ldr	x0, [x19, #0x18]
000000010002997c	bl	0x100031010 ; symbol stub for: _free
0000000100029980	ldr	x0, [x19, #0x30]
0000000100029984	ldp	x29, x30, [sp, #0x10]
0000000100029988	ldp	x20, x19, [sp], #0x20
000000010002998c	b	0x100031010 ; symbol stub for: _free
0000000100029990	sub	sp, sp, #0x20
0000000100029994	stp	x29, x30, [sp, #0x10]
0000000100029998	add	x29, sp, #0x10
000000010002999c	nop
00000001000299a0	ldr	x8, #0x1a4e8
00000001000299a4	cmp	x8, #0x0
00000001000299a8	orr	w8, wzr, #0x3
00000001000299ac	mov	w9, #0x3
00000001000299b0	movk	w9, #0x1, lsl #16
00000001000299b4	csel	w1, w9, w8, eq
00000001000299b8	str	x0, [sp]
00000001000299bc	adr	x2, #47854 ; literal pool for: "%s"
00000001000299c0	nop
00000001000299c4	mov	x0, #0x0
00000001000299c8	bl	0x100029dbc
00000001000299cc	orr	w0, wzr, #0x1
00000001000299d0	ldp	x29, x30, [sp, #0x10]
00000001000299d4	add	sp, sp, #0x20
00000001000299d8	ret
00000001000299dc	stp	x22, x21, [sp, #-0x30]!
00000001000299e0	stp	x20, x19, [sp, #0x10]
00000001000299e4	stp	x29, x30, [sp, #0x20]
00000001000299e8	add	x29, sp, #0x20
00000001000299ec	sub	sp, sp, #0x490
00000001000299f0	nop
00000001000299f4	ldr	x8, #0x16624 ; literal pool symbol address: ___stack_chk_guard
00000001000299f8	ldr	x8, [x8]
00000001000299fc	stur	x8, [x29, #-0x28]
0000000100029a00	nop
0000000100029a04	nop
0000000100029a08	ldr	x0, #0x19ab0
0000000100029a0c	orr	w1, wzr, #0x1c0
0000000100029a10	bl	0x100031394 ; symbol stub for: _mkdir
0000000100029a14	adr	x8, #109157
0000000100029a18	nop
0000000100029a1c	ldrb	w8, [x8]
0000000100029a20	cbz	w8, 0x100029a50
0000000100029a24	ldur	x8, [x29, #-0x28]
0000000100029a28	nop
0000000100029a2c	ldr	x9, #0x165ec ; literal pool symbol address: ___stack_chk_guard
0000000100029a30	ldr	x9, [x9]
0000000100029a34	cmp	x9, x8
0000000100029a38	b.ne	0x100029c74
0000000100029a3c	add	sp, sp, #0x490
0000000100029a40	ldp	x29, x30, [sp, #0x20]
0000000100029a44	ldp	x20, x19, [sp, #0x10]
0000000100029a48	ldp	x22, x21, [sp], #0x30
0000000100029a4c	ret
0000000100029a50	adr	x8, #48703 ; literal pool for: "/var/run/syslog"
0000000100029a54	nop
0000000100029a58	adr	x4, #74818 ; literal pool for: "/private/%s"
0000000100029a5c	nop
0000000100029a60	str	x8, [sp]
0000000100029a64	add	x0, sp, #0x88
0000000100029a68	orr	w1, wzr, #0x400
0000000100029a6c	orr	w3, wzr, #0x400
0000000100029a70	mov	w2, #0x0
0000000100029a74	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100029a78	add	x19, sp, #0x18
0000000100029a7c	add	x0, sp, #0x18
0000000100029a80	mov	w2, #0x6a
0000000100029a84	mov	w1, #0x0
0000000100029a88	bl	0x100031340 ; symbol stub for: _memset
0000000100029a8c	orr	w8, wzr, #0x1
0000000100029a90	strb	w8, [sp, #0x19]
0000000100029a94	orr	x20, x19, #0x2
0000000100029a98	add	x1, sp, #0x88
0000000100029a9c	mov	w2, #0x67
0000000100029aa0	mov	x0, x20
0000000100029aa4	bl	0x100031754 ; symbol stub for: _strncpy
0000000100029aa8	orr	w0, wzr, #0x1
0000000100029aac	orr	w1, wzr, #0x2
0000000100029ab0	mov	w2, #0x0
0000000100029ab4	bl	0x1000316c4 ; symbol stub for: _socket
0000000100029ab8	mov	x19, x0
0000000100029abc	cmn	w19, #0x1
0000000100029ac0	b.eq	0x100029b44
0000000100029ac4	mov	x0, x20
0000000100029ac8	bl	0x10003182c ; symbol stub for: _unlink
0000000100029acc	cmn	w0, #0x1
0000000100029ad0	b.ne	0x100029ae4
0000000100029ad4	bl	0x100030adc ; symbol stub for: ___error
0000000100029ad8	ldr	w8, [x0]
0000000100029adc	cmp	w8, #0x2
0000000100029ae0	b.ne	0x100029bcc
0000000100029ae4	mov	w2, #0x6a
0000000100029ae8	add	x1, sp, #0x18
0000000100029aec	mov	x0, x19
0000000100029af0	bl	0x100030c20 ; symbol stub for: _bind
0000000100029af4	mov	x21, x0
0000000100029af8	cbz	w21, 0x100029b24
0000000100029afc	bl	0x100030adc ; symbol stub for: ___error
0000000100029b00	ldr	w8, [x0]
0000000100029b04	cmp	w8, #0x23
0000000100029b08	b.eq	0x100029ae4
0000000100029b0c	bl	0x100030adc ; symbol stub for: ___error
0000000100029b10	ldr	w8, [x0]
0000000100029b14	cmp	w8, #0x4
0000000100029b18	b.eq	0x100029ae4
0000000100029b1c	cmn	w21, #0x1
0000000100029b20	b.eq	0x100029c20
0000000100029b24	mov	w1, #0x1b6
0000000100029b28	mov	x0, x20
0000000100029b2c	bl	0x100030c50 ; symbol stub for: _chmod
0000000100029b30	cmn	w0, #0x1
0000000100029b34	b.eq	0x100029b78
0000000100029b38	adrp	x8, 26 ; 0x100043000
0000000100029b3c	str	w19, [x8, #0x468]
0000000100029b40	b	0x100029a24
0000000100029b44	bl	0x100030adc ; symbol stub for: ___error
0000000100029b48	ldr	w19, [x0]
0000000100029b4c	bl	0x100030adc ; symbol stub for: ___error
0000000100029b50	ldr	w0, [x0]
0000000100029b54	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100029b58	stp	x19, x0, [sp]
0000000100029b5c	adr	x2, #74570 ; literal pool for: "Could not create system logger socket: error = %d: %s"
0000000100029b60	nop
0000000100029b64	mov	w1, #0x3
0000000100029b68	movk	w1, #0x1, lsl #16
0000000100029b6c	mov	x0, #0x0
0000000100029b70	bl	0x100029dbc
0000000100029b74	b	0x100029a24
0000000100029b78	bl	0x100030adc ; symbol stub for: ___error
0000000100029b7c	ldr	w19, [x0]
0000000100029b80	bl	0x100030adc ; symbol stub for: ___error
0000000100029b84	ldr	w0, [x0]
0000000100029b88	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100029b8c	stp	x19, x0, [sp]
0000000100029b90	adr	x2, #74690 ; literal pool for: "Could not make system logger socket world-writable: error = %d: %s"
0000000100029b94	nop
0000000100029b98	mov	w1, #0x3
0000000100029b9c	movk	w1, #0x1, lsl #16
0000000100029ba0	mov	x0, #0x0
0000000100029ba4	bl	0x100029dbc
0000000100029ba8	mov	x0, x20
0000000100029bac	bl	0x10003182c ; symbol stub for: _unlink
0000000100029bb0	cmn	w0, #0x1
0000000100029bb4	b.ne	0x100029a24
0000000100029bb8	bl	0x100030adc ; symbol stub for: ___error
0000000100029bbc	ldrsw	x0, [x0]
0000000100029bc0	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100029bc4	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100029bc8	brk	#0x1
0000000100029bcc	bl	0x100030adc ; symbol stub for: ___error
0000000100029bd0	ldr	w20, [x0]
0000000100029bd4	bl	0x100030adc ; symbol stub for: ___error
0000000100029bd8	ldr	w0, [x0]
0000000100029bdc	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100029be0	stp	x20, x0, [sp]
0000000100029be4	adr	x2, #74488 ; literal pool for: "Could not unlink previous system logger socket: error = %d: %s"
0000000100029be8	nop
0000000100029bec	mov	w1, #0x3
0000000100029bf0	movk	w1, #0x1, lsl #16
0000000100029bf4	mov	x0, #0x0
0000000100029bf8	bl	0x100029dbc
0000000100029bfc	mov	x0, x19
0000000100029c00	bl	0x100030c74 ; symbol stub for: _close
0000000100029c04	cmn	w0, #0x1
0000000100029c08	b.ne	0x100029a24
0000000100029c0c	bl	0x100030adc ; symbol stub for: ___error
0000000100029c10	ldrsw	x0, [x0]
0000000100029c14	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100029c18	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100029c1c	brk	#0x1
0000000100029c20	bl	0x100030adc ; symbol stub for: ___error
0000000100029c24	ldr	w20, [x0]
0000000100029c28	bl	0x100030adc ; symbol stub for: ___error
0000000100029c2c	ldr	w0, [x0]
0000000100029c30	bl	0x100031b8c ; symbol stub for: _xpc_strerror
0000000100029c34	stp	x20, x0, [sp]
0000000100029c38	adr	x2, #74467 ; literal pool for: "Could not bind to system logger socket: error = %d: %s"
0000000100029c3c	nop
0000000100029c40	mov	w1, #0x3
0000000100029c44	movk	w1, #0x1, lsl #16
0000000100029c48	mov	x0, #0x0
0000000100029c4c	bl	0x100029dbc
0000000100029c50	mov	x0, x19
0000000100029c54	bl	0x100030c74 ; symbol stub for: _close
0000000100029c58	cmn	w0, #0x1
0000000100029c5c	b.ne	0x100029a24
0000000100029c60	bl	0x100030adc ; symbol stub for: ___error
0000000100029c64	ldrsw	x0, [x0]
0000000100029c68	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100029c6c	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100029c70	brk	#0x1
0000000100029c74	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100029c78	stp	x20, x19, [sp, #-0x20]!
0000000100029c7c	stp	x29, x30, [sp, #0x10]
0000000100029c80	add	x29, sp, #0x10
0000000100029c84	adrp	x19, 26 ; 0x100043000
0000000100029c88	ldr	x0, [x19, #0xe88]
0000000100029c8c	adr	x2, #32
0000000100029c90	nop
0000000100029c94	mov	x1, #0x0
0000000100029c98	bl	0x100030f2c ; symbol stub for: _dispatch_sync_f
0000000100029c9c	ldr	x0, [x19, #0xe88]
0000000100029ca0	ldp	x29, x30, [sp, #0x10]
0000000100029ca4	ldp	x20, x19, [sp], #0x20
0000000100029ca8	b	0x100030f20 ; symbol stub for: _dispatch_suspend
0000000100029cac	stp	x20, x19, [sp, #-0x20]!
0000000100029cb0	stp	x29, x30, [sp, #0x10]
0000000100029cb4	add	x29, sp, #0x10
0000000100029cb8	mov	x0, #0x0
0000000100029cbc	bl	0x10000ec40
0000000100029cc0	mov	x19, x0
0000000100029cc4	nop
0000000100029cc8	nop
0000000100029ccc	ldr	x0, #0x19814
0000000100029cd0	bl	0x10000d520
0000000100029cd4	str	x0, [x19, #0x10]
0000000100029cd8	str	wzr, [x19, #0x20]
0000000100029cdc	mov	x0, x19
0000000100029ce0	bl	0x10002a6b4
0000000100029ce4	cmn	w0, #0x1
0000000100029ce8	b.eq	0x100029d3c
0000000100029cec	adr	x9, #106924
0000000100029cf0	nop
0000000100029cf4	ldxr	w8, [x9]
0000000100029cf8	add	w10, w8, #0x1
0000000100029cfc	stxr	w11, w10, [x9]
0000000100029d00	cbnz	w11, 0x100029cf4
0000000100029d04	adr	x9, #108422
0000000100029d08	nop
0000000100029d0c	ldrb	w9, [x9]
0000000100029d10	cmp	w9, #0x0
0000000100029d14	mov	w9, #0x3e8
0000000100029d18	mov	w10, #0x2710
0000000100029d1c	csel	w9, w10, w9, eq
0000000100029d20	cmp	w8, w9
0000000100029d24	b.ge	0x100029d38
0000000100029d28	mov	x0, x19
0000000100029d2c	ldp	x29, x30, [sp, #0x10]
0000000100029d30	ldp	x20, x19, [sp], #0x20
0000000100029d34	b	0x10002a0d4
0000000100029d38	bl	0x10002a054
0000000100029d3c	mov	w1, #0x0
0000000100029d40	mov	x0, x19
0000000100029d44	ldp	x29, x30, [sp, #0x10]
0000000100029d48	ldp	x20, x19, [sp], #0x20
0000000100029d4c	b	0x10000e4a4
0000000100029d50	stp	x22, x21, [sp, #-0x30]!
0000000100029d54	stp	x20, x19, [sp, #0x10]
0000000100029d58	stp	x29, x30, [sp, #0x20]
0000000100029d5c	add	x29, sp, #0x20
0000000100029d60	mov	x19, x2
0000000100029d64	mov	x21, x1
0000000100029d68	mov	x22, x0
0000000100029d6c	mov	x0, #0x0
0000000100029d70	bl	0x10000ec40
0000000100029d74	mov	x20, x0
0000000100029d78	nop
0000000100029d7c	nop
0000000100029d80	ldr	x8, #0x19760
0000000100029d84	cmp	x22, #0x0
0000000100029d88	csel	x0, x8, x22, eq
0000000100029d8c	bl	0x10000d520
0000000100029d90	str	x0, [x20, #0x10]
0000000100029d94	cbz	x21, 0x100029da4
0000000100029d98	mov	x0, x21
0000000100029d9c	bl	0x10000d520
0000000100029da0	str	x0, [x20, #0x18]
0000000100029da4	str	w19, [x20, #0x20]
0000000100029da8	mov	x0, x20
0000000100029dac	ldp	x29, x30, [sp, #0x20]
0000000100029db0	ldp	x20, x19, [sp, #0x10]
0000000100029db4	ldp	x22, x21, [sp], #0x30
0000000100029db8	ret
0000000100029dbc	sub	sp, sp, #0x20
0000000100029dc0	stp	x29, x30, [sp, #0x10]
0000000100029dc4	add	x29, sp, #0x10
0000000100029dc8	add	x8, x29, #0x10
0000000100029dcc	str	x8, [sp, #0x8]
0000000100029dd0	add	x3, x29, #0x10
0000000100029dd4	bl	0x100029de4
0000000100029dd8	ldp	x29, x30, [sp, #0x10]
0000000100029ddc	add	sp, sp, #0x20
0000000100029de0	ret
0000000100029de4	sub	sp, sp, #0x60
0000000100029de8	stp	x22, x21, [sp, #0x30]
0000000100029dec	stp	x20, x19, [sp, #0x40]
0000000100029df0	stp	x29, x30, [sp, #0x50]
0000000100029df4	add	x29, sp, #0x50
0000000100029df8	mov	x19, x3
0000000100029dfc	mov	x20, x2
0000000100029e00	mov	x22, x1
0000000100029e04	and	w8, w22, #0xfffeffff
0000000100029e08	cmp	w8, #0x5
0000000100029e0c	b.gt	0x100029f04
0000000100029e10	adr	x9, #106632
0000000100029e14	nop
0000000100029e18	ldxr	w8, [x9]
0000000100029e1c	add	w10, w8, #0x1
0000000100029e20	stxr	w11, w10, [x9]
0000000100029e24	cbnz	w11, 0x100029e18
0000000100029e28	adr	x9, #108130
0000000100029e2c	nop
0000000100029e30	ldrb	w9, [x9]
0000000100029e34	cmp	w9, #0x0
0000000100029e38	mov	w9, #0x3e8
0000000100029e3c	mov	w10, #0x2710
0000000100029e40	csel	w9, w10, w9, eq
0000000100029e44	cmp	w8, w9
0000000100029e48	b.ge	0x100029f24
0000000100029e4c	cbz	x0, 0x100029e60
0000000100029e50	mov	w1, #0x0
0000000100029e54	bl	0x10000e3f4
0000000100029e58	mov	x21, x0
0000000100029e5c	b	0x100029e80
0000000100029e60	bl	0x10000ec40
0000000100029e64	mov	x21, x0
0000000100029e68	nop
0000000100029e6c	nop
0000000100029e70	ldr	x0, #0x19670
0000000100029e74	bl	0x10000d520
0000000100029e78	str	x0, [x21, #0x10]
0000000100029e7c	str	wzr, [x21, #0x20]
0000000100029e80	mov	x1, x22
0000000100029e84	mov	x0, x21
0000000100029e88	mov	x2, x20
0000000100029e8c	mov	x3, x19
0000000100029e90	bl	0x100029f98
0000000100029e94	cmn	w0, #0x1
0000000100029e98	b.eq	0x100029f18
0000000100029e9c	nop
0000000100029ea0	ldr	x8, #0x19ff0
0000000100029ea4	cmn	x8, #0x1
0000000100029ea8	b.ne	0x100029f38
0000000100029eac	nop
0000000100029eb0	ldr	x8, #0x16160 ; literal pool symbol address: __NSConcreteStackBlock
0000000100029eb4	str	x8, [sp, #0x8]
0000000100029eb8	nop
0000000100029ebc	ldr	d0, 0x10003de90
0000000100029ec0	adr	x8, #524
0000000100029ec4	nop
0000000100029ec8	str	d0, [sp, #0x10]
0000000100029ecc	str	x8, [sp, #0x18]
0000000100029ed0	adr	x8, #98080
0000000100029ed4	nop
0000000100029ed8	stp	x8, x21, [sp, #0x20]
0000000100029edc	orr	w0, wzr, #0x2
0000000100029ee0	add	x1, sp, #0x8
0000000100029ee4	bl	0x100030d40 ; symbol stub for: _dispatch_block_create
0000000100029ee8	mov	x19, x0
0000000100029eec	nop
0000000100029ef0	ldr	x0, #0x19f98
0000000100029ef4	mov	x1, x19
0000000100029ef8	bl	0x100030d28 ; symbol stub for: _dispatch_async
0000000100029efc	mov	x0, x19
0000000100029f00	bl	0x100030aa0 ; symbol stub for: __Block_release
0000000100029f04	ldp	x29, x30, [sp, #0x50]
0000000100029f08	ldp	x20, x19, [sp, #0x40]
0000000100029f0c	ldp	x22, x21, [sp, #0x30]
0000000100029f10	add	sp, sp, #0x60
0000000100029f14	ret
0000000100029f18	mov	w1, #0x0
0000000100029f1c	mov	x0, x21
0000000100029f20	bl	0x10000e4a4
0000000100029f24	ldp	x29, x30, [sp, #0x50]
0000000100029f28	ldp	x20, x19, [sp, #0x40]
0000000100029f2c	ldp	x22, x21, [sp, #0x30]
0000000100029f30	add	sp, sp, #0x60
0000000100029f34	b	0x10002a054
0000000100029f38	adr	x0, #106328
0000000100029f3c	nop
0000000100029f40	adr	x2, #340
0000000100029f44	nop
0000000100029f48	mov	x1, #0x0
0000000100029f4c	bl	0x100030e30 ; symbol stub for: _dispatch_once_f
0000000100029f50	b	0x100029eac
0000000100029f54	sub	sp, sp, #0x20
0000000100029f58	stp	x29, x30, [sp, #0x10]
0000000100029f5c	add	x29, sp, #0x10
0000000100029f60	add	x8, x29, #0x10
0000000100029f64	str	x8, [sp, #0x8]
0000000100029f68	add	x3, x29, #0x10
0000000100029f6c	bl	0x100029de4
0000000100029f70	nop
0000000100029f74	ldr	x0, #0x19f14
0000000100029f78	adr	x2, #28
0000000100029f7c	nop
0000000100029f80	mov	x1, #0x0
0000000100029f84	bl	0x100030f2c ; symbol stub for: _dispatch_sync_f
0000000100029f88	ldp	x29, x30, [sp, #0x10]
0000000100029f8c	add	sp, sp, #0x20
0000000100029f90	ret
0000000100029f94	ret
0000000100029f98	sub	sp, sp, #0x60
0000000100029f9c	stp	x24, x23, [sp, #0x20]
0000000100029fa0	stp	x22, x21, [sp, #0x30]
0000000100029fa4	stp	x20, x19, [sp, #0x40]
0000000100029fa8	stp	x29, x30, [sp, #0x50]
0000000100029fac	add	x29, sp, #0x50
0000000100029fb0	mov	x21, x3
0000000100029fb4	mov	x22, x2
0000000100029fb8	mov	x20, x1
0000000100029fbc	mov	x19, x0
0000000100029fc0	adr	x8, #107722
0000000100029fc4	nop
0000000100029fc8	ldrb	w23, [x8]
0000000100029fcc	nop
0000000100029fd0	ldr	w24, 0x100043468
0000000100029fd4	stp	xzr, xzr, [sp, #0x10]
0000000100029fd8	add	x0, sp, #0x10
0000000100029fdc	mov	x1, #0x0
0000000100029fe0	bl	0x100031118 ; symbol stub for: _gettimeofday
0000000100029fe4	ldr	x8, [sp, #0x10]
0000000100029fe8	str	x8, [x19, #0x28]
0000000100029fec	str	xzr, [sp, #0x8]
0000000100029ff0	add	x0, sp, #0x8
0000000100029ff4	mov	x1, x22
0000000100029ff8	mov	x2, x21
0000000100029ffc	bl	0x100031880 ; symbol stub for: _vasprintf
000000010002a000	cmn	w0, #0x1
000000010002a004	b.eq	0x10002a03c
000000010002a008	mov	w0, #0x0
000000010002a00c	and	w8, w20, #0x10000
000000010002a010	orr	w8, w8, w23
000000010002a014	cmn	w24, #0x1
000000010002a018	cset	w9, eq
000000010002a01c	cmp	w8, #0x0
000000010002a020	cset	w8, ne
000000010002a024	orr	w8, w9, w8
000000010002a028	and	w9, w20, #0xfffeffff
000000010002a02c	str	w9, [x19, #0x8]
000000010002a030	strb	w8, [x19, #0xc]
000000010002a034	ldr	x8, [sp, #0x8]
000000010002a038	str	x8, [x19, #0x30]
000000010002a03c	ldp	x29, x30, [sp, #0x50]
000000010002a040	ldp	x20, x19, [sp, #0x40]
000000010002a044	ldp	x22, x21, [sp, #0x30]
000000010002a048	ldp	x24, x23, [sp, #0x20]
000000010002a04c	add	sp, sp, #0x60
000000010002a050	ret
000000010002a054	adr	x9, #106052
000000010002a058	nop
000000010002a05c	ldxr	w10, [x9]
000000010002a060	sub	w8, w10, #0x1
000000010002a064	stxr	w11, w8, [x9]
000000010002a068	cbnz	w11, 0x10002a05c
000000010002a06c	cmp	w10, #0x0
000000010002a070	b.le	0x10002a078
000000010002a074	ret
000000010002a078	stp	x29, x30, [sp, #-0x10]!
000000010002a07c	mov	x29, sp
000000010002a080	lsr	w8, w8, #31
000000010002a084	eor	w0, w8, #0x1
000000010002a088	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002a08c	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002a090	brk	#0x1
000000010002a094	stp	x29, x30, [sp, #-0x10]!
000000010002a098	mov	x29, sp
000000010002a09c	mov	w1, #0x11
000000010002a0a0	mov	w2, #0x0
000000010002a0a4	mov	x0, #0x0
000000010002a0a8	bl	0x100030e3c ; symbol stub for: _dispatch_queue_attr_make_with_qos_class
000000010002a0ac	mov	x1, x0
000000010002a0b0	adr	x0, #73449 ; literal pool for: "com.apple.xpc.launchd.logq"
000000010002a0b4	nop
000000010002a0b8	bl	0x100030e48 ; symbol stub for: _dispatch_queue_create
000000010002a0bc	adrp	x8, 25 ; 0x100043000
000000010002a0c0	str	x0, [x8, #0xe88]
000000010002a0c4	ldp	x29, x30, [sp], #0x10
000000010002a0c8	ret
000000010002a0cc	ldr	x0, [x0, #0x20]
000000010002a0d0	b	0x10002a0d4
000000010002a0d4	stp	x28, x27, [sp, #-0x40]!
000000010002a0d8	stp	x22, x21, [sp, #0x10]
000000010002a0dc	stp	x20, x19, [sp, #0x20]
000000010002a0e0	stp	x29, x30, [sp, #0x30]
000000010002a0e4	add	x29, sp, #0x30
000000010002a0e8	sub	sp, sp, #0xc10
000000010002a0ec	mov	x19, x0
000000010002a0f0	nop
000000010002a0f4	ldr	x8, #0x15f24 ; literal pool symbol address: ___stack_chk_guard
000000010002a0f8	ldr	x8, [x8]
000000010002a0fc	stur	x8, [x29, #-0x38]
000000010002a100	nop
000000010002a104	ldr	w8, 0x100043468
000000010002a108	adr	x22, #107377
000000010002a10c	nop
000000010002a110	ldrb	w9, [x22]
000000010002a114	cmn	w8, #0x1
000000010002a118	ccmp	w9, #0x0, #0x0, ne
000000010002a11c	b.ne	0x10002a1d8
000000010002a120	bl	0x100030b84 ; symbol stub for: __simple_asl_msg_new
000000010002a124	mov	x20, x0
000000010002a128	cbz	x20, 0x10002a1d8
000000010002a12c	ldr	x2, [x19, #0x10]
000000010002a130	adr	x1, #73348 ; literal pool for: "Sender"
000000010002a134	nop
000000010002a138	mov	x0, x20
000000010002a13c	bl	0x100030b90 ; symbol stub for: __simple_asl_msg_set
000000010002a140	ldrsw	x8, [x19, #0x8]
000000010002a144	adr	x9, #97484
000000010002a148	nop
000000010002a14c	ldr	x2, [x9, x8, lsl #3]
000000010002a150	adr	x1, #73323 ; literal pool for: "Level"
000000010002a154	nop
000000010002a158	mov	x0, x20
000000010002a15c	bl	0x100030b90 ; symbol stub for: __simple_asl_msg_set
000000010002a160	ldr	x2, [x19, #0x30]
000000010002a164	adr	x1, #73309 ; literal pool for: "Message"
000000010002a168	nop
000000010002a16c	mov	x0, x20
000000010002a170	bl	0x100030b90 ; symbol stub for: __simple_asl_msg_set
000000010002a174	ldr	x2, [x19, #0x18]
000000010002a178	cbz	x2, 0x10002a1c8
000000010002a17c	adr	x1, #73293 ; literal pool for: "RefProc"
000000010002a180	nop
000000010002a184	mov	x0, x20
000000010002a188	bl	0x100030b90 ; symbol stub for: __simple_asl_msg_set
000000010002a18c	ldr	w8, [x19, #0x20]
000000010002a190	cbz	w8, 0x10002a1c8
000000010002a194	adr	x4, #43715 ; literal pool for: "%d"
000000010002a198	nop
000000010002a19c	str	x8, [sp]
000000010002a1a0	add	x0, sp, #0x808
000000010002a1a4	orr	w1, wzr, #0x18
000000010002a1a8	orr	w3, wzr, #0x18
000000010002a1ac	mov	w2, #0x0
000000010002a1b0	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002a1b4	adr	x1, #73245 ; literal pool for: "RefPID"
000000010002a1b8	nop
000000010002a1bc	add	x2, sp, #0x808
000000010002a1c0	mov	x0, x20
000000010002a1c4	bl	0x100030b90 ; symbol stub for: __simple_asl_msg_set
000000010002a1c8	mov	x0, x20
000000010002a1cc	bl	0x100030b9c ; symbol stub for: __simple_asl_send
000000010002a1d0	mov	x0, x20
000000010002a1d4	bl	0x100030ba8 ; symbol stub for: __simple_sfree
000000010002a1d8	ldrb	w8, [x19, #0xc]
000000010002a1dc	cbz	w8, 0x10002a224
000000010002a1e0	bl	0x10002a6e8
000000010002a1e4	adrp	x21, 25 ; 0x100043000
000000010002a1e8	ldr	x8, [x21, #0xea0]
000000010002a1ec	cbz	x8, 0x10002a224
000000010002a1f0	mov	x0, x19
000000010002a1f4	bl	0x10002a7c4
000000010002a1f8	mov	x20, x0
000000010002a1fc	cbz	x20, 0x10002a224
000000010002a200	ldr	x0, [x21, #0xea0]
000000010002a204	str	x20, [sp]
000000010002a208	adr	x1, #71868 ; literal pool for: "%s\n"
000000010002a20c	nop
000000010002a210	bl	0x100030ff8 ; symbol stub for: _fprintf
000000010002a214	ldr	x0, [x21, #0xea0]
000000010002a218	bl	0x100030fc8 ; symbol stub for: _fflush
000000010002a21c	mov	x0, x20
000000010002a220	bl	0x100031010 ; symbol stub for: _free
000000010002a224	adr	x8, #107097
000000010002a228	nop
000000010002a22c	ldrb	w8, [x8]
000000010002a230	cbz	w8, 0x10002a378
000000010002a234	adrp	x21, 25 ; 0x100043000
000000010002a238	ldr	x0, [x21, #0xeb0]
000000010002a23c	ldrb	w8, [x22]
000000010002a240	cmp	x0, #0x0
000000010002a244	ccmp	w8, #0x0, #0x0, eq
000000010002a248	b.ne	0x10002a30c
000000010002a24c	adr	x20, #103020
000000010002a250	nop
000000010002a254	ldr	x8, [x20]
000000010002a258	adr	x4, #73212 ; literal pool for: "%s/launchd.log"
000000010002a25c	nop
000000010002a260	str	x8, [sp]
000000010002a264	add	x0, sp, #0x808
000000010002a268	orr	w1, wzr, #0x400
000000010002a26c	orr	w3, wzr, #0x400
000000010002a270	mov	w2, #0x0
000000010002a274	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002a278	add	x0, sp, #0x808
000000010002a27c	mov	w1, #0x0
000000010002a280	bl	0x100030bf0 ; symbol stub for: _access
000000010002a284	cbnz	w0, 0x10002a2f8
000000010002a288	ldr	x8, [x20]
000000010002a28c	adr	x4, #73175 ; literal pool for: "%s/launchd.log.1"
000000010002a290	nop
000000010002a294	str	x8, [sp]
000000010002a298	add	x0, sp, #0x408
000000010002a29c	orr	w1, wzr, #0x400
000000010002a2a0	orr	w3, wzr, #0x400
000000010002a2a4	mov	w2, #0x0
000000010002a2a8	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002a2ac	add	x0, sp, #0x408
000000010002a2b0	mov	w1, #0x0
000000010002a2b4	bl	0x100030bf0 ; symbol stub for: _access
000000010002a2b8	cbnz	w0, 0x10002a2ec
000000010002a2bc	ldr	x8, [x20]
000000010002a2c0	adr	x4, #73140 ; literal pool for: "%s/launchd.log.2"
000000010002a2c4	nop
000000010002a2c8	str	x8, [sp]
000000010002a2cc	add	x0, sp, #0x8
000000010002a2d0	orr	w1, wzr, #0x400
000000010002a2d4	orr	w3, wzr, #0x400
000000010002a2d8	mov	w2, #0x0
000000010002a2dc	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002a2e0	add	x0, sp, #0x408
000000010002a2e4	add	x1, sp, #0x8
000000010002a2e8	bl	0x100031640 ; symbol stub for: _rename
000000010002a2ec	add	x0, sp, #0x808
000000010002a2f0	add	x1, sp, #0x408
000000010002a2f4	bl	0x100031640 ; symbol stub for: _rename
000000010002a2f8	adr	x1, #67670 ; literal pool for: "w"
000000010002a2fc	nop
000000010002a300	add	x0, sp, #0x808
000000010002a304	bl	0x100030fec ; symbol stub for: _fopen
000000010002a308	str	x0, [x21, #0xeb0]
000000010002a30c	cbz	x0, 0x10002a378
000000010002a310	mov	x0, x19
000000010002a314	bl	0x10002a7c4
000000010002a318	mov	x20, x0
000000010002a31c	cbz	x20, 0x10002a33c
000000010002a320	ldr	x0, [x21, #0xeb0]
000000010002a324	str	x20, [sp]
000000010002a328	adr	x1, #71580 ; literal pool for: "%s\n"
000000010002a32c	nop
000000010002a330	bl	0x100030ff8 ; symbol stub for: _fprintf
000000010002a334	mov	x0, x20
000000010002a338	bl	0x100031010 ; symbol stub for: _free
000000010002a33c	ldr	x0, [x21, #0xeb0]
000000010002a340	bl	0x100030fc8 ; symbol stub for: _fflush
000000010002a344	adr	x20, #102868
000000010002a348	nop
000000010002a34c	ldr	x8, [x20]
000000010002a350	cmp	x8, #0x1
000000010002a354	b.lt	0x10002a378
000000010002a358	ldr	x0, [x21, #0xeb0]
000000010002a35c	bl	0x100031034 ; symbol stub for: _ftell
000000010002a360	ldr	x8, [x20]
000000010002a364	cmp	x0, x8
000000010002a368	b.lt	0x10002a378
000000010002a36c	ldr	x0, [x21, #0xeb0]
000000010002a370	bl	0x100030fa4 ; symbol stub for: _fclose
000000010002a374	str	xzr, [x21, #0xeb0]
000000010002a378	mov	w1, #0x0
000000010002a37c	mov	x0, x19
000000010002a380	bl	0x10000e4a4
000000010002a384	bl	0x10002a054
000000010002a388	ldur	x8, [x29, #-0x38]
000000010002a38c	nop
000000010002a390	ldr	x9, #0x15c88 ; literal pool symbol address: ___stack_chk_guard
000000010002a394	ldr	x9, [x9]
000000010002a398	cmp	x9, x8
000000010002a39c	b.ne	0x10002a3b8
000000010002a3a0	add	sp, sp, #0xc10
000000010002a3a4	ldp	x29, x30, [sp, #0x30]
000000010002a3a8	ldp	x20, x19, [sp, #0x20]
000000010002a3ac	ldp	x22, x21, [sp, #0x10]
000000010002a3b0	ldp	x28, x27, [sp], #0x40
000000010002a3b4	ret
000000010002a3b8	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002a3bc	stp	x22, x21, [sp, #-0x30]!
000000010002a3c0	stp	x20, x19, [sp, #0x10]
000000010002a3c4	stp	x29, x30, [sp, #0x20]
000000010002a3c8	add	x29, sp, #0x20
000000010002a3cc	mov	x19, x1
000000010002a3d0	mov	x20, x0
000000010002a3d4	cbz	x19, 0x10002a3f4
000000010002a3d8	adr	x21, #72382 ; literal pool for: "\t"
000000010002a3dc	nop
000000010002a3e0	mov	x0, x20
000000010002a3e4	mov	x1, x21
000000010002a3e8	bl	0x10002a404
000000010002a3ec	subs	x19, x19, #0x1
000000010002a3f0	b.ne	0x10002a3e0
000000010002a3f4	ldp	x29, x30, [sp, #0x20]
000000010002a3f8	ldp	x20, x19, [sp, #0x10]
000000010002a3fc	ldp	x22, x21, [sp], #0x30
000000010002a400	ret
000000010002a404	sub	sp, sp, #0x20
000000010002a408	stp	x29, x30, [sp, #0x10]
000000010002a40c	add	x29, sp, #0x10
000000010002a410	add	x8, x29, #0x10
000000010002a414	str	x8, [sp, #0x8]
000000010002a418	add	x2, x29, #0x10
000000010002a41c	bl	0x10002a498
000000010002a420	ldp	x29, x30, [sp, #0x10]
000000010002a424	add	sp, sp, #0x20
000000010002a428	ret
000000010002a42c	sub	sp, sp, #0x40
000000010002a430	stp	x22, x21, [sp, #0x10]
000000010002a434	stp	x20, x19, [sp, #0x20]
000000010002a438	stp	x29, x30, [sp, #0x30]
000000010002a43c	add	x29, sp, #0x30
000000010002a440	mov	x19, x2
000000010002a444	mov	x21, x1
000000010002a448	mov	x20, x0
000000010002a44c	cbz	x21, 0x10002a46c
000000010002a450	adr	x22, #72262 ; literal pool for: "\t"
000000010002a454	nop
000000010002a458	mov	x0, x20
000000010002a45c	mov	x1, x22
000000010002a460	bl	0x10002a404
000000010002a464	subs	x21, x21, #0x1
000000010002a468	b.ne	0x10002a458
000000010002a46c	add	x8, x29, #0x10
000000010002a470	str	x8, [sp, #0x8]
000000010002a474	add	x2, x29, #0x10
000000010002a478	mov	x0, x20
000000010002a47c	mov	x1, x19
000000010002a480	bl	0x10002a498
000000010002a484	ldp	x29, x30, [sp, #0x30]
000000010002a488	ldp	x20, x19, [sp, #0x20]
000000010002a48c	ldp	x22, x21, [sp, #0x10]
000000010002a490	add	sp, sp, #0x40
000000010002a494	ret
000000010002a498	sub	sp, sp, #0x30
000000010002a49c	stp	x20, x19, [sp, #0x10]
000000010002a4a0	stp	x29, x30, [sp, #0x20]
000000010002a4a4	add	x29, sp, #0x20
000000010002a4a8	mov	x19, x0
000000010002a4ac	str	xzr, [sp, #0x8]
000000010002a4b0	add	x0, sp, #0x8
000000010002a4b4	bl	0x100031880 ; symbol stub for: _vasprintf
000000010002a4b8	cmn	w0, #0x1
000000010002a4bc	b.eq	0x10002a514
000000010002a4c0	ldr	x2, [sp, #0x8]
000000010002a4c4	mov	x0, #0x0
000000010002a4c8	mov	x1, x19
000000010002a4cc	bl	0x10000e420
000000010002a4d0	mov	x1, x0
000000010002a4d4	adr	x8, #106324
000000010002a4d8	nop
000000010002a4dc	ldrb	w8, [x8]
000000010002a4e0	cbz	w8, 0x10002a4f0
000000010002a4e4	mov	x0, x1
000000010002a4e8	bl	0x10002a9a0
000000010002a4ec	b	0x10002a514
000000010002a4f0	nop
000000010002a4f4	ldr	x8, #0x1999c
000000010002a4f8	cmn	x8, #0x1
000000010002a4fc	b.ne	0x10002a524
000000010002a500	nop
000000010002a504	ldr	x0, #0x19984
000000010002a508	adr	x2, #1176
000000010002a50c	nop
000000010002a510	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010002a514	ldp	x29, x30, [sp, #0x20]
000000010002a518	ldp	x20, x19, [sp, #0x10]
000000010002a51c	add	sp, sp, #0x30
000000010002a520	ret
000000010002a524	adr	x0, #104812
000000010002a528	nop
000000010002a52c	adr	x2, #-1176
000000010002a530	nop
000000010002a534	mov	x19, x1
000000010002a538	mov	x1, #0x0
000000010002a53c	bl	0x100030e30 ; symbol stub for: _dispatch_once_f
000000010002a540	mov	x1, x19
000000010002a544	b	0x10002a500
000000010002a548	sub	sp, sp, #0x40
000000010002a54c	stp	x22, x21, [sp, #0x10]
000000010002a550	stp	x20, x19, [sp, #0x20]
000000010002a554	stp	x29, x30, [sp, #0x30]
000000010002a558	add	x29, sp, #0x30
000000010002a55c	mov	x20, x2
000000010002a560	mov	x21, x1
000000010002a564	mov	x19, x0
000000010002a568	cbz	x21, 0x10002a588
000000010002a56c	adr	x22, #71978 ; literal pool for: "\t"
000000010002a570	nop
000000010002a574	mov	x0, x19
000000010002a578	mov	x1, x22
000000010002a57c	bl	0x10002a404
000000010002a580	subs	x21, x21, #0x1
000000010002a584	b.ne	0x10002a574
000000010002a588	add	x8, x29, #0x10
000000010002a58c	str	x8, [sp, #0x8]
000000010002a590	add	x2, x29, #0x10
000000010002a594	mov	x0, x19
000000010002a598	mov	x1, x20
000000010002a59c	bl	0x10002a498
000000010002a5a0	adr	x1, #71928 ; literal pool for: "\n"
000000010002a5a4	nop
000000010002a5a8	mov	x0, x19
000000010002a5ac	bl	0x10002a404
000000010002a5b0	ldp	x29, x30, [sp, #0x30]
000000010002a5b4	ldp	x20, x19, [sp, #0x20]
000000010002a5b8	ldp	x22, x21, [sp, #0x10]
000000010002a5bc	add	sp, sp, #0x40
000000010002a5c0	ret
000000010002a5c4	stp	x29, x30, [sp, #-0x10]!
000000010002a5c8	mov	x29, sp
000000010002a5cc	adr	x1, #71884 ; literal pool for: "\n"
000000010002a5d0	nop
000000010002a5d4	bl	0x10002a404
000000010002a5d8	ldp	x29, x30, [sp], #0x10
000000010002a5dc	ret
000000010002a5e0	stp	x29, x30, [sp, #-0x10]!
000000010002a5e4	mov	x29, sp
000000010002a5e8	mov	x8, x0
000000010002a5ec	mov	x0, x1
000000010002a5f0	mov	x1, x8
000000010002a5f4	mov	x2, #0x0
000000010002a5f8	bl	0x10000e420
000000010002a5fc	mov	x1, x0
000000010002a600	nop
000000010002a604	ldr	x0, #0x19884
000000010002a608	adr	x2, #16
000000010002a60c	nop
000000010002a610	ldp	x29, x30, [sp], #0x10
000000010002a614	b	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010002a618	stp	x20, x19, [sp, #-0x20]!
000000010002a61c	stp	x29, x30, [sp, #0x10]
000000010002a620	add	x29, sp, #0x10
000000010002a624	mov	x19, x0
000000010002a628	ldp	x0, x20, [x19]
000000010002a62c	cbz	x0, 0x10002a64c
000000010002a630	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
000000010002a634	orr	w8, w0, #0x20
000000010002a638	cmp	w8, #0x20
000000010002a63c	b.eq	0x10002a64c
000000010002a640	sxtw	x0, w0
000000010002a644	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002a648	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002a64c	mov	x0, x20
000000010002a650	bl	0x100030fc8 ; symbol stub for: _fflush
000000010002a654	cbz	w0, 0x10002a684
000000010002a658	bl	0x100030adc ; symbol stub for: ___error
000000010002a65c	ldr	w8, [x0]
000000010002a660	cmp	w8, #0x1c
000000010002a664	b.eq	0x10002a684
000000010002a668	cmp	w8, #0x23
000000010002a66c	b.eq	0x10002a684
000000010002a670	bl	0x100030adc ; symbol stub for: ___error
000000010002a674	ldrsw	x0, [x0]
000000010002a678	cbz	w0, 0x10002a684
000000010002a67c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002a680	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002a684	mov	x0, x20
000000010002a688	bl	0x100030fa4 ; symbol stub for: _fclose
000000010002a68c	cmn	w0, #0x1
000000010002a690	b.ne	0x10002a6a4
000000010002a694	bl	0x100030adc ; symbol stub for: ___error
000000010002a698	ldrsw	x0, [x0]
000000010002a69c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002a6a0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002a6a4	mov	x0, x19
000000010002a6a8	ldp	x29, x30, [sp, #0x10]
000000010002a6ac	ldp	x20, x19, [sp], #0x20
000000010002a6b0	b	0x10000e4b0
000000010002a6b4	sub	sp, sp, #0x20
000000010002a6b8	stp	x29, x30, [sp, #0x10]
000000010002a6bc	add	x29, sp, #0x10
000000010002a6c0	add	x8, x29, #0x10
000000010002a6c4	str	x8, [sp, #0x8]
000000010002a6c8	adr	x2, #71885 ; literal pool for: "bye"
000000010002a6cc	nop
000000010002a6d0	mov	w1, #0x5
000000010002a6d4	add	x3, x29, #0x10
000000010002a6d8	bl	0x100029f98
000000010002a6dc	ldp	x29, x30, [sp, #0x10]
000000010002a6e0	add	sp, sp, #0x20
000000010002a6e4	ret
000000010002a6e8	stp	x22, x21, [sp, #-0x30]!
000000010002a6ec	stp	x20, x19, [sp, #0x10]
000000010002a6f0	stp	x29, x30, [sp, #0x20]
000000010002a6f4	add	x29, sp, #0x20
000000010002a6f8	adrp	x20, 25 ; 0x100043000
000000010002a6fc	ldr	x8, [x20, #0xea0]
000000010002a700	cbnz	x8, 0x10002a7b4
000000010002a704	adr	x0, #48413 ; literal pool for: "/dev/console"
000000010002a708	nop
000000010002a70c	mov	w1, #0x1
000000010002a710	movk	w1, #0x2, lsl #16
000000010002a714	bl	0x1000313f4 ; symbol stub for: _open
000000010002a718	mov	x19, x0
000000010002a71c	cmn	w19, #0x1
000000010002a720	b.eq	0x10002a7a0
000000010002a724	mov	x0, x19
000000010002a728	bl	0x100030f74 ; symbol stub for: _dup
000000010002a72c	sxtw	x1, w0
000000010002a730	nop
000000010002a734	ldr	x3, #0x19754
000000010002a738	nop
000000010002a73c	ldr	x0, #0x15934 ; literal pool symbol address: __dispatch_source_type_vnode
000000010002a740	orr	w2, wzr, #0x40
000000010002a744	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
000000010002a748	adrp	x21, 25 ; 0x100043000
000000010002a74c	str	x0, [x21, #0xea8]
000000010002a750	mov	x1, x0
000000010002a754	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002a758	ldr	x0, [x21, #0xea8]
000000010002a75c	adr	x1, #444
000000010002a760	nop
000000010002a764	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
000000010002a768	ldr	x0, [x21, #0xea8]
000000010002a76c	adr	x1, #500
000000010002a770	nop
000000010002a774	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
000000010002a778	ldr	x0, [x21, #0xea8]
000000010002a77c	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010002a780	adr	x1, #66510 ; literal pool for: "w"
000000010002a784	nop
000000010002a788	mov	x0, x19
000000010002a78c	bl	0x100030fbc ; symbol stub for: _fdopen
000000010002a790	str	x0, [x20, #0xea0]
000000010002a794	cbz	x0, 0x10002a7a8
000000010002a798	bl	0x100030fd4 ; symbol stub for: _fileno
000000010002a79c	b	0x10002a7ac
000000010002a7a0	str	xzr, [x20, #0xea0]
000000010002a7a4	b	0x10002a7b4
000000010002a7a8	mov	w0, #-0x1
000000010002a7ac	adrp	x8, 25 ; 0x100043000
000000010002a7b0	str	w0, [x8, #0x478]
000000010002a7b4	ldp	x29, x30, [sp, #0x20]
000000010002a7b8	ldp	x20, x19, [sp, #0x10]
000000010002a7bc	ldp	x22, x21, [sp], #0x30
000000010002a7c0	ret
000000010002a7c4	sub	sp, sp, #0xe0
000000010002a7c8	stp	x24, x23, [sp, #0xa0]
000000010002a7cc	stp	x22, x21, [sp, #0xb0]
000000010002a7d0	stp	x20, x19, [sp, #0xc0]
000000010002a7d4	stp	x29, x30, [sp, #0xd0]
000000010002a7d8	add	x29, sp, #0xd0
000000010002a7dc	mov	x19, x0
000000010002a7e0	nop
000000010002a7e4	ldr	x8, #0x15834 ; literal pool symbol address: ___stack_chk_guard
000000010002a7e8	ldr	x8, [x8]
000000010002a7ec	stur	x8, [x29, #-0x38]
000000010002a7f0	add	x0, x19, #0x28
000000010002a7f4	add	x1, sp, #0x40
000000010002a7f8	bl	0x1000311fc ; symbol stub for: _localtime_r
000000010002a7fc	add	x0, sp, #0x40
000000010002a800	sub	x1, x29, #0x52
000000010002a804	bl	0x100030bfc ; symbol stub for: _asctime_r
000000010002a808	sturb	wzr, [x29, #-0x3a]
000000010002a80c	str	xzr, [sp, #0x38]
000000010002a810	adr	x0, #71675 ; literal pool for: "kern.hostname"
000000010002a814	nop
000000010002a818	add	x1, sp, #0x38
000000010002a81c	bl	0x100029448
000000010002a820	cbnz	x0, 0x10002a834
000000010002a824	adr	x0, #71669 ; literal pool for: "localhost"
000000010002a828	nop
000000010002a82c	bl	0x10000d520
000000010002a830	str	x0, [sp, #0x38]
000000010002a834	ldr	x0, [x19, #0x18]
000000010002a838	cbz	x0, 0x10002a858
000000010002a83c	ldr	w8, [x19, #0x20]
000000010002a840	cbz	w8, 0x10002a860
000000010002a844	stp	x0, x8, [sp]
000000010002a848	adr	x0, #65964 ; literal pool for: "%s.%d"
000000010002a84c	nop
000000010002a850	bl	0x10000d72c
000000010002a854	b	0x10002a864
000000010002a858	mov	x20, #0x0
000000010002a85c	b	0x10002a868
000000010002a860	bl	0x10000d520
000000010002a864	mov	x20, x0
000000010002a868	ldrsw	x23, [x19, #0x8]
000000010002a86c	ldr	x21, [sp, #0x38]
000000010002a870	ldr	x22, [x19, #0x10]
000000010002a874	bl	0x1000310d0 ; symbol stub for: _getpid
000000010002a878	and	x8, x23, #0xfffffffffffeffff
000000010002a87c	adr	x9, #95636
000000010002a880	nop
000000010002a884	ldr	x8, [x9, x8, lsl #3]
000000010002a888	ldr	x9, [x19, #0x30]
000000010002a88c	cbz	x20, 0x10002a8b0
000000010002a890	stp	x8, x9, [sp, #0x28]
000000010002a894	stp	x0, x20, [sp, #0x18]
000000010002a898	stp	x21, x22, [sp, #0x8]
000000010002a89c	sub	x8, x29, #0x52
000000010002a8a0	adr	x0, #71555 ; literal pool for: "%s %s %s[%d] (%s) <%s>: %s"
000000010002a8a4	nop
000000010002a8a8	str	x8, [sp]
000000010002a8ac	b	0x10002a8c8
000000010002a8b0	stp	x8, x9, [sp, #0x20]
000000010002a8b4	stp	x22, x0, [sp, #0x10]
000000010002a8b8	sub	x8, x29, #0x52
000000010002a8bc	stp	x8, x21, [sp]
000000010002a8c0	adr	x0, #71550 ; literal pool for: "%s %s %s[%d] <%s>: %s"
000000010002a8c4	nop
000000010002a8c8	bl	0x10000d72c
000000010002a8cc	mov	x19, x0
000000010002a8d0	ldr	x0, [sp, #0x38]
000000010002a8d4	bl	0x100031010 ; symbol stub for: _free
000000010002a8d8	mov	x0, x20
000000010002a8dc	bl	0x100031010 ; symbol stub for: _free
000000010002a8e0	ldur	x8, [x29, #-0x38]
000000010002a8e4	nop
000000010002a8e8	ldr	x9, #0x15730 ; literal pool symbol address: ___stack_chk_guard
000000010002a8ec	ldr	x9, [x9]
000000010002a8f0	cmp	x9, x8
000000010002a8f4	b.ne	0x10002a914
000000010002a8f8	mov	x0, x19
000000010002a8fc	ldp	x29, x30, [sp, #0xd0]
000000010002a900	ldp	x20, x19, [sp, #0xc0]
000000010002a904	ldp	x22, x21, [sp, #0xb0]
000000010002a908	ldp	x24, x23, [sp, #0xa0]
000000010002a90c	add	sp, sp, #0xe0
000000010002a910	ret
000000010002a914	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002a918	stp	x20, x19, [sp, #-0x20]!
000000010002a91c	stp	x29, x30, [sp, #0x10]
000000010002a920	add	x29, sp, #0x10
000000010002a924	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010002a928	adrp	x19, 25 ; 0x100043000
000000010002a92c	ldr	x0, [x19, #0xea0]
000000010002a930	bl	0x100030fa4 ; symbol stub for: _fclose
000000010002a934	cmn	w0, #0x1
000000010002a938	b.eq	0x10002a94c
000000010002a93c	str	xzr, [x19, #0xea0]
000000010002a940	ldp	x29, x30, [sp, #0x10]
000000010002a944	ldp	x20, x19, [sp], #0x20
000000010002a948	ret
000000010002a94c	bl	0x100030adc ; symbol stub for: ___error
000000010002a950	ldrsw	x0, [x0]
000000010002a954	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002a958	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002a95c	brk	#0x1
000000010002a960	stp	x20, x19, [sp, #-0x20]!
000000010002a964	stp	x29, x30, [sp, #0x10]
000000010002a968	add	x29, sp, #0x10
000000010002a96c	mov	x19, x0
000000010002a970	bl	0x100030ed8 ; symbol stub for: _dispatch_source_get_handle
000000010002a974	bl	0x100030c74 ; symbol stub for: _close
000000010002a978	cmn	w0, #0x1
000000010002a97c	b.ne	0x10002a990
000000010002a980	bl	0x100030adc ; symbol stub for: ___error
000000010002a984	ldrsw	x0, [x0]
000000010002a988	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002a98c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002a990	mov	x0, x19
000000010002a994	ldp	x29, x30, [sp, #0x10]
000000010002a998	ldp	x20, x19, [sp], #0x20
000000010002a99c	b	0x100030e60 ; symbol stub for: _dispatch_release
000000010002a9a0	stp	x20, x19, [sp, #-0x20]!
000000010002a9a4	stp	x29, x30, [sp, #0x10]
000000010002a9a8	add	x29, sp, #0x10
000000010002a9ac	mov	x20, x0
000000010002a9b0	ldp	x1, x19, [x20, #0x8]
000000010002a9b4	nop
000000010002a9b8	ldr	x8, #0x18ab8
000000010002a9bc	cmp	x1, x8
000000010002a9c0	b.ne	0x10002a9d4
000000010002a9c4	bl	0x10002a6e8
000000010002a9c8	nop
000000010002a9cc	ldr	x1, #0x194d4
000000010002a9d0	cbz	x1, 0x10002a9f4
000000010002a9d4	mov	x0, x19
000000010002a9d8	bl	0x100031004 ; symbol stub for: _fputs
000000010002a9dc	mov	x0, x20
000000010002a9e0	bl	0x10000e4b0
000000010002a9e4	mov	x0, x19
000000010002a9e8	ldp	x29, x30, [sp, #0x10]
000000010002a9ec	ldp	x20, x19, [sp], #0x20
000000010002a9f0	b	0x100031010 ; symbol stub for: _free
000000010002a9f4	ldp	x29, x30, [sp, #0x10]
000000010002a9f8	ldp	x20, x19, [sp], #0x20
000000010002a9fc	ret
000000010002aa00	b	0x100028fc4
000000010002aa04	stp	x28, x27, [sp, #-0x40]!
000000010002aa08	stp	x22, x21, [sp, #0x10]
000000010002aa0c	stp	x20, x19, [sp, #0x20]
000000010002aa10	stp	x29, x30, [sp, #0x30]
000000010002aa14	add	x29, sp, #0x30
000000010002aa18	sub	sp, sp, #0x430
000000010002aa1c	nop
000000010002aa20	ldr	x8, #0x155f8 ; literal pool symbol address: ___stack_chk_guard
000000010002aa24	ldr	x8, [x8]
000000010002aa28	stur	x8, [x29, #-0x38]
000000010002aa2c	adr	x22, #105050
000000010002aa30	nop
000000010002aa34	ldrb	w8, [x22]
000000010002aa38	cbnz	w8, 0x10002ad94
000000010002aa3c	adr	x0, #71119 ; literal pool for: "kern.hostname"
000000010002aa40	nop
000000010002aa44	adr	x3, #71125 ; literal pool for: "localhost"
000000010002aa48	nop
000000010002aa4c	mov	w4, #0xa
000000010002aa50	mov	x1, #0x0
000000010002aa54	mov	x2, #0x0
000000010002aa58	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002aa5c	cmn	w0, #0x1
000000010002aa60	b.eq	0x10002af4c
000000010002aa64	ldrb	w8, [x22]
000000010002aa68	cbnz	w8, 0x10002ad94
000000010002aa6c	orr	w8, wzr, #0x400
000000010002aa70	stur	x8, [x29, #-0x58]
000000010002aa74	adr	x0, #71552 ; literal pool for: "/System/Library/CoreServices/SystemVersion.plist"
000000010002aa78	nop
000000010002aa7c	bl	0x100028a68
000000010002aa80	mov	x21, x0
000000010002aa84	cbz	x21, 0x10002aaa8
000000010002aa88	adr	x1, #71581 ; literal pool for: "ProductVersion"
000000010002aa8c	nop
000000010002aa90	mov	x0, x21
000000010002aa94	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010002aa98	cbz	x0, 0x10002aab4
000000010002aa9c	bl	0x100031718 ; symbol stub for: _strdup
000000010002aaa0	mov	x20, x0
000000010002aaa4	b	0x10002aab8
000000010002aaa8	mov	x20, #0x0
000000010002aaac	mov	x19, #0x0
000000010002aab0	b	0x10002aae4
000000010002aab4	mov	x20, #0x0
000000010002aab8	adr	x1, #71548 ; literal pool for: "ProductBuildVersion"
000000010002aabc	nop
000000010002aac0	mov	x0, x21
000000010002aac4	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010002aac8	cbz	x0, 0x10002aad8
000000010002aacc	bl	0x100031718 ; symbol stub for: _strdup
000000010002aad0	mov	x19, x0
000000010002aad4	b	0x10002aadc
000000010002aad8	mov	x19, #0x0
000000010002aadc	mov	x0, x21
000000010002aae0	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010002aae4	adr	x0, #71403 ; literal pool for: "kern.osproductversion"
000000010002aae8	nop
000000010002aaec	add	x1, sp, #0x8
000000010002aaf0	sub	x2, x29, #0x58
000000010002aaf4	mov	x3, #0x0
000000010002aaf8	mov	x4, #0x0
000000010002aafc	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002ab00	cmn	w0, #0x1
000000010002ab04	b.eq	0x10002ab60
000000010002ab08	cbz	x20, 0x10002ab60
000000010002ab0c	ldrb	w8, [sp, #0x8]
000000010002ab10	cbnz	w8, 0x10002ab60
000000010002ab14	mov	x0, x20
000000010002ab18	bl	0x10003173c ; symbol stub for: _strlen
000000010002ab1c	add	x4, x0, #0x1
000000010002ab20	adr	x0, #71343 ; literal pool for: "kern.osproductversion"
000000010002ab24	nop
000000010002ab28	mov	x1, #0x0
000000010002ab2c	mov	x2, #0x0
000000010002ab30	mov	x3, x20
000000010002ab34	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002ab38	cmn	w0, #0x1
000000010002ab3c	b.ne	0x10002ab50
000000010002ab40	bl	0x100030adc ; symbol stub for: ___error
000000010002ab44	ldrsw	x0, [x0]
000000010002ab48	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002ab4c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ab50	adr	x8, #100744
000000010002ab54	nop
000000010002ab58	str	x20, [x8]
000000010002ab5c	b	0x10002ab68
000000010002ab60	mov	x0, x20
000000010002ab64	bl	0x100031010 ; symbol stub for: _free
000000010002ab68	adr	x0, #71293 ; literal pool for: "kern.osversion"
000000010002ab6c	nop
000000010002ab70	add	x1, sp, #0x8
000000010002ab74	sub	x2, x29, #0x58
000000010002ab78	mov	x3, #0x0
000000010002ab7c	mov	x4, #0x0
000000010002ab80	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002ab84	cmn	w0, #0x1
000000010002ab88	b.eq	0x10002abe4
000000010002ab8c	cbz	x19, 0x10002abe4
000000010002ab90	ldrb	w8, [sp, #0x8]
000000010002ab94	cbnz	w8, 0x10002abe4
000000010002ab98	mov	x0, x19
000000010002ab9c	bl	0x10003173c ; symbol stub for: _strlen
000000010002aba0	add	x4, x0, #0x1
000000010002aba4	adr	x0, #71233 ; literal pool for: "kern.osversion"
000000010002aba8	nop
000000010002abac	mov	x1, #0x0
000000010002abb0	mov	x2, #0x0
000000010002abb4	mov	x3, x19
000000010002abb8	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002abbc	cmn	w0, #0x1
000000010002abc0	b.ne	0x10002abd4
000000010002abc4	bl	0x100030adc ; symbol stub for: ___error
000000010002abc8	ldrsw	x0, [x0]
000000010002abcc	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002abd0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002abd4	adr	x8, #100604
000000010002abd8	nop
000000010002abdc	str	x19, [x8]
000000010002abe0	b	0x10002abec
000000010002abe4	mov	x0, x19
000000010002abe8	bl	0x100031010 ; symbol stub for: _free
000000010002abec	ldrb	w8, [x22]
000000010002abf0	cbnz	w8, 0x10002ad94
000000010002abf4	mov	w20, #0x6f6c
000000010002abf8	movk	w20, #0x30, lsl #16
000000010002abfc	movi.16b	v0, #0x0
000000010002ac00	stur	q0, [x29, #-0x58]
000000010002ac04	stur	q0, [x29, #-0x48]
000000010002ac08	stur	w20, [x29, #-0x58]
000000010002ac0c	orr	w0, wzr, #0x2
000000010002ac10	orr	w1, wzr, #0x2
000000010002ac14	mov	w2, #0x0
000000010002ac18	bl	0x1000316c4 ; symbol stub for: _socket
000000010002ac1c	mov	x19, x0
000000010002ac20	cmn	w19, #0x1
000000010002ac24	b.eq	0x10002acf0
000000010002ac28	sub	x21, x29, #0x58
000000010002ac2c	str	x21, [sp]
000000010002ac30	mov	w1, #0x6911
000000010002ac34	movk	w1, #0xc020, lsl #16
000000010002ac38	mov	x0, x19
000000010002ac3c	bl	0x100031184 ; symbol stub for: _ioctl
000000010002ac40	cmn	w0, #0x1
000000010002ac44	b.eq	0x10002ad04
000000010002ac48	ldurh	w8, [x29, #-0x48]
000000010002ac4c	orr	w8, w8, #0x1
000000010002ac50	sturh	w8, [x29, #-0x48]
000000010002ac54	str	x21, [sp]
000000010002ac58	mov	w1, #0x6910
000000010002ac5c	movk	w1, #0x8020, lsl #16
000000010002ac60	mov	x0, x19
000000010002ac64	bl	0x100031184 ; symbol stub for: _ioctl
000000010002ac68	cmn	w0, #0x1
000000010002ac6c	b.eq	0x10002ad38
000000010002ac70	movi.16b	v0, #0x0
000000010002ac74	stur	q0, [sp, #0x1c]
000000010002ac78	stur	q0, [sp, #0xc]
000000010002ac7c	stur	xzr, [sp, #0x3c]
000000010002ac80	stur	q0, [sp, #0x2c]
000000010002ac84	str	wzr, [sp, #0x44]
000000010002ac88	str	w20, [sp, #0x8]
000000010002ac8c	mov	w8, #0x7f
000000010002ac90	movk	w8, #0x100, lsl #16
000000010002ac94	str	w8, [sp, #0x1c]
000000010002ac98	mov	w8, #0x210
000000010002ac9c	strh	w8, [sp, #0x18]
000000010002aca0	orr	w9, wzr, #0xff
000000010002aca4	str	w9, [sp, #0x3c]
000000010002aca8	strh	w8, [sp, #0x38]
000000010002acac	add	x8, sp, #0x8
000000010002acb0	str	x8, [sp]
000000010002acb4	mov	w1, #0x691a
000000010002acb8	movk	w1, #0x8040, lsl #16
000000010002acbc	mov	x0, x19
000000010002acc0	bl	0x100031184 ; symbol stub for: _ioctl
000000010002acc4	cmn	w0, #0x1
000000010002acc8	b.eq	0x10002ad6c
000000010002accc	mov	x0, x19
000000010002acd0	bl	0x100030c74 ; symbol stub for: _close
000000010002acd4	cmn	w0, #0x1
000000010002acd8	b.ne	0x10002ad8c
000000010002acdc	bl	0x100030adc ; symbol stub for: ___error
000000010002ace0	ldrsw	x0, [x0]
000000010002ace4	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002ace8	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002acec	brk	#0x1
000000010002acf0	bl	0x100030adc ; symbol stub for: ___error
000000010002acf4	ldrsw	x0, [x0]
000000010002acf8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002acfc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ad00	b	0x10002ad8c
000000010002ad04	bl	0x100030adc ; symbol stub for: ___error
000000010002ad08	ldrsw	x0, [x0]
000000010002ad0c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002ad10	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ad14	mov	x0, x19
000000010002ad18	bl	0x100030c74 ; symbol stub for: _close
000000010002ad1c	cmn	w0, #0x1
000000010002ad20	b.ne	0x10002ad8c
000000010002ad24	bl	0x100030adc ; symbol stub for: ___error
000000010002ad28	ldrsw	x0, [x0]
000000010002ad2c	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002ad30	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002ad34	brk	#0x1
000000010002ad38	bl	0x100030adc ; symbol stub for: ___error
000000010002ad3c	ldrsw	x0, [x0]
000000010002ad40	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002ad44	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ad48	mov	x0, x19
000000010002ad4c	bl	0x100030c74 ; symbol stub for: _close
000000010002ad50	cmn	w0, #0x1
000000010002ad54	b.ne	0x10002ad8c
000000010002ad58	bl	0x100030adc ; symbol stub for: ___error
000000010002ad5c	ldrsw	x0, [x0]
000000010002ad60	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002ad64	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002ad68	brk	#0x1
000000010002ad6c	bl	0x100030adc ; symbol stub for: ___error
000000010002ad70	ldrsw	x0, [x0]
000000010002ad74	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002ad78	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ad7c	mov	x0, x19
000000010002ad80	bl	0x100030c74 ; symbol stub for: _close
000000010002ad84	cmn	w0, #0x1
000000010002ad88	b.eq	0x10002af60
000000010002ad8c	ldrb	w8, [x22]
000000010002ad90	cbz	w8, 0x10002add8
000000010002ad94	bl	0x10000d8e0
000000010002ad98	adr	x2, #3620
000000010002ad9c	nop
000000010002ada0	mov	x1, #0x0
000000010002ada4	bl	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010002ada8	ldur	x8, [x29, #-0x38]
000000010002adac	nop
000000010002adb0	ldr	x9, #0x15268 ; literal pool symbol address: ___stack_chk_guard
000000010002adb4	ldr	x9, [x9]
000000010002adb8	cmp	x9, x8
000000010002adbc	b.ne	0x10002af48
000000010002adc0	add	sp, sp, #0x430
000000010002adc4	ldp	x29, x30, [sp, #0x30]
000000010002adc8	ldp	x20, x19, [sp, #0x20]
000000010002adcc	ldp	x22, x21, [sp, #0x10]
000000010002add0	ldp	x28, x27, [sp], #0x40
000000010002add4	ret
000000010002add8	movi.16b	v0, #0x0
000000010002addc	stur	q0, [x29, #-0x58]
000000010002ade0	stur	q0, [x29, #-0x48]
000000010002ade4	stur	w20, [x29, #-0x58]
000000010002ade8	orr	w0, wzr, #0x1e
000000010002adec	orr	w1, wzr, #0x2
000000010002adf0	mov	w2, #0x0
000000010002adf4	bl	0x1000316c4 ; symbol stub for: _socket
000000010002adf8	mov	x19, x0
000000010002adfc	cmn	w19, #0x1
000000010002ae00	b.eq	0x10002aecc
000000010002ae04	movi.16b	v0, #0x0
000000010002ae08	stur	q0, [x29, #-0x58]
000000010002ae0c	stur	q0, [x29, #-0x48]
000000010002ae10	stur	w20, [x29, #-0x58]
000000010002ae14	sub	x8, x29, #0x58
000000010002ae18	str	x8, [sp]
000000010002ae1c	mov	w1, #0x6911
000000010002ae20	movk	w1, #0xc020, lsl #16
000000010002ae24	mov	x0, x19
000000010002ae28	bl	0x100031184 ; symbol stub for: _ioctl
000000010002ae2c	cmn	w0, #0x1
000000010002ae30	b.eq	0x10002aee0
000000010002ae34	add	x21, sp, #0x8
000000010002ae38	add	x0, sp, #0x8
000000010002ae3c	orr	w2, wzr, #0x78
000000010002ae40	mov	w1, #0x0
000000010002ae44	bl	0x100031340 ; symbol stub for: _memset
000000010002ae48	str	w20, [sp, #0x8]
000000010002ae4c	nop
000000010002ae50	ldr	x8, #0x152a8 ; literal pool symbol address: _in6addr_loopback
000000010002ae54	ldr	q0, [x8]
000000010002ae58	stur	q0, [sp, #0x20]
000000010002ae5c	mov	w8, #0x1e1c
000000010002ae60	strh	w8, [sp, #0x18]
000000010002ae64	mov	x9, #-0x1
000000010002ae68	stp	x9, x9, [sp, #0x58]
000000010002ae6c	strh	w8, [sp, #0x50]
000000010002ae70	movi	d0, #0xffffffffffffffff
000000010002ae74	str	d0, [sp, #0x80]
000000010002ae78	mov	w8, #0x691a
000000010002ae7c	movk	w8, #0x8040, lsl #16
000000010002ae80	add	x1, x8, #0x400, lsl #12
000000010002ae84	str	x21, [sp]
000000010002ae88	mov	x0, x19
000000010002ae8c	bl	0x100031184 ; symbol stub for: _ioctl
000000010002ae90	cmn	w0, #0x1
000000010002ae94	b.ne	0x10002aea8
000000010002ae98	bl	0x100030adc ; symbol stub for: ___error
000000010002ae9c	ldr	w8, [x0]
000000010002aea0	cmp	w8, #0x11
000000010002aea4	b.ne	0x10002af14
000000010002aea8	mov	x0, x19
000000010002aeac	bl	0x100030c74 ; symbol stub for: _close
000000010002aeb0	cmn	w0, #0x1
000000010002aeb4	b.ne	0x10002ad94
000000010002aeb8	bl	0x100030adc ; symbol stub for: ___error
000000010002aebc	ldrsw	x0, [x0]
000000010002aec0	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002aec4	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002aec8	brk	#0x1
000000010002aecc	bl	0x100030adc ; symbol stub for: ___error
000000010002aed0	ldrsw	x0, [x0]
000000010002aed4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002aed8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002aedc	b	0x10002ad94
000000010002aee0	bl	0x100030adc ; symbol stub for: ___error
000000010002aee4	ldrsw	x0, [x0]
000000010002aee8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002aeec	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002aef0	mov	x0, x19
000000010002aef4	bl	0x100030c74 ; symbol stub for: _close
000000010002aef8	cmn	w0, #0x1
000000010002aefc	b.ne	0x10002ad94
000000010002af00	bl	0x100030adc ; symbol stub for: ___error
000000010002af04	ldrsw	x0, [x0]
000000010002af08	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002af0c	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002af10	brk	#0x1
000000010002af14	bl	0x100030adc ; symbol stub for: ___error
000000010002af18	ldrsw	x0, [x0]
000000010002af1c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002af20	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002af24	mov	x0, x19
000000010002af28	bl	0x100030c74 ; symbol stub for: _close
000000010002af2c	cmn	w0, #0x1
000000010002af30	b.ne	0x10002ad94
000000010002af34	bl	0x100030adc ; symbol stub for: ___error
000000010002af38	ldrsw	x0, [x0]
000000010002af3c	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002af40	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002af44	brk	#0x1
000000010002af48	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002af4c	bl	0x100030adc ; symbol stub for: ___error
000000010002af50	ldrsw	x0, [x0]
000000010002af54	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002af58	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002af5c	brk	#0x1
000000010002af60	bl	0x100030adc ; symbol stub for: ___error
000000010002af64	ldrsw	x0, [x0]
000000010002af68	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002af6c	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002af70	brk	#0x1
000000010002af74	stp	x20, x19, [sp, #-0x20]!
000000010002af78	stp	x29, x30, [sp, #0x10]
000000010002af7c	add	x29, sp, #0x10
000000010002af80	mov	x19, x1
000000010002af84	adr	x8, #103684
000000010002af88	nop
000000010002af8c	ldrb	w8, [x8]
000000010002af90	cmp	w8, #0x0
000000010002af94	orr	w8, wzr, #0x1c00
000000010002af98	orr	w9, wzr, #0x3800
000000010002af9c	csel	w20, w9, w8, eq
000000010002afa0	nop
000000010002afa4	ldr	x8, #0x1517c ; literal pool symbol address: _mach_task_self_
000000010002afa8	ldr	w8, [x8]
000000010002afac	cmp	w8, w0
000000010002afb0	b.ne	0x10002afd0
000000010002afb4	mov	w3, #-0x7ffffffd
000000010002afb8	orr	w4, wzr, #0x1
000000010002afbc	mov	x1, x20
000000010002afc0	mov	x2, x19
000000010002afc4	ldp	x29, x30, [sp, #0x10]
000000010002afc8	ldp	x20, x19, [sp], #0x20
000000010002afcc	b	0x100031814 ; symbol stub for: _task_set_exception_ports
000000010002afd0	bl	0x100031220 ; symbol stub for: _mach_host_self
000000010002afd4	mov	w3, #-0x7ffffffd
000000010002afd8	orr	w4, wzr, #0x1
000000010002afdc	mov	x1, x20
000000010002afe0	mov	x2, x19
000000010002afe4	ldp	x29, x30, [sp, #0x10]
000000010002afe8	ldp	x20, x19, [sp], #0x20
000000010002afec	b	0x10003116c ; symbol stub for: _host_set_exception_ports
000000010002aff0	sub	sp, sp, #0x190
000000010002aff4	stp	x28, x27, [sp, #0x130]
000000010002aff8	stp	x26, x25, [sp, #0x140]
000000010002affc	stp	x24, x23, [sp, #0x150]
000000010002b000	stp	x22, x21, [sp, #0x160]
000000010002b004	stp	x20, x19, [sp, #0x170]
000000010002b008	stp	x29, x30, [sp, #0x180]
000000010002b00c	add	x29, sp, #0x180
000000010002b010	mov	x20, x1
000000010002b014	mov	x19, x0
000000010002b018	nop
000000010002b01c	ldr	x8, #0x14ffc ; literal pool symbol address: ___stack_chk_guard
000000010002b020	ldr	x8, [x8]
000000010002b024	stur	x8, [x29, #-0x58]
000000010002b028	nop
000000010002b02c	nop
000000010002b030	ldr	x0, #0x19460
000000010002b034	cbz	x0, 0x10002b818
000000010002b038	mov	x1, x19
000000010002b03c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002b040	mov	x23, x0
000000010002b044	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002b048	nop
000000010002b04c	ldr	x8, #0x15074 ; literal pool symbol address: __xpc_type_dictionary
000000010002b050	cmp	x0, x8
000000010002b054	b.ne	0x10002b824
000000010002b058	adr	x8, #103470
000000010002b05c	nop
000000010002b060	ldrb	w8, [x8]
000000010002b064	cbz	w8, 0x10002b07c
000000010002b068	adr	x1, #70488 ; literal pool for: "PerformAfterUserspaceReboot"
000000010002b06c	nop
000000010002b070	mov	x0, x23
000000010002b074	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002b078	cbz	w0, 0x10002b7dc
000000010002b07c	adr	x1, #70496 ; literal pool for: "FallbackTask"
000000010002b080	nop
000000010002b084	mov	x0, x23
000000010002b088	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010002b08c	mov	x21, x0
000000010002b090	adr	x1, #70489 ; literal pool for: "PerformInRestore"
000000010002b094	nop
000000010002b098	mov	x0, x23
000000010002b09c	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002b0a0	mov	x22, x0
000000010002b0a4	adr	x24, #70486 ; literal pool for: "PerformInLeanTestEnvironment"
000000010002b0a8	nop
000000010002b0ac	mov	x0, x23
000000010002b0b0	mov	x1, x24
000000010002b0b4	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002b0b8	tbnz	w0, #0x0, 0x10002b0ec
000000010002b0bc	adr	x8, #103260
000000010002b0c0	nop
000000010002b0c4	ldrb	w8, [x8]
000000010002b0c8	cbz	w8, 0x10002b0ec
000000010002b0cc	stp	x24, x19, [sp]
000000010002b0d0	adr	x2, #70471 ; literal pool for: "%s not set, Skipping boot-task: %s"
000000010002b0d4	nop
000000010002b0d8	mov	w1, #0x7
000000010002b0dc	movk	w1, #0x1, lsl #16
000000010002b0e0	mov	x0, #0x0
000000010002b0e4	bl	0x100029dbc
000000010002b0e8	b	0x10002b7dc
000000010002b0ec	adr	x8, #103309
000000010002b0f0	nop
000000010002b0f4	ldrb	w8, [x8]
000000010002b0f8	cmp	w8, #0x0
000000010002b0fc	cset	w8, eq
000000010002b100	orr	w8, w22, w8
000000010002b104	cmp	w8, #0x1
000000010002b108	b.ne	0x10002b7dc
000000010002b10c	tbnz	w20, #0x0, 0x10002b1a4
000000010002b110	adr	x1, #70442 ; literal pool for: "RequireRun"
000000010002b114	nop
000000010002b118	mov	x0, x23
000000010002b11c	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002b120	mov	x27, x0
000000010002b124	adr	x1, #70433 ; literal pool for: "RequireSuccess"
000000010002b128	nop
000000010002b12c	mov	x0, x23
000000010002b130	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002b134	mov	x26, x0
000000010002b138	adr	x1, #70428 ; literal pool for: "RebootOnSuccess"
000000010002b13c	nop
000000010002b140	mov	x0, x23
000000010002b144	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002b148	mov	x25, x0
000000010002b14c	adr	x1, #70424 ; literal pool for: "AssumeSingleUserSuccess"
000000010002b150	nop
000000010002b154	mov	x0, x23
000000010002b158	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002b15c	mov	x24, x0
000000010002b160	adr	x1, #70428 ; literal pool for: "RebootOnExitCode"
000000010002b164	nop
000000010002b168	mov	x0, x23
000000010002b16c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002b170	mov	x22, x0
000000010002b174	str	w24, [sp, #0x40]
000000010002b178	cbz	x22, 0x10002b1b4
000000010002b17c	mov	x0, x22
000000010002b180	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002b184	nop
000000010002b188	ldr	x8, #0x14f48 ; literal pool symbol address: __xpc_type_int64
000000010002b18c	cmp	x0, x8
000000010002b190	b.ne	0x10002b1b4
000000010002b194	mov	x0, x22
000000010002b198	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010002b19c	mov	x28, x0
000000010002b1a0	b	0x10002b1b8
000000010002b1a4	str	wzr, [sp, #0x40]
000000010002b1a8	mov	w25, #0x0
000000010002b1ac	mov	w26, #0x0
000000010002b1b0	mov	w27, #0x0
000000010002b1b4	mov	w28, #-0x1
000000010002b1b8	adr	x8, #93336
000000010002b1bc	nop
000000010002b1c0	ldp	q0, q1, [x8]
000000010002b1c4	stp	q0, q1, [x29, #-0x80]
000000010002b1c8	str	x19, [sp]
000000010002b1cc	adr	x2, #70337 ; literal pool for: "Doing boot task: %s"
000000010002b1d0	nop
000000010002b1d4	mov	w1, #0x7
000000010002b1d8	movk	w1, #0x1, lsl #16
000000010002b1dc	mov	x0, #0x0
000000010002b1e0	bl	0x100029dbc
000000010002b1e4	cmn	w28, #0x1
000000010002b1e8	b.eq	0x10002b208
000000010002b1ec	stp	x19, x28, [sp]
000000010002b1f0	adr	x2, #70321 ; literal pool for: "%s: will reboot if exits with code: %d"
000000010002b1f4	nop
000000010002b1f8	mov	w1, #0x7
000000010002b1fc	movk	w1, #0x1, lsl #16
000000010002b200	mov	x0, #0x0
000000010002b204	bl	0x100029dbc
000000010002b208	adr	x1, #32267 ; literal pool for: "Program"
000000010002b20c	nop
000000010002b210	mov	x0, x23
000000010002b214	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010002b218	mov	x24, x0
000000010002b21c	cbz	x24, 0x10002b830
000000010002b220	adr	x1, #32251 ; literal pool for: "ProgramArguments"
000000010002b224	nop
000000010002b228	mov	x0, x23
000000010002b22c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002b230	mov	x22, x0
000000010002b234	str	w25, [sp, #0x44]
000000010002b238	str	w26, [sp, #0x3c]
000000010002b23c	str	w27, [sp, #0x4c]
000000010002b240	cbz	x22, 0x10002b26c
000000010002b244	mov	x0, x22
000000010002b248	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002b24c	nop
000000010002b250	ldr	x8, #0x14e48 ; literal pool symbol address: __xpc_type_array
000000010002b254	cmp	x0, x8
000000010002b258	b.ne	0x10002b904
000000010002b25c	mov	x0, x22
000000010002b260	bl	0x100031b74 ; symbol stub for: _xpc_retain
000000010002b264	mov	x25, x0
000000010002b268	b	0x10002b284
000000010002b26c	mov	x1, #0x0
000000010002b270	bl	0x1000318c8 ; symbol stub for: _xpc_array_create
000000010002b274	mov	x25, x0
000000010002b278	mov	x1, #-0x1
000000010002b27c	mov	x2, x24
000000010002b280	bl	0x10003191c ; symbol stub for: _xpc_array_set_string
000000010002b284	mov	x0, x25
000000010002b288	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
000000010002b28c	mov	x22, x0
000000010002b290	lsl	x8, x22, #3
000000010002b294	add	x0, x8, #0x8
000000010002b298	bl	0x10000d464
000000010002b29c	mov	x26, x0
000000010002b2a0	cbz	x22, 0x10002b2c8
000000010002b2a4	mov	x27, #0x0
000000010002b2a8	mov	x0, x25
000000010002b2ac	mov	x1, x27
000000010002b2b0	bl	0x1000318e0 ; symbol stub for: _xpc_array_get_string
000000010002b2b4	cbz	x0, 0x10002b2bc
000000010002b2b8	str	x0, [x26, x27, lsl #3]
000000010002b2bc	add	x27, x27, #0x1
000000010002b2c0	cmp	x22, x27
000000010002b2c4	b.ne	0x10002b2a8
000000010002b2c8	adr	x1, #70144 ; literal pool for: "RemoveOnSuccess"
000000010002b2cc	nop
000000010002b2d0	mov	x0, x23
000000010002b2d4	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002b2d8	mov	x22, x0
000000010002b2dc	cmp	w22, #0x0
000000010002b2e0	csel	x27, x24, xzr, ne
000000010002b2e4	cbz	w22, 0x10002b2f8
000000010002b2e8	add	x1, sp, #0x70
000000010002b2ec	mov	x0, x27
000000010002b2f0	bl	0x1000316d0 ; symbol stub for: _stat
000000010002b2f4	cbnz	w0, 0x10002b7dc
000000010002b2f8	add	x0, sp, #0x68
000000010002b2fc	bl	0x1000314a8 ; symbol stub for: _posix_spawnattr_init
000000010002b300	cbnz	w0, 0x10002b83c
000000010002b304	mov	w1, #0x408c
000000010002b308	add	x0, sp, #0x68
000000010002b30c	bl	0x100031508 ; symbol stub for: _posix_spawnattr_setflags
000000010002b310	cbnz	w0, 0x10002b84c
000000010002b314	orr	w1, wzr, #0x400
000000010002b318	add	x0, sp, #0x68
000000010002b31c	bl	0x100031520 ; symbol stub for: _posix_spawnattr_setprocesstype_np
000000010002b320	cbnz	w0, 0x10002b85c
000000010002b324	str	wzr, [sp, #0x64]
000000010002b328	add	x0, sp, #0x68
000000010002b32c	add	x1, sp, #0x64
000000010002b330	bl	0x100031538 ; symbol stub for: _posix_spawnattr_setsigmask
000000010002b334	cbnz	w0, 0x10002b86c
000000010002b338	mov	w8, #-0x1
000000010002b33c	str	w8, [sp, #0x60]
000000010002b340	add	x0, sp, #0x68
000000010002b344	add	x1, sp, #0x60
000000010002b348	bl	0x10003152c ; symbol stub for: _posix_spawnattr_setsigdefault
000000010002b34c	cbnz	w0, 0x10002b87c
000000010002b350	add	x0, sp, #0x58
000000010002b354	bl	0x100031490 ; symbol stub for: _posix_spawn_file_actions_init
000000010002b358	cmn	w0, #0x1
000000010002b35c	b.eq	0x10002b88c
000000010002b360	str	x27, [sp, #0x28]
000000010002b364	adr	x2, #45245 ; literal pool for: "/dev/console"
000000010002b368	nop
000000010002b36c	orr	w3, wzr, #0x20000
000000010002b370	add	x0, sp, #0x58
000000010002b374	mov	w1, #0x0
000000010002b378	mov	w4, #0x0
000000010002b37c	bl	0x100031478 ; symbol stub for: _posix_spawn_file_actions_addopen
000000010002b380	cmn	w0, #0x1
000000010002b384	b.eq	0x10002b8a0
000000010002b388	mov	w27, #0x1
000000010002b38c	movk	w27, #0x2, lsl #16
000000010002b390	adr	x2, #45201 ; literal pool for: "/dev/console"
000000010002b394	nop
000000010002b398	orr	w1, wzr, #0x1
000000010002b39c	mov	w3, #0x1
000000010002b3a0	movk	w3, #0x2, lsl #16
000000010002b3a4	add	x0, sp, #0x58
000000010002b3a8	mov	w4, #0x0
000000010002b3ac	bl	0x100031478 ; symbol stub for: _posix_spawn_file_actions_addopen
000000010002b3b0	cmn	w0, #0x1
000000010002b3b4	b.eq	0x10002b8b4
000000010002b3b8	str	x28, [sp, #0x30]
000000010002b3bc	add	w3, w27, #0x1
000000010002b3c0	adr	x2, #45153 ; literal pool for: "/dev/console"
000000010002b3c4	nop
000000010002b3c8	orr	w1, wzr, #0x2
000000010002b3cc	add	x0, sp, #0x58
000000010002b3d0	mov	w4, #0x0
000000010002b3d4	bl	0x100031478 ; symbol stub for: _posix_spawn_file_actions_addopen
000000010002b3d8	cmn	w0, #0x1
000000010002b3dc	b.eq	0x10002b8c8
000000010002b3e0	mov	w28, #0x45
000000010002b3e4	movk	w28, #0x2200, lsl #16
000000010002b3e8	bl	0x100031220 ; symbol stub for: _mach_host_self
000000010002b3ec	bl	0x100008a7c
000000010002b3f0	str	w0, [sp, #0x48]
000000010002b3f4	bl	0x100031220 ; symbol stub for: _mach_host_self
000000010002b3f8	mov	w1, #0x0
000000010002b3fc	bl	0x10002af74
000000010002b400	mov	w0, #0x45
000000010002b404	movk	w0, #0x2200, lsl #16
000000010002b408	mov	x1, x19
000000010002b40c	bl	0x10000cce0
000000010002b410	str	xzr, [sp, #0x50]
000000010002b414	add	x0, sp, #0x50
000000010002b418	add	x2, sp, #0x58
000000010002b41c	add	x3, sp, #0x68
000000010002b420	sub	x5, x29, #0x80
000000010002b424	mov	x1, x24
000000010002b428	mov	x4, x26
000000010002b42c	bl	0x100031544 ; symbol stub for: _posix_spawnp
000000010002b430	mov	x27, x0
000000010002b434	cbnz	w27, 0x10002b56c
000000010002b438	adr	x1, #69792 ; literal pool for: "CSIdentityOverride"
000000010002b43c	nop
000000010002b440	mov	x0, x23
000000010002b444	bl	0x100031a9c ; symbol stub for: _xpc_dictionary_get_string
000000010002b448	mov	x27, x0
000000010002b44c	ldr	w0, [sp, #0x50]
000000010002b450	str	wzr, [sp, #0x70]
000000010002b454	add	x2, sp, #0x70
000000010002b458	orr	w3, wzr, #0x4
000000010002b45c	mov	w1, #0x0
000000010002b460	bl	0x100030d04 ; symbol stub for: _csops
000000010002b464	cbnz	w0, 0x10002b910
000000010002b468	ldr	w8, [sp, #0x70]
000000010002b46c	tbz	w8, #0x1a, 0x10002b910
000000010002b470	nop
000000010002b474	nop
000000010002b478	ldr	w8, 0x100044468
000000010002b47c	cbnz	w8, 0x10002b4f0
000000010002b480	ldr	w0, [sp, #0x50]
000000010002b484	mov	x1, #0x0
000000010002b488	bl	0x100029004
000000010002b48c	mov	x23, x0
000000010002b490	cbz	x23, 0x10002b95c
000000010002b494	cbz	x27, 0x10002b4a4
000000010002b498	mov	x0, x27
000000010002b49c	bl	0x10000d520
000000010002b4a0	b	0x10002b4c8
000000010002b4a4	mov	w1, #0x2f
000000010002b4a8	mov	x0, x24
000000010002b4ac	bl	0x100031784 ; symbol stub for: _strrchr
000000010002b4b0	cmp	x0, #0x0
000000010002b4b4	csinc	x8, x24, x0, eq
000000010002b4b8	str	x8, [sp]
000000010002b4bc	adr	x0, #70123 ; literal pool for: "com.apple.%s"
000000010002b4c0	nop
000000010002b4c4	bl	0x10000d72c
000000010002b4c8	mov	x27, x0
000000010002b4cc	cbz	x27, 0x10002b970
000000010002b4d0	mov	x0, x27
000000010002b4d4	mov	x1, x23
000000010002b4d8	bl	0x100031700 ; symbol stub for: _strcmp
000000010002b4dc	cbnz	w0, 0x10002b980
000000010002b4e0	mov	x0, x23
000000010002b4e4	bl	0x100031010 ; symbol stub for: _free
000000010002b4e8	mov	x0, x27
000000010002b4ec	bl	0x100031010 ; symbol stub for: _free
000000010002b4f0	ldr	w0, [sp, #0x50]
000000010002b4f4	mov	w1, #0x13
000000010002b4f8	bl	0x1000311a8 ; symbol stub for: _kill
000000010002b4fc	cmn	w0, #0x1
000000010002b500	b.ne	0x10002b510
000000010002b504	bl	0x100030adc ; symbol stub for: ___error
000000010002b508	ldrsw	x0, [x0]
000000010002b50c	cbnz	w0, 0x10002b998
000000010002b510	ldr	w0, [sp, #0x50]
000000010002b514	add	x1, sp, #0x54
000000010002b518	mov	w2, #0x0
000000010002b51c	bl	0x1000318a4 ; symbol stub for: _waitpid
000000010002b520	ldr	w8, [sp, #0x50]
000000010002b524	cmp	w0, w8
000000010002b528	b.eq	0x10002b538
000000010002b52c	bl	0x100030adc ; symbol stub for: ___error
000000010002b530	ldrsw	x0, [x0]
000000010002b534	cbnz	w0, 0x10002b928
000000010002b538	ldr	w8, [sp, #0x54]
000000010002b53c	and	w23, w8, #0xff00
000000010002b540	adr	x1, #69711 ; literal pool for: "/bin/bash"
000000010002b544	nop
000000010002b548	mov	x0, x24
000000010002b54c	bl	0x100031700 ; symbol stub for: _strcmp
000000010002b550	orr	w8, wzr, #0x7f00
000000010002b554	cmp	w23, w8
000000010002b558	ccmp	w0, #0x0, #0x0, eq
000000010002b55c	orr	w8, wzr, #0x2
000000010002b560	csel	w27, w8, wzr, eq
000000010002b564	mov	w28, #0x45
000000010002b568	movk	w28, #0x2200, lsl #16
000000010002b56c	add	w0, w28, #0x1
000000010002b570	mov	x1, x19
000000010002b574	bl	0x10000cce0
000000010002b578	cmp	w27, #0x2
000000010002b57c	b.eq	0x10002b5dc
000000010002b580	cbnz	w27, 0x10002b614
000000010002b584	ldr	w8, [sp, #0x54]
000000010002b588	and	w9, w8, #0x7f
000000010002b58c	cmp	w9, #0x7f
000000010002b590	b.eq	0x10002b69c
000000010002b594	cbnz	w9, 0x10002b674
000000010002b598	ubfx	w23, w8, #8, #8
000000010002b59c	cbz	w23, 0x10002b6f8
000000010002b5a0	stp	x19, x23, [sp]
000000010002b5a4	adr	x2, #69621 ; literal pool for: "%s: exited: %d"
000000010002b5a8	nop
000000010002b5ac	mov	w1, #0x7
000000010002b5b0	movk	w1, #0x1, lsl #16
000000010002b5b4	mov	x0, #0x0
000000010002b5b8	bl	0x100029dbc
000000010002b5bc	ldr	x8, [sp, #0x30]
000000010002b5c0	cmp	w23, w8
000000010002b5c4	b.ne	0x10002b69c
000000010002b5c8	ldr	x8, [sp, #0x30]
000000010002b5cc	stp	x19, x8, [sp]
000000010002b5d0	adr	x2, #69592 ; literal pool for: "%s: rebooting on exit code: %d"
000000010002b5d4	nop
000000010002b5d8	b	0x10002b940
000000010002b5dc	ldr	w8, [sp, #0x4c]
000000010002b5e0	cbz	w8, 0x10002b7a0
000000010002b5e4	mov	w8, #0x7
000000010002b5e8	movk	w8, #0x1, lsl #16
000000010002b5ec	sub	w1, w8, #0x4
000000010002b5f0	str	x19, [sp]
000000010002b5f4	adr	x2, #69690 ; literal pool for: "%s: required boot task not present"
000000010002b5f8	nop
000000010002b5fc	mov	x0, #0x0
000000010002b600	bl	0x100029dbc
000000010002b604	adr	x1, #69709 ; literal pool for: "required boot task executable not found"
000000010002b608	nop
000000010002b60c	mov	x0, x19
000000010002b610	bl	0x10002b9a4
000000010002b614	mov	x0, x27
000000010002b618	bl	0x100031724 ; symbol stub for: _strerror
000000010002b61c	mov	w8, #0x7
000000010002b620	movk	w8, #0x1, lsl #16
000000010002b624	sub	w1, w8, #0x4
000000010002b628	stp	x27, x0, [sp, #0x8]
000000010002b62c	str	x19, [sp]
000000010002b630	adr	x2, #69705 ; literal pool for: "%s: posix_spawn(): %d: %s"
000000010002b634	nop
000000010002b638	mov	x0, #0x0
000000010002b63c	bl	0x100029dbc
000000010002b640	ldr	w8, [sp, #0x4c]
000000010002b644	cbz	w8, 0x10002b7a0
000000010002b648	mov	x0, x27
000000010002b64c	bl	0x100031724 ; symbol stub for: _strerror
000000010002b650	adr	x4, #69699 ; literal pool for: "posix_spawn: %d: %s"
000000010002b654	nop
000000010002b658	stp	x27, x0, [sp]
000000010002b65c	add	x0, sp, #0x70
000000010002b660	orr	w1, wzr, #0x40
000000010002b664	orr	w3, wzr, #0x40
000000010002b668	mov	w2, #0x0
000000010002b66c	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002b670	b	0x10002b91c
000000010002b674	and	w0, w8, #0x7f
000000010002b678	bl	0x10003179c ; symbol stub for: _strsignal
000000010002b67c	mov	w8, #0x7
000000010002b680	movk	w8, #0x1, lsl #16
000000010002b684	sub	w1, w8, #0x4
000000010002b688	stp	x19, x0, [sp]
000000010002b68c	adr	x2, #69469 ; literal pool for: "%s: signaled: %s"
000000010002b690	nop
000000010002b694	mov	x0, #0x0
000000010002b698	bl	0x100029dbc
000000010002b69c	adr	x8, #101852
000000010002b6a0	nop
000000010002b6a4	ldrb	w8, [x8]
000000010002b6a8	cbz	w8, 0x10002b6c0
000000010002b6ac	ldr	w8, [sp, #0x40]
000000010002b6b0	eor	w8, w8, #0x1
000000010002b6b4	tbnz	w8, #0x0, 0x10002b6c0
000000010002b6b8	str	wzr, [sp, #0x54]
000000010002b6bc	b	0x10002b78c
000000010002b6c0	ldr	w8, [sp, #0x54]
000000010002b6c4	mov	w9, #0xff7f
000000010002b6c8	tst	w8, w9
000000010002b6cc	b.eq	0x10002b78c
000000010002b6d0	and	w0, w8, #0x7f
000000010002b6d4	strb	wzr, [sp, #0x70]
000000010002b6d8	cmp	w0, #0x7f
000000010002b6dc	b.eq	0x10002b774
000000010002b6e0	cbnz	w0, 0x10002b750
000000010002b6e4	ubfx	w8, w8, #8, #8
000000010002b6e8	adr	x4, #69394 ; literal pool for: "exited: %d"
000000010002b6ec	nop
000000010002b6f0	str	x8, [sp]
000000010002b6f4	b	0x10002b760
000000010002b6f8	cbz	w22, 0x10002b69c
000000010002b6fc	str	x19, [sp]
000000010002b700	adr	x2, #69319 ; literal pool for: "%s: exited successfully, removing"
000000010002b704	nop
000000010002b708	mov	w1, #0x7
000000010002b70c	movk	w1, #0x1, lsl #16
000000010002b710	mov	x0, #0x0
000000010002b714	bl	0x100029dbc
000000010002b718	ldr	x0, [sp, #0x28]
000000010002b71c	bl	0x100031634 ; symbol stub for: _remove
000000010002b720	cmn	w0, #0x1
000000010002b724	b.ne	0x10002b69c
000000010002b728	bl	0x100030adc ; symbol stub for: ___error
000000010002b72c	ldr	w8, [x0]
000000010002b730	cmp	w8, #0x2
000000010002b734	b.eq	0x10002b69c
000000010002b738	bl	0x100030adc ; symbol stub for: ___error
000000010002b73c	ldrsw	x0, [x0]
000000010002b740	cbz	w0, 0x10002b69c
000000010002b744	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002b748	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002b74c	b	0x10002b69c
000000010002b750	bl	0x10003179c ; symbol stub for: _strsignal
000000010002b754	adr	x4, #69297 ; literal pool for: "signaled: %s"
000000010002b758	nop
000000010002b75c	str	x0, [sp]
000000010002b760	add	x0, sp, #0x70
000000010002b764	orr	w1, wzr, #0x40
000000010002b768	orr	w3, wzr, #0x40
000000010002b76c	mov	w2, #0x0
000000010002b770	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002b774	ldr	w8, [sp, #0x3c]
000000010002b778	cbnz	w8, 0x10002b91c
000000010002b77c	cbz	x21, 0x10002b78c
000000010002b780	mov	x1, x20
000000010002b784	mov	x0, x21
000000010002b788	bl	0x10002aff0
000000010002b78c	ldr	w8, [sp, #0x44]
000000010002b790	cbz	w8, 0x10002b7a0
000000010002b794	ldrh	w8, [sp, #0x54]
000000010002b798	tst	w8, #0xffffff7f
000000010002b79c	b.eq	0x10002b934
000000010002b7a0	add	x0, sp, #0x58
000000010002b7a4	bl	0x100031484 ; symbol stub for: _posix_spawn_file_actions_destroy
000000010002b7a8	cmn	w0, #0x1
000000010002b7ac	b.eq	0x10002b8dc
000000010002b7b0	add	x0, sp, #0x68
000000010002b7b4	bl	0x10003149c ; symbol stub for: _posix_spawnattr_destroy
000000010002b7b8	cmn	w0, #0x1
000000010002b7bc	b.eq	0x10002b8f0
000000010002b7c0	mov	x0, x26
000000010002b7c4	bl	0x100031010 ; symbol stub for: _free
000000010002b7c8	mov	x0, x25
000000010002b7cc	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010002b7d0	bl	0x100031220 ; symbol stub for: _mach_host_self
000000010002b7d4	ldr	w1, [sp, #0x48]
000000010002b7d8	bl	0x10002af74
000000010002b7dc	ldur	x8, [x29, #-0x58]
000000010002b7e0	nop
000000010002b7e4	ldr	x9, #0x14834 ; literal pool symbol address: ___stack_chk_guard
000000010002b7e8	ldr	x9, [x9]
000000010002b7ec	cmp	x9, x8
000000010002b7f0	b.ne	0x10002b814
000000010002b7f4	ldp	x29, x30, [sp, #0x180]
000000010002b7f8	ldp	x20, x19, [sp, #0x170]
000000010002b7fc	ldp	x22, x21, [sp, #0x160]
000000010002b800	ldp	x24, x23, [sp, #0x150]
000000010002b804	ldp	x26, x25, [sp, #0x140]
000000010002b808	ldp	x28, x27, [sp, #0x130]
000000010002b80c	add	sp, sp, #0x190
000000010002b810	ret
000000010002b814	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002b818	adr	x0, #67693 ; literal pool for: "boot task dictionary is not populated"
000000010002b81c	nop
000000010002b820	bl	0x100028f84
000000010002b824	adr	x0, #67719 ; literal pool for: "boot task is not a dictionary"
000000010002b828	nop
000000010002b82c	bl	0x100028f84
000000010002b830	adr	x0, #67820 ; literal pool for: "boot task has no program"
000000010002b834	nop
000000010002b838	bl	0x100028f84
000000010002b83c	sxtw	x0, w0
000000010002b840	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b844	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b848	brk	#0x1
000000010002b84c	sxtw	x0, w0
000000010002b850	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b854	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b858	brk	#0x1
000000010002b85c	sxtw	x0, w0
000000010002b860	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b864	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b868	brk	#0x1
000000010002b86c	sxtw	x0, w0
000000010002b870	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b874	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b878	brk	#0x1
000000010002b87c	sxtw	x0, w0
000000010002b880	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b884	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b888	brk	#0x1
000000010002b88c	bl	0x100030adc ; symbol stub for: ___error
000000010002b890	ldrsw	x0, [x0]
000000010002b894	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b898	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b89c	brk	#0x1
000000010002b8a0	bl	0x100030adc ; symbol stub for: ___error
000000010002b8a4	ldrsw	x0, [x0]
000000010002b8a8	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b8ac	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b8b0	brk	#0x1
000000010002b8b4	bl	0x100030adc ; symbol stub for: ___error
000000010002b8b8	ldrsw	x0, [x0]
000000010002b8bc	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b8c0	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b8c4	brk	#0x1
000000010002b8c8	bl	0x100030adc ; symbol stub for: ___error
000000010002b8cc	ldrsw	x0, [x0]
000000010002b8d0	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b8d4	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b8d8	brk	#0x1
000000010002b8dc	bl	0x100030adc ; symbol stub for: ___error
000000010002b8e0	ldrsw	x0, [x0]
000000010002b8e4	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b8e8	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b8ec	brk	#0x1
000000010002b8f0	bl	0x100030adc ; symbol stub for: ___error
000000010002b8f4	ldrsw	x0, [x0]
000000010002b8f8	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b8fc	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b900	brk	#0x1
000000010002b904	adr	x0, #67633 ; literal pool for: "boot task argument vector is not an array"
000000010002b908	nop
000000010002b90c	bl	0x100028f84
000000010002b910	adr	x0, #68571 ; literal pool for: "boot task is not a platform binary"
000000010002b914	nop
000000010002b918	bl	0x100028f84
000000010002b91c	add	x1, sp, #0x70
000000010002b920	mov	x0, x19
000000010002b924	bl	0x10002b9a4
000000010002b928	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b92c	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b930	brk	#0x1
000000010002b934	str	x19, [sp]
000000010002b938	adr	x2, #68826 ; literal pool for: "%s: rebooting after success"
000000010002b93c	nop
000000010002b940	mov	w1, #0x7
000000010002b944	movk	w1, #0x1, lsl #16
000000010002b948	mov	x0, #0x0
000000010002b94c	bl	0x100029dbc
000000010002b950	orr	w0, wzr, #0x1
000000010002b954	mov	w1, #0x0
000000010002b958	bl	0x10002ba34
000000010002b95c	stp	x19, x24, [sp]
000000010002b960	adr	x0, #68526 ; literal pool for: "failed to get the code signing identity for a boot-task (%s, %s)"
000000010002b964	nop
000000010002b968	bl	0x10000d72c
000000010002b96c	bl	0x100028f84
000000010002b970	mov	x0, #0x0
000000010002b974	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b978	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b97c	brk	#0x1
000000010002b980	stp	x23, x27, [sp, #0x10]
000000010002b984	stp	x19, x24, [sp]
000000010002b988	adr	x0, #68551 ; literal pool for: "code signing identity mismatch for a boot-task (%s, %s, %s, %s)"
000000010002b98c	nop
000000010002b990	bl	0x10000d72c
000000010002b994	bl	0x100028f84
000000010002b998	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002b99c	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002b9a0	brk	#0x1
000000010002b9a4	sub	sp, sp, #0x70
000000010002b9a8	stp	x20, x19, [sp, #0x50]
000000010002b9ac	stp	x29, x30, [sp, #0x60]
000000010002b9b0	add	x29, sp, #0x60
000000010002b9b4	mov	x19, x0
000000010002b9b8	cbnz	x1, 0x10002b9cc
000000010002b9bc	adr	x4, #67518 ; literal pool for: "boot task failure: %s"
000000010002b9c0	nop
000000010002b9c4	str	x19, [sp]
000000010002b9c8	b	0x10002b9d8
000000010002b9cc	adr	x4, #67475 ; literal pool for: "boot task failure: %s - %s"
000000010002b9d0	nop
000000010002b9d4	stp	x19, x1, [sp]
000000010002b9d8	add	x0, sp, #0x10
000000010002b9dc	orr	w1, wzr, #0x40
000000010002b9e0	orr	w3, wzr, #0x40
000000010002b9e4	mov	w2, #0x0
000000010002b9e8	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002b9ec	add	x0, sp, #0x10
000000010002b9f0	bl	0x100031598 ; symbol stub for: _pthread_setname_np
000000010002b9f4	str	x19, [sp]
000000010002b9f8	adr	x2, #67480 ; literal pool for: "Boot task failed: %s"
000000010002b9fc	nop
000000010002ba00	orr	w1, wzr, #0x10000
000000010002ba04	mov	x0, #0x0
000000010002ba08	bl	0x100029dbc
000000010002ba0c	adr	x2, #67481 ; literal pool for: "Shutting down in 3 seconds."
000000010002ba10	nop
000000010002ba14	orr	w1, wzr, #0x10000
000000010002ba18	mov	x0, #0x0
000000010002ba1c	bl	0x100029dbc
000000010002ba20	orr	w0, wzr, #0x3
000000010002ba24	bl	0x1000316b8 ; symbol stub for: _sleep
000000010002ba28	orr	w0, wzr, #0x1
000000010002ba2c	orr	w1, wzr, #0x8
000000010002ba30	bl	0x10002ba34
000000010002ba34	stp	x20, x19, [sp, #-0x20]!
000000010002ba38	stp	x29, x30, [sp, #0x10]
000000010002ba3c	add	x29, sp, #0x10
000000010002ba40	sub	sp, sp, #0x430
000000010002ba44	mov	x19, x1
000000010002ba48	cmp	w0, #0x3
000000010002ba4c	b.eq	0x10002ba8c
000000010002ba50	cmp	w0, #0x2
000000010002ba54	b.eq	0x10002bab0
000000010002ba58	cmp	w0, #0x1
000000010002ba5c	b.ne	0x10002bab4
000000010002ba60	mov	w0, #0x3c
000000010002ba64	movk	w0, #0x2200, lsl #16
000000010002ba68	mov	x1, #0x0
000000010002ba6c	bl	0x10000ccd0
000000010002ba70	mov	x0, x19
000000010002ba74	bl	0x100031628 ; symbol stub for: _reboot
000000010002ba78	bl	0x100030adc ; symbol stub for: ___error
000000010002ba7c	ldr	w8, [x0]
000000010002ba80	cmp	w8, #0x10
000000010002ba84	b.ne	0x10002bb34
000000010002ba88	bl	0x10002bbac
000000010002ba8c	mov	w0, #0x3c
000000010002ba90	movk	w0, #0x2200, lsl #16
000000010002ba94	orr	w1, wzr, #0x1
000000010002ba98	bl	0x10000ccd0
000000010002ba9c	adr	x0, #67365 ; literal pool for: "recovery-mode"
000000010002baa0	nop
000000010002baa4	mov	w1, #0x0
000000010002baa8	bl	0x10002aff0
000000010002baac	brk	#0x1
000000010002bab0	bl	0x100028fac
000000010002bab4	mov	w0, #0x3c
000000010002bab8	movk	w0, #0x2200, lsl #16
000000010002babc	orr	w1, wzr, #0x2
000000010002bac0	bl	0x10000ccd0
000000010002bac4	bl	0x100030aac ; symbol stub for: __NSGetArgv
000000010002bac8	ldr	x8, [x0]
000000010002bacc	ldr	x8, [x8]
000000010002bad0	str	x8, [sp, #0x10]
000000010002bad4	adr	x8, #68576 ; literal pool for: "-s"
000000010002bad8	nop
000000010002badc	tst	w19, #0x2
000000010002bae0	csel	x8, xzr, x8, eq
000000010002bae4	stp	x8, xzr, [sp, #0x18]
000000010002bae8	orr	w8, wzr, #0x400
000000010002baec	str	w8, [sp, #0xc]
000000010002baf0	add	x0, sp, #0x28
000000010002baf4	add	x1, sp, #0xc
000000010002baf8	bl	0x100030ac4 ; symbol stub for: __NSGetExecutablePath
000000010002bafc	str	wzr, [sp, #0x8]
000000010002bb00	adr	x0, #68535 ; literal pool for: "XPC_USERSPACE_REBOOTED"
000000010002bb04	nop
000000010002bb08	adr	x1, #40834 ; literal pool for: "1"
000000010002bb0c	nop
000000010002bb10	orr	w2, wzr, #0x1
000000010002bb14	bl	0x100031664 ; symbol stub for: _setenv
000000010002bb18	cmn	w0, #0x1
000000010002bb1c	b.ne	0x10002bb48
000000010002bb20	bl	0x100030adc ; symbol stub for: ___error
000000010002bb24	ldrsw	x0, [x0]
000000010002bb28	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002bb2c	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002bb30	brk	#0x1
000000010002bb34	bl	0x100030adc ; symbol stub for: ___error
000000010002bb38	ldrsw	x0, [x0]
000000010002bb3c	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002bb40	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002bb44	brk	#0x1
000000010002bb48	sub	x0, x29, #0x18
000000010002bb4c	bl	0x1000314a8 ; symbol stub for: _posix_spawnattr_init
000000010002bb50	cbz	w0, 0x10002bb60
000000010002bb54	sxtw	x0, w0
000000010002bb58	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002bb5c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002bb60	mov	w1, #0x4040
000000010002bb64	sub	x0, x29, #0x18
000000010002bb68	bl	0x100031508 ; symbol stub for: _posix_spawnattr_setflags
000000010002bb6c	cbz	w0, 0x10002bb7c
000000010002bb70	sxtw	x0, w0
000000010002bb74	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002bb78	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002bb7c	bl	0x100030ab8 ; symbol stub for: __NSGetEnviron
000000010002bb80	ldr	x5, [x0]
000000010002bb84	add	x0, sp, #0x8
000000010002bb88	add	x1, sp, #0x28
000000010002bb8c	sub	x3, x29, #0x18
000000010002bb90	add	x4, sp, #0x10
000000010002bb94	mov	x2, #0x0
000000010002bb98	bl	0x10003146c ; symbol stub for: _posix_spawn
000000010002bb9c	sxtw	x0, w0
000000010002bba0	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002bba4	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002bba8	brk	#0x1
000000010002bbac	stp	x29, x30, [sp, #-0x10]!
000000010002bbb0	mov	x29, sp
000000010002bbb4	bl	0x100031454 ; symbol stub for: _pause
000000010002bbb8	b	0x10002bbb4
000000010002bbbc	sub	sp, sp, #0x40
000000010002bbc0	stp	x22, x21, [sp, #0x10]
000000010002bbc4	stp	x20, x19, [sp, #0x20]
000000010002bbc8	stp	x29, x30, [sp, #0x30]
000000010002bbcc	add	x29, sp, #0x30
000000010002bbd0	adr	x19, #100534
000000010002bbd4	nop
000000010002bbd8	ldrb	w8, [x19]
000000010002bbdc	cbz	w8, 0x10002bc00
000000010002bbe0	mov	w0, #0x0
000000010002bbe4	bl	0x100031844 ; symbol stub for: _usrctl
000000010002bbe8	cmn	w0, #0x1
000000010002bbec	b.ne	0x10002bc00
000000010002bbf0	bl	0x100030adc ; symbol stub for: ___error
000000010002bbf4	ldrsw	x0, [x0]
000000010002bbf8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002bbfc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002bc00	bl	0x10002bdd8
000000010002bc04	cbz	w0, 0x10002bc18
000000010002bc08	adr	x0, #67136 ; literal pool for: "fsck"
000000010002bc0c	nop
000000010002bc10	mov	w1, #0x0
000000010002bc14	bl	0x10002aff0
000000010002bc18	adr	x0, #67125 ; literal pool for: "data-protection"
000000010002bc1c	nop
000000010002bc20	mov	w1, #0x0
000000010002bc24	bl	0x10002aff0
000000010002bc28	adr	x0, #67125 ; literal pool for: "finish-obliteration"
000000010002bc2c	nop
000000010002bc30	mov	w1, #0x0
000000010002bc34	bl	0x10002aff0
000000010002bc38	bl	0x10002bdd8
000000010002bc3c	cbz	w0, 0x10002bc50
000000010002bc40	adr	x0, #67121 ; literal pool for: "fsck-all"
000000010002bc44	nop
000000010002bc48	mov	w1, #0x0
000000010002bc4c	bl	0x10002aff0
000000010002bc50	adr	x0, #67114 ; literal pool for: "restore-datapartition"
000000010002bc54	nop
000000010002bc58	mov	w1, #0x0
000000010002bc5c	bl	0x10002aff0
000000010002bc60	adr	x0, #67120 ; literal pool for: "fips"
000000010002bc64	nop
000000010002bc68	mov	w1, #0x0
000000010002bc6c	bl	0x10002aff0
000000010002bc70	adr	x0, #67109 ; literal pool for: "fstab"
000000010002bc74	nop
000000010002bc78	mov	w1, #0x0
000000010002bc7c	bl	0x10002aff0
000000010002bc80	adr	x0, #67099 ; literal pool for: "keybag"
000000010002bc84	nop
000000010002bc88	mov	w1, #0x0
000000010002bc8c	bl	0x10002aff0
000000010002bc90	bl	0x1000299dc
000000010002bc94	adr	x21, #100325
000000010002bc98	nop
000000010002bc9c	ldrb	w8, [x21]
000000010002bca0	cbnz	w8, 0x10002bcd8
000000010002bca4	adr	x0, #67070 ; literal pool for: "/tmp/"
000000010002bca8	nop
000000010002bcac	mov	x1, #0x0
000000010002bcb0	bl	0x10002be5c
000000010002bcb4	adr	x0, #67060 ; literal pool for: "/var/run/"
000000010002bcb8	nop
000000010002bcbc	mov	x1, #0x0
000000010002bcc0	bl	0x10002be5c
000000010002bcc4	bl	0x100028fa8
000000010002bcc8	adr	x0, #67050 ; literal pool for: "xpcroleaccountd"
000000010002bccc	nop
000000010002bcd0	mov	w1, #0x0
000000010002bcd4	bl	0x10002aff0
000000010002bcd8	mov	w20, #0x3
000000010002bcdc	movk	w20, #0x1, lsl #16
000000010002bce0	ldrb	w8, [x19]
000000010002bce4	cbnz	w8, 0x10002bd18
000000010002bce8	bl	0x1000313b8 ; symbol stub for: _ne_session_initialize_necp_drop_all
000000010002bcec	mov	x19, x0
000000010002bcf0	cbz	w19, 0x10002bd18
000000010002bcf4	mov	x0, x19
000000010002bcf8	bl	0x100031724 ; symbol stub for: _strerror
000000010002bcfc	stp	x19, x0, [sp]
000000010002bd00	adr	x2, #67223 ; literal pool for: "Could not opt into Always-On VPN: %d: %s"
000000010002bd04	nop
000000010002bd08	mov	w1, #0x3
000000010002bd0c	movk	w1, #0x1, lsl #16
000000010002bd10	mov	x0, #0x0
000000010002bd14	bl	0x100029dbc
000000010002bd18	adr	x0, #66986 ; literal pool for: "fud"
000000010002bd1c	nop
000000010002bd20	mov	w1, #0x0
000000010002bd24	bl	0x10002aff0
000000010002bd28	adr	x0, #66974 ; literal pool for: "tzinit"
000000010002bd2c	nop
000000010002bd30	mov	w1, #0x0
000000010002bd34	bl	0x10002aff0
000000010002bd38	adr	x0, #66965 ; literal pool for: "finish-restore"
000000010002bd3c	nop
000000010002bd40	mov	w1, #0x0
000000010002bd44	bl	0x10002aff0
000000010002bd48	bl	0x1000301f8
000000010002bd4c	adr	x0, #66960 ; literal pool for: "sysstatuscheck"
000000010002bd50	nop
000000010002bd54	mov	w1, #0x0
000000010002bd58	bl	0x10002aff0
000000010002bd5c	ldrb	w8, [x21]
000000010002bd60	cbnz	w8, 0x10002bd9c
000000010002bd64	mov	w8, #0x1b6
000000010002bd68	str	x8, [sp]
000000010002bd6c	adr	x0, #66943 ; literal pool for: "/var/run/utmpx"
000000010002bd70	nop
000000010002bd74	orr	w1, wzr, #0x200
000000010002bd78	bl	0x1000313f4 ; symbol stub for: _open
000000010002bd7c	cmn	w0, #0x1
000000010002bd80	b.eq	0x10002bd90
000000010002bd84	bl	0x100030c74 ; symbol stub for: _close
000000010002bd88	cmn	w0, #0x1
000000010002bd8c	b.eq	0x10002bdc4
000000010002bd90	adr	x0, #66922 ; literal pool for: "/etc/nologin"
000000010002bd94	nop
000000010002bd98	bl	0x100031634 ; symbol stub for: _remove
000000010002bd9c	add	w1, w20, #0x2
000000010002bda0	adr	x2, #66919 ; literal pool for: "Early boot complete. Continuing system boot."
000000010002bda4	nop
000000010002bda8	mov	x0, #0x0
000000010002bdac	bl	0x100029dbc
000000010002bdb0	ldp	x29, x30, [sp, #0x30]
000000010002bdb4	ldp	x20, x19, [sp, #0x20]
000000010002bdb8	ldp	x22, x21, [sp, #0x10]
000000010002bdbc	add	sp, sp, #0x40
000000010002bdc0	b	0x10001d500
000000010002bdc4	bl	0x100030adc ; symbol stub for: ___error
000000010002bdc8	ldrsw	x0, [x0]
000000010002bdcc	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002bdd0	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002bdd4	brk	#0x1
000000010002bdd8	stp	x28, x27, [sp, #-0x20]!
000000010002bddc	stp	x29, x30, [sp, #0x10]
000000010002bde0	add	x29, sp, #0x10
000000010002bde4	sub	sp, sp, #0x880
000000010002bde8	nop
000000010002bdec	ldr	x8, #0x1422c ; literal pool symbol address: ___stack_chk_guard
000000010002bdf0	ldr	x8, [x8]
000000010002bdf4	stur	x8, [x29, #-0x18]
000000010002bdf8	adr	x0, #36043 ; literal pool for: "/"
000000010002bdfc	nop
000000010002be00	mov	x1, sp
000000010002be04	bl	0x1000316dc ; symbol stub for: _statfs
000000010002be08	cmn	w0, #0x1
000000010002be0c	b.eq	0x10002be1c
000000010002be10	ldrb	w8, [sp, #0x40]
000000010002be14	and	w0, w8, #0x1
000000010002be18	b	0x10002be30
000000010002be1c	bl	0x100030adc ; symbol stub for: ___error
000000010002be20	ldrsw	x0, [x0]
000000010002be24	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002be28	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002be2c	mov	w0, #0x0
000000010002be30	ldur	x8, [x29, #-0x18]
000000010002be34	nop
000000010002be38	ldr	x9, #0x141e0 ; literal pool symbol address: ___stack_chk_guard
000000010002be3c	ldr	x9, [x9]
000000010002be40	cmp	x9, x8
000000010002be44	b.ne	0x10002be58
000000010002be48	add	sp, sp, #0x880
000000010002be4c	ldp	x29, x30, [sp, #0x10]
000000010002be50	ldp	x28, x27, [sp], #0x20
000000010002be54	ret
000000010002be58	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002be5c	stp	x28, x27, [sp, #-0x60]!
000000010002be60	stp	x26, x25, [sp, #0x10]
000000010002be64	stp	x24, x23, [sp, #0x20]
000000010002be68	stp	x22, x21, [sp, #0x30]
000000010002be6c	stp	x20, x19, [sp, #0x40]
000000010002be70	stp	x29, x30, [sp, #0x50]
000000010002be74	add	x29, sp, #0x50
000000010002be78	sub	sp, sp, #0x550
000000010002be7c	mov	x21, x1
000000010002be80	mov	x20, x0
000000010002be84	nop
000000010002be88	ldr	x8, #0x14190 ; literal pool symbol address: ___stack_chk_guard
000000010002be8c	ldr	x8, [x8]
000000010002be90	stur	x8, [x29, #-0x58]
000000010002be94	cbnz	x21, 0x10002beb0
000000010002be98	add	x21, sp, #0xb8
000000010002be9c	add	x1, sp, #0xb8
000000010002bea0	mov	x0, x20
000000010002bea4	bl	0x100031208 ; symbol stub for: _lstat
000000010002bea8	cmn	w0, #0x1
000000010002beac	b.eq	0x10002c0f8
000000010002beb0	adr	x0, #38542 ; literal pool for: "."
000000010002beb4	nop
000000010002beb8	mov	w1, #0x0
000000010002bebc	bl	0x1000313f4 ; symbol stub for: _open
000000010002bec0	mov	x19, x0
000000010002bec4	cmn	w19, #0x1
000000010002bec8	b.eq	0x10002c15c
000000010002becc	mov	x0, x20
000000010002bed0	bl	0x100030c44 ; symbol stub for: _chdir
000000010002bed4	cmn	w0, #0x1
000000010002bed8	b.eq	0x10002c0ec
000000010002bedc	adr	x0, #38498 ; literal pool for: "."
000000010002bee0	nop
000000010002bee4	bl	0x100031400 ; symbol stub for: _opendir
000000010002bee8	mov	x22, x0
000000010002beec	cbz	x22, 0x10002c118
000000010002bef0	mov	x0, x22
000000010002bef4	bl	0x100031610 ; symbol stub for: _readdir
000000010002bef8	cbz	x0, 0x10002c0dc
000000010002befc	adr	x23, #38466 ; literal pool for: "."
000000010002bf00	nop
000000010002bf04	adr	x24, #66608 ; literal pool for: ".."
000000010002bf08	nop
000000010002bf0c	adr	x25, #66460 ; literal pool for: "/var/run/"
000000010002bf10	nop
000000010002bf14	adr	x27, #66595 ; literal pool for: "%s%s"
000000010002bf18	nop
000000010002bf1c	adr	x26, #39283 ; literal pool for: "/var/run/syslog"
000000010002bf20	nop
000000010002bf24	add	x28, x0, #0x15
000000010002bf28	mov	x0, x28
000000010002bf2c	mov	x1, x23
000000010002bf30	bl	0x100031700 ; symbol stub for: _strcmp
000000010002bf34	cbz	w0, 0x10002c0d0
000000010002bf38	mov	x0, x28
000000010002bf3c	mov	x1, x24
000000010002bf40	bl	0x100031700 ; symbol stub for: _strcmp
000000010002bf44	cbz	w0, 0x10002c0d0
000000010002bf48	add	x1, sp, #0x28
000000010002bf4c	mov	x0, x28
000000010002bf50	bl	0x100031208 ; symbol stub for: _lstat
000000010002bf54	cmn	w0, #0x1
000000010002bf58	b.eq	0x10002c058
000000010002bf5c	mov	x0, x20
000000010002bf60	mov	x1, x25
000000010002bf64	bl	0x100031700 ; symbol stub for: _strcmp
000000010002bf68	cbnz	w0, 0x10002bf98
000000010002bf6c	stp	x25, x28, [sp]
000000010002bf70	add	x0, sp, #0x148
000000010002bf74	orr	w1, wzr, #0x400
000000010002bf78	orr	w3, wzr, #0x400
000000010002bf7c	mov	w2, #0x0
000000010002bf80	mov	x4, x27
000000010002bf84	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002bf88	add	x0, sp, #0x148
000000010002bf8c	mov	x1, x26
000000010002bf90	bl	0x100031700 ; symbol stub for: _strcmp
000000010002bf94	cbz	w0, 0x10002c0d0
000000010002bf98	ldr	w8, [x21]
000000010002bf9c	ldr	w9, [sp, #0x28]
000000010002bfa0	cmp	w8, w9
000000010002bfa4	b.eq	0x10002bff0
000000010002bfa8	orr	w1, wzr, #0x80000
000000010002bfac	mov	x0, x28
000000010002bfb0	bl	0x100031838 ; symbol stub for: _unmount
000000010002bfb4	cmn	w0, #0x1
000000010002bfb8	b.ne	0x10002bfcc
000000010002bfbc	bl	0x100030adc ; symbol stub for: ___error
000000010002bfc0	ldrsw	x0, [x0]
000000010002bfc4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002bfc8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002bfcc	add	x1, sp, #0x28
000000010002bfd0	mov	x0, x28
000000010002bfd4	bl	0x100031208 ; symbol stub for: _lstat
000000010002bfd8	cmn	w0, #0x1
000000010002bfdc	b.eq	0x10002c058
000000010002bfe0	ldr	w8, [x21]
000000010002bfe4	ldr	w9, [sp, #0x28]
000000010002bfe8	cmp	w8, w9
000000010002bfec	b.eq	0x10002c0d0
000000010002bff0	ldrh	w8, [sp, #0x2c]
000000010002bff4	and	w8, w8, #0xf000
000000010002bff8	cmp	w8, #0x4, lsl #12
000000010002bffc	b.ne	0x10002c00c
000000010002c000	add	x1, sp, #0x28
000000010002c004	mov	x0, x28
000000010002c008	bl	0x10002be5c
000000010002c00c	mov	w1, #0x0
000000010002c010	mov	x0, x28
000000010002c014	bl	0x1000311e4 ; symbol stub for: _lchflags
000000010002c018	cmn	w0, #0x1
000000010002c01c	b.ne	0x10002c03c
000000010002c020	adrp	x8, 23 ; 0x100043000
000000010002c024	ldrb	w8, [x8, #0xeb8]
000000010002c028	cbnz	w8, 0x10002c03c
000000010002c02c	bl	0x100030adc ; symbol stub for: ___error
000000010002c030	ldrsw	x0, [x0]
000000010002c034	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c038	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c03c	mov	x0, x28
000000010002c040	bl	0x100031634 ; symbol stub for: _remove
000000010002c044	cmn	w0, #0x1
000000010002c048	b.eq	0x10002c06c
000000010002c04c	mov	x0, x22
000000010002c050	bl	0x10003164c ; symbol stub for: _rewinddir
000000010002c054	b	0x10002c0d0
000000010002c058	bl	0x100030adc ; symbol stub for: ___error
000000010002c05c	ldrsw	x0, [x0]
000000010002c060	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c064	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c068	b	0x10002c0d0
000000010002c06c	adrp	x8, 23 ; 0x100043000
000000010002c070	ldrb	w8, [x8, #0xeb8]
000000010002c074	tbnz	w8, #0x0, 0x10002c0c4
000000010002c078	bl	0x100030adc ; symbol stub for: ___error
000000010002c07c	mov	x25, x26
000000010002c080	mov	x26, x27
000000010002c084	ldr	w27, [x0]
000000010002c088	bl	0x100030adc ; symbol stub for: ___error
000000010002c08c	ldr	w0, [x0]
000000010002c090	bl	0x100031724 ; symbol stub for: _strerror
000000010002c094	stp	x27, x0, [sp, #0x8]
000000010002c098	mov	w1, #0x3
000000010002c09c	movk	w1, #0x1, lsl #16
000000010002c0a0	str	x28, [sp]
000000010002c0a4	mov	x27, x26
000000010002c0a8	mov	x26, x25
000000010002c0ac	adr	x25, #66044 ; literal pool for: "/var/run/"
000000010002c0b0	nop
000000010002c0b4	mov	x0, #0x0
000000010002c0b8	adr	x2, #66180 ; literal pool for: "Failed to remove file or directory: name = %s, error = %d: %s. Further logging suppressed."
000000010002c0bc	nop
000000010002c0c0	bl	0x100029dbc
000000010002c0c4	adrp	x8, 23 ; 0x100043000
000000010002c0c8	orr	w9, wzr, #0x1
000000010002c0cc	strb	w9, [x8, #0xeb8]
000000010002c0d0	mov	x0, x22
000000010002c0d4	bl	0x100031610 ; symbol stub for: _readdir
000000010002c0d8	cbnz	x0, 0x10002bf24
000000010002c0dc	mov	x0, x22
000000010002c0e0	bl	0x100030c80 ; symbol stub for: _closedir
000000010002c0e4	cmn	w0, #0x1
000000010002c0e8	b.ne	0x10002c12c
000000010002c0ec	bl	0x100030adc ; symbol stub for: ___error
000000010002c0f0	ldrsw	x0, [x0]
000000010002c0f4	b	0x10002c124
000000010002c0f8	bl	0x100030adc ; symbol stub for: ___error
000000010002c0fc	ldr	w8, [x0]
000000010002c100	cmp	w8, #0x2
000000010002c104	b.eq	0x10002c16c
000000010002c108	bl	0x100030adc ; symbol stub for: ___error
000000010002c10c	ldrsw	x0, [x0]
000000010002c110	cbnz	w0, 0x10002c164
000000010002c114	b	0x10002c16c
000000010002c118	bl	0x100030adc ; symbol stub for: ___error
000000010002c11c	ldrsw	x0, [x0]
000000010002c120	cbz	w0, 0x10002c12c
000000010002c124	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c128	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c12c	mov	x0, x19
000000010002c130	bl	0x100030f98 ; symbol stub for: _fchdir
000000010002c134	cmn	w0, #0x1
000000010002c138	b.ne	0x10002c14c
000000010002c13c	bl	0x100030adc ; symbol stub for: ___error
000000010002c140	ldrsw	x0, [x0]
000000010002c144	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c148	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c14c	mov	x0, x19
000000010002c150	bl	0x100030c74 ; symbol stub for: _close
000000010002c154	cmn	w0, #0x1
000000010002c158	b.ne	0x10002c16c
000000010002c15c	bl	0x100030adc ; symbol stub for: ___error
000000010002c160	ldrsw	x0, [x0]
000000010002c164	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c168	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c16c	ldur	x8, [x29, #-0x58]
000000010002c170	nop
000000010002c174	ldr	x9, #0x13ea4 ; literal pool symbol address: ___stack_chk_guard
000000010002c178	ldr	x9, [x9]
000000010002c17c	cmp	x9, x8
000000010002c180	b.ne	0x10002c1a4
000000010002c184	add	sp, sp, #0x550
000000010002c188	ldp	x29, x30, [sp, #0x50]
000000010002c18c	ldp	x20, x19, [sp, #0x40]
000000010002c190	ldp	x22, x21, [sp, #0x30]
000000010002c194	ldp	x24, x23, [sp, #0x20]
000000010002c198	ldp	x26, x25, [sp, #0x10]
000000010002c19c	ldp	x28, x27, [sp], #0x60
000000010002c1a0	ret
000000010002c1a4	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002c1a8	ldr	x0, [x1, #0x18]
000000010002c1ac	ldr	x1, [x2, #0x18]
000000010002c1b0	b	0x100031700 ; symbol stub for: _strcmp
000000010002c1b4	ldr	x0, [x1, #0x18]
000000010002c1b8	mov	x1, x2
000000010002c1bc	b	0x100031700 ; symbol stub for: _strcmp
000000010002c1c0	stp	x22, x21, [sp, #-0x30]!
000000010002c1c4	stp	x20, x19, [sp, #0x10]
000000010002c1c8	stp	x29, x30, [sp, #0x20]
000000010002c1cc	add	x29, sp, #0x20
000000010002c1d0	mov	x20, x2
000000010002c1d4	mov	x21, x1
000000010002c1d8	mov	x19, x0
000000010002c1dc	ldr	w8, [x19, #0x10]
000000010002c1e0	mov	w9, #0x1375
000000010002c1e4	cmp	w8, w9
000000010002c1e8	b.ne	0x10002c270
000000010002c1ec	ldr	x0, [x19, #0x8]
000000010002c1f0	mov	x1, x21
000000010002c1f4	bl	0x1000315c8 ; symbol stub for: _rb_tree_find_node
000000010002c1f8	mov	x22, x0
000000010002c1fc	cbz	x22, 0x10002c224
000000010002c200	ldr	x0, [x19, #0x8]
000000010002c204	mov	x1, x22
000000010002c208	bl	0x1000315f8 ; symbol stub for: _rb_tree_remove_node
000000010002c20c	ldr	x0, [x22, #0x20]
000000010002c210	bl	0x10003140c ; symbol stub for: _os_release
000000010002c214	ldr	x0, [x22, #0x18]
000000010002c218	bl	0x100031010 ; symbol stub for: _free
000000010002c21c	mov	x0, x22
000000010002c220	bl	0x100031010 ; symbol stub for: _free
000000010002c224	cbz	x20, 0x10002c260
000000010002c228	mov	w0, #0x28
000000010002c22c	bl	0x100031304 ; symbol stub for: _malloc
000000010002c230	mov	x22, x0
000000010002c234	mov	x0, x21
000000010002c238	bl	0x100031718 ; symbol stub for: _strdup
000000010002c23c	str	x0, [x22, #0x18]
000000010002c240	mov	x0, x20
000000010002c244	bl	0x100031418 ; symbol stub for: _os_retain
000000010002c248	str	x0, [x22, #0x20]
000000010002c24c	ldr	x0, [x19, #0x8]
000000010002c250	mov	x1, x22
000000010002c254	bl	0x1000315e0 ; symbol stub for: _rb_tree_insert_node
000000010002c258	cmp	x0, x22
000000010002c25c	b.ne	0x10002c274
000000010002c260	ldp	x29, x30, [sp, #0x20]
000000010002c264	ldp	x20, x19, [sp, #0x10]
000000010002c268	ldp	x22, x21, [sp], #0x30
000000010002c26c	ret
000000010002c270	brk	#0x1
000000010002c274	mov	x0, #0x0
000000010002c278	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002c27c	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002c280	brk	#0x1
000000010002c284	ldr	w8, [x0, #0x10]
000000010002c288	mov	w9, #0x1375
000000010002c28c	cmp	w8, w9
000000010002c290	b.ne	0x10002c2b4
000000010002c294	stp	x29, x30, [sp, #-0x10]!
000000010002c298	mov	x29, sp
000000010002c29c	ldr	x0, [x0, #0x8]
000000010002c2a0	bl	0x1000315c8 ; symbol stub for: _rb_tree_find_node
000000010002c2a4	ldp	x29, x30, [sp], #0x10
000000010002c2a8	cbz	x0, 0x10002c2b0
000000010002c2ac	ldr	x0, [x0, #0x20]
000000010002c2b0	ret
000000010002c2b4	brk	#0x1
000000010002c2b8	stp	x22, x21, [sp, #-0x30]!
000000010002c2bc	stp	x20, x19, [sp, #0x10]
000000010002c2c0	stp	x29, x30, [sp, #0x20]
000000010002c2c4	add	x29, sp, #0x20
000000010002c2c8	mov	x19, x2
000000010002c2cc	mov	x20, x1
000000010002c2d0	mov	x21, x0
000000010002c2d4	ldr	w8, [x21, #0x10]
000000010002c2d8	mov	w9, #0x1375
000000010002c2dc	cmp	w8, w9
000000010002c2e0	b.ne	0x10002c328
000000010002c2e4	ldr	x0, [x21, #0x8]
000000010002c2e8	orr	w2, wzr, #0x1
000000010002c2ec	mov	x1, #0x0
000000010002c2f0	b	0x10002c30c
000000010002c2f4	ldp	x0, x1, [x22, #0x18]
000000010002c2f8	mov	x2, x20
000000010002c2fc	blr	x19
000000010002c300	ldr	x0, [x21, #0x8]
000000010002c304	orr	w2, wzr, #0x1
000000010002c308	mov	x1, x22
000000010002c30c	bl	0x1000315ec ; symbol stub for: _rb_tree_iterate
000000010002c310	mov	x22, x0
000000010002c314	cbnz	x22, 0x10002c2f4
000000010002c318	ldp	x29, x30, [sp, #0x20]
000000010002c31c	ldp	x20, x19, [sp, #0x10]
000000010002c320	ldp	x22, x21, [sp], #0x30
000000010002c324	ret
000000010002c328	brk	#0x1
000000010002c32c	stp	x22, x21, [sp, #-0x30]!
000000010002c330	stp	x20, x19, [sp, #0x10]
000000010002c334	stp	x29, x30, [sp, #0x20]
000000010002c338	add	x29, sp, #0x20
000000010002c33c	mov	x19, x1
000000010002c340	mov	x20, x0
000000010002c344	ldr	w8, [x20, #0x10]
000000010002c348	mov	w9, #0x1375
000000010002c34c	cmp	w8, w9
000000010002c350	b.ne	0x10002c39c
000000010002c354	ldr	x0, [x20, #0x8]
000000010002c358	orr	w2, wzr, #0x1
000000010002c35c	mov	x1, #0x0
000000010002c360	b	0x10002c380
000000010002c364	ldp	x1, x2, [x21, #0x18]
000000010002c368	ldr	x8, [x19, #0x10]
000000010002c36c	mov	x0, x19
000000010002c370	blr	x8
000000010002c374	ldr	x0, [x20, #0x8]
000000010002c378	orr	w2, wzr, #0x1
000000010002c37c	mov	x1, x21
000000010002c380	bl	0x1000315ec ; symbol stub for: _rb_tree_iterate
000000010002c384	mov	x21, x0
000000010002c388	cbnz	x21, 0x10002c364
000000010002c38c	ldp	x29, x30, [sp, #0x20]
000000010002c390	ldp	x20, x19, [sp, #0x10]
000000010002c394	ldp	x22, x21, [sp], #0x30
000000010002c398	ret
000000010002c39c	brk	#0x1
000000010002c3a0	ldr	w8, [x0, #0x10]
000000010002c3a4	mov	w9, #0x1375
000000010002c3a8	cmp	w8, w9
000000010002c3ac	b.ne	0x10002c3b8
000000010002c3b0	ldr	x0, [x0, #0x8]
000000010002c3b4	b	0x1000315bc ; symbol stub for: _rb_tree_count
000000010002c3b8	brk	#0x1
000000010002c3bc	stp	x20, x19, [sp, #-0x20]!
000000010002c3c0	stp	x29, x30, [sp, #0x10]
000000010002c3c4	add	x29, sp, #0x10
000000010002c3c8	mov	x0, #0x0
000000010002c3cc	bl	0x10000e8e4
000000010002c3d0	mov	x19, x0
000000010002c3d4	orr	w0, wzr, #0x40
000000010002c3d8	bl	0x100031304 ; symbol stub for: _malloc
000000010002c3dc	str	x0, [x19, #0x8]
000000010002c3e0	adr	x1, #94368
000000010002c3e4	nop
000000010002c3e8	bl	0x1000315d4 ; symbol stub for: _rb_tree_init
000000010002c3ec	mov	w8, #0x1375
000000010002c3f0	str	w8, [x19, #0x10]
000000010002c3f4	mov	x0, x19
000000010002c3f8	ldp	x29, x30, [sp, #0x10]
000000010002c3fc	ldp	x20, x19, [sp], #0x20
000000010002c400	ret
000000010002c404	stp	x22, x21, [sp, #-0x30]!
000000010002c408	stp	x20, x19, [sp, #0x10]
000000010002c40c	stp	x29, x30, [sp, #0x20]
000000010002c410	add	x29, sp, #0x20
000000010002c414	mov	x19, x0
000000010002c418	ldr	w8, [x19, #0x10]
000000010002c41c	mov	w9, #0x1375
000000010002c420	cmp	w8, w9
000000010002c424	b.ne	0x10002c498
000000010002c428	str	wzr, [x19, #0x10]
000000010002c42c	ldr	x0, [x19, #0x8]
000000010002c430	orr	w2, wzr, #0x1
000000010002c434	mov	x1, #0x0
000000010002c438	bl	0x1000315ec ; symbol stub for: _rb_tree_iterate
000000010002c43c	mov	x20, x0
000000010002c440	cbz	x20, 0x10002c484
000000010002c444	ldr	x0, [x19, #0x8]
000000010002c448	orr	w2, wzr, #0x1
000000010002c44c	mov	x1, x20
000000010002c450	bl	0x1000315ec ; symbol stub for: _rb_tree_iterate
000000010002c454	mov	x21, x0
000000010002c458	ldr	x0, [x19, #0x8]
000000010002c45c	mov	x1, x20
000000010002c460	bl	0x1000315f8 ; symbol stub for: _rb_tree_remove_node
000000010002c464	ldr	x0, [x20, #0x20]
000000010002c468	bl	0x10003140c ; symbol stub for: _os_release
000000010002c46c	ldr	x0, [x20, #0x18]
000000010002c470	bl	0x100031010 ; symbol stub for: _free
000000010002c474	mov	x0, x20
000000010002c478	bl	0x100031010 ; symbol stub for: _free
000000010002c47c	mov	x20, x21
000000010002c480	cbnz	x21, 0x10002c444
000000010002c484	ldr	x0, [x19, #0x8]
000000010002c488	ldp	x29, x30, [sp, #0x20]
000000010002c48c	ldp	x20, x19, [sp, #0x10]
000000010002c490	ldp	x22, x21, [sp], #0x30
000000010002c494	b	0x100031010 ; symbol stub for: _free
000000010002c498	brk	#0x1
000000010002c49c	sub	sp, sp, #0xb0
000000010002c4a0	stp	x28, x27, [sp, #0x50]
000000010002c4a4	stp	x26, x25, [sp, #0x60]
000000010002c4a8	stp	x24, x23, [sp, #0x70]
000000010002c4ac	stp	x22, x21, [sp, #0x80]
000000010002c4b0	stp	x20, x19, [sp, #0x90]
000000010002c4b4	stp	x29, x30, [sp, #0xa0]
000000010002c4b8	add	x29, sp, #0xa0
000000010002c4bc	mov	x21, x1
000000010002c4c0	mov	x19, x0
000000010002c4c4	nop
000000010002c4c8	ldr	x8, #0x13b50 ; literal pool symbol address: ___stack_chk_guard
000000010002c4cc	ldr	x8, [x8]
000000010002c4d0	str	x8, [sp, #0x48]
000000010002c4d4	mov	w2, #0xb8
000000010002c4d8	mov	w1, #0x0
000000010002c4dc	bl	0x100031340 ; symbol stub for: _memset
000000010002c4e0	str	wzr, [sp, #0x2c]
000000010002c4e4	add	x1, sp, #0x2c
000000010002c4e8	mov	x0, x21
000000010002c4ec	bl	0x100031568 ; symbol stub for: _proc_get_dirty
000000010002c4f0	cbz	w0, 0x10002c500
000000010002c4f4	sxtw	x0, w0
000000010002c4f8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c4fc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c500	ldr	w8, [sp, #0x2c]
000000010002c504	ldrb	w9, [x19, #0xb0]
000000010002c508	and	w9, w9, #0xfc
000000010002c50c	ubfx	w10, w8, #1, #1
000000010002c510	bfxil	w9, w8, #2, #1
000000010002c514	bfi	w9, w10, #1, #1
000000010002c518	strb	w9, [x19, #0xb0]
000000010002c51c	add	x20, x19, #0x4
000000010002c520	mov	w1, #0x19
000000010002c524	orr	w4, wzr, #0x18
000000010002c528	orr	w2, wzr, #0x1
000000010002c52c	mov	x0, x21
000000010002c530	mov	x3, x20
000000010002c534	bl	0x100031574 ; symbol stub for: _proc_pidinfo
000000010002c538	cmp	w0, #0x18
000000010002c53c	b.eq	0x10002c564
000000010002c540	bl	0x100030adc ; symbol stub for: ___error
000000010002c544	ldr	w8, [x0]
000000010002c548	cmp	w8, #0x2
000000010002c54c	b.eq	0x10002c564
000000010002c550	bl	0x100030adc ; symbol stub for: ___error
000000010002c554	ldrsw	x0, [x0]
000000010002c558	cbz	w0, 0x10002c564
000000010002c55c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c560	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c564	ldrb	w8, [x19, #0xb0]
000000010002c568	and	w8, w8, #0x3
000000010002c56c	cmp	w8, #0x2
000000010002c570	b.ne	0x10002c59c
000000010002c574	ldr	w8, [x20]
000000010002c578	cmp	w8, #0x1
000000010002c57c	b.ne	0x10002c59c
000000010002c580	ldr	x8, [x19, #0x8]
000000010002c584	cmp	x8, #0x2
000000010002c588	b.eq	0x10002c59c
000000010002c58c	cmp	x8, #0x7
000000010002c590	b.eq	0x10002c59c
000000010002c594	mov	w8, #0x9
000000010002c598	str	x8, [x19, #0x8]
000000010002c59c	ldr	w23, [x19, #0x18]
000000010002c5a0	mov	w8, #0x1401
000000010002c5a4	cmp	w23, w8
000000010002c5a8	b.ge	0x10002c9a0
000000010002c5ac	cbz	w23, 0x10002c614
000000010002c5b0	sxtw	x22, w23
000000010002c5b4	orr	w0, wzr, #0x20
000000010002c5b8	bl	0x10000d408
000000010002c5bc	mov	x20, x0
000000010002c5c0	mov	x0, x22
000000010002c5c4	bl	0x10000d408
000000010002c5c8	str	x0, [x20, #0x18]
000000010002c5cc	str	w23, [x20, #0x14]
000000010002c5d0	orr	w1, wzr, #0x18
000000010002c5d4	orr	w4, wzr, #0x20
000000010002c5d8	orr	w2, wzr, #0x1
000000010002c5dc	mov	x0, x21
000000010002c5e0	mov	x3, x20
000000010002c5e4	bl	0x100031574 ; symbol stub for: _proc_pidinfo
000000010002c5e8	cmp	w0, #0x20
000000010002c5ec	b.eq	0x10002c618
000000010002c5f0	bl	0x100030adc ; symbol stub for: ___error
000000010002c5f4	ldrsw	x0, [x0]
000000010002c5f8	cbz	w0, 0x10002c604
000000010002c5fc	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c600	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c604	ldr	x0, [x20, #0x18]
000000010002c608	bl	0x100031010 ; symbol stub for: _free
000000010002c60c	mov	x0, x20
000000010002c610	bl	0x100031010 ; symbol stub for: _free
000000010002c614	mov	x20, #0x0
000000010002c618	add	x1, x19, #0x1c
000000010002c61c	add	x3, x19, #0x20
000000010002c620	mov	x0, x21
000000010002c624	mov	w2, #0x0
000000010002c628	bl	0x100031898 ; symbol stub for: _wait4
000000010002c62c	cmn	w0, #0x1
000000010002c630	b.eq	0x10002c63c
000000010002c634	orr	w8, wzr, #0x3
000000010002c638	b	0x10002c654
000000010002c63c	bl	0x100030adc ; symbol stub for: ___error
000000010002c640	ldrsw	x0, [x0]
000000010002c644	cbz	w0, 0x10002c650
000000010002c648	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002c64c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002c650	orr	w8, wzr, #0x2
000000010002c654	str	w8, [x19]
000000010002c658	cbz	x20, 0x10002c88c
000000010002c65c	mov	x0, x19
000000010002c660	bl	0x10002c9d4
000000010002c664	mov	x21, x0
000000010002c668	ldr	x8, [x20, #0x18]
000000010002c66c	cbz	x8, 0x10002c6f8
000000010002c670	ldr	w9, [x20, #0x14]
000000010002c674	cbz	w9, 0x10002c6f8
000000010002c678	add	x9, x8, x9
000000010002c67c	add	x12, x8, #0x10
000000010002c680	cmp	x12, x9
000000010002c684	b.hi	0x10002c6d4
000000010002c688	mov	w10, #0x58ed
000000010002c68c	movk	w10, #0xf191, lsl #16
000000010002c690	mov	w11, #0x1002
000000010002c694	ldr	w13, [x8, #0x4]
000000010002c698	add	x13, x12, x13
000000010002c69c	cmp	x13, x9
000000010002c6a0	b.hi	0x10002c6d4
000000010002c6a4	ldr	w12, [x8]
000000010002c6a8	cmp	w12, w10
000000010002c6ac	b.eq	0x10002c6d4
000000010002c6b0	cmp	w12, w11
000000010002c6b4	b.ne	0x10002c6c4
000000010002c6b8	and	w12, w12, #0xfffffff0
000000010002c6bc	cmp	w12, #0x20
000000010002c6c0	b.ne	0x10002c6dc
000000010002c6c4	add	x12, x13, #0x10
000000010002c6c8	mov	x8, x13
000000010002c6cc	cmp	x12, x9
000000010002c6d0	b.ls	0x10002c694
000000010002c6d4	mov	x8, #0x0
000000010002c6d8	mov	x9, #0x0
000000010002c6dc	add	x10, x8, #0x10
000000010002c6e0	cmp	x10, x9
000000010002c6e4	b.hi	0x10002c6f8
000000010002c6e8	ldr	w23, [x8, #0x4]
000000010002c6ec	add	x10, x10, x23
000000010002c6f0	cmp	x10, x9
000000010002c6f4	b.ls	0x10002c8f0
000000010002c6f8	mov	x27, #0x0
000000010002c6fc	mov	x23, #0x0
000000010002c700	str	xzr, [sp, #0x30]
000000010002c704	ldr	w8, [x20]
000000010002c708	cmp	w8, #0x2
000000010002c70c	b.ne	0x10002c80c
000000010002c710	ldr	x24, [x20, #0x18]
000000010002c714	ldr	w8, [x20, #0x14]
000000010002c718	add	x26, x24, x8
000000010002c71c	add	x25, x24, #0x10
000000010002c720	cmp	x25, x26
000000010002c724	b.ls	0x10002c734
000000010002c728	adr	x1, #66217 ; literal pool for: "(signal info malformed)"
000000010002c72c	nop
000000010002c730	b	0x10002c800
000000010002c734	mov	x22, #0x0
000000010002c738	mov	w8, #-0x1
000000010002c73c	stp	x27, x8, [sp, #0x18]
000000010002c740	mov	w27, #0x58ed
000000010002c744	movk	w27, #0xf191, lsl #16
000000010002c748	mov	w28, #0x11
000000010002c74c	ldr	w9, [x24, #0x4]
000000010002c750	add	x8, x25, x9
000000010002c754	cmp	x8, x26
000000010002c758	b.hi	0x10002c7e4
000000010002c75c	ldr	w10, [x24]
000000010002c760	cmp	w10, w27
000000010002c764	b.eq	0x10002c7e4
000000010002c768	and	w11, w10, #0xfffffff0
000000010002c76c	cmp	w11, #0x20
000000010002c770	csel	w10, w28, w10, eq
000000010002c774	cmp	w10, #0x36
000000010002c778	b.eq	0x10002c7b8
000000010002c77c	cmp	w10, #0x37
000000010002c780	b.ne	0x10002c7d4
000000010002c784	ldr	w8, [x24, #0x8]
000000010002c788	and	w8, w8, #0xf
000000010002c78c	subs	w8, w9, w8
000000010002c790	add	x22, x24, #0x10
000000010002c794	csel	x23, xzr, x8, lo
000000010002c798	mov	x0, x22
000000010002c79c	mov	x1, x23
000000010002c7a0	bl	0x10003176c ; symbol stub for: _strnlen
000000010002c7a4	cmp	x0, x23
000000010002c7a8	b.hs	0x10002c9bc
000000010002c7ac	ldr	w8, [x24, #0x4]
000000010002c7b0	add	x8, x25, x8
000000010002c7b4	b	0x10002c7d4
000000010002c7b8	ldr	w10, [x24, #0x8]
000000010002c7bc	and	w10, w10, #0xf
000000010002c7c0	subs	w9, w9, w10
000000010002c7c4	ccmp	w9, #0x4, #0x0, hs
000000010002c7c8	b.ne	0x10002c9c8
000000010002c7cc	ldr	w9, [x24, #0x10]
000000010002c7d0	str	x9, [sp, #0x20]
000000010002c7d4	add	x25, x8, #0x10
000000010002c7d8	mov	x24, x8
000000010002c7dc	cmp	x25, x26
000000010002c7e0	b.ls	0x10002c74c
000000010002c7e4	ldp	x27, x8, [sp, #0x18]
000000010002c7e8	cbz	x22, 0x10002c728
000000010002c7ec	cmn	w8, #0x1
000000010002c7f0	b.eq	0x10002c728
000000010002c7f4	stp	x22, x8, [sp]
000000010002c7f8	adr	x1, #65994 ; literal pool for: "sent by %s[%d]"
000000010002c7fc	nop
000000010002c800	add	x0, sp, #0x30
000000010002c804	bl	0x100030c08 ; symbol stub for: _asprintf
000000010002c808	ldr	x23, [sp, #0x30]
000000010002c80c	mov	x25, #0x0
000000010002c810	mov	x22, #0x0
000000010002c814	stp	x21, x27, [sp, #0x30]
000000010002c818	add	x8, sp, #0x30
000000010002c81c	add	x26, x8, #0x8
000000010002c820	str	x23, [sp, #0x40]
000000010002c824	adr	x24, #65194 ; literal pool for: "%s | %s"
000000010002c828	nop
000000010002c82c	b	0x10002c838
000000010002c830	ldr	x21, [x26, x25, lsl #3]
000000010002c834	add	x25, x25, #0x1
000000010002c838	cbz	x21, 0x10002c868
000000010002c83c	cbz	x22, 0x10002c850
000000010002c840	stp	x22, x21, [sp]
000000010002c844	mov	x0, x24
000000010002c848	bl	0x10000d72c
000000010002c84c	b	0x10002c858
000000010002c850	mov	x0, x21
000000010002c854	bl	0x10000d520
000000010002c858	mov	x21, x0
000000010002c85c	mov	x0, x22
000000010002c860	bl	0x100031010 ; symbol stub for: _free
000000010002c864	mov	x22, x21
000000010002c868	cmp	x25, #0x2
000000010002c86c	b.ne	0x10002c830
000000010002c870	mov	x0, x23
000000010002c874	bl	0x100031010 ; symbol stub for: _free
000000010002c878	ldr	x0, [x20, #0x18]
000000010002c87c	bl	0x100031010 ; symbol stub for: _free
000000010002c880	mov	x0, x20
000000010002c884	bl	0x100031010 ; symbol stub for: _free
000000010002c888	cbnz	x22, 0x10002c8ac
000000010002c88c	mov	x0, x19
000000010002c890	bl	0x10002c9d4
000000010002c894	adr	x8, #65090 ; literal pool for: "(unknown reason)"
000000010002c898	nop
000000010002c89c	cmp	x0, #0x0
000000010002c8a0	csel	x0, x8, x0, eq
000000010002c8a4	bl	0x10000d520
000000010002c8a8	mov	x22, x0
000000010002c8ac	ldr	w8, [x19]
000000010002c8b0	cbz	w8, 0x10002c9ac
000000010002c8b4	ldr	x8, [sp, #0x48]
000000010002c8b8	nop
000000010002c8bc	ldr	x9, #0x1375c ; literal pool symbol address: ___stack_chk_guard
000000010002c8c0	ldr	x9, [x9]
000000010002c8c4	cmp	x9, x8
000000010002c8c8	b.ne	0x10002c99c
000000010002c8cc	mov	x0, x22
000000010002c8d0	ldp	x29, x30, [sp, #0xa0]
000000010002c8d4	ldp	x20, x19, [sp, #0x90]
000000010002c8d8	ldp	x22, x21, [sp, #0x80]
000000010002c8dc	ldp	x24, x23, [sp, #0x70]
000000010002c8e0	ldp	x26, x25, [sp, #0x60]
000000010002c8e4	ldp	x28, x27, [sp, #0x50]
000000010002c8e8	add	sp, sp, #0xb0
000000010002c8ec	ret
000000010002c8f0	ldr	w9, [x8]
000000010002c8f4	and	w10, w9, #0xfffffff0
000000010002c8f8	cmp	w10, #0x20
000000010002c8fc	mov	w10, #0x11
000000010002c900	csel	w9, w10, w9, eq
000000010002c904	cmp	w9, #0x905
000000010002c908	b.gt	0x10002c91c
000000010002c90c	cmp	w9, #0x11
000000010002c910	ccmp	w9, #0x13, #0x4, ne
000000010002c914	b.eq	0x10002c970
000000010002c918	b	0x10002c960
000000010002c91c	cmp	w9, #0x908
000000010002c920	b.eq	0x10002c948
000000010002c924	cmp	w9, #0x906
000000010002c928	b.ne	0x10002c960
000000010002c92c	cmp	w23, #0x70
000000010002c930	b.ne	0x10002c960
000000010002c934	ldrb	w9, [x8, #0x8]
000000010002c938	tst	w9, #0xffffff8f
000000010002c93c	b.eq	0x10002c98c
000000010002c940	orr	w23, wzr, #0x70
000000010002c944	b	0x10002c960
000000010002c948	cmp	w23, #0x20
000000010002c94c	b.ne	0x10002c960
000000010002c950	ldrb	w9, [x8, #0x8]
000000010002c954	tst	w9, #0xffffff8f
000000010002c958	b.eq	0x10002c994
000000010002c95c	orr	w23, wzr, #0x20
000000010002c960	ldr	w9, [x8, #0x8]
000000010002c964	and	w9, w9, #0xf
000000010002c968	subs	w9, w23, w9
000000010002c96c	csel	w23, wzr, w9, lo
000000010002c970	add	x22, x8, #0x10
000000010002c974	mov	w1, w23
000000010002c978	mov	x0, x22
000000010002c97c	bl	0x10003176c ; symbol stub for: _strnlen
000000010002c980	cmp	x0, w23, uxtw
000000010002c984	csel	x27, x22, xzr, lo
000000010002c988	b	0x10002c6fc
000000010002c98c	mov	w23, #0x68
000000010002c990	b	0x10002c970
000000010002c994	orr	w23, wzr, #0x18
000000010002c998	b	0x10002c970
000000010002c99c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002c9a0	adr	x0, #65431 ; literal pool for: "retrieved exit reason with invalid reason buffer size"
000000010002c9a4	nop
000000010002c9a8	bl	0x100028f84
000000010002c9ac	mov	x0, #0x0
000000010002c9b0	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002c9b4	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002c9b8	brk	#0x1
000000010002c9bc	adr	x0, #65457 ; literal pool for: "kernel returned invalid sender procname for signal"
000000010002c9c0	nop
000000010002c9c4	bl	0x100028f84
000000010002c9c8	adr	x0, #65496 ; literal pool for: "PID size for exit reason mismatch"
000000010002c9cc	nop
000000010002c9d0	bl	0x100028f84
000000010002c9d4	stp	x20, x19, [sp, #-0x20]!
000000010002c9d8	stp	x29, x30, [sp, #0x10]
000000010002c9dc	add	x29, sp, #0x10
000000010002c9e0	ldp	w8, w19, [x0]
000000010002c9e4	ldr	x20, [x0, #0x8]
000000010002c9e8	cmp	w19, #0x0
000000010002c9ec	ccmp	w8, #0x3, #0x0, eq
000000010002c9f0	b.eq	0x10002ca24
000000010002c9f4	cmp	w19, #0x9
000000010002c9f8	b.hi	0x10002caa0
000000010002c9fc	mov	w9, w19
000000010002ca00	adr	x10, #188
000000010002ca04	nop
000000010002ca08	ldrsw	x9, [x10, x9, lsl #2]
000000010002ca0c	add	x9, x9, x10
000000010002ca10	br	x9
000000010002ca14	cmp	w8, #0x3
000000010002ca18	b.ne	0x10002caa0
000000010002ca1c	ldr	w8, [x0, #0x1c]
000000010002ca20	b	0x10002ca30
000000010002ca24	ldr	w8, [x0, #0x1c]
000000010002ca28	tst	w8, #0x7f
000000010002ca2c	b.eq	0x10002ca70
000000010002ca30	ands	w8, w8, #0x7f
000000010002ca34	b.eq	0x10002caa0
000000010002ca38	cmp	w8, #0x7f
000000010002ca3c	b.eq	0x10002caa0
000000010002ca40	bl	0x10002cba0
000000010002ca44	adr	x1, #87084
000000010002ca48	nop
000000010002ca4c	mov	w2, #0x1b
000000010002ca50	bl	0x10000d8a8
000000010002ca54	cbnz	x0, 0x10002ca94
000000010002ca58	cmp	w19, #0x1
000000010002ca5c	b.ne	0x10002caa0
000000010002ca60	adr	x1, #87504
000000010002ca64	nop
000000010002ca68	orr	w2, wzr, #0x3
000000010002ca6c	b	0x10002ca88
000000010002ca70	adr	x0, #64631 ; literal pool for: "exit()"
000000010002ca74	nop
000000010002ca78	b	0x10002ca94
000000010002ca7c	adr	x1, #87460
000000010002ca80	nop
000000010002ca84	orr	w2, wzr, #0x1
000000010002ca88	mov	x0, x20
000000010002ca8c	bl	0x10000d8a8
000000010002ca90	cbz	x0, 0x10002caa0
000000010002ca94	ldp	x29, x30, [sp, #0x10]
000000010002ca98	ldp	x20, x19, [sp], #0x20
000000010002ca9c	ret
000000010002caa0	adr	x1, #87488
000000010002caa4	nop
000000010002caa8	orr	w2, wzr, #0xe
000000010002caac	mov	x0, x19
000000010002cab0	ldp	x29, x30, [sp, #0x10]
000000010002cab4	ldp	x20, x19, [sp], #0x20
000000010002cab8	b	0x10000d8a8
000000010002cabc	.long	0xffffff58
000000010002cac0	.long	0xffffffa4
000000010002cac4	.long	0xffffff84
000000010002cac8	.long	0xffffffe4
000000010002cacc	.long	0xffffffe4
000000010002cad0	.long	0xffffffe4
000000010002cad4	.long	0xffffffe4
000000010002cad8	.long	0xffffffe4
000000010002cadc	.long	0xffffffe4
000000010002cae0	.long	0xffffffc0
000000010002cae4	stp	x20, x19, [sp, #-0x20]!
000000010002cae8	stp	x29, x30, [sp, #0x10]
000000010002caec	add	x29, sp, #0x10
000000010002caf0	mov	x19, x0
000000010002caf4	mov	w2, #0xb8
000000010002caf8	mov	w1, #0x0
000000010002cafc	bl	0x100031340 ; symbol stub for: _memset
000000010002cb00	orr	w8, wzr, #0x1
000000010002cb04	str	w8, [x19]
000000010002cb08	ldp	x29, x30, [sp, #0x10]
000000010002cb0c	ldp	x20, x19, [sp], #0x20
000000010002cb10	ret
000000010002cb14	ldr	w8, [x0, #0x4]
000000010002cb18	cbz	w8, 0x10002cb28
000000010002cb1c	ldrb	w8, [x0, #0x10]
000000010002cb20	ubfx	w0, w8, #6, #1
000000010002cb24	ret
000000010002cb28	mov	w0, #0x0
000000010002cb2c	ret
000000010002cb30	ldr	w8, [x0]
000000010002cb34	cmp	w8, #0x3
000000010002cb38	b.ne	0x10002cb44
000000010002cb3c	orr	w0, wzr, #0x1
000000010002cb40	ret
000000010002cb44	ldr	w8, [x0, #0x4]
000000010002cb48	cmp	w8, #0x0
000000010002cb4c	cset	w0, ne
000000010002cb50	ret
000000010002cb54	ldr	w8, [x0, #0x4]
000000010002cb58	cmp	w8, #0x2
000000010002cb5c	b.eq	0x10002cb98
000000010002cb60	cbnz	w8, 0x10002cb90
000000010002cb64	ldr	w8, [x0]
000000010002cb68	cmp	w8, #0x3
000000010002cb6c	b.ne	0x10002cb90
000000010002cb70	ldr	w8, [x0, #0x1c]
000000010002cb74	and	w9, w8, #0x7f
000000010002cb78	cmp	w9, #0x7f
000000010002cb7c	cset	w9, ne
000000010002cb80	tst	w8, #0x7f
000000010002cb84	cset	w8, ne
000000010002cb88	and	w0, w9, w8
000000010002cb8c	ret
000000010002cb90	mov	w0, #0x0
000000010002cb94	ret
000000010002cb98	orr	w0, wzr, #0x1
000000010002cb9c	ret
000000010002cba0	ldr	w8, [x0, #0x4]
000000010002cba4	cmp	w8, #0x2
000000010002cba8	b.eq	0x10002cbd4
000000010002cbac	cbnz	w8, 0x10002cbdc
000000010002cbb0	ldr	w8, [x0]
000000010002cbb4	cmp	w8, #0x3
000000010002cbb8	b.ne	0x10002cbdc
000000010002cbbc	ldr	w8, [x0, #0x1c]
000000010002cbc0	and	w0, w8, #0x7f
000000010002cbc4	cmp	w0, #0x7f
000000010002cbc8	ccmp	w0, #0x0, #0x4, ne
000000010002cbcc	b.eq	0x10002cbdc
000000010002cbd0	ret
000000010002cbd4	ldr	w0, [x0, #0x8]
000000010002cbd8	ret
000000010002cbdc	stp	x29, x30, [sp, #-0x10]!
000000010002cbe0	mov	x29, sp
000000010002cbe4	mov	x0, #0x0
000000010002cbe8	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002cbec	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002cbf0	brk	#0x1
000000010002cbf4	stp	x20, x19, [sp, #-0x20]!
000000010002cbf8	stp	x29, x30, [sp, #0x10]
000000010002cbfc	add	x29, sp, #0x10
000000010002cc00	mov	x19, x0
000000010002cc04	ldr	w8, [x19, #0x4]
000000010002cc08	cmp	w8, #0x2
000000010002cc0c	b.eq	0x10002cc34
000000010002cc10	cbnz	w8, 0x10002cc60
000000010002cc14	ldr	w8, [x19]
000000010002cc18	cmp	w8, #0x3
000000010002cc1c	b.ne	0x10002cc68
000000010002cc20	ldr	w8, [x19, #0x1c]
000000010002cc24	ands	w8, w8, #0x7f
000000010002cc28	b.eq	0x10002cc68
000000010002cc2c	cmp	w8, #0x7f
000000010002cc30	b.eq	0x10002cc68
000000010002cc34	mov	x0, x19
000000010002cc38	bl	0x10002cba0
000000010002cc3c	sub	w8, w0, #0x4
000000010002cc40	cmp	w8, #0x9
000000010002cc44	b.hs	0x10002cc58
000000010002cc48	and	w8, w8, #0xffff
000000010002cc4c	mov	w9, #0x1d7
000000010002cc50	lsr	w8, w9, w8
000000010002cc54	tbnz	w8, #0x0, 0x10002cc70
000000010002cc58	ldr	w8, [x19, #0x4]
000000010002cc5c	cbz	w8, 0x10002cc68
000000010002cc60	ldrb	w8, [x19, #0x11]
000000010002cc64	tbnz	w8, #0x1, 0x10002cc70
000000010002cc68	mov	w0, #0x0
000000010002cc6c	b	0x10002cc74
000000010002cc70	orr	w0, wzr, #0x1
000000010002cc74	ldp	x29, x30, [sp, #0x10]
000000010002cc78	ldp	x20, x19, [sp], #0x20
000000010002cc7c	ret
000000010002cc80	ldr	w8, [x0]
000000010002cc84	cmp	w8, #0x3
000000010002cc88	b.ne	0x10002cc94
000000010002cc8c	ldr	w8, [x0, #0x4]
000000010002cc90	cbz	w8, 0x10002cc9c
000000010002cc94	mov	w0, #0x0
000000010002cc98	ret
000000010002cc9c	ldrb	w8, [x0, #0x1c]
000000010002cca0	tst	w8, #0x7f
000000010002cca4	cset	w0, eq
000000010002cca8	ret
000000010002ccac	ldr	w8, [x0]
000000010002ccb0	cmp	w8, #0x3
000000010002ccb4	b.ne	0x10002ccd4
000000010002ccb8	ldr	w8, [x0, #0x4]
000000010002ccbc	cbnz	w8, 0x10002ccd4
000000010002ccc0	ldr	w8, [x0, #0x1c]
000000010002ccc4	tst	w8, #0x7f
000000010002ccc8	b.ne	0x10002ccd4
000000010002cccc	ubfx	w0, w8, #8, #8
000000010002ccd0	ret
000000010002ccd4	stp	x29, x30, [sp, #-0x10]!
000000010002ccd8	mov	x29, sp
000000010002ccdc	mov	x0, #0x0
000000010002cce0	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002cce4	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002cce8	brk	#0x1
000000010002ccec	ldr	w8, [x0, #0x4]
000000010002ccf0	cmp	w8, #0x1
000000010002ccf4	cset	w0, eq
000000010002ccf8	ret
000000010002ccfc	ldr	w8, [x0, #0x4]
000000010002cd00	cmp	w8, #0x1
000000010002cd04	b.ne	0x10002cd24
000000010002cd08	ldr	x8, [x0, #0x8]
000000010002cd0c	cmp	x8, #0x2
000000010002cd10	cset	w9, eq
000000010002cd14	cmp	x8, #0x7
000000010002cd18	cset	w8, eq
000000010002cd1c	orr	w0, w9, w8
000000010002cd20	ret
000000010002cd24	mov	w0, #0x0
000000010002cd28	ret
000000010002cd2c	ldr	w8, [x0, #0x4]
000000010002cd30	cmp	w8, #0x1
000000010002cd34	b.ne	0x10002cd48
000000010002cd38	ldr	x8, [x0, #0x8]
000000010002cd3c	cmp	x8, #0x9
000000010002cd40	cset	w0, eq
000000010002cd44	ret
000000010002cd48	mov	w0, #0x0
000000010002cd4c	ret
000000010002cd50	ldp	w8, w9, [x0]
000000010002cd54	cmp	w8, #0x3
000000010002cd58	ccmp	w9, #0x0, #0x0, ne
000000010002cd5c	ccmp	w9, #0x9, #0x0, ne
000000010002cd60	b.eq	0x10002cd6c
000000010002cd64	mov	w0, #0x0
000000010002cd68	ret
000000010002cd6c	ldr	x8, [x0, #0x8]
000000010002cd70	cmp	x8, #0xa
000000010002cd74	cset	w0, eq
000000010002cd78	ret
000000010002cd7c	ldr	w8, [x0, #0x4]
000000010002cd80	cmp	w8, #0x3
000000010002cd84	cset	w0, eq
000000010002cd88	ret
000000010002cd8c	stp	x20, x19, [sp, #-0x20]!
000000010002cd90	stp	x29, x30, [sp, #0x10]
000000010002cd94	add	x29, sp, #0x10
000000010002cd98	mov	x19, x0
000000010002cd9c	ldr	w8, [x19, #0x4]
000000010002cda0	cmp	w8, #0x2
000000010002cda4	b.eq	0x10002cdd0
000000010002cda8	cbnz	w8, 0x10002cdec
000000010002cdac	ldr	w8, [x19]
000000010002cdb0	cmp	w8, #0x3
000000010002cdb4	b.ne	0x10002cdec
000000010002cdb8	mov	w0, #0x0
000000010002cdbc	ldr	w8, [x19, #0x1c]
000000010002cdc0	ands	w8, w8, #0x7f
000000010002cdc4	b.eq	0x10002cdf0
000000010002cdc8	cmp	w8, #0x7f
000000010002cdcc	b.eq	0x10002cdf0
000000010002cdd0	mov	x0, x19
000000010002cdd4	bl	0x10002cba0
000000010002cdd8	cmp	w0, #0x6
000000010002cddc	b.ne	0x10002cdec
000000010002cde0	ldrb	w8, [x19, #0xb0]
000000010002cde4	ubfx	w0, w8, #2, #1
000000010002cde8	b	0x10002cdf0
000000010002cdec	mov	w0, #0x0
000000010002cdf0	ldp	x29, x30, [sp, #0x10]
000000010002cdf4	ldp	x20, x19, [sp], #0x20
000000010002cdf8	ret
000000010002cdfc	stp	x29, x30, [sp, #-0x10]!
000000010002ce00	mov	x29, sp
000000010002ce04	adr	x0, #64485 ; literal pool for: "misfired notification: port-deleted"
000000010002ce08	nop
000000010002ce0c	bl	0x100028f84
000000010002ce10	stp	x29, x30, [sp, #-0x10]!
000000010002ce14	mov	x29, sp
000000010002ce18	mov	w0, w1
000000010002ce1c	mov	w1, #0x0
000000010002ce20	bl	0x10002ce58
000000010002ce24	cbz	x0, 0x10002ce50
000000010002ce28	nop
000000010002ce2c	nop
000000010002ce30	ldr	w8, 0x100043ed4
000000010002ce34	cbz	w8, 0x10002ce40
000000010002ce38	mov	w0, #0x5
000000010002ce3c	b	0x10002ce50
000000010002ce40	ldr	x0, [x0, #0x20]
000000010002ce44	mov	w1, #0x45
000000010002ce48	bl	0x100030ee4 ; symbol stub for: _dispatch_source_merge_data
000000010002ce4c	mov	w0, #0x0
000000010002ce50	ldp	x29, x30, [sp], #0x10
000000010002ce54	ret
000000010002ce58	stp	x20, x19, [sp, #-0x20]!
000000010002ce5c	stp	x29, x30, [sp, #0x10]
000000010002ce60	add	x29, sp, #0x10
000000010002ce64	mov	x19, x1
000000010002ce68	mov	x20, x0
000000010002ce6c	bl	0x10002e640
000000010002ce70	adr	x8, #94480
000000010002ce74	nop
000000010002ce78	ldr	x0, [x8, x0, lsl #3]
000000010002ce7c	cbz	x0, 0x10002cea0
000000010002ce80	ldrb	w8, [x0, #0x38]
000000010002ce84	cmp	w8, w19
000000010002ce88	b.ne	0x10002ce98
000000010002ce8c	ldr	x8, [x0, #0x18]
000000010002ce90	cmp	x8, x20
000000010002ce94	b.eq	0x10002cea0
000000010002ce98	ldr	x0, [x0]
000000010002ce9c	cbnz	x0, 0x10002ce80
000000010002cea0	ldp	x29, x30, [sp, #0x10]
000000010002cea4	ldp	x20, x19, [sp], #0x20
000000010002cea8	ret
000000010002ceac	stp	x29, x30, [sp, #-0x10]!
000000010002ceb0	mov	x29, sp
000000010002ceb4	mov	w0, w0
000000010002ceb8	mov	w1, #0x0
000000010002cebc	bl	0x10002ce58
000000010002cec0	cbz	x0, 0x10002ceec
000000010002cec4	nop
000000010002cec8	nop
000000010002cecc	ldr	w8, 0x100043ed4
000000010002ced0	cbz	w8, 0x10002cedc
000000010002ced4	mov	w0, #0x5
000000010002ced8	b	0x10002ceec
000000010002cedc	ldr	x0, [x0, #0x20]
000000010002cee0	mov	w1, #0x46
000000010002cee4	bl	0x100030ee4 ; symbol stub for: _dispatch_source_merge_data
000000010002cee8	mov	w0, #0x0
000000010002ceec	ldp	x29, x30, [sp], #0x10
000000010002cef0	ret
000000010002cef4	stp	x29, x30, [sp, #-0x10]!
000000010002cef8	mov	x29, sp
000000010002cefc	adr	x0, #64273 ; literal pool for: "misfired notification: send-once"
000000010002cf00	nop
000000010002cf04	bl	0x100028f84
000000010002cf08	stp	x29, x30, [sp, #-0x10]!
000000010002cf0c	mov	x29, sp
000000010002cf10	adr	x0, #64286 ; literal pool for: "misfired notification: dead-name"
000000010002cf14	nop
000000010002cf18	bl	0x100028f84
000000010002cf1c	stp	x26, x25, [sp, #-0x50]!
000000010002cf20	stp	x24, x23, [sp, #0x10]
000000010002cf24	stp	x22, x21, [sp, #0x20]
000000010002cf28	stp	x20, x19, [sp, #0x30]
000000010002cf2c	stp	x29, x30, [sp, #0x40]
000000010002cf30	add	x29, sp, #0x40
000000010002cf34	sub	sp, sp, #0x440
000000010002cf38	mov	x23, x5
000000010002cf3c	mov	x22, x4
000000010002cf40	mov	x21, x3
000000010002cf44	mov	x19, x2
000000010002cf48	mov	x20, x1
000000010002cf4c	add	x24, sp, #0x28
000000010002cf50	nop
000000010002cf54	ldr	x8, #0x130c4 ; literal pool symbol address: ___stack_chk_guard
000000010002cf58	ldr	x8, [x8]
000000010002cf5c	str	x8, [x24]
000000010002cf60	mov	w8, #-0x1
000000010002cf64	str	w8, [sp, #0x34]
000000010002cf68	add	x1, sp, #0x34
000000010002cf6c	mov	x0, x19
000000010002cf70	bl	0x100031460 ; symbol stub for: _pid_for_task
000000010002cf74	cbz	w0, 0x10002cf84
000000010002cf78	sxtw	x0, w0
000000010002cf7c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002cf80	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002cf84	nop
000000010002cf88	nop
000000010002cf8c	ldr	w8, 0x100043ed4
000000010002cf90	cbnz	w8, 0x10002cff8
000000010002cf94	cbz	w23, 0x10002cfcc
000000010002cf98	mov	w25, w23
000000010002cf9c	adr	x23, #64179 ; literal pool for: "0x%llx"
000000010002cfa0	nop
000000010002cfa4	ldr	x8, [x22], #0x8
000000010002cfa8	str	x8, [sp]
000000010002cfac	add	x0, sp, #0x38
000000010002cfb0	orr	w1, wzr, #0x400
000000010002cfb4	orr	w3, wzr, #0x400
000000010002cfb8	mov	w2, #0x0
000000010002cfbc	mov	x4, x23
000000010002cfc0	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002cfc4	subs	x25, x25, #0x1
000000010002cfc8	b.ne	0x10002cfa4
000000010002cfcc	ldr	w8, [sp, #0x34]
000000010002cfd0	add	x9, sp, #0x38
000000010002cfd4	stp	x21, x9, [sp, #0x10]
000000010002cfd8	stp	x8, x20, [sp]
000000010002cfdc	adr	x2, #64122 ; literal pool for: "Host-level exception raised: pid = %d, thread = 0x%x, exception type = 0x%x, codes = { %s }"
000000010002cfe0	nop
000000010002cfe4	orr	w1, wzr, #0x3
000000010002cfe8	mov	x0, #0x0
000000010002cfec	bl	0x100029dbc
000000010002cff0	cmp	w21, #0xa
000000010002cff4	b.ne	0x10002d030
000000010002cff8	mov	w0, #0x5
000000010002cffc	ldr	x8, [x24]
000000010002d000	nop
000000010002d004	ldr	x9, #0x13014 ; literal pool symbol address: ___stack_chk_guard
000000010002d008	ldr	x9, [x9]
000000010002d00c	cmp	x9, x8
000000010002d010	b.ne	0x10002d068
000000010002d014	add	sp, sp, #0x440
000000010002d018	ldp	x29, x30, [sp, #0x40]
000000010002d01c	ldp	x20, x19, [sp, #0x30]
000000010002d020	ldp	x22, x21, [sp, #0x20]
000000010002d024	ldp	x24, x23, [sp, #0x10]
000000010002d028	ldp	x26, x25, [sp], #0x50
000000010002d02c	ret
000000010002d030	mov	x0, x20
000000010002d034	bl	0x10000888c
000000010002d038	cbz	w0, 0x10002d048
000000010002d03c	sxtw	x0, w0
000000010002d040	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002d044	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002d048	mov	x0, x19
000000010002d04c	bl	0x10000888c
000000010002d050	cbz	w0, 0x10002cffc
000000010002d054	sxtw	x0, w0
000000010002d058	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002d05c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002d060	mov	w0, #0x0
000000010002d064	b	0x10002cffc
000000010002d068	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002d06c	stp	x26, x25, [sp, #-0x50]!
000000010002d070	stp	x24, x23, [sp, #0x10]
000000010002d074	stp	x22, x21, [sp, #0x20]
000000010002d078	stp	x20, x19, [sp, #0x30]
000000010002d07c	stp	x29, x30, [sp, #0x40]
000000010002d080	add	x29, sp, #0x40
000000010002d084	sub	sp, sp, #0x820
000000010002d088	mov	x19, x7
000000010002d08c	mov	x21, x6
000000010002d090	mov	x20, x5
000000010002d094	mov	x23, x2
000000010002d098	mov	x22, x1
000000010002d09c	nop
000000010002d0a0	ldr	x8, #0x12f78 ; literal pool symbol address: ___stack_chk_guard
000000010002d0a4	ldr	x8, [x8]
000000010002d0a8	stur	x8, [x29, #-0x48]
000000010002d0ac	nop
000000010002d0b0	nop
000000010002d0b4	ldr	w8, 0x100043ed4
000000010002d0b8	cbnz	w8, 0x10002d15c
000000010002d0bc	cbz	w3, 0x10002d0f4
000000010002d0c0	mov	w25, w3
000000010002d0c4	adr	x24, #33921 ; literal pool for: "%llu"
000000010002d0c8	nop
000000010002d0cc	ldr	x8, [x23], #0x8
000000010002d0d0	str	x8, [sp]
000000010002d0d4	add	x0, sp, #0x418
000000010002d0d8	orr	w1, wzr, #0x400
000000010002d0dc	orr	w3, wzr, #0x400
000000010002d0e0	mov	w2, #0x0
000000010002d0e4	mov	x4, x24
000000010002d0e8	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002d0ec	subs	x25, x25, #0x1
000000010002d0f0	b.ne	0x10002d0cc
000000010002d0f4	cbz	w21, 0x10002d130
000000010002d0f8	mov	w24, w21
000000010002d0fc	mov	x25, x20
000000010002d100	adr	x23, #63922 ; literal pool for: "%u"
000000010002d104	nop
000000010002d108	ldr	w8, [x25], #0x4
000000010002d10c	str	x8, [sp]
000000010002d110	add	x0, sp, #0x18
000000010002d114	orr	w1, wzr, #0x400
000000010002d118	orr	w3, wzr, #0x400
000000010002d11c	mov	w2, #0x0
000000010002d120	mov	x4, x23
000000010002d124	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002d128	subs	x24, x24, #0x1
000000010002d12c	b.ne	0x10002d108
000000010002d130	add	x8, sp, #0x18
000000010002d134	str	x8, [sp, #0x10]
000000010002d138	add	x8, sp, #0x418
000000010002d13c	stp	x22, x8, [sp]
000000010002d140	adr	x2, #63861 ; literal pool for: "Host-level exception raised (no identity): exception type = 0x%x, codes = { %s }, states = { %s }"
000000010002d144	nop
000000010002d148	orr	w1, wzr, #0x3
000000010002d14c	mov	x0, #0x0
000000010002d150	bl	0x100029dbc
000000010002d154	cmp	w22, #0xa
000000010002d158	b.ne	0x10002d194
000000010002d15c	mov	w0, #0x5
000000010002d160	ldur	x8, [x29, #-0x48]
000000010002d164	nop
000000010002d168	ldr	x9, #0x12eb0 ; literal pool symbol address: ___stack_chk_guard
000000010002d16c	ldr	x9, [x9]
000000010002d170	cmp	x9, x8
000000010002d174	b.ne	0x10002d1c0
000000010002d178	add	sp, sp, #0x820
000000010002d17c	ldp	x29, x30, [sp, #0x40]
000000010002d180	ldp	x20, x19, [sp, #0x30]
000000010002d184	ldp	x22, x21, [sp, #0x20]
000000010002d188	ldp	x24, x23, [sp, #0x10]
000000010002d18c	ldp	x26, x25, [sp], #0x50
000000010002d190	ret
000000010002d194	ldr	x22, [x29, #0x10]
000000010002d198	ldr	w8, [x22]
000000010002d19c	cmp	w8, w21
000000010002d1a0	csel	w21, w8, w21, lo
000000010002d1a4	lsl	x2, x21, #2
000000010002d1a8	mov	x0, x19
000000010002d1ac	mov	x1, x20
000000010002d1b0	bl	0x100031328 ; symbol stub for: _memcpy
000000010002d1b4	mov	w0, #0x0
000000010002d1b8	str	w21, [x22]
000000010002d1bc	b	0x10002d160
000000010002d1c0	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002d1c4	stp	x28, x27, [sp, #-0x60]!
000000010002d1c8	stp	x26, x25, [sp, #0x10]
000000010002d1cc	stp	x24, x23, [sp, #0x20]
000000010002d1d0	stp	x22, x21, [sp, #0x30]
000000010002d1d4	stp	x20, x19, [sp, #0x40]
000000010002d1d8	stp	x29, x30, [sp, #0x50]
000000010002d1dc	add	x29, sp, #0x50
000000010002d1e0	sub	sp, sp, #0x840
000000010002d1e4	mov	x21, x7
000000010002d1e8	mov	x24, x5
000000010002d1ec	mov	x23, x4
000000010002d1f0	mov	x22, x3
000000010002d1f4	mov	x19, x2
000000010002d1f8	mov	x20, x1
000000010002d1fc	add	x25, sp, #0x28
000000010002d200	nop
000000010002d204	ldr	x8, #0x12e14 ; literal pool symbol address: ___stack_chk_guard
000000010002d208	ldr	x8, [x8]
000000010002d20c	str	x8, [x25]
000000010002d210	mov	w8, #-0x1
000000010002d214	str	w8, [sp, #0x34]
000000010002d218	add	x1, sp, #0x34
000000010002d21c	mov	x0, x19
000000010002d220	bl	0x100031460 ; symbol stub for: _pid_for_task
000000010002d224	cbz	w0, 0x10002d234
000000010002d228	sxtw	x0, w0
000000010002d22c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002d230	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002d234	nop
000000010002d238	nop
000000010002d23c	ldr	w8, 0x100043ed4
000000010002d240	cbnz	w8, 0x10002d2f0
000000010002d244	ldr	w26, [x29, #0x10]
000000010002d248	cbz	w24, 0x10002d280
000000010002d24c	mov	w27, w24
000000010002d250	adr	x24, #33525 ; literal pool for: "%llu"
000000010002d254	nop
000000010002d258	ldr	x8, [x23], #0x8
000000010002d25c	str	x8, [sp]
000000010002d260	add	x0, sp, #0x438
000000010002d264	orr	w1, wzr, #0x400
000000010002d268	orr	w3, wzr, #0x400
000000010002d26c	mov	w2, #0x0
000000010002d270	mov	x4, x24
000000010002d274	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002d278	subs	x27, x27, #0x1
000000010002d27c	b.ne	0x10002d258
000000010002d280	cbz	w26, 0x10002d2bc
000000010002d284	mov	w24, w26
000000010002d288	mov	x27, x21
000000010002d28c	adr	x23, #63526 ; literal pool for: "%u"
000000010002d290	nop
000000010002d294	ldr	w8, [x27], #0x4
000000010002d298	str	x8, [sp]
000000010002d29c	add	x0, sp, #0x38
000000010002d2a0	orr	w1, wzr, #0x400
000000010002d2a4	orr	w3, wzr, #0x400
000000010002d2a8	mov	w2, #0x0
000000010002d2ac	mov	x4, x23
000000010002d2b0	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
000000010002d2b4	subs	x24, x24, #0x1
000000010002d2b8	b.ne	0x10002d294
000000010002d2bc	ldr	w8, [sp, #0x34]
000000010002d2c0	add	x9, sp, #0x38
000000010002d2c4	str	x9, [sp, #0x20]
000000010002d2c8	add	x9, sp, #0x438
000000010002d2cc	stp	x22, x9, [sp, #0x10]
000000010002d2d0	stp	x8, x20, [sp]
000000010002d2d4	adr	x2, #63555 ; literal pool for: "Host-level exception raised: pid = %d, thread = 0x%x, exception type = 0x%x, codes = { %s }, states = { %s }"
000000010002d2d8	nop
000000010002d2dc	orr	w1, wzr, #0x3
000000010002d2e0	mov	x0, #0x0
000000010002d2e4	bl	0x100029dbc
000000010002d2e8	cmp	w22, #0xa
000000010002d2ec	b.ne	0x10002d32c
000000010002d2f0	mov	w0, #0x5
000000010002d2f4	ldr	x8, [x25]
000000010002d2f8	nop
000000010002d2fc	ldr	x9, #0x12d1c ; literal pool symbol address: ___stack_chk_guard
000000010002d300	ldr	x9, [x9]
000000010002d304	cmp	x9, x8
000000010002d308	b.ne	0x10002d384
000000010002d30c	add	sp, sp, #0x840
000000010002d310	ldp	x29, x30, [sp, #0x50]
000000010002d314	ldp	x20, x19, [sp, #0x40]
000000010002d318	ldp	x22, x21, [sp, #0x30]
000000010002d31c	ldp	x24, x23, [sp, #0x20]
000000010002d320	ldp	x26, x25, [sp, #0x10]
000000010002d324	ldp	x28, x27, [sp], #0x60
000000010002d328	ret
000000010002d32c	ldp	x0, x22, [x29, #0x18]
000000010002d330	ldr	w8, [x22]
000000010002d334	cmp	w8, w26
000000010002d338	csel	w23, w8, w26, lo
000000010002d33c	lsl	x2, x23, #2
000000010002d340	mov	x1, x21
000000010002d344	bl	0x100031328 ; symbol stub for: _memcpy
000000010002d348	str	w23, [x22]
000000010002d34c	mov	x0, x20
000000010002d350	bl	0x10000888c
000000010002d354	cbz	w0, 0x10002d364
000000010002d358	sxtw	x0, w0
000000010002d35c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002d360	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002d364	mov	x0, x19
000000010002d368	bl	0x10000888c
000000010002d36c	cbz	w0, 0x10002d2f4
000000010002d370	sxtw	x0, w0
000000010002d374	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002d378	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002d37c	mov	w0, #0x0
000000010002d380	b	0x10002d2f4
000000010002d384	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002d388	stp	x29, x30, [sp, #-0x10]!
000000010002d38c	mov	x29, sp
000000010002d390	adr	x0, #63476 ; literal pool for: "ipc"
000000010002d394	nop
000000010002d398	adr	x1, #94452
000000010002d39c	nop
000000010002d3a0	bl	0x100026f98
000000010002d3a4	adrp	x8, 23 ; 0x100044000
000000010002d3a8	str	x0, [x8, #0x438]
000000010002d3ac	ldp	x29, x30, [sp], #0x10
000000010002d3b0	ret
000000010002d3b4	adr	x0, #92940
000000010002d3b8	nop
000000010002d3bc	ret
000000010002d3c0	nop
000000010002d3c4	ldr	x0, #0x16b1c
000000010002d3c8	ret
000000010002d3cc	nop
000000010002d3d0	ldr	w0, 0x1000434a0
000000010002d3d4	ret
000000010002d3d8	adrp	x8, 22 ; 0x100043000
000000010002d3dc	orr	w9, wzr, #0x1
000000010002d3e0	strb	w9, [x8, #0xf28]
000000010002d3e4	ret
000000010002d3e8	stp	x24, x23, [sp, #-0x40]!
000000010002d3ec	stp	x22, x21, [sp, #0x10]
000000010002d3f0	stp	x20, x19, [sp, #0x20]
000000010002d3f4	stp	x29, x30, [sp, #0x30]
000000010002d3f8	add	x29, sp, #0x30
000000010002d3fc	mov	x20, x1
000000010002d400	mov	x19, x0
000000010002d404	nop
000000010002d408	ldr	x8, #0x16b28
000000010002d40c	cmn	x8, #0x1
000000010002d410	b.ne	0x10002d4a8
000000010002d414	adrp	x21, 22 ; 0x100043000
000000010002d418	ldr	x8, [x21, #0xf38]
000000010002d41c	adrp	x22, 22 ; 0x100043000
000000010002d420	ldr	x9, [x22, #0x4a8]
000000010002d424	cmp	x8, x9
000000010002d428	b.ne	0x10002d474
000000010002d42c	lsl	x1, x8, #3
000000010002d430	lsl	x2, x8, #4
000000010002d434	adrp	x23, 22 ; 0x100043000
000000010002d438	ldr	x0, [x23, #0xf40]
000000010002d43c	bl	0x10000d4c0
000000010002d440	str	x0, [x23, #0xf40]
000000010002d444	ldr	x8, [x22, #0x4a8]
000000010002d448	lsl	x1, x8, #2
000000010002d44c	lsl	x2, x8, #3
000000010002d450	nop
000000010002d454	ldr	x0, [x23, #0xf48]
000000010002d458	bl	0x10000d4c0
000000010002d45c	str	x0, [x23, #0xf48]
000000010002d460	ldr	x8, [x22, #0x4a8]
000000010002d464	lsl	x8, x8, #1
000000010002d468	str	x8, [x22, #0x4a8]
000000010002d46c	ldr	x8, [x21, #0xf38]
000000010002d470	b	0x10002d47c
000000010002d474	nop
000000010002d478	ldr	x0, #0x16ad0
000000010002d47c	nop
000000010002d480	ldr	x9, #0x16ac0
000000010002d484	str	x20, [x9, x8, lsl #3]
000000010002d488	str	w19, [x0, x8, lsl #2]
000000010002d48c	add	x8, x8, #0x1
000000010002d490	str	x8, [x21, #0xf38]
000000010002d494	ldp	x29, x30, [sp, #0x30]
000000010002d498	ldp	x20, x19, [sp, #0x20]
000000010002d49c	ldp	x22, x21, [sp, #0x10]
000000010002d4a0	ldp	x24, x23, [sp], #0x40
000000010002d4a4	ret
000000010002d4a8	adr	x0, #92808
000000010002d4ac	nop
000000010002d4b0	adr	x2, #20
000000010002d4b4	nop
000000010002d4b8	mov	x1, #0x0
000000010002d4bc	bl	0x100030e30 ; symbol stub for: _dispatch_once_f
000000010002d4c0	b	0x10002d414
000000010002d4c4	stp	x20, x19, [sp, #-0x20]!
000000010002d4c8	stp	x29, x30, [sp, #0x10]
000000010002d4cc	add	x29, sp, #0x10
000000010002d4d0	nop
000000010002d4d4	ldr	w0, 0x100044430
000000010002d4d8	mov	x1, #0x0
000000010002d4dc	bl	0x10002d628
000000010002d4e0	adrp	x19, 22 ; 0x100043000
000000010002d4e4	ldr	x8, [x19, #0x4a8]
000000010002d4e8	lsl	x0, x8, #3
000000010002d4ec	bl	0x10000d464
000000010002d4f0	adrp	x8, 22 ; 0x100043000
000000010002d4f4	str	x0, [x8, #0xf40]
000000010002d4f8	ldr	x8, [x19, #0x4a8]
000000010002d4fc	lsl	x0, x8, #2
000000010002d500	bl	0x10000d464
000000010002d504	adrp	x8, 22 ; 0x100043000
000000010002d508	str	x0, [x8, #0xf48]
000000010002d50c	nop
000000010002d510	ldr	x8, #0x15fa0
000000010002d514	lsl	x0, x8, #3
000000010002d518	bl	0x10000d464
000000010002d51c	adrp	x8, 22 ; 0x100043000
000000010002d520	str	x0, [x8, #0xf58]
000000010002d524	adr	x8, #-139220
000000010002d528	nop
000000010002d52c	adr	x9, #-131728
000000010002d530	nop
000000010002d534	stp	x8, x9, [x0]
000000010002d538	adrp	x8, 22 ; 0x100043000
000000010002d53c	orr	w9, wzr, #0x2
000000010002d540	str	x9, [x8, #0xf50]
000000010002d544	nop
000000010002d548	mov	w9, #0x29c
000000010002d54c	str	x9, [x8, #0xf60]
000000010002d550	ldp	x29, x30, [sp, #0x10]
000000010002d554	ldp	x20, x19, [sp], #0x20
000000010002d558	ret
000000010002d55c	stp	x24, x23, [sp, #-0x40]!
000000010002d560	stp	x22, x21, [sp, #0x10]
000000010002d564	stp	x20, x19, [sp, #0x20]
000000010002d568	stp	x29, x30, [sp, #0x30]
000000010002d56c	add	x29, sp, #0x30
000000010002d570	mov	x19, x1
000000010002d574	mov	x20, x0
000000010002d578	nop
000000010002d57c	ldr	x8, #0x169b4
000000010002d580	cmn	x8, #0x1
000000010002d584	b.ne	0x10002d608
000000010002d588	adrp	x21, 22 ; 0x100043000
000000010002d58c	ldr	x8, [x21, #0xf50]
000000010002d590	adrp	x22, 22 ; 0x100043000
000000010002d594	ldr	x9, [x22, #0x4b0]
000000010002d598	cmp	x8, x9
000000010002d59c	b.ne	0x10002d5cc
000000010002d5a0	lsl	x1, x8, #3
000000010002d5a4	lsl	x2, x8, #4
000000010002d5a8	adrp	x23, 22 ; 0x100043000
000000010002d5ac	ldr	x0, [x23, #0xf58]
000000010002d5b0	bl	0x10000d4c0
000000010002d5b4	str	x0, [x23, #0xf58]
000000010002d5b8	ldr	x8, [x22, #0x4b0]
000000010002d5bc	lsl	x8, x8, #1
000000010002d5c0	str	x8, [x22, #0x4b0]
000000010002d5c4	ldr	x8, [x21, #0xf50]
000000010002d5c8	b	0x10002d5d4
000000010002d5cc	nop
000000010002d5d0	ldr	x0, #0x16988
000000010002d5d4	str	x20, [x0, x8, lsl #3]
000000010002d5d8	add	x8, x8, #0x1
000000010002d5dc	str	x8, [x21, #0xf50]
000000010002d5e0	adrp	x8, 22 ; 0x100043000
000000010002d5e4	ldr	x9, [x8, #0xf60]
000000010002d5e8	cmp	x9, x19
000000010002d5ec	b.hs	0x10002d5f4
000000010002d5f0	str	x19, [x8, #0xf60]
000000010002d5f4	ldp	x29, x30, [sp, #0x30]
000000010002d5f8	ldp	x20, x19, [sp, #0x20]
000000010002d5fc	ldp	x22, x21, [sp, #0x10]
000000010002d600	ldp	x24, x23, [sp], #0x40
000000010002d604	ret
000000010002d608	adr	x0, #92456
000000010002d60c	nop
000000010002d610	adr	x2, #-332
000000010002d614	nop
000000010002d618	mov	x1, #0x0
000000010002d61c	bl	0x100030e30 ; symbol stub for: _dispatch_once_f
000000010002d620	b	0x10002d588
000000010002d624	b	0x10002d628
000000010002d628	sub	sp, sp, #0x40
000000010002d62c	stp	x22, x21, [sp, #0x10]
000000010002d630	stp	x20, x19, [sp, #0x20]
000000010002d634	stp	x29, x30, [sp, #0x30]
000000010002d638	add	x29, sp, #0x30
000000010002d63c	mov	x21, x1
000000010002d640	mov	x19, x0
000000010002d644	orr	w0, wzr, #0x40
000000010002d648	bl	0x10000d464
000000010002d64c	mov	x20, x0
000000010002d650	mov	w22, w19
000000010002d654	str	x22, [x20, #0x10]
000000010002d658	strh	wzr, [x20, #0x38]
000000010002d65c	str	x21, [x20, #0x30]
000000010002d660	ldrb	w8, [x20, #0x3a]
000000010002d664	orr	w8, w8, #0x1
000000010002d668	strb	w8, [x20, #0x3a]
000000010002d66c	bl	0x10000d8e0
000000010002d670	mov	x1, x0
000000010002d674	adr	x0, #63135 ; literal pool for: "server"
000000010002d678	nop
000000010002d67c	adr	x3, #4116
000000010002d680	nop
000000010002d684	mov	x2, x20
000000010002d688	bl	0x100030e0c ; symbol stub for: _dispatch_mach_create_f
000000010002d68c	str	x0, [x20, #0x20]
000000010002d690	nop
000000010002d694	ldr	w8, 0x100044430
000000010002d698	cmp	w8, w19
000000010002d69c	b.ne	0x10002d6a8
000000010002d6a0	adrp	x8, 23 ; 0x100044000
000000010002d6a4	str	x0, [x8, #0x128]
000000010002d6a8	mov	x0, x19
000000010002d6ac	bl	0x10000886c
000000010002d6b0	cbz	w0, 0x10002d6c0
000000010002d6b4	sxtw	x0, w0
000000010002d6b8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002d6bc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002d6c0	str	x22, [x20, #0x18]
000000010002d6c4	str	x22, [sp, #0x8]
000000010002d6c8	add	x0, sp, #0x8
000000010002d6cc	orr	w1, wzr, #0x8
000000010002d6d0	bl	0x10000d840
000000010002d6d4	mov	x8, #0x1353
000000010002d6d8	movk	x8, #0xb78c, lsl #16
000000010002d6dc	movk	x8, #0xcfb2, lsl #32
000000010002d6e0	movk	x8, #0x3521, lsl #48
000000010002d6e4	umulh	x8, x0, x8
000000010002d6e8	sub	x9, x0, x8
000000010002d6ec	add	x8, x8, x9, lsr #1
000000010002d6f0	lsr	x8, x8, #5
000000010002d6f4	mov	w9, #0x35
000000010002d6f8	msub	x8, x8, x9, x0
000000010002d6fc	adr	x9, #92292
000000010002d700	nop
000000010002d704	add	x8, x9, x8, lsl #3
000000010002d708	ldr	x9, [x8]
000000010002d70c	str	x9, [x20]
000000010002d710	cbz	x9, 0x10002d718
000000010002d714	str	x20, [x9, #0x8]
000000010002d718	str	x20, [x8]
000000010002d71c	str	x8, [x20, #0x8]
000000010002d720	ldr	x0, [x20, #0x20]
000000010002d724	mov	x1, x19
000000010002d728	mov	w2, #0x0
000000010002d72c	mov	x3, #0x0
000000010002d730	bl	0x100030e00 ; symbol stub for: _dispatch_mach_connect
000000010002d734	ldp	x29, x30, [sp, #0x30]
000000010002d738	ldp	x20, x19, [sp, #0x20]
000000010002d73c	ldp	x22, x21, [sp, #0x10]
000000010002d740	add	sp, sp, #0x40
000000010002d744	ret
000000010002d748	stp	x20, x19, [sp, #-0x20]!
000000010002d74c	stp	x29, x30, [sp, #0x10]
000000010002d750	add	x29, sp, #0x10
000000010002d754	mov	w0, w0
000000010002d758	mov	w1, #0x0
000000010002d75c	bl	0x10002ce58
000000010002d760	mov	x19, x0
000000010002d764	cbz	x19, 0x10002d794
000000010002d768	ldrb	w8, [x19, #0x3a]
000000010002d76c	tbnz	w8, #0x0, 0x10002d77c
000000010002d770	ldr	x0, [x19, #0x20]
000000010002d774	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010002d778	b	0x10002d784
000000010002d77c	ldr	x0, [x19, #0x20]
000000010002d780	bl	0x100030df4 ; symbol stub for: _dispatch_mach_cancel
000000010002d784	mov	x0, x19
000000010002d788	ldp	x29, x30, [sp, #0x10]
000000010002d78c	ldp	x20, x19, [sp], #0x20
000000010002d790	b	0x10002ddd0
000000010002d794	adr	x0, #63034 ; literal pool for: "attempt to remove non-existent server port"
000000010002d798	nop
000000010002d79c	bl	0x100028f84
000000010002d7a0	sub	sp, sp, #0x50
000000010002d7a4	stp	x24, x23, [sp, #0x10]
000000010002d7a8	stp	x22, x21, [sp, #0x20]
000000010002d7ac	stp	x20, x19, [sp, #0x30]
000000010002d7b0	stp	x29, x30, [sp, #0x40]
000000010002d7b4	add	x29, sp, #0x40
000000010002d7b8	mov	x22, x2
000000010002d7bc	mov	x23, x1
000000010002d7c0	mov	x24, x0
000000010002d7c4	mov	w21, w24
000000010002d7c8	bl	0x10000d8e0
000000010002d7cc	mov	x3, x0
000000010002d7d0	nop
000000010002d7d4	ldr	x0, #0x1286c ; literal pool symbol address: __dispatch_source_type_mach_recv
000000010002d7d8	mov	x1, x21
000000010002d7dc	mov	x2, #0x0
000000010002d7e0	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
000000010002d7e4	mov	x19, x0
000000010002d7e8	orr	w0, wzr, #0x40
000000010002d7ec	bl	0x10000d464
000000010002d7f0	mov	x20, x0
000000010002d7f4	strb	wzr, [x20, #0x38]
000000010002d7f8	str	x21, [x20, #0x10]
000000010002d7fc	mov	x0, x24
000000010002d800	bl	0x10000884c
000000010002d804	cbz	w0, 0x10002d814
000000010002d808	sxtw	x0, w0
000000010002d80c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002d810	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002d814	strb	wzr, [x20, #0x39]
000000010002d818	stp	x19, x23, [x20, #0x20]
000000010002d81c	str	x22, [x20, #0x30]
000000010002d820	mov	x0, x19
000000010002d824	mov	x1, x20
000000010002d828	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002d82c	adr	x1, #160
000000010002d830	nop
000000010002d834	mov	x0, x19
000000010002d838	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
000000010002d83c	adr	x1, #256
000000010002d840	nop
000000010002d844	mov	x0, x19
000000010002d848	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
000000010002d84c	str	x21, [x20, #0x18]
000000010002d850	str	x21, [sp, #0x8]
000000010002d854	add	x0, sp, #0x8
000000010002d858	orr	w1, wzr, #0x8
000000010002d85c	bl	0x10000d840
000000010002d860	mov	x8, #0x1353
000000010002d864	movk	x8, #0xb78c, lsl #16
000000010002d868	movk	x8, #0xcfb2, lsl #32
000000010002d86c	movk	x8, #0x3521, lsl #48
000000010002d870	umulh	x8, x0, x8
000000010002d874	sub	x9, x0, x8
000000010002d878	add	x8, x8, x9, lsr #1
000000010002d87c	lsr	x8, x8, #5
000000010002d880	mov	w9, #0x35
000000010002d884	msub	x8, x8, x9, x0
000000010002d888	adr	x9, #91896
000000010002d88c	nop
000000010002d890	add	x8, x9, x8, lsl #3
000000010002d894	ldr	x9, [x8]
000000010002d898	str	x9, [x20]
000000010002d89c	cbz	x9, 0x10002d8a4
000000010002d8a0	str	x20, [x9, #0x8]
000000010002d8a4	str	x20, [x8]
000000010002d8a8	str	x8, [x20, #0x8]
000000010002d8ac	mov	x0, x19
000000010002d8b0	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010002d8b4	ldp	x29, x30, [sp, #0x40]
000000010002d8b8	ldp	x20, x19, [sp, #0x30]
000000010002d8bc	ldp	x22, x21, [sp, #0x20]
000000010002d8c0	ldp	x24, x23, [sp, #0x10]
000000010002d8c4	add	sp, sp, #0x50
000000010002d8c8	ret
000000010002d8cc	stp	x20, x19, [sp, #-0x20]!
000000010002d8d0	stp	x29, x30, [sp, #0x10]
000000010002d8d4	add	x29, sp, #0x10
000000010002d8d8	mov	x19, x0
000000010002d8dc	ldrb	w20, [x19, #0x39]
000000010002d8e0	ldp	x8, x1, [x19, #0x28]
000000010002d8e4	ldrb	w9, [x19, #0x38]
000000010002d8e8	cmp	w9, #0x1
000000010002d8ec	b.ne	0x10002d8fc
000000010002d8f0	ldr	x9, [x19, #0x18]
000000010002d8f4	adrp	x10, 22 ; 0x100043000
000000010002d8f8	str	w9, [x10, #0x4a0]
000000010002d8fc	mov	x0, x20
000000010002d900	blr	x8
000000010002d904	cbz	w20, 0x10002d924
000000010002d908	ldrb	w8, [x19, #0x3a]
000000010002d90c	tbnz	w8, #0x0, 0x10002d91c
000000010002d910	ldr	x0, [x19, #0x20]
000000010002d914	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010002d918	b	0x10002d924
000000010002d91c	ldr	x0, [x19, #0x20]
000000010002d920	bl	0x100030df4 ; symbol stub for: _dispatch_mach_cancel
000000010002d924	adrp	x8, 22 ; 0x100043000
000000010002d928	mov	w9, #-0x1
000000010002d92c	str	w9, [x8, #0x4a0]
000000010002d930	ldp	x29, x30, [sp, #0x10]
000000010002d934	ldp	x20, x19, [sp], #0x20
000000010002d938	ret
000000010002d93c	stp	x20, x19, [sp, #-0x20]!
000000010002d940	stp	x29, x30, [sp, #0x10]
000000010002d944	add	x29, sp, #0x10
000000010002d948	mov	x19, x0
000000010002d94c	ldrb	w8, [x19, #0x38]
000000010002d950	ldr	x0, [x19, #0x10]
000000010002d954	cmp	w8, #0x1
000000010002d958	b.eq	0x10002d97c
000000010002d95c	cbnz	w8, 0x10002d998
000000010002d960	ldrb	w8, [x19, #0x39]
000000010002d964	cmp	w8, #0x46
000000010002d968	b.eq	0x10002d998
000000010002d96c	bl	0x10000888c
000000010002d970	cbz	w0, 0x10002d998
000000010002d974	sxtw	x0, w0
000000010002d978	b	0x10002d990
000000010002d97c	bl	0x100030c74 ; symbol stub for: _close
000000010002d980	cmn	w0, #0x1
000000010002d984	b.ne	0x10002d998
000000010002d988	bl	0x100030adc ; symbol stub for: ___error
000000010002d98c	ldrsw	x0, [x0]
000000010002d990	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002d994	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002d998	ldr	x0, [x19, #0x20]
000000010002d99c	bl	0x100030e60 ; symbol stub for: _dispatch_release
000000010002d9a0	ldr	x8, [x19, #0x28]
000000010002d9a4	cbz	x8, 0x10002d9b0
000000010002d9a8	mov	x0, x19
000000010002d9ac	bl	0x10002ddd0
000000010002d9b0	mov	x0, x19
000000010002d9b4	ldp	x29, x30, [sp, #0x10]
000000010002d9b8	ldp	x20, x19, [sp], #0x20
000000010002d9bc	b	0x100031010 ; symbol stub for: _free
000000010002d9c0	sub	sp, sp, #0x50
000000010002d9c4	stp	x24, x23, [sp, #0x10]
000000010002d9c8	stp	x22, x21, [sp, #0x20]
000000010002d9cc	stp	x20, x19, [sp, #0x30]
000000010002d9d0	stp	x29, x30, [sp, #0x40]
000000010002d9d4	add	x29, sp, #0x40
000000010002d9d8	mov	x20, x2
000000010002d9dc	mov	x22, x1
000000010002d9e0	mov	x21, x0
000000010002d9e4	bl	0x100030f74 ; symbol stub for: _dup
000000010002d9e8	sxtw	x23, w0
000000010002d9ec	cmn	w0, #0x1
000000010002d9f0	b.ne	0x10002da04
000000010002d9f4	bl	0x100030adc ; symbol stub for: ___error
000000010002d9f8	ldrsw	x0, [x0]
000000010002d9fc	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002da00	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002da04	bl	0x10000d8e0
000000010002da08	mov	x3, x0
000000010002da0c	nop
000000010002da10	ldr	x0, #0x12648 ; literal pool symbol address: __dispatch_source_type_read
000000010002da14	mov	x1, x23
000000010002da18	mov	x2, #0x0
000000010002da1c	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
000000010002da20	mov	x19, x0
000000010002da24	adr	x1, #-344
000000010002da28	nop
000000010002da2c	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
000000010002da30	adr	x1, #-244
000000010002da34	nop
000000010002da38	mov	x0, x19
000000010002da3c	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
000000010002da40	orr	w0, wzr, #0x40
000000010002da44	bl	0x10000d464
000000010002da48	mov	x24, x0
000000010002da4c	orr	w8, wzr, #0x1
000000010002da50	strh	w8, [x24, #0x38]
000000010002da54	stp	x19, x22, [x24, #0x20]
000000010002da58	str	x20, [x24, #0x30]
000000010002da5c	sxtw	x8, w21
000000010002da60	stp	x23, x8, [x24, #0x10]
000000010002da64	str	x8, [sp, #0x8]
000000010002da68	add	x0, sp, #0x8
000000010002da6c	orr	w1, wzr, #0x8
000000010002da70	bl	0x10000d840
000000010002da74	mov	x8, #0x1353
000000010002da78	movk	x8, #0xb78c, lsl #16
000000010002da7c	movk	x8, #0xcfb2, lsl #32
000000010002da80	movk	x8, #0x3521, lsl #48
000000010002da84	umulh	x8, x0, x8
000000010002da88	sub	x9, x0, x8
000000010002da8c	add	x8, x8, x9, lsr #1
000000010002da90	lsr	x8, x8, #5
000000010002da94	mov	w9, #0x35
000000010002da98	msub	x8, x8, x9, x0
000000010002da9c	adr	x9, #91364
000000010002daa0	nop
000000010002daa4	add	x8, x9, x8, lsl #3
000000010002daa8	ldr	x9, [x8]
000000010002daac	str	x9, [x24]
000000010002dab0	cbz	x9, 0x10002dab8
000000010002dab4	str	x24, [x9, #0x8]
000000010002dab8	str	x24, [x8]
000000010002dabc	str	x8, [x24, #0x8]
000000010002dac0	mov	x0, x19
000000010002dac4	mov	x1, x24
000000010002dac8	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002dacc	mov	x0, x19
000000010002dad0	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010002dad4	ldp	x29, x30, [sp, #0x40]
000000010002dad8	ldp	x20, x19, [sp, #0x30]
000000010002dadc	ldp	x22, x21, [sp, #0x20]
000000010002dae0	ldp	x24, x23, [sp, #0x10]
000000010002dae4	add	sp, sp, #0x50
000000010002dae8	ret
000000010002daec	sub	sp, sp, #0x50
000000010002daf0	stp	x24, x23, [sp, #0x10]
000000010002daf4	stp	x22, x21, [sp, #0x20]
000000010002daf8	stp	x20, x19, [sp, #0x30]
000000010002dafc	stp	x29, x30, [sp, #0x40]
000000010002db00	add	x29, sp, #0x40
000000010002db04	mov	x21, x3
000000010002db08	mov	x24, x2
000000010002db0c	mov	x23, x1
000000010002db10	mov	x22, x0
000000010002db14	orr	w0, wzr, #0x40
000000010002db18	bl	0x10000d464
000000010002db1c	mov	x19, x0
000000010002db20	strb	wzr, [x19, #0x38]
000000010002db24	mov	w20, w22
000000010002db28	stp	x20, x20, [x19, #0x10]
000000010002db2c	stp	x24, x21, [x19, #0x28]
000000010002db30	cmp	w23, #0x48
000000010002db34	b.ne	0x10002dbb0
000000010002db38	bl	0x10000d8e0
000000010002db3c	mov	x3, x0
000000010002db40	nop
000000010002db44	ldr	x0, #0x12504 ; literal pool symbol address: __dispatch_source_type_mach_send
000000010002db48	orr	w2, wzr, #0x1
000000010002db4c	mov	x1, x20
000000010002db50	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
000000010002db54	mov	x21, x0
000000010002db58	mov	x1, x19
000000010002db5c	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002db60	adr	x1, #-660
000000010002db64	nop
000000010002db68	mov	x0, x21
000000010002db6c	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
000000010002db70	adr	x1, #-564
000000010002db74	nop
000000010002db78	mov	x0, x21
000000010002db7c	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
000000010002db80	mov	x0, x22
000000010002db84	bl	0x10000886c
000000010002db88	cbz	w0, 0x10002db98
000000010002db8c	sxtw	x0, w0
000000010002db90	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002db94	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002db98	orr	w8, wzr, #0x3
000000010002db9c	strb	w8, [x19, #0x39]
000000010002dba0	str	x21, [x19, #0x20]
000000010002dba4	mov	x0, x21
000000010002dba8	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010002dbac	b	0x10002dc84
000000010002dbb0	sub	w8, w23, #0x45
000000010002dbb4	cmp	w8, #0x1
000000010002dbb8	b.hi	0x10002dc84
000000010002dbbc	bl	0x10000d8e0
000000010002dbc0	mov	x3, x0
000000010002dbc4	nop
000000010002dbc8	ldr	x0, #0x12470 ; literal pool symbol address: __dispatch_source_type_data_add
000000010002dbcc	mov	x1, #0x0
000000010002dbd0	mov	x2, #0x0
000000010002dbd4	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
000000010002dbd8	mov	x21, x0
000000010002dbdc	mov	x1, x19
000000010002dbe0	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002dbe4	adr	x1, #-792
000000010002dbe8	nop
000000010002dbec	mov	x0, x21
000000010002dbf0	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
000000010002dbf4	adr	x1, #-696
000000010002dbf8	nop
000000010002dbfc	mov	x0, x21
000000010002dc00	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
000000010002dc04	mov	x0, x21
000000010002dc08	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010002dc0c	cmp	w23, #0x45
000000010002dc10	b.ne	0x10002dc8c
000000010002dc14	str	wzr, [sp, #0x8]
000000010002dc18	mov	x0, x22
000000010002dc1c	bl	0x10000884c
000000010002dc20	cbz	w0, 0x10002dc30
000000010002dc24	sxtw	x0, w0
000000010002dc28	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002dc2c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002dc30	nop
000000010002dc34	ldr	w1, 0x100044430
000000010002dc38	add	x2, sp, #0x8
000000010002dc3c	mov	x0, x22
000000010002dc40	bl	0x100008934
000000010002dc44	mov	x22, x0
000000010002dc48	ldr	w8, [sp, #0x8]
000000010002dc4c	cbz	w8, 0x10002dc7c
000000010002dc50	adr	x2, #61240 ; literal pool for: "Attempt to share port-destroyed. Ignoring."
000000010002dc54	nop
000000010002dc58	orr	w1, wzr, #0x4
000000010002dc5c	mov	x0, #0x0
000000010002dc60	bl	0x100029dbc
000000010002dc64	ldr	w0, [sp, #0x8]
000000010002dc68	bl	0x10000888c
000000010002dc6c	cbz	w0, 0x10002dc7c
000000010002dc70	sxtw	x0, w0
000000010002dc74	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002dc78	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002dc7c	orr	w8, wzr, #0x2
000000010002dc80	b	0x10002dce0
000000010002dc84	mov	w22, #0x0
000000010002dc88	b	0x10002dce8
000000010002dc8c	str	wzr, [sp, #0x8]
000000010002dc90	nop
000000010002dc94	ldr	w1, 0x100044430
000000010002dc98	add	x2, sp, #0x8
000000010002dc9c	mov	x0, x22
000000010002dca0	bl	0x100008974
000000010002dca4	mov	x22, x0
000000010002dca8	ldr	w8, [sp, #0x8]
000000010002dcac	cbz	w8, 0x10002dcdc
000000010002dcb0	adr	x2, #61187 ; literal pool for: "Attempt to share no-senders. Ignoring."
000000010002dcb4	nop
000000010002dcb8	orr	w1, wzr, #0x4
000000010002dcbc	mov	x0, #0x0
000000010002dcc0	bl	0x100029dbc
000000010002dcc4	ldr	w0, [sp, #0x8]
000000010002dcc8	bl	0x10000888c
000000010002dccc	cbz	w0, 0x10002dcdc
000000010002dcd0	sxtw	x0, w0
000000010002dcd4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002dcd8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002dcdc	orr	w8, wzr, #0x1
000000010002dce0	strb	w8, [x19, #0x39]
000000010002dce4	str	x21, [x19, #0x20]
000000010002dce8	str	x20, [x19, #0x18]
000000010002dcec	str	x20, [sp, #0x8]
000000010002dcf0	add	x0, sp, #0x8
000000010002dcf4	orr	w1, wzr, #0x8
000000010002dcf8	bl	0x10000d840
000000010002dcfc	mov	x8, #0x1353
000000010002dd00	movk	x8, #0xb78c, lsl #16
000000010002dd04	movk	x8, #0xcfb2, lsl #32
000000010002dd08	movk	x8, #0x3521, lsl #48
000000010002dd0c	umulh	x8, x0, x8
000000010002dd10	sub	x9, x0, x8
000000010002dd14	add	x8, x8, x9, lsr #1
000000010002dd18	lsr	x8, x8, #5
000000010002dd1c	mov	w9, #0x35
000000010002dd20	msub	x8, x8, x9, x0
000000010002dd24	adr	x9, #90716
000000010002dd28	nop
000000010002dd2c	add	x8, x9, x8, lsl #3
000000010002dd30	ldr	x9, [x8]
000000010002dd34	str	x9, [x19]
000000010002dd38	cbz	x9, 0x10002dd40
000000010002dd3c	str	x19, [x9, #0x8]
000000010002dd40	str	x19, [x8]
000000010002dd44	str	x8, [x19, #0x8]
000000010002dd48	mov	x0, x22
000000010002dd4c	ldp	x29, x30, [sp, #0x40]
000000010002dd50	ldp	x20, x19, [sp, #0x30]
000000010002dd54	ldp	x22, x21, [sp, #0x20]
000000010002dd58	ldp	x24, x23, [sp, #0x10]
000000010002dd5c	add	sp, sp, #0x50
000000010002dd60	ret
000000010002dd64	stp	x20, x19, [sp, #-0x20]!
000000010002dd68	stp	x29, x30, [sp, #0x10]
000000010002dd6c	add	x29, sp, #0x10
000000010002dd70	mov	w0, w0
000000010002dd74	mov	w1, #0x0
000000010002dd78	bl	0x10002ce58
000000010002dd7c	mov	x19, x0
000000010002dd80	cbz	x19, 0x10002ddb8
000000010002dd84	ldrb	w8, [x19, #0x39]
000000010002dd88	cbz	w8, 0x10002ddc4
000000010002dd8c	ldrb	w8, [x19, #0x3a]
000000010002dd90	tbnz	w8, #0x0, 0x10002dda0
000000010002dd94	ldr	x0, [x19, #0x20]
000000010002dd98	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010002dd9c	b	0x10002dda8
000000010002dda0	ldr	x0, [x19, #0x20]
000000010002dda4	bl	0x100030df4 ; symbol stub for: _dispatch_mach_cancel
000000010002dda8	mov	x0, x19
000000010002ddac	ldp	x29, x30, [sp, #0x10]
000000010002ddb0	ldp	x20, x19, [sp], #0x20
000000010002ddb4	b	0x10002ddd0
000000010002ddb8	adr	x0, #60962 ; literal pool for: "attempt to cancel notification on non-existent port entry"
000000010002ddbc	nop
000000010002ddc0	bl	0x100028f84
000000010002ddc4	adr	x0, #61008 ; literal pool for: "attempt to cancel non-notification port entry"
000000010002ddc8	nop
000000010002ddcc	bl	0x100028f84
000000010002ddd0	ldr	x8, [x0]
000000010002ddd4	cmn	x8, #0x1
000000010002ddd8	b.eq	0x10002dde8
000000010002dddc	cbnz	x8, 0x10002de0c
000000010002dde0	add	x9, x0, #0x8
000000010002dde4	b	0x10002de18
000000010002dde8	mov	x9, x0
000000010002ddec	ldr	x10, [x9, #0x8]!
000000010002ddf0	cmn	x10, #0x1
000000010002ddf4	b.ne	0x10002de14
000000010002ddf8	stp	x29, x30, [sp, #-0x10]!
000000010002ddfc	mov	x29, sp
000000010002de00	adr	x0, #61433 ; literal pool for: "multiple removals of port entry"
000000010002de04	nop
000000010002de08	bl	0x100028f84
000000010002de0c	mov	x9, x0
000000010002de10	ldr	x10, [x9, #0x8]!
000000010002de14	str	x10, [x8, #0x8]
000000010002de18	ldr	x9, [x9]
000000010002de1c	str	x8, [x9]
000000010002de20	mov	x8, #-0x1
000000010002de24	stp	x8, x8, [x0]
000000010002de28	str	xzr, [x0, #0x28]
000000010002de2c	ret
000000010002de30	stp	x20, x19, [sp, #-0x20]!
000000010002de34	stp	x29, x30, [sp, #0x10]
000000010002de38	add	x29, sp, #0x10
000000010002de3c	mov	w0, w0
000000010002de40	mov	w1, #0x0
000000010002de44	bl	0x10002ce58
000000010002de48	mov	x19, x0
000000010002de4c	cbz	x19, 0x10002de84
000000010002de50	ldrb	w8, [x19, #0x39]
000000010002de54	cbnz	w8, 0x10002de90
000000010002de58	ldrb	w8, [x19, #0x3a]
000000010002de5c	tbnz	w8, #0x0, 0x10002de6c
000000010002de60	ldr	x0, [x19, #0x20]
000000010002de64	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010002de68	b	0x10002de74
000000010002de6c	ldr	x0, [x19, #0x20]
000000010002de70	bl	0x100030df4 ; symbol stub for: _dispatch_mach_cancel
000000010002de74	mov	x0, x19
000000010002de78	ldp	x29, x30, [sp, #0x10]
000000010002de7c	ldp	x20, x19, [sp], #0x20
000000010002de80	b	0x10002ddd0
000000010002de84	adr	x0, #60862 ; literal pool for: "attempt to remove non-existent port entry"
000000010002de88	nop
000000010002de8c	bl	0x100028f84
000000010002de90	adr	x0, #60892 ; literal pool for: "attempt to remove port not being actively listened on"
000000010002de94	nop
000000010002de98	bl	0x100028f84
000000010002de9c	stp	x20, x19, [sp, #-0x20]!
000000010002dea0	stp	x29, x30, [sp, #0x10]
000000010002dea4	add	x29, sp, #0x10
000000010002dea8	sxtw	x0, w0
000000010002deac	orr	w1, wzr, #0x1
000000010002deb0	bl	0x10002ce58
000000010002deb4	mov	x19, x0
000000010002deb8	cbz	x19, 0x10002dee8
000000010002debc	ldrb	w8, [x19, #0x3a]
000000010002dec0	tbnz	w8, #0x0, 0x10002ded0
000000010002dec4	ldr	x0, [x19, #0x20]
000000010002dec8	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010002decc	b	0x10002ded8
000000010002ded0	ldr	x0, [x19, #0x20]
000000010002ded4	bl	0x100030df4 ; symbol stub for: _dispatch_mach_cancel
000000010002ded8	mov	x0, x19
000000010002dedc	ldp	x29, x30, [sp, #0x10]
000000010002dee0	ldp	x20, x19, [sp], #0x20
000000010002dee4	b	0x10002ddd0
000000010002dee8	adr	x0, #60858 ; literal pool for: "attempt to remove non-existent socket entry"
000000010002deec	nop
000000010002def0	bl	0x100028f84
000000010002def4	stp	x22, x21, [sp, #-0x30]!
000000010002def8	stp	x20, x19, [sp, #0x10]
000000010002defc	stp	x29, x30, [sp, #0x20]
000000010002df00	add	x29, sp, #0x20
000000010002df04	sub	sp, sp, #0x10
000000010002df08	mov	x19, x1
000000010002df0c	mov	x20, x0
000000010002df10	nop
000000010002df14	ldr	x8, #0x12104 ; literal pool symbol address: ___stack_chk_guard
000000010002df18	ldr	x8, [x8]
000000010002df1c	stur	x8, [x29, #-0x28]
000000010002df20	adrp	x8, 22 ; 0x100043000
000000010002df24	ldrb	w8, [x8, #0xf68]
000000010002df28	cmp	w8, #0x1
000000010002df2c	b.eq	0x10002e028
000000010002df30	mov	w0, w20
000000010002df34	mov	w1, #0x0
000000010002df38	bl	0x10002ce58
000000010002df3c	cbz	x0, 0x10002df4c
000000010002df40	ldr	x8, [x0, #0x30]
000000010002df44	adrp	x9, 22 ; 0x100043000
000000010002df48	str	x8, [x9, #0xee0]
000000010002df4c	adr	x1, #60839 ; literal pool for: "mig-request"
000000010002df50	nop
000000010002df54	mov	x0, x19
000000010002df58	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002df5c	mov	x21, x0
000000010002df60	cbz	x21, 0x10002dfe4
000000010002df64	mov	x0, x21
000000010002df68	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002df6c	nop
000000010002df70	ldr	x8, #0x12140 ; literal pool symbol address: __xpc_type_data
000000010002df74	cmp	x0, x8
000000010002df78	b.ne	0x10002dff0
000000010002df7c	adrp	x22, 23 ; 0x100044000
000000010002df80	orr	w8, wzr, #0x1
000000010002df84	strb	w8, [x22, #0x434]
000000010002df88	mov	x0, x21
000000010002df8c	bl	0x1000319dc ; symbol stub for: _xpc_data_get_bytes_ptr
000000010002df90	mov	x19, x0
000000010002df94	nop
000000010002df98	ldr	x1, #0x15fc8
000000010002df9c	mov	x8, sp
000000010002dfa0	add	x9, x1, #0xf
000000010002dfa4	and	x9, x9, #0xfffffffffffffff0
000000010002dfa8	sub	x20, x8, x9
000000010002dfac	mov	sp, x20
000000010002dfb0	mov	x0, x20
000000010002dfb4	bl	0x100030c2c ; symbol stub for: _bzero
000000010002dfb8	adr	x2, #124
000000010002dfbc	nop
000000010002dfc0	mov	x0, x19
000000010002dfc4	mov	x1, x20
000000010002dfc8	bl	0x100030bb4 ; symbol stub for: __xpc_pipe_handle_mig
000000010002dfcc	cbz	w0, 0x10002dfdc
000000010002dfd0	sxtw	x0, w0
000000010002dfd4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002dfd8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002dfdc	strb	wzr, [x22, #0x434]
000000010002dfe0	b	0x10002dff0
000000010002dfe4	mov	x0, x20
000000010002dfe8	mov	x1, x19
000000010002dfec	bl	0x10002e190
000000010002dff0	adrp	x8, 22 ; 0x100043000
000000010002dff4	str	xzr, [x8, #0xee0]
000000010002dff8	ldur	x8, [x29, #-0x28]
000000010002dffc	nop
000000010002e000	ldr	x9, #0x12018 ; literal pool symbol address: ___stack_chk_guard
000000010002e004	ldr	x9, [x9]
000000010002e008	cmp	x9, x8
000000010002e00c	b.ne	0x10002e024
000000010002e010	sub	sp, x29, #0x20
000000010002e014	ldp	x29, x30, [sp, #0x20]
000000010002e018	ldp	x20, x19, [sp, #0x10]
000000010002e01c	ldp	x22, x21, [sp], #0x30
000000010002e020	ret
000000010002e024	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002e028	adr	x0, #60582 ; literal pool for: "attempt to re-enter the server layer"
000000010002e02c	nop
000000010002e030	bl	0x100028f84
000000010002e034	sub	sp, sp, #0x90
000000010002e038	stp	x26, x25, [sp, #0x40]
000000010002e03c	stp	x24, x23, [sp, #0x50]
000000010002e040	stp	x22, x21, [sp, #0x60]
000000010002e044	stp	x20, x19, [sp, #0x70]
000000010002e048	stp	x29, x30, [sp, #0x80]
000000010002e04c	add	x29, sp, #0x80
000000010002e050	mov	x21, x1
000000010002e054	mov	x20, x0
000000010002e058	bl	0x1000089b4
000000010002e05c	mov	x19, x0
000000010002e060	bl	0x10002e958
000000010002e064	adrp	x22, 21 ; 0x100043000
000000010002e068	str	x20, [x22, #0xf70]
000000010002e06c	ldr	w8, [x20, #0x4]
000000010002e070	add	x9, x8, #0x3
000000010002e074	and	x9, x9, #0x1fffffffc
000000010002e078	add	x9, x9, #0x34
000000010002e07c	adrp	x23, 21 ; 0x100043000
000000010002e080	str	x9, [x23, #0xf78]
000000010002e084	adrp	x24, 21 ; 0x100043000
000000010002e088	ldr	x9, [x24, #0xf50]
000000010002e08c	cbz	x9, 0x10002e0c4
000000010002e090	mov	x25, #0x0
000000010002e094	adrp	x26, 21 ; 0x100043000
000000010002e098	ldr	x8, [x26, #0xf58]
000000010002e09c	ldr	x8, [x8, x25, lsl #3]
000000010002e0a0	mov	x0, x20
000000010002e0a4	mov	x1, x21
000000010002e0a8	blr	x8
000000010002e0ac	cbnz	w0, 0x10002e168
000000010002e0b0	add	x25, x25, #0x1
000000010002e0b4	ldr	x8, [x24, #0xf50]
000000010002e0b8	cmp	x25, x8
000000010002e0bc	b.lo	0x10002e098
000000010002e0c0	ldr	w8, [x20, #0x4]
000000010002e0c4	mov	w21, #0x4
000000010002e0c8	movk	w21, #0x1, lsl #16
000000010002e0cc	ldr	w9, [x19, #0x14]
000000010002e0d0	ldr	w10, [x20]
000000010002e0d4	ldp	w11, w12, [x20, #0x8]
000000010002e0d8	ldr	w13, [x20, #0x14]
000000010002e0dc	stp	x12, x13, [sp, #0x28]
000000010002e0e0	stp	x8, x11, [sp, #0x18]
000000010002e0e4	stp	x9, x10, [sp, #0x8]
000000010002e0e8	adr	x8, #89600
000000010002e0ec	nop
000000010002e0f0	add	x20, x8, #0x10
000000010002e0f4	str	x20, [sp]
000000010002e0f8	adr	x2, #60705 ; literal pool for: "%s.%d sent an invalid request: msgh_bits = 0x%x, msgh_size = %u, msgh_remote_port = 0x%x, msgh_local_port = 0x%x, msgh_id = 0x%x"
000000010002e0fc	nop
000000010002e100	mov	w1, #0x4
000000010002e104	movk	w1, #0x1, lsl #16
000000010002e108	mov	x0, #0x0
000000010002e10c	bl	0x100029dbc
000000010002e110	adr	x8, #90995
000000010002e114	nop
000000010002e118	ldrb	w8, [x8]
000000010002e11c	cbz	w8, 0x10002e160
000000010002e120	add	w1, w21, #0x1
000000010002e124	ldr	w8, [x19, #0x14]
000000010002e128	stp	x20, x8, [sp]
000000010002e12c	adr	x2, #60782 ; literal pool for: "Killing sender of bogus IPC message: %s.%d"
000000010002e130	nop
000000010002e134	mov	x0, #0x0
000000010002e138	bl	0x100029dbc
000000010002e13c	ldr	w0, [x19, #0x14]
000000010002e140	orr	w1, wzr, #0x6
000000010002e144	bl	0x1000311a8 ; symbol stub for: _kill
000000010002e148	cmn	w0, #0x1
000000010002e14c	b.ne	0x10002e160
000000010002e150	bl	0x100030adc ; symbol stub for: ___error
000000010002e154	ldrsw	x0, [x0]
000000010002e158	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002e15c	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002e160	mov	w0, #0x0
000000010002e164	b	0x10002e16c
000000010002e168	orr	w0, wzr, #0x1
000000010002e16c	str	xzr, [x22, #0xf70]
000000010002e170	str	xzr, [x23, #0xf78]
000000010002e174	ldp	x29, x30, [sp, #0x80]
000000010002e178	ldp	x20, x19, [sp, #0x70]
000000010002e17c	ldp	x22, x21, [sp, #0x60]
000000010002e180	ldp	x24, x23, [sp, #0x50]
000000010002e184	ldp	x26, x25, [sp, #0x40]
000000010002e188	add	sp, sp, #0x90
000000010002e18c	ret
000000010002e190	sub	sp, sp, #0x80
000000010002e194	stp	x24, x23, [sp, #0x40]
000000010002e198	stp	x22, x21, [sp, #0x50]
000000010002e19c	stp	x20, x19, [sp, #0x60]
000000010002e1a0	stp	x29, x30, [sp, #0x70]
000000010002e1a4	add	x29, sp, #0x70
000000010002e1a8	mov	x19, x1
000000010002e1ac	mov	x20, x0
000000010002e1b0	adrp	x22, 21 ; 0x100043000
000000010002e1b4	ldrb	w8, [x22, #0xf68]
000000010002e1b8	cmp	w8, #0x1
000000010002e1bc	b.eq	0x10002e40c
000000010002e1c0	orr	w8, wzr, #0x1
000000010002e1c4	strb	w8, [x22, #0xf68]
000000010002e1c8	adrp	x23, 21 ; 0x100043000
000000010002e1cc	strb	wzr, [x23, #0xf28]
000000010002e1d0	adr	x1, #60195 ; literal pool for: "mig-request"
000000010002e1d4	nop
000000010002e1d8	mov	x0, x19
000000010002e1dc	mov	x2, #0x0
000000010002e1e0	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
000000010002e1e4	str	xzr, [sp, #0x18]
000000010002e1e8	add	x1, sp, #0x20
000000010002e1ec	mov	x0, x19
000000010002e1f0	bl	0x100031a60 ; symbol stub for: _xpc_dictionary_get_audit_token
000000010002e1f4	add	x0, sp, #0x20
000000010002e1f8	bl	0x10002e958
000000010002e1fc	adr	x1, #60751 ; literal pool for: "subsystem"
000000010002e200	nop
000000010002e204	mov	x0, x19
000000010002e208	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010002e20c	mov	x21, x0
000000010002e210	cbz	w21, 0x10002e264
000000010002e214	cmp	w21, #0x8
000000010002e218	b.gt	0x10002e264
000000010002e21c	adr	x1, #60729 ; literal pool for: "routine"
000000010002e220	nop
000000010002e224	mov	x0, x19
000000010002e228	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010002e22c	mov	x8, x0
000000010002e230	cbz	w8, 0x10002e264
000000010002e234	nop
000000010002e238	ldr	x9, #0x15d00
000000010002e23c	cbz	x9, 0x10002e264
000000010002e240	mov	x10, #0x0
000000010002e244	nop
000000010002e248	ldr	x11, #0x15d00
000000010002e24c	ldr	w12, [x11, x10, lsl #2]
000000010002e250	cmp	w12, w21
000000010002e254	b.eq	0x10002e300
000000010002e258	add	x10, x10, #0x1
000000010002e25c	cmp	x10, x9
000000010002e260	b.lo	0x10002e24c
000000010002e264	adr	x1, #60600 ; literal pool for: "xpc demux failed"
000000010002e268	nop
000000010002e26c	mov	x0, x19
000000010002e270	bl	0x10002e468
000000010002e274	adr	x19, #89164
000000010002e278	nop
000000010002e27c	ldr	w8, [x19, #0x14]
000000010002e280	adr	x9, #89192
000000010002e284	nop
000000010002e288	add	x20, x9, #0x10
000000010002e28c	stp	x20, x8, [sp]
000000010002e290	adr	x2, #60573 ; literal pool for: "%s.%d sent an invalid request"
000000010002e294	nop
000000010002e298	mov	w1, #0x5
000000010002e29c	movk	w1, #0x1, lsl #16
000000010002e2a0	mov	x0, #0x0
000000010002e2a4	bl	0x100029dbc
000000010002e2a8	adr	x8, #90587
000000010002e2ac	nop
000000010002e2b0	ldrb	w8, [x8]
000000010002e2b4	cbz	w8, 0x10002e3f0
000000010002e2b8	ldr	w8, [x19, #0x14]
000000010002e2bc	stp	x20, x8, [sp]
000000010002e2c0	adr	x2, #60378 ; literal pool for: "Killing sender of bogus IPC message: %s.%d"
000000010002e2c4	nop
000000010002e2c8	mov	w1, #0x5
000000010002e2cc	movk	w1, #0x1, lsl #16
000000010002e2d0	mov	x0, #0x0
000000010002e2d4	bl	0x100029dbc
000000010002e2d8	ldr	w0, [x19, #0x14]
000000010002e2dc	orr	w1, wzr, #0x6
000000010002e2e0	bl	0x1000311a8 ; symbol stub for: _kill
000000010002e2e4	cmn	w0, #0x1
000000010002e2e8	b.ne	0x10002e3f0
000000010002e2ec	bl	0x100030adc ; symbol stub for: ___error
000000010002e2f0	ldrsw	x0, [x0]
000000010002e2f4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002e2f8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002e2fc	b	0x10002e3f0
000000010002e300	nop
000000010002e304	ldr	x9, #0x15c3c
000000010002e308	ldr	x9, [x9, x10, lsl #3]
000000010002e30c	add	x3, sp, #0x18
000000010002e310	mov	x0, x20
000000010002e314	mov	x1, x8
000000010002e318	mov	x2, x19
000000010002e31c	blr	x9
000000010002e320	mov	x20, x0
000000010002e324	cbz	w20, 0x10002e364
000000010002e328	str	x20, [sp]
000000010002e32c	adr	x1, #60465 ; literal pool for: "demux error = %d"
000000010002e330	nop
000000010002e334	mov	x0, x19
000000010002e338	bl	0x10002e5bc
000000010002e33c	mov	x0, x19
000000010002e340	bl	0x100031a30 ; symbol stub for: _xpc_dictionary_create_reply
000000010002e344	mov	x21, x0
000000010002e348	cbz	x21, 0x10002e364
000000010002e34c	sxtw	x2, w20
000000010002e350	adr	x1, #36203 ; literal pool for: "error"
000000010002e354	nop
000000010002e358	mov	x0, x21
000000010002e35c	bl	0x100031ae4 ; symbol stub for: _xpc_dictionary_set_int64
000000010002e360	str	x21, [sp, #0x18]
000000010002e364	adr	x1, #60290 ; literal pool for: "xpc demux succeeded"
000000010002e368	nop
000000010002e36c	mov	x0, x19
000000010002e370	bl	0x10002e468
000000010002e374	ldr	x8, [sp, #0x18]
000000010002e378	cbz	x8, 0x10002e3f0
000000010002e37c	adr	x1, #60286 ; literal pool for: "sending reply"
000000010002e380	nop
000000010002e384	mov	x0, x19
000000010002e388	bl	0x10002e468
000000010002e38c	ldrb	w8, [x23, #0xf28]
000000010002e390	cmp	w8, #0x1
000000010002e394	b.ne	0x10002e3c8
000000010002e398	ldr	x0, [sp, #0x18]
000000010002e39c	adr	x19, #88868
000000010002e3a0	nop
000000010002e3a4	ldrsw	x2, [x19, #0x14]
000000010002e3a8	adr	x1, #60256 ; literal pool for: "req_pid"
000000010002e3ac	nop
000000010002e3b0	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010002e3b4	ldr	x0, [sp, #0x18]
000000010002e3b8	ldrsw	x2, [x19, #0x1c]
000000010002e3bc	adr	x1, #60244 ; literal pool for: "rec_execcnt"
000000010002e3c0	nop
000000010002e3c4	bl	0x100031b14 ; symbol stub for: _xpc_dictionary_set_uint64
000000010002e3c8	ldr	x0, [sp, #0x18]
000000010002e3cc	bl	0x100031b5c ; symbol stub for: _xpc_pipe_routine_reply
000000010002e3d0	orr	w8, w0, #0x20
000000010002e3d4	cmp	w8, #0x20
000000010002e3d8	b.eq	0x10002e3e8
000000010002e3dc	sxtw	x0, w0
000000010002e3e0	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002e3e4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002e3e8	ldr	x0, [sp, #0x18]
000000010002e3ec	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010002e3f0	strb	wzr, [x22, #0xf68]
000000010002e3f4	ldp	x29, x30, [sp, #0x70]
000000010002e3f8	ldp	x20, x19, [sp, #0x60]
000000010002e3fc	ldp	x22, x21, [sp, #0x50]
000000010002e400	ldp	x24, x23, [sp, #0x40]
000000010002e404	add	sp, sp, #0x80
000000010002e408	ret
000000010002e40c	adr	x0, #60089 ; literal pool for: "reentrant call into server layer"
000000010002e410	nop
000000010002e414	bl	0x100028f84
000000010002e418	stp	x20, x19, [sp, #-0x20]!
000000010002e41c	stp	x29, x30, [sp, #0x10]
000000010002e420	add	x29, sp, #0x10
000000010002e424	mov	x19, x1
000000010002e428	mov	w2, w0
000000010002e42c	mov	x0, x19
000000010002e430	mov	x1, #0x0
000000010002e434	bl	0x10000e420
000000010002e438	mov	x20, x0
000000010002e43c	adr	x1, #59587 ; literal pool for: "dispatching request"
000000010002e440	nop
000000010002e444	mov	x0, x19
000000010002e448	bl	0x10002e468
000000010002e44c	bl	0x10000d8e0
000000010002e450	adr	x2, #252
000000010002e454	nop
000000010002e458	mov	x1, x20
000000010002e45c	ldp	x29, x30, [sp, #0x10]
000000010002e460	ldp	x20, x19, [sp], #0x20
000000010002e464	b	0x100030d34 ; symbol stub for: _dispatch_async_f
000000010002e468	sub	sp, sp, #0xc0
000000010002e46c	stp	x22, x21, [sp, #0x90]
000000010002e470	stp	x20, x19, [sp, #0xa0]
000000010002e474	stp	x29, x30, [sp, #0xb0]
000000010002e478	add	x29, sp, #0xb0
000000010002e47c	mov	x19, x1
000000010002e480	mov	x20, x0
000000010002e484	nop
000000010002e488	ldr	x8, #0x11b90 ; literal pool symbol address: ___stack_chk_guard
000000010002e48c	ldr	x8, [x8]
000000010002e490	stur	x8, [x29, #-0x28]
000000010002e494	movi.16b	v0, #0x0
000000010002e498	stur	q0, [sp, #0x38]
000000010002e49c	stur	q0, [sp, #0x28]
000000010002e4a0	adr	x8, #90092
000000010002e4a4	nop
000000010002e4a8	ldrb	w8, [x8]
000000010002e4ac	cbz	w8, 0x10002e51c
000000010002e4b0	adr	x1, #60059 ; literal pool for: "subsystem"
000000010002e4b4	nop
000000010002e4b8	mov	x0, x20
000000010002e4bc	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010002e4c0	mov	x21, x0
000000010002e4c4	adr	x1, #60049 ; literal pool for: "routine"
000000010002e4c8	nop
000000010002e4cc	mov	x0, x20
000000010002e4d0	bl	0x100031aa8 ; symbol stub for: _xpc_dictionary_get_uint64
000000010002e4d4	mov	x22, x0
000000010002e4d8	add	x1, sp, #0x28
000000010002e4dc	mov	x0, x20
000000010002e4e0	bl	0x100031a60 ; symbol stub for: _xpc_dictionary_get_audit_token
000000010002e4e4	nop
000000010002e4e8	ldr	x20, #0x15f50
000000010002e4ec	add	x0, sp, #0x28
000000010002e4f0	add	x1, sp, #0x48
000000010002e4f4	bl	0x1000293c0
000000010002e4f8	ldr	w8, [sp, #0x3c]
000000010002e4fc	stp	x22, x19, [sp, #0x18]
000000010002e500	stp	x8, x21, [sp, #0x8]
000000010002e504	str	x0, [sp]
000000010002e508	adr	x2, #60006 ; literal pool for: "ipc: caller = %s.%d, subsystem = %d, routine = %d, %s"
000000010002e50c	nop
000000010002e510	mov	w1, #0x0
000000010002e514	mov	x0, x20
000000010002e518	bl	0x1000270c8
000000010002e51c	ldur	x8, [x29, #-0x28]
000000010002e520	nop
000000010002e524	ldr	x9, #0x11af4 ; literal pool symbol address: ___stack_chk_guard
000000010002e528	ldr	x9, [x9]
000000010002e52c	cmp	x9, x8
000000010002e530	b.ne	0x10002e548
000000010002e534	ldp	x29, x30, [sp, #0xb0]
000000010002e538	ldp	x20, x19, [sp, #0xa0]
000000010002e53c	ldp	x22, x21, [sp, #0x90]
000000010002e540	add	sp, sp, #0xc0
000000010002e544	ret
000000010002e548	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002e54c	stp	x22, x21, [sp, #-0x30]!
000000010002e550	stp	x20, x19, [sp, #0x10]
000000010002e554	stp	x29, x30, [sp, #0x20]
000000010002e558	add	x29, sp, #0x20
000000010002e55c	mov	x19, x0
000000010002e560	ldr	x20, [x19]
000000010002e564	ldr	x21, [x19, #0x10]
000000010002e568	and	x0, x21, #0xffffffff
000000010002e56c	mov	w1, #0x0
000000010002e570	bl	0x10002ce58
000000010002e574	cbz	x0, 0x10002e584
000000010002e578	ldr	x8, [x0, #0x30]
000000010002e57c	adrp	x9, 21 ; 0x100043000
000000010002e580	str	x8, [x9, #0xee0]
000000010002e584	adr	x1, #59936 ; literal pool for: "processing dispatched request"
000000010002e588	nop
000000010002e58c	mov	x0, x20
000000010002e590	bl	0x10002e468
000000010002e594	mov	x0, x21
000000010002e598	mov	x1, x20
000000010002e59c	bl	0x10002def4
000000010002e5a0	adrp	x8, 21 ; 0x100043000
000000010002e5a4	str	xzr, [x8, #0xee0]
000000010002e5a8	mov	x0, x19
000000010002e5ac	ldp	x29, x30, [sp, #0x20]
000000010002e5b0	ldp	x20, x19, [sp, #0x10]
000000010002e5b4	ldp	x22, x21, [sp], #0x30
000000010002e5b8	b	0x10000e4b0
000000010002e5bc	stp	x20, x19, [sp, #-0x20]!
000000010002e5c0	stp	x29, x30, [sp, #0x10]
000000010002e5c4	add	x29, sp, #0x10
000000010002e5c8	sub	sp, sp, #0x810
000000010002e5cc	mov	x8, x1
000000010002e5d0	mov	x19, x0
000000010002e5d4	nop
000000010002e5d8	ldr	x9, #0x11a40 ; literal pool symbol address: ___stack_chk_guard
000000010002e5dc	ldr	x9, [x9]
000000010002e5e0	stur	x9, [x29, #-0x18]
000000010002e5e4	add	x9, x29, #0x10
000000010002e5e8	str	x9, [sp]
000000010002e5ec	add	x0, sp, #0x8
000000010002e5f0	orr	w1, wzr, #0x800
000000010002e5f4	orr	w3, wzr, #0x800
000000010002e5f8	add	x5, x29, #0x10
000000010002e5fc	mov	w2, #0x0
000000010002e600	mov	x4, x8
000000010002e604	bl	0x100030b30 ; symbol stub for: ___vsnprintf_chk
000000010002e608	add	x1, sp, #0x8
000000010002e60c	mov	x0, x19
000000010002e610	bl	0x10002e468
000000010002e614	ldur	x8, [x29, #-0x18]
000000010002e618	nop
000000010002e61c	ldr	x9, #0x119fc ; literal pool symbol address: ___stack_chk_guard
000000010002e620	ldr	x9, [x9]
000000010002e624	cmp	x9, x8
000000010002e628	b.ne	0x10002e63c
000000010002e62c	add	sp, sp, #0x810
000000010002e630	ldp	x29, x30, [sp, #0x10]
000000010002e634	ldp	x20, x19, [sp], #0x20
000000010002e638	ret
000000010002e63c	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002e640	sub	sp, sp, #0x20
000000010002e644	stp	x29, x30, [sp, #0x10]
000000010002e648	add	x29, sp, #0x10
000000010002e64c	str	x0, [sp, #0x8]
000000010002e650	add	x0, sp, #0x8
000000010002e654	orr	w1, wzr, #0x8
000000010002e658	bl	0x10000d840
000000010002e65c	mov	x8, #0x1353
000000010002e660	movk	x8, #0xb78c, lsl #16
000000010002e664	movk	x8, #0xcfb2, lsl #32
000000010002e668	movk	x8, #0x3521, lsl #48
000000010002e66c	umulh	x8, x0, x8
000000010002e670	sub	x9, x0, x8
000000010002e674	add	x8, x8, x9, lsr #1
000000010002e678	lsr	x8, x8, #5
000000010002e67c	mov	w9, #0x35
000000010002e680	msub	x0, x8, x9, x0
000000010002e684	ldp	x29, x30, [sp, #0x10]
000000010002e688	add	sp, sp, #0x20
000000010002e68c	ret
000000010002e690	stp	x20, x19, [sp, #-0x20]!
000000010002e694	stp	x29, x30, [sp, #0x10]
000000010002e698	add	x29, sp, #0x10
000000010002e69c	mov	x19, x0
000000010002e6a0	cmp	x1, #0x8
000000010002e6a4	b.eq	0x10002e748
000000010002e6a8	ldr	w20, [x19, #0x18]
000000010002e6ac	cmp	x1, #0x7
000000010002e6b0	b.eq	0x10002e6dc
000000010002e6b4	cmp	x1, #0x2
000000010002e6b8	b.ne	0x10002e73c
000000010002e6bc	ldr	x8, [x19, #0x30]
000000010002e6c0	adrp	x19, 21 ; 0x100043000
000000010002e6c4	str	x8, [x19, #0xee0]
000000010002e6c8	mov	x0, x20
000000010002e6cc	mov	x1, x2
000000010002e6d0	bl	0x10002e7b8
000000010002e6d4	str	xzr, [x19, #0xee0]
000000010002e6d8	b	0x10002e73c
000000010002e6dc	mov	x0, x2
000000010002e6e0	mov	x1, #0x0
000000010002e6e4	bl	0x100030e18 ; symbol stub for: _dispatch_mach_msg_get_msg
000000010002e6e8	ldr	w8, [x0, #0x8]
000000010002e6ec	add	w9, w8, #0x1
000000010002e6f0	cmp	w9, #0x2
000000010002e6f4	b.hs	0x10002e760
000000010002e6f8	ldr	w9, [x0, #0xc]
000000010002e6fc	add	w10, w9, #0x1
000000010002e700	cmp	w10, #0x2
000000010002e704	b.lo	0x10002e73c
000000010002e708	cmp	w9, w20
000000010002e70c	b.ne	0x10002e784
000000010002e710	mov	x0, x20
000000010002e714	bl	0x10000888c
000000010002e718	cbz	w0, 0x10002e728
000000010002e71c	sxtw	x0, w0
000000010002e720	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002e724	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002e728	ldr	x2, [x19, #0x30]
000000010002e72c	mov	x0, x20
000000010002e730	mov	w1, #0x0
000000010002e734	bl	0x1000088a4
000000010002e738	cbnz	w0, 0x10002e7a8
000000010002e73c	ldp	x29, x30, [sp, #0x10]
000000010002e740	ldp	x20, x19, [sp], #0x20
000000010002e744	ret
000000010002e748	ldr	x0, [x19, #0x20]
000000010002e74c	bl	0x100030e60 ; symbol stub for: _dispatch_release
000000010002e750	mov	x0, x19
000000010002e754	ldp	x29, x30, [sp, #0x10]
000000010002e758	ldp	x20, x19, [sp], #0x20
000000010002e75c	b	0x100031010 ; symbol stub for: _free
000000010002e760	stp	x20, x21, [sp, #-0x10]!
000000010002e764	adrp	x20, 14 ; 0x10003c000
000000010002e768	add	x20, x20, #0xd1a ; literal pool for: "libdispatch bug: Unknown send-right"
000000010002e76c	adrp	x21, 21 ; 0x100043000
000000010002e770	add	x21, x21, #0x528
000000010002e774	str	x20, [x21, #0x8]
000000010002e778	str	x8, [x21, #0x38]
000000010002e77c	ldp	x20, x21, [sp], #0x10
000000010002e780	brk	#0x1
000000010002e784	stp	x20, x21, [sp, #-0x10]!
000000010002e788	adrp	x20, 14 ; 0x10003c000
000000010002e78c	add	x20, x20, #0xd3e ; literal pool for: "libdispatch bug: Unknown receive-right"
000000010002e790	adrp	x21, 21 ; 0x100043000
000000010002e794	add	x21, x21, #0x528
000000010002e798	str	x20, [x21, #0x8]
000000010002e79c	str	x8, [x21, #0x38]
000000010002e7a0	ldp	x20, x21, [sp], #0x10
000000010002e7a4	brk	#0x1
000000010002e7a8	sxtw	x0, w0
000000010002e7ac	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002e7b0	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002e7b4	brk	#0x1
000000010002e7b8	stp	x22, x21, [sp, #-0x30]!
000000010002e7bc	stp	x20, x19, [sp, #0x10]
000000010002e7c0	stp	x29, x30, [sp, #0x20]
000000010002e7c4	add	x29, sp, #0x20
000000010002e7c8	sub	sp, sp, #0x10
000000010002e7cc	mov	x19, x1
000000010002e7d0	mov	x21, x0
000000010002e7d4	nop
000000010002e7d8	ldr	x8, #0x11840 ; literal pool symbol address: ___stack_chk_guard
000000010002e7dc	ldr	x8, [x8]
000000010002e7e0	stur	x8, [x29, #-0x28]
000000010002e7e4	mov	x0, x19
000000010002e7e8	mov	x1, #0x0
000000010002e7ec	bl	0x100030e18 ; symbol stub for: _dispatch_mach_msg_get_msg
000000010002e7f0	mov	x22, x0
000000010002e7f4	ldr	w8, [x22, #0x14]
000000010002e7f8	orr	w9, wzr, #0x10000000
000000010002e7fc	cmp	w8, w9
000000010002e800	b.ne	0x10002e844
000000010002e804	mov	x0, x19
000000010002e808	bl	0x100030bc0 ; symbol stub for: __xpc_serializer_create_from_wire
000000010002e80c	mov	x20, x0
000000010002e810	mov	w1, #0x0
000000010002e814	mov	w2, #0x0
000000010002e818	bl	0x100030bcc ; symbol stub for: __xpc_serializer_unpack
000000010002e81c	mov	x19, x0
000000010002e820	cbz	x19, 0x10002e888
000000010002e824	mov	x0, x19
000000010002e828	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002e82c	nop
000000010002e830	ldr	x8, #0x11890 ; literal pool symbol address: __xpc_type_dictionary
000000010002e834	cmp	x0, x8
000000010002e838	b.eq	0x10002e898
000000010002e83c	mov	w21, #0x16
000000010002e840	b	0x10002e8a8
000000010002e844	nop
000000010002e848	ldr	x1, #0x15718
000000010002e84c	mov	x8, sp
000000010002e850	add	x9, x1, #0xf
000000010002e854	and	x9, x9, #0xfffffffffffffff0
000000010002e858	sub	x19, x8, x9
000000010002e85c	mov	sp, x19
000000010002e860	mov	x0, x19
000000010002e864	bl	0x100030c2c ; symbol stub for: _bzero
000000010002e868	adr	x2, #-2100
000000010002e86c	nop
000000010002e870	mov	x0, x22
000000010002e874	mov	x1, x19
000000010002e878	bl	0x100030bb4 ; symbol stub for: __xpc_pipe_handle_mig
000000010002e87c	mov	x21, x0
000000010002e880	cbnz	w21, 0x10002e8bc
000000010002e884	b	0x10002e928
000000010002e888	mov	x0, x22
000000010002e88c	bl	0x100031250 ; symbol stub for: _mach_msg_destroy
000000010002e890	mov	w21, #0x16
000000010002e894	b	0x10002e8b0
000000010002e898	mov	x0, x21
000000010002e89c	mov	x1, x19
000000010002e8a0	bl	0x10002e190
000000010002e8a4	mov	w21, #0x0
000000010002e8a8	mov	x0, x19
000000010002e8ac	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010002e8b0	mov	x0, x20
000000010002e8b4	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010002e8b8	cbz	w21, 0x10002e928
000000010002e8bc	cmp	w21, #0x16
000000010002e8c0	b.ne	0x10002e8f0
000000010002e8c4	adr	x1, #58529 ; literal pool for: "rejected invalid request"
000000010002e8c8	nop
000000010002e8cc	mov	x0, x19
000000010002e8d0	bl	0x10002e468
000000010002e8d4	adr	x2, #58538 ; literal pool for: "Rejected invalid request."
000000010002e8d8	nop
000000010002e8dc	mov	w1, #0x3
000000010002e8e0	movk	w1, #0x1, lsl #16
000000010002e8e4	mov	x0, #0x0
000000010002e8e8	bl	0x100029dbc
000000010002e8ec	b	0x10002e928
000000010002e8f0	adr	x1, #58536 ; literal pool for: "rejected bogus request"
000000010002e8f4	nop
000000010002e8f8	mov	x0, x19
000000010002e8fc	bl	0x10002e468
000000010002e900	mov	x0, x21
000000010002e904	bl	0x100031724 ; symbol stub for: _strerror
000000010002e908	stp	x21, x0, [sp, #-0x10]!
000000010002e90c	adr	x2, #58531 ; literal pool for: "Rejected bogus request: %d: %s"
000000010002e910	nop
000000010002e914	mov	w1, #0x3
000000010002e918	movk	w1, #0x1, lsl #16
000000010002e91c	mov	x0, #0x0
000000010002e920	bl	0x100029dbc
000000010002e924	add	sp, sp, #0x10
000000010002e928	ldur	x8, [x29, #-0x28]
000000010002e92c	nop
000000010002e930	ldr	x9, #0x116e8 ; literal pool symbol address: ___stack_chk_guard
000000010002e934	ldr	x9, [x9]
000000010002e938	cmp	x9, x8
000000010002e93c	b.ne	0x10002e954
000000010002e940	sub	sp, x29, #0x20
000000010002e944	ldp	x29, x30, [sp, #0x20]
000000010002e948	ldp	x20, x19, [sp, #0x10]
000000010002e94c	ldp	x22, x21, [sp], #0x30
000000010002e950	ret
000000010002e954	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
000000010002e958	stp	x20, x19, [sp, #-0x20]!
000000010002e95c	stp	x29, x30, [sp, #0x10]
000000010002e960	add	x29, sp, #0x10
000000010002e964	ldr	q0, [x0, #0x10]
000000010002e968	adr	x8, #87384
000000010002e96c	nop
000000010002e970	str	q0, [x8, #0x10]
000000010002e974	ldr	q0, [x0]
000000010002e978	str	q0, [x8]
000000010002e97c	ldr	w0, [x0, #0x14]
000000010002e980	adr	x19, #87400
000000010002e984	nop
000000010002e988	mov	x1, x19
000000010002e98c	bl	0x100029340
000000010002e990	cbz	w0, 0x10002ea0c
000000010002e994	cmp	w0, #0x3
000000010002e998	b.ne	0x10002e9b4
000000010002e99c	mov	w8, #0x29
000000010002e9a0	strh	w8, [x19, #0x14]
000000010002e9a4	mov	w8, #0x6428
000000010002e9a8	movk	w8, #0x616f, lsl #16
000000010002e9ac	str	w8, [x19, #0x10]
000000010002e9b0	b	0x10002e9d4
000000010002e9b4	mov	x8, #0x6228
000000010002e9b8	movk	x8, #0x676f, lsl #16
000000010002e9bc	movk	x8, #0x7375, lsl #32
000000010002e9c0	movk	x8, #0x29, lsl #48
000000010002e9c4	str	x8, [x19, #0x10]
000000010002e9c8	sxtw	x0, w0
000000010002e9cc	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002e9d0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002e9d4	movi	d0, #0x000000ffffffff
000000010002e9d8	str	d0, [x19]
000000010002e9dc	nop
000000010002e9e0	ldr	d0, 0x10003df58
000000010002e9e4	str	d0, [x19, #0x8]
000000010002e9e8	nop
000000010002e9ec	ldr	d0, 0x10003df60
000000010002e9f0	str	d0, [x19, #0x20]
000000010002e9f4	mvni.2s	v0, #0x1
000000010002e9f8	str	d0, [x19, #0x28]
000000010002e9fc	str	d0, [x19, #0x30]
000000010002ea00	nop
000000010002ea04	ldr	d0, 0x10003df68
000000010002ea08	str	d0, [x19, #0x38]
000000010002ea0c	ldp	x29, x30, [sp, #0x10]
000000010002ea10	ldp	x20, x19, [sp], #0x20
000000010002ea14	ret
000000010002ea18	stp	x20, x19, [sp, #-0x20]!
000000010002ea1c	stp	x29, x30, [sp, #0x10]
000000010002ea20	add	x29, sp, #0x10
000000010002ea24	mov	x19, x0
000000010002ea28	ldr	x8, [x19, #0x8]
000000010002ea2c	cmn	x8, #0x1
000000010002ea30	b.ne	0x10002eae0
000000010002ea34	ldr	x8, [x19, #0x10]
000000010002ea38	cmn	x8, #0x1
000000010002ea3c	b.ne	0x10002eae0
000000010002ea40	ldr	x8, [x19, #0x18]
000000010002ea44	cmn	x8, #0x1
000000010002ea48	b.ne	0x10002eaec
000000010002ea4c	ldr	x8, [x19, #0x20]
000000010002ea50	cmn	x8, #0x1
000000010002ea54	b.ne	0x10002eaec
000000010002ea58	ldrh	w8, [x19, #0x80]
000000010002ea5c	tbnz	w8, #0x0, 0x10002eaf8
000000010002ea60	tbnz	w8, #0x1, 0x10002eb04
000000010002ea64	tbnz	w8, #0x5, 0x10002ea70
000000010002ea68	ldrb	w8, [x19, #0x50]
000000010002ea6c	tbnz	w8, #0x5, 0x10002eb10
000000010002ea70	ldr	w0, [x19, #0x60]
000000010002ea74	bl	0x10000888c
000000010002ea78	cbz	w0, 0x10002ea94
000000010002ea7c	sxtw	x2, w0
000000010002ea80	adr	x0, #156
000000010002ea84	nop
000000010002ea88	mov	x1, x19
000000010002ea8c	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010002ea90	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ea94	ldrb	w8, [x19, #0x80]
000000010002ea98	tst	w8, #0x88888888
000000010002ea9c	b.eq	0x10002eaac
000000010002eaa0	ldp	x29, x30, [sp, #0x10]
000000010002eaa4	ldp	x20, x19, [sp], #0x20
000000010002eaa8	ret
000000010002eaac	ldr	w0, [x19, #0x60]
000000010002eab0	ldr	x2, [x19, #0x78]
000000010002eab4	mov	w1, #0x0
000000010002eab8	bl	0x1000088a4
000000010002eabc	cbz	w0, 0x10002eaa0
000000010002eac0	sxtw	x2, w0
000000010002eac4	adr	x0, #88
000000010002eac8	nop
000000010002eacc	mov	x1, x19
000000010002ead0	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010002ead4	ldp	x29, x30, [sp, #0x10]
000000010002ead8	ldp	x20, x19, [sp], #0x20
000000010002eadc	b	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002eae0	adr	x0, #58594 ; literal pool for: "endpoint deallocation while still in service list"
000000010002eae4	nop
000000010002eae8	bl	0x100028f84
000000010002eaec	adr	x0, #58632 ; literal pool for: "endpoint deallocation while still in domain list"
000000010002eaf0	nop
000000010002eaf4	bl	0x100028f84
000000010002eaf8	adr	x0, #58669 ; literal pool for: "endpoint deallocation while still active"
000000010002eafc	nop
000000010002eb00	bl	0x100028f84
000000010002eb04	adr	x0, #58698 ; literal pool for: "endpoint deallocation while still being watched"
000000010002eb08	nop
000000010002eb0c	bl	0x100028f84
000000010002eb10	adr	x0, #58734 ; literal pool for: "endpoint deallocation without cancellation"
000000010002eb14	nop
000000010002eb18	bl	0x100028f84
000000010002eb1c	sub	sp, sp, #0x20
000000010002eb20	stp	x29, x30, [sp, #0x10]
000000010002eb24	add	x29, sp, #0x10
000000010002eb28	mov	x8, x1
000000010002eb2c	str	x2, [sp]
000000010002eb30	adr	x2, #27002 ; literal pool for: "%s"
000000010002eb34	nop
000000010002eb38	orr	w1, wzr, #0x3
000000010002eb3c	mov	x0, x8
000000010002eb40	bl	0x10002eb54
000000010002eb44	orr	w0, wzr, #0x1
000000010002eb48	ldp	x29, x30, [sp, #0x10]
000000010002eb4c	add	sp, sp, #0x20
000000010002eb50	ret
000000010002eb54	sub	sp, sp, #0x40
000000010002eb58	stp	x22, x21, [sp, #0x10]
000000010002eb5c	stp	x20, x19, [sp, #0x20]
000000010002eb60	stp	x29, x30, [sp, #0x30]
000000010002eb64	add	x29, sp, #0x30
000000010002eb68	mov	x19, x2
000000010002eb6c	mov	x20, x1
000000010002eb70	add	x1, x0, #0x88
000000010002eb74	mov	w2, #0x0
000000010002eb78	mov	x0, #0x0
000000010002eb7c	bl	0x100029d50
000000010002eb80	mov	x21, x0
000000010002eb84	add	x8, x29, #0x10
000000010002eb88	str	x8, [sp, #0x8]
000000010002eb8c	add	x3, x29, #0x10
000000010002eb90	mov	x1, x20
000000010002eb94	mov	x2, x19
000000010002eb98	bl	0x100029de4
000000010002eb9c	mov	w1, #0x0
000000010002eba0	mov	x0, x21
000000010002eba4	bl	0x10000e4a4
000000010002eba8	ldp	x29, x30, [sp, #0x30]
000000010002ebac	ldp	x20, x19, [sp, #0x20]
000000010002ebb0	ldp	x22, x21, [sp, #0x10]
000000010002ebb4	add	sp, sp, #0x40
000000010002ebb8	ret
000000010002ebbc	stp	x20, x19, [sp, #-0x20]!
000000010002ebc0	stp	x29, x30, [sp, #0x10]
000000010002ebc4	add	x29, sp, #0x10
000000010002ebc8	bl	0x10002ebf4
000000010002ebcc	mov	x19, x0
000000010002ebd0	ldr	x2, [x19, #0x78]
000000010002ebd4	mov	w0, #0x16
000000010002ebd8	orr	w1, wzr, #0x6
000000010002ebdc	bl	0x1000087d4
000000010002ebe0	str	w0, [x19, #0x60]
000000010002ebe4	mov	x0, x19
000000010002ebe8	ldp	x29, x30, [sp, #0x10]
000000010002ebec	ldp	x20, x19, [sp], #0x20
000000010002ebf0	ret
000000010002ebf4	stp	x24, x23, [sp, #-0x40]!
000000010002ebf8	stp	x22, x21, [sp, #0x10]
000000010002ebfc	stp	x20, x19, [sp, #0x20]
000000010002ec00	stp	x29, x30, [sp, #0x30]
000000010002ec04	add	x29, sp, #0x30
000000010002ec08	mov	x19, x3
000000010002ec0c	mov	x20, x2
000000010002ec10	mov	x21, x1
000000010002ec14	mov	x22, x0
000000010002ec18	mov	x0, x21
000000010002ec1c	bl	0x10003173c ; symbol stub for: _strlen
000000010002ec20	add	x0, x0, #0x1
000000010002ec24	bl	0x10000e95c
000000010002ec28	mov	x23, x0
000000010002ec2c	str	x22, [x23, #0x58]
000000010002ec30	stp	x20, x19, [x23, #0x70]
000000010002ec34	add	x0, x23, #0x88
000000010002ec38	mov	x1, x21
000000010002ec3c	bl	0x10003170c ; symbol stub for: _strcpy
000000010002ec40	mov	x8, #-0x1
000000010002ec44	stp	x8, x8, [x23, #0x8]
000000010002ec48	stp	x8, x8, [x23, #0x18]
000000010002ec4c	mov	x0, x23
000000010002ec50	ldp	x29, x30, [sp, #0x30]
000000010002ec54	ldp	x20, x19, [sp, #0x20]
000000010002ec58	ldp	x22, x21, [sp, #0x10]
000000010002ec5c	ldp	x24, x23, [sp], #0x40
000000010002ec60	ret
000000010002ec64	sub	sp, sp, #0x40
000000010002ec68	stp	x22, x21, [sp, #0x10]
000000010002ec6c	stp	x20, x19, [sp, #0x20]
000000010002ec70	stp	x29, x30, [sp, #0x30]
000000010002ec74	add	x29, sp, #0x30
000000010002ec78	mov	x21, x3
000000010002ec7c	mov	x20, x2
000000010002ec80	mov	x2, x4
000000010002ec84	mov	x3, x5
000000010002ec88	bl	0x10002ebf4
000000010002ec8c	mov	x19, x0
000000010002ec90	str	w20, [x19, #0x60]
000000010002ec94	ldrh	w8, [x19, #0x80]
000000010002ec98	orr	w8, w8, #0x8
000000010002ec9c	strh	w8, [x19, #0x80]
000000010002eca0	mov	x0, x20
000000010002eca4	cmp	w21, #0x10
000000010002eca8	b.ne	0x10002eccc
000000010002ecac	bl	0x10000884c
000000010002ecb0	cbz	w0, 0x10002ece0
000000010002ecb4	sxtw	x2, w0
000000010002ecb8	adr	x0, #-412
000000010002ecbc	nop
000000010002ecc0	mov	x1, x19
000000010002ecc4	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010002ecc8	b	0x10002ecdc
000000010002eccc	bl	0x10000886c
000000010002ecd0	cbz	w0, 0x10002ece0
000000010002ecd4	sxtw	x0, w0
000000010002ecd8	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002ecdc	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ece0	str	wzr, [sp, #0xc]
000000010002ece4	add	x1, sp, #0xc
000000010002ece8	mov	x0, x19
000000010002ecec	bl	0x10002ed08
000000010002ecf0	mov	x0, x19
000000010002ecf4	ldp	x29, x30, [sp, #0x30]
000000010002ecf8	ldp	x20, x19, [sp, #0x20]
000000010002ecfc	ldp	x22, x21, [sp, #0x10]
000000010002ed00	add	sp, sp, #0x40
000000010002ed04	ret
000000010002ed08	stp	x22, x21, [sp, #-0x30]!
000000010002ed0c	stp	x20, x19, [sp, #0x10]
000000010002ed10	stp	x29, x30, [sp, #0x20]
000000010002ed14	add	x29, sp, #0x20
000000010002ed18	mov	x19, x1
000000010002ed1c	mov	x20, x0
000000010002ed20	ldr	x8, [x20, #0x40]
000000010002ed24	cbnz	x8, 0x10002ee10
000000010002ed28	ldrh	w8, [x20, #0x80]
000000010002ed2c	tbnz	w8, #0x0, 0x10002ed78
000000010002ed30	ldr	w0, [x20, #0x60]
000000010002ed34	tbnz	w8, #0x3, 0x10002ed80
000000010002ed38	adr	x2, #2252
000000010002ed3c	nop
000000010002ed40	mov	w1, #0x45
000000010002ed44	mov	x3, x20
000000010002ed48	bl	0x10002daec
000000010002ed4c	cbz	w0, 0x10002ed68
000000010002ed50	sxtw	x2, w0
000000010002ed54	adr	x0, #-568
000000010002ed58	nop
000000010002ed5c	mov	x1, x20
000000010002ed60	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010002ed64	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ed68	ldr	w0, [x20, #0x60]
000000010002ed6c	mov	x1, #0x0
000000010002ed70	bl	0x1000088cc
000000010002ed74	b	0x10002ede8
000000010002ed78	mov	w0, #0x25
000000010002ed7c	b	0x10002ee00
000000010002ed80	bl	0x10000886c
000000010002ed84	cbz	w0, 0x10002ed94
000000010002ed88	sxtw	x0, w0
000000010002ed8c	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002ed90	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002ed94	ldr	w21, [x20, #0x60]
000000010002ed98	bl	0x10000d8e0
000000010002ed9c	mov	x3, x0
000000010002eda0	nop
000000010002eda4	ldr	x0, #0x112a4 ; literal pool symbol address: __dispatch_source_type_mach_send
000000010002eda8	orr	w2, wzr, #0x1
000000010002edac	mov	x1, x21
000000010002edb0	bl	0x100030ec0 ; symbol stub for: _dispatch_source_create
000000010002edb4	str	x0, [x20, #0x68]
000000010002edb8	mov	x1, x20
000000010002edbc	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002edc0	ldr	x0, [x20, #0x68]
000000010002edc4	adr	x1, #2964
000000010002edc8	nop
000000010002edcc	bl	0x100030efc ; symbol stub for: _dispatch_source_set_event_handler_f
000000010002edd0	ldr	x0, [x20, #0x68]
000000010002edd4	adr	x1, #3048
000000010002edd8	nop
000000010002eddc	bl	0x100030ef0 ; symbol stub for: _dispatch_source_set_cancel_handler_f
000000010002ede0	ldr	x0, [x20, #0x68]
000000010002ede4	bl	0x100030e6c ; symbol stub for: _dispatch_resume
000000010002ede8	mov	w0, #0x0
000000010002edec	ldrh	w8, [x20, #0x80]
000000010002edf0	orr	w8, w8, #0x1
000000010002edf4	strh	w8, [x20, #0x80]
000000010002edf8	ldr	w8, [x20, #0x60]
000000010002edfc	str	w8, [x19]
000000010002ee00	ldp	x29, x30, [sp, #0x20]
000000010002ee04	ldp	x20, x19, [sp, #0x10]
000000010002ee08	ldp	x22, x21, [sp], #0x30
000000010002ee0c	ret
000000010002ee10	adr	x0, #58089 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002ee14	nop
000000010002ee18	bl	0x100028f84
000000010002ee1c	sub	sp, sp, #0x90
000000010002ee20	stp	x26, x25, [sp, #0x40]
000000010002ee24	stp	x24, x23, [sp, #0x50]
000000010002ee28	stp	x22, x21, [sp, #0x60]
000000010002ee2c	stp	x20, x19, [sp, #0x70]
000000010002ee30	stp	x29, x30, [sp, #0x80]
000000010002ee34	add	x29, sp, #0x80
000000010002ee38	mov	x20, x5
000000010002ee3c	mov	x19, x4
000000010002ee40	mov	x23, x3
000000010002ee44	mov	x21, x2
000000010002ee48	mov	x24, x1
000000010002ee4c	mov	x25, x0
000000010002ee50	nop
000000010002ee54	ldr	x8, #0x11234 ; literal pool symbol address: __xpc_bool_false
000000010002ee58	cmp	x21, x8
000000010002ee5c	b.eq	0x10002ef38
000000010002ee60	mov	x0, x21
000000010002ee64	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002ee68	mov	x22, x0
000000010002ee6c	nop
000000010002ee70	ldr	x8, #0x11230 ; literal pool symbol address: __xpc_type_bool
000000010002ee74	cmp	x22, x8
000000010002ee78	nop
000000010002ee7c	ldr	x26, #0x11244 ; literal pool symbol address: __xpc_type_dictionary
000000010002ee80	ccmp	x22, x26, #0x4, ne
000000010002ee84	b.ne	0x10002ef38
000000010002ee88	mov	x0, x25
000000010002ee8c	mov	x1, x24
000000010002ee90	mov	x2, x23
000000010002ee94	mov	x3, x20
000000010002ee98	bl	0x10002ebf4
000000010002ee9c	mov	x20, x0
000000010002eea0	ldr	x2, [x20, #0x78]
000000010002eea4	mov	w0, #0x16
000000010002eea8	orr	w1, wzr, #0x6
000000010002eeac	bl	0x1000087d4
000000010002eeb0	str	w0, [x20, #0x60]
000000010002eeb4	cbz	x20, 0x10002ef3c
000000010002eeb8	cmp	x22, x26
000000010002eebc	b.ne	0x10002ef00
000000010002eec0	nop
000000010002eec4	ldr	x8, #0x1114c ; literal pool symbol address: __NSConcreteStackBlock
000000010002eec8	str	x8, [sp, #0x10]
000000010002eecc	nop
000000010002eed0	ldr	d0, 0x10003de90
000000010002eed4	str	d0, [sp, #0x18]
000000010002eed8	adr	x8, #132
000000010002eedc	nop
000000010002eee0	str	x8, [sp, #0x20]
000000010002eee4	adr	x8, #78428
000000010002eee8	nop
000000010002eeec	stp	x8, x20, [sp, #0x28]
000000010002eef0	str	x19, [sp, #0x38]
000000010002eef4	add	x1, sp, #0x10
000000010002eef8	mov	x0, x21
000000010002eefc	bl	0x100031a00 ; symbol stub for: _xpc_dictionary_apply
000000010002ef00	ldrb	w8, [x20, #0x50]
000000010002ef04	tbz	w8, #0x6, 0x10002ef3c
000000010002ef08	ldrb	w8, [x20, #0x80]
000000010002ef0c	tbz	w8, #0x2, 0x10002ef3c
000000010002ef10	add	x8, x20, #0x88
000000010002ef14	str	x8, [sp]
000000010002ef18	adr	x2, #57745 ; literal pool for: "%s: _ExperimentalNonLaunching is not compatible with HideUntilCheckIn, ignoring"
000000010002ef1c	nop
000000010002ef20	orr	w1, wzr, #0x3
000000010002ef24	mov	x0, x19
000000010002ef28	bl	0x10000ce7c
000000010002ef2c	mov	w1, #0x0
000000010002ef30	mov	x0, x20
000000010002ef34	bl	0x10000e4a4
000000010002ef38	mov	x20, #0x0
000000010002ef3c	mov	x0, x20
000000010002ef40	ldp	x29, x30, [sp, #0x80]
000000010002ef44	ldp	x20, x19, [sp, #0x70]
000000010002ef48	ldp	x22, x21, [sp, #0x60]
000000010002ef4c	ldp	x24, x23, [sp, #0x50]
000000010002ef50	ldp	x26, x25, [sp, #0x40]
000000010002ef54	add	sp, sp, #0x90
000000010002ef58	ret
000000010002ef5c	sub	sp, sp, #0x40
000000010002ef60	stp	x22, x21, [sp, #0x10]
000000010002ef64	stp	x20, x19, [sp, #0x20]
000000010002ef68	stp	x29, x30, [sp, #0x30]
000000010002ef6c	add	x29, sp, #0x30
000000010002ef70	mov	x21, x2
000000010002ef74	mov	x22, x1
000000010002ef78	ldp	x20, x19, [x0, #0x20]
000000010002ef7c	mov	x0, x21
000000010002ef80	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002ef84	nop
000000010002ef88	ldr	x8, #0x11148 ; literal pool symbol address: __xpc_type_int64
000000010002ef8c	cmp	x0, x8
000000010002ef90	b.eq	0x10002eff8
000000010002ef94	nop
000000010002ef98	ldr	x8, #0x11108 ; literal pool symbol address: __xpc_type_bool
000000010002ef9c	cmp	x0, x8
000000010002efa0	b.eq	0x10002f044
000000010002efa4	nop
000000010002efa8	ldr	x8, #0x11138 ; literal pool symbol address: __xpc_type_string
000000010002efac	cmp	x0, x8
000000010002efb0	b.eq	0x10002f0a4
000000010002efb4	nop
000000010002efb8	ldr	x8, #0x11108 ; literal pool symbol address: __xpc_type_dictionary
000000010002efbc	cmp	x0, x8
000000010002efc0	b.ne	0x10002f1f8
000000010002efc4	adr	x1, #58199 ; literal pool for: "ExceptionServer"
000000010002efc8	nop
000000010002efcc	mov	x0, x22
000000010002efd0	bl	0x100031700 ; symbol stub for: _strcmp
000000010002efd4	cbnz	w0, 0x10002f0cc
000000010002efd8	mov	x0, x21
000000010002efdc	bl	0x100031a78 ; symbol stub for: _xpc_dictionary_get_count
000000010002efe0	cbz	x0, 0x10002f220
000000010002efe4	add	x8, x20, #0x88
000000010002efe8	str	x8, [sp]
000000010002efec	adr	x2, #58325 ; literal pool for: "Non-empty dictionary property on MachService: %s"
000000010002eff0	nop
000000010002eff4	b	0x10002f0d8
000000010002eff8	adr	x1, #57920 ; literal pool for: "TaskSpecialPort"
000000010002effc	nop
000000010002f000	mov	x0, x22
000000010002f004	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010002f008	cbz	w0, 0x10002f0e8
000000010002f00c	adr	x1, #57916 ; literal pool for: "HostSpecialPort"
000000010002f010	nop
000000010002f014	mov	x0, x22
000000010002f018	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010002f01c	cbnz	w0, 0x10002f0cc
000000010002f020	mov	x0, x21
000000010002f024	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010002f028	mov	x21, x0
000000010002f02c	cmp	x21, #0x8
000000010002f030	b.lt	0x10002f17c
000000010002f034	cmp	x21, #0x1d
000000010002f038	b.gt	0x10002f210
000000010002f03c	str	w21, [x20, #0x4c]
000000010002f040	b	0x10002f1f8
000000010002f044	adr	x1, #57914 ; literal pool for: "ResetAtClose"
000000010002f048	nop
000000010002f04c	mov	x0, x22
000000010002f050	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010002f054	cbz	w0, 0x10002f0f8
000000010002f058	adr	x1, #57907 ; literal pool for: "HideUntilCheckIn"
000000010002f05c	nop
000000010002f060	mov	x0, x22
000000010002f064	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010002f068	cbz	w0, 0x10002f118
000000010002f06c	adr	x1, #58005 ; literal pool for: "_ExperimentalNonLaunching"
000000010002f070	nop
000000010002f074	mov	x0, x22
000000010002f078	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010002f07c	cbz	w0, 0x10002f194
000000010002f080	adr	x1, #58011 ; literal pool for: "ExceptionServer"
000000010002f084	nop
000000010002f088	mov	x0, x22
000000010002f08c	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010002f090	cbnz	w0, 0x10002f0cc
000000010002f094	str	x22, [sp]
000000010002f098	adr	x2, #58003 ; literal pool for: "An empty dictionary needs to be used as the value for %s."
000000010002f09c	nop
000000010002f0a0	b	0x10002f0d8
000000010002f0a4	adr	x1, #57748 ; literal pool for: "TaskSpecialPort"
000000010002f0a8	nop
000000010002f0ac	mov	x0, x22
000000010002f0b0	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010002f0b4	cbz	w0, 0x10002f150
000000010002f0b8	adr	x1, #57744 ; literal pool for: "HostSpecialPort"
000000010002f0bc	nop
000000010002f0c0	mov	x0, x22
000000010002f0c4	bl	0x1000316e8 ; symbol stub for: _strcasecmp
000000010002f0c8	cbz	w0, 0x10002f1b4
000000010002f0cc	str	x22, [sp]
000000010002f0d0	adr	x2, #57736 ; literal pool for: "Unrecognized MachService property: %s"
000000010002f0d4	nop
000000010002f0d8	orr	w1, wzr, #0x3
000000010002f0dc	mov	x0, x19
000000010002f0e0	bl	0x10000ce7c
000000010002f0e4	b	0x10002f1f8
000000010002f0e8	mov	x0, x21
000000010002f0ec	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010002f0f0	mov	x1, x0
000000010002f0f4	b	0x10002f1ec
000000010002f0f8	nop
000000010002f0fc	ldr	x8, #0x10f94 ; literal pool symbol address: __xpc_bool_true
000000010002f100	cmp	x21, x8
000000010002f104	cset	w8, eq
000000010002f108	ldrh	w9, [x20, #0x80]
000000010002f10c	and	w9, w9, #0xffffffef
000000010002f110	orr	w8, w9, w8, lsl #4
000000010002f114	b	0x10002f148
000000010002f118	adr	x2, #57732 ; literal pool for: "The HideUntilCheckIn property is an architectural performance issue. Please transition away from it."
000000010002f11c	nop
000000010002f120	orr	w1, wzr, #0x4
000000010002f124	mov	x0, x19
000000010002f128	bl	0x10000ce7c
000000010002f12c	nop
000000010002f130	ldr	x8, #0x10f60 ; literal pool symbol address: __xpc_bool_true
000000010002f134	cmp	x21, x8
000000010002f138	cset	w8, eq
000000010002f13c	ldrh	w9, [x20, #0x80]
000000010002f140	and	w9, w9, #0xfffffffb
000000010002f144	orr	w8, w9, w8, lsl #2
000000010002f148	strh	w8, [x20, #0x80]
000000010002f14c	b	0x10002f1f8
000000010002f150	mov	x0, x21
000000010002f154	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010002f158	mov	x22, x0
000000010002f15c	bl	0x1000312ec ; symbol stub for: _mach_task_special_port_for_id
000000010002f160	mov	x21, x0
000000010002f164	cmp	w21, #0x0
000000010002f168	b.gt	0x10002f1e8
000000010002f16c	str	x22, [sp]
000000010002f170	adr	x2, #57845 ; literal pool for: "Tried to set an unknown task-special port: %s"
000000010002f174	nop
000000010002f178	b	0x10002f1dc
000000010002f17c	mov	x0, x21
000000010002f180	bl	0x10003122c ; symbol stub for: _mach_host_special_port_description
000000010002f184	stp	x21, x0, [sp]
000000010002f188	adr	x2, #58089 ; literal pool for: "Tried to set a reserved host-special port: %lld: %s"
000000010002f18c	nop
000000010002f190	b	0x10002f0d8
000000010002f194	nop
000000010002f198	ldr	x8, #0x10ef8 ; literal pool symbol address: __xpc_bool_true
000000010002f19c	cmp	x21, x8
000000010002f1a0	cset	w8, eq
000000010002f1a4	ldrb	w9, [x20, #0x50]
000000010002f1a8	and	w9, w9, #0xffffffbf
000000010002f1ac	orr	w8, w9, w8, lsl #6
000000010002f1b0	b	0x10002f228
000000010002f1b4	mov	x0, x21
000000010002f1b8	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010002f1bc	mov	x22, x0
000000010002f1c0	bl	0x100031238 ; symbol stub for: _mach_host_special_port_for_id
000000010002f1c4	mov	x21, x0
000000010002f1c8	cmp	w21, #0x0
000000010002f1cc	b.gt	0x10002f1e8
000000010002f1d0	str	x22, [sp]
000000010002f1d4	adr	x2, #57791 ; literal pool for: "Tried to set an unknown host-special port: %s"
000000010002f1d8	nop
000000010002f1dc	orr	w1, wzr, #0x3
000000010002f1e0	mov	x0, x19
000000010002f1e4	bl	0x10000ce7c
000000010002f1e8	mov	x1, x21
000000010002f1ec	mov	x0, x20
000000010002f1f0	mov	x2, x19
000000010002f1f4	bl	0x10002f8fc
000000010002f1f8	orr	w0, wzr, #0x1
000000010002f1fc	ldp	x29, x30, [sp, #0x30]
000000010002f200	ldp	x20, x19, [sp, #0x20]
000000010002f204	ldp	x22, x21, [sp, #0x10]
000000010002f208	add	sp, sp, #0x40
000000010002f20c	ret
000000010002f210	str	x21, [sp]
000000010002f214	adr	x2, #57901 ; literal pool for: "Tried to set an invalid host-special port: %lld"
000000010002f218	nop
000000010002f21c	b	0x10002f0d8
000000010002f220	ldrb	w8, [x20, #0x50]
000000010002f224	orr	w8, w8, #0x10
000000010002f228	strb	w8, [x20, #0x50]
000000010002f22c	b	0x10002f1f8
000000010002f230	stp	x20, x19, [sp, #-0x20]!
000000010002f234	stp	x29, x30, [sp, #0x10]
000000010002f238	add	x29, sp, #0x10
000000010002f23c	mov	x8, x2
000000010002f240	mov	x9, x1
000000010002f244	mov	x19, x0
000000010002f248	ldr	x0, [x19, #0x58]
000000010002f24c	add	x1, x19, #0x88
000000010002f250	mov	x2, x9
000000010002f254	mov	x3, x8
000000010002f258	bl	0x10002ebf4
000000010002f25c	mov	x20, x0
000000010002f260	ldrh	w8, [x19, #0x80]
000000010002f264	ldrh	w9, [x20, #0x80]
000000010002f268	lsr	w8, w8, #2
000000010002f26c	bfi	w9, w8, #2, #1
000000010002f270	strh	w9, [x20, #0x80]
000000010002f274	ldrh	w8, [x19, #0x80]
000000010002f278	and	w8, w8, #0x10
000000010002f27c	and	w9, w9, #0xffffffef
000000010002f280	orr	w8, w9, w8
000000010002f284	strh	w8, [x20, #0x80]
000000010002f288	ldr	x2, [x20, #0x78]
000000010002f28c	mov	w0, #0x16
000000010002f290	orr	w1, wzr, #0x6
000000010002f294	bl	0x1000087d4
000000010002f298	str	w0, [x20, #0x60]
000000010002f29c	mov	x0, x20
000000010002f2a0	ldp	x29, x30, [sp, #0x10]
000000010002f2a4	ldp	x20, x19, [sp], #0x20
000000010002f2a8	ret
000000010002f2ac	ldr	x8, [x0, #0x40]
000000010002f2b0	cbnz	x8, 0x10002f2d8
000000010002f2b4	ldrh	w8, [x0, #0x80]
000000010002f2b8	mov	w9, #0x5
000000010002f2bc	and	w8, w8, w9
000000010002f2c0	cmp	w8, #0x4
000000010002f2c4	b.ne	0x10002f2d0
000000010002f2c8	mov	w0, #0x0
000000010002f2cc	ret
000000010002f2d0	ldr	w0, [x0, #0x60]
000000010002f2d4	ret
000000010002f2d8	stp	x29, x30, [sp, #-0x10]!
000000010002f2dc	mov	x29, sp
000000010002f2e0	adr	x0, #56857 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002f2e4	nop
000000010002f2e8	bl	0x100028f84
000000010002f2ec	ldr	x8, [x0, #0x40]
000000010002f2f0	cbnz	x8, 0x10002f2fc
000000010002f2f4	ldr	w0, [x0, #0x60]
000000010002f2f8	ret
000000010002f2fc	stp	x29, x30, [sp, #-0x10]!
000000010002f300	mov	x29, sp
000000010002f304	adr	x0, #56821 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002f308	nop
000000010002f30c	bl	0x100028f84
000000010002f310	ldr	x8, [x0, #0x40]
000000010002f314	cbnz	x8, 0x10002f320
000000010002f318	ldr	x0, [x0, #0x58]
000000010002f31c	ret
000000010002f320	stp	x29, x30, [sp, #-0x10]!
000000010002f324	mov	x29, sp
000000010002f328	adr	x0, #56785 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002f32c	nop
000000010002f330	bl	0x100028f84
000000010002f334	ldr	x8, [x0, #0x40]
000000010002f338	cbnz	x8, 0x10002f34c
000000010002f33c	ldrb	w8, [x0, #0x80]
000000010002f340	tst	w8, #0x8
000000010002f344	cset	w0, eq
000000010002f348	ret
000000010002f34c	stp	x29, x30, [sp, #-0x10]!
000000010002f350	mov	x29, sp
000000010002f354	adr	x0, #56741 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002f358	nop
000000010002f35c	bl	0x100028f84
000000010002f360	sub	sp, sp, #0x50
000000010002f364	stp	x24, x23, [sp, #0x10]
000000010002f368	stp	x22, x21, [sp, #0x20]
000000010002f36c	stp	x20, x19, [sp, #0x30]
000000010002f370	stp	x29, x30, [sp, #0x40]
000000010002f374	add	x29, sp, #0x40
000000010002f378	mov	x19, x2
000000010002f37c	mov	x20, x1
000000010002f380	mov	x21, x0
000000010002f384	ldr	x8, [x21, #0x40]
000000010002f388	cbnz	x8, 0x10002f4f4
000000010002f38c	add	x8, x21, #0x88
000000010002f390	str	x8, [sp]
000000010002f394	adr	x2, #26098 ; literal pool for: "\"%s\" = {"
000000010002f398	nop
000000010002f39c	mov	x0, x20
000000010002f3a0	mov	x1, x19
000000010002f3a4	bl	0x10002a548
000000010002f3a8	add	x22, x19, #0x1
000000010002f3ac	ldr	w8, [x21, #0x60]
000000010002f3b0	str	x8, [sp]
000000010002f3b4	adr	x2, #56688 ; literal pool for: "port = 0x%x"
000000010002f3b8	nop
000000010002f3bc	mov	x0, x20
000000010002f3c0	mov	x1, x22
000000010002f3c4	bl	0x10002a548
000000010002f3c8	ldr	w23, [x21, #0x4c]
000000010002f3cc	cbz	w23, 0x10002f3e8
000000010002f3d0	mov	x0, x23
000000010002f3d4	bl	0x10003122c ; symbol stub for: _mach_host_special_port_description
000000010002f3d8	stp	x23, x0, [sp]
000000010002f3dc	adr	x2, #56660 ; literal pool for: "host-special port = %u (%s)"
000000010002f3e0	nop
000000010002f3e4	b	0x10002f41c
000000010002f3e8	ldr	w0, [x21, #0x48]
000000010002f3ec	cbz	w0, 0x10002f428
000000010002f3f0	cmp	w0, #0x80
000000010002f3f4	b.ne	0x10002f404
000000010002f3f8	adr	x8, #42412 ; literal pool for: "exception"
000000010002f3fc	nop
000000010002f400	b	0x10002f410
000000010002f404	bl	0x1000312e0 ; symbol stub for: _mach_task_special_port_description
000000010002f408	mov	x8, x0
000000010002f40c	ldr	w0, [x21, #0x48]
000000010002f410	stp	x0, x8, [sp]
000000010002f414	adr	x2, #56632 ; literal pool for: "task-special port = %u (%s)"
000000010002f418	nop
000000010002f41c	mov	x0, x20
000000010002f420	mov	x1, x22
000000010002f424	bl	0x10002a548
000000010002f428	ldrh	w8, [x21, #0x80]
000000010002f42c	adr	x23, #26206 ; literal pool for: "1"
000000010002f430	nop
000000010002f434	adr	x24, #26200 ; literal pool for: "0"
000000010002f438	nop
000000010002f43c	tst	w8, #0x1
000000010002f440	csel	x8, x24, x23, eq
000000010002f444	str	x8, [sp]
000000010002f448	adr	x2, #26166 ; literal pool for: "active = %s"
000000010002f44c	nop
000000010002f450	mov	x0, x20
000000010002f454	mov	x1, x22
000000010002f458	bl	0x10002a548
000000010002f45c	ldrh	w8, [x21, #0x80]
000000010002f460	tst	w8, #0x8
000000010002f464	csel	x8, x23, x24, eq
000000010002f468	str	x8, [sp]
000000010002f46c	adr	x2, #56572 ; literal pool for: "managed = %s"
000000010002f470	nop
000000010002f474	mov	x0, x20
000000010002f478	mov	x1, x22
000000010002f47c	bl	0x10002a548
000000010002f480	ldrh	w8, [x21, #0x80]
000000010002f484	tst	w8, #0x10
000000010002f488	csel	x8, x24, x23, eq
000000010002f48c	str	x8, [sp]
000000010002f490	adr	x2, #56549 ; literal pool for: "reset = %s"
000000010002f494	nop
000000010002f498	mov	x0, x20
000000010002f49c	mov	x1, x22
000000010002f4a0	bl	0x10002a548
000000010002f4a4	ldrh	w8, [x21, #0x80]
000000010002f4a8	tst	w8, #0x4
000000010002f4ac	csel	x8, x24, x23, eq
000000010002f4b0	str	x8, [sp]
000000010002f4b4	adr	x2, #56524 ; literal pool for: "hide = %s"
000000010002f4b8	nop
000000010002f4bc	mov	x0, x20
000000010002f4c0	mov	x1, x22
000000010002f4c4	bl	0x10002a548
000000010002f4c8	adr	x2, #24763 ; literal pool for: "}"
000000010002f4cc	nop
000000010002f4d0	mov	x0, x20
000000010002f4d4	mov	x1, x19
000000010002f4d8	bl	0x10002a548
000000010002f4dc	ldp	x29, x30, [sp, #0x40]
000000010002f4e0	ldp	x20, x19, [sp, #0x30]
000000010002f4e4	ldp	x22, x21, [sp, #0x20]
000000010002f4e8	ldp	x24, x23, [sp, #0x10]
000000010002f4ec	add	sp, sp, #0x50
000000010002f4f0	ret
000000010002f4f4	adr	x0, #56325 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002f4f8	nop
000000010002f4fc	bl	0x100028f84
000000010002f500	stp	x20, x19, [sp, #-0x20]!
000000010002f504	stp	x29, x30, [sp, #0x10]
000000010002f508	add	x29, sp, #0x10
000000010002f50c	mov	x19, x0
000000010002f510	ldr	x8, [x19, #0x40]
000000010002f514	cbnz	x8, 0x10002f570
000000010002f518	ldrh	w8, [x19, #0x80]
000000010002f51c	tbnz	w8, #0x3, 0x10002f57c
000000010002f520	tbnz	w8, #0x1, 0x10002f588
000000010002f524	tbz	w8, #0x4, 0x10002f534
000000010002f528	mov	x0, x19
000000010002f52c	bl	0x10002f594
000000010002f530	ldrh	w8, [x19, #0x80]
000000010002f534	and	w8, w8, #0xffffffbf
000000010002f538	orr	w8, w8, #0x2
000000010002f53c	strh	w8, [x19, #0x80]
000000010002f540	ldrb	w8, [x19, #0x50]
000000010002f544	tbnz	w8, #0x6, 0x10002f564
000000010002f548	ldr	w0, [x19, #0x60]
000000010002f54c	adr	x1, #184
000000010002f550	nop
000000010002f554	mov	x2, x19
000000010002f558	ldp	x29, x30, [sp, #0x10]
000000010002f55c	ldp	x20, x19, [sp], #0x20
000000010002f560	b	0x10002d7a0
000000010002f564	ldp	x29, x30, [sp, #0x10]
000000010002f568	ldp	x20, x19, [sp], #0x20
000000010002f56c	ret
000000010002f570	adr	x0, #56201 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002f574	nop
000000010002f578	bl	0x100028f84
000000010002f57c	adr	x0, #56334 ; literal pool for: "attempt to watch unmanaged endpoint"
000000010002f580	nop
000000010002f584	bl	0x100028f84
000000010002f588	adr	x0, #56358 ; literal pool for: "attempt to watch endpoint that is already watched"
000000010002f58c	nop
000000010002f590	bl	0x100028f84
000000010002f594	stp	x20, x19, [sp, #-0x20]!
000000010002f598	stp	x29, x30, [sp, #0x10]
000000010002f59c	add	x29, sp, #0x10
000000010002f5a0	mov	x19, x0
000000010002f5a4	ldrb	w8, [x19, #0x80]
000000010002f5a8	tbnz	w8, #0x6, 0x10002f5f8
000000010002f5ac	ldr	w0, [x19, #0x60]
000000010002f5b0	ldr	x2, [x19, #0x78]
000000010002f5b4	mov	w1, #-0x1
000000010002f5b8	bl	0x1000088a4
000000010002f5bc	cbz	w0, 0x10002f5d8
000000010002f5c0	sxtw	x2, w0
000000010002f5c4	adr	x0, #-2728
000000010002f5c8	nop
000000010002f5cc	mov	x1, x19
000000010002f5d0	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010002f5d4	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002f5d8	ldr	x2, [x19, #0x78]
000000010002f5dc	mov	w0, #0x16
000000010002f5e0	orr	w1, wzr, #0x6
000000010002f5e4	bl	0x1000087d4
000000010002f5e8	str	w0, [x19, #0x60]
000000010002f5ec	ldrh	w8, [x19, #0x80]
000000010002f5f0	orr	w8, w8, #0x40
000000010002f5f4	strh	w8, [x19, #0x80]
000000010002f5f8	ldp	x29, x30, [sp, #0x10]
000000010002f5fc	ldp	x20, x19, [sp], #0x20
000000010002f600	ret
000000010002f604	stp	x20, x19, [sp, #-0x20]!
000000010002f608	stp	x29, x30, [sp, #0x10]
000000010002f60c	add	x29, sp, #0x10
000000010002f610	mov	x19, x1
000000010002f614	cmp	w0, #0x3
000000010002f618	b.hi	0x10002f6e0
000000010002f61c	mov	w8, w0
000000010002f620	adr	x9, #204
000000010002f624	nop
000000010002f628	ldrsw	x8, [x9, x8, lsl #2]
000000010002f62c	add	x8, x8, x9
000000010002f630	br	x8
000000010002f634	ldp	x3, x2, [x19, #0x70]
000000010002f638	mov	w1, #0x0
000000010002f63c	b	0x10002f6d0
000000010002f640	ldrb	w8, [x19, #0x80]
000000010002f644	tbnz	w8, #0x4, 0x10002f698
000000010002f648	ldr	w0, [x19, #0x60]
000000010002f64c	ldr	x1, [x19, #0x78]
000000010002f650	bl	0x1000088cc
000000010002f654	ldr	w0, [x19, #0x60]
000000010002f658	bl	0x100008910
000000010002f65c	cbz	w0, 0x10002f6a0
000000010002f660	sxtw	x2, w0
000000010002f664	adr	x0, #-2888
000000010002f668	nop
000000010002f66c	mov	x1, x19
000000010002f670	bl	0x100030b60 ; symbol stub for: __os_assumes_log_ctx
000000010002f674	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002f678	b	0x10002f6a0
000000010002f67c	ldrh	w8, [x19, #0x80]
000000010002f680	and	w8, w8, #0xfffffffe
000000010002f684	orr	w8, w8, #0x20
000000010002f688	b	0x10002f6c4
000000010002f68c	ldp	x29, x30, [sp, #0x10]
000000010002f690	ldp	x20, x19, [sp], #0x20
000000010002f694	ret
000000010002f698	mov	x0, x19
000000010002f69c	bl	0x10002f594
000000010002f6a0	ldrh	w8, [x19, #0x80]
000000010002f6a4	and	w9, w8, #0xfffffffe
000000010002f6a8	orr	w9, w9, #0x40
000000010002f6ac	strh	w9, [x19, #0x80]
000000010002f6b0	tbz	w8, #0x8, 0x10002f6c8
000000010002f6b4	mov	x0, x19
000000010002f6b8	bl	0x10002f820
000000010002f6bc	ldrh	w8, [x19, #0x80]
000000010002f6c0	and	w8, w8, #0xfffffeff
000000010002f6c4	strh	w8, [x19, #0x80]
000000010002f6c8	ldp	x3, x2, [x19, #0x70]
000000010002f6cc	orr	w1, wzr, #0x1
000000010002f6d0	mov	x0, x19
000000010002f6d4	ldp	x29, x30, [sp, #0x10]
000000010002f6d8	ldp	x20, x19, [sp], #0x20
000000010002f6dc	br	x3
000000010002f6e0	adr	x0, #56773 ; literal pool for: "unrecognized server event"
000000010002f6e4	nop
000000010002f6e8	bl	0x100028f84
000000010002f6ec	.long	0xffffff48
000000010002f6f0	.long	0xffffffa0
000000010002f6f4	.long	0xffffff54
000000010002f6f8	.long	0xffffff90
000000010002f6fc	stp	x29, x30, [sp, #-0x10]!
000000010002f700	mov	x29, sp
000000010002f704	ldr	x8, [x0, #0x40]
000000010002f708	cbnz	x8, 0x10002f73c
000000010002f70c	ldrh	w8, [x0, #0x80]
000000010002f710	tbnz	w8, #0x3, 0x10002f748
000000010002f714	tbz	w8, #0x1, 0x10002f754
000000010002f718	and	w8, w8, #0xfffffffd
000000010002f71c	strh	w8, [x0, #0x80]
000000010002f720	ldrb	w8, [x0, #0x50]
000000010002f724	tbnz	w8, #0x6, 0x10002f734
000000010002f728	ldr	w0, [x0, #0x60]
000000010002f72c	ldp	x29, x30, [sp], #0x10
000000010002f730	b	0x10002de30
000000010002f734	ldp	x29, x30, [sp], #0x10
000000010002f738	ret
000000010002f73c	adr	x0, #55741 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002f740	nop
000000010002f744	bl	0x100028f84
000000010002f748	adr	x0, #55960 ; literal pool for: "attempt to ignore unmanaged endpoint"
000000010002f74c	nop
000000010002f750	bl	0x100028f84
000000010002f754	adr	x0, #55985 ; literal pool for: "attempt to ignore endpoint that is already ignored"
000000010002f758	nop
000000010002f75c	bl	0x100028f84
000000010002f760	stp	x20, x19, [sp, #-0x20]!
000000010002f764	stp	x29, x30, [sp, #0x10]
000000010002f768	add	x29, sp, #0x10
000000010002f76c	mov	x19, x0
000000010002f770	ldr	x8, [x19, #0x40]
000000010002f774	cbnz	x8, 0x10002f7f8
000000010002f778	ldrh	w8, [x19, #0x80]
000000010002f77c	orr	w9, w8, #0x20
000000010002f780	strh	w9, [x19, #0x80]
000000010002f784	tbnz	w8, #0x1, 0x10002f798
000000010002f788	tbnz	w8, #0x0, 0x10002f7a8
000000010002f78c	ldp	x29, x30, [sp, #0x10]
000000010002f790	ldp	x20, x19, [sp], #0x20
000000010002f794	ret
000000010002f798	mov	x0, x19
000000010002f79c	ldp	x29, x30, [sp, #0x10]
000000010002f7a0	ldp	x20, x19, [sp], #0x20
000000010002f7a4	b	0x10002f6fc
000000010002f7a8	tbnz	w8, #0x3, 0x10002f7b8
000000010002f7ac	ldr	w0, [x19, #0x60]
000000010002f7b0	bl	0x10002dd64
000000010002f7b4	b	0x10002f7d0
000000010002f7b8	ldr	x0, [x19, #0x68]
000000010002f7bc	mov	x1, x0
000000010002f7c0	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002f7c4	ldr	x0, [x19, #0x68]
000000010002f7c8	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010002f7cc	str	xzr, [x19, #0x68]
000000010002f7d0	ldrh	w8, [x19, #0x80]
000000010002f7d4	and	w8, w8, #0xfffffffe
000000010002f7d8	orr	w8, w8, #0x80
000000010002f7dc	strh	w8, [x19, #0x80]
000000010002f7e0	ldp	x3, x2, [x19, #0x70]
000000010002f7e4	orr	w1, wzr, #0x1
000000010002f7e8	mov	x0, x19
000000010002f7ec	ldp	x29, x30, [sp, #0x10]
000000010002f7f0	ldp	x20, x19, [sp], #0x20
000000010002f7f4	br	x3
000000010002f7f8	adr	x0, #55553 ; literal pool for: "alias endpoint given to endpoint interface"
000000010002f7fc	nop
000000010002f800	bl	0x100028f84
000000010002f804	ldrh	w8, [x0, #0x80]
000000010002f808	tbnz	w8, #0x8, 0x10002f81c
000000010002f80c	tbnz	w8, #0x0, 0x10002f814
000000010002f810	b	0x10002f820
000000010002f814	orr	w8, w8, #0x100
000000010002f818	strh	w8, [x0, #0x80]
000000010002f81c	ret
000000010002f820	sub	sp, sp, #0x70
000000010002f824	stp	x24, x23, [sp, #0x30]
000000010002f828	stp	x22, x21, [sp, #0x40]
000000010002f82c	stp	x20, x19, [sp, #0x50]
000000010002f830	stp	x29, x30, [sp, #0x60]
000000010002f834	add	x29, sp, #0x60
000000010002f838	ldrb	w8, [x0, #0x80]
000000010002f83c	tbnz	w8, #0x0, 0x10002f8e0
000000010002f840	ldr	w19, [x0, #0x60]
000000010002f844	add	w8, w19, #0x1
000000010002f848	cmp	w8, #0x1
000000010002f84c	b.ls	0x10002f8ec
000000010002f850	mov	w21, #0x0
000000010002f854	adr	x22, #84940
000000010002f858	nop
000000010002f85c	mov	w23, #0x4003
000000010002f860	movk	w23, #0x1000, lsl #16
000000010002f864	adr	x20, #56444 ; literal pool for: "draining message: id = 0x%x"
000000010002f868	nop
000000010002f86c	mov	w1, #0x102
000000010002f870	orr	w3, wzr, #0x20
000000010002f874	add	x0, sp, #0x10
000000010002f878	mov	w2, #0x0
000000010002f87c	mov	x4, x19
000000010002f880	mov	w5, #0x0
000000010002f884	mov	w6, #0x0
000000010002f888	bl	0x100031244 ; symbol stub for: _mach_msg
000000010002f88c	cbz	w0, 0x10002f89c
000000010002f890	cmp	w0, w23
000000010002f894	b.ne	0x10002f8bc
000000010002f898	b	0x10002f8c8
000000010002f89c	ldr	x0, [x22]
000000010002f8a0	ldr	w8, [sp, #0x24]
000000010002f8a4	str	x8, [sp]
000000010002f8a8	mov	w1, #0x0
000000010002f8ac	mov	x2, x20
000000010002f8b0	bl	0x1000270c8
000000010002f8b4	add	x0, sp, #0x10
000000010002f8b8	bl	0x100031250 ; symbol stub for: _mach_msg_destroy
000000010002f8bc	add	w21, w21, #0x1
000000010002f8c0	cmp	w21, #0x14
000000010002f8c4	b.lo	0x10002f86c
000000010002f8c8	ldp	x29, x30, [sp, #0x60]
000000010002f8cc	ldp	x20, x19, [sp, #0x50]
000000010002f8d0	ldp	x22, x21, [sp, #0x40]
000000010002f8d4	ldp	x24, x23, [sp, #0x30]
000000010002f8d8	add	sp, sp, #0x70
000000010002f8dc	ret
000000010002f8e0	adr	x0, #56287 ; literal pool for: "attempt to drain active endpoint"
000000010002f8e4	nop
000000010002f8e8	bl	0x100028f84
000000010002f8ec	mov	x0, #0x0
000000010002f8f0	bl	0x100030b48 ; symbol stub for: __os_assert_log
000000010002f8f4	bl	0x100030b78 ; symbol stub for: __os_crash
000000010002f8f8	brk	#0x1
000000010002f8fc	sub	sp, sp, #0x20
000000010002f900	stp	x29, x30, [sp, #0x10]
000000010002f904	add	x29, sp, #0x10
000000010002f908	cmp	w1, #0x4
000000010002f90c	b.hi	0x10002f920
000000010002f910	str	x1, [sp]
000000010002f914	adr	x8, #56030 ; literal pool for: "Tried to set a reserved task special port: %d"
000000010002f918	nop
000000010002f91c	b	0x10002f93c
000000010002f920	cmp	w1, #0xb
000000010002f924	b.ge	0x10002f930
000000010002f928	str	w1, [x0, #0x48]
000000010002f92c	b	0x10002f94c
000000010002f930	str	x1, [sp]
000000010002f934	adr	x8, #56044 ; literal pool for: "Bogus TaskSpecialPort number: %d"
000000010002f938	nop
000000010002f93c	orr	w1, wzr, #0x3
000000010002f940	mov	x0, x2
000000010002f944	mov	x2, x8
000000010002f948	bl	0x10000ce7c
000000010002f94c	ldp	x29, x30, [sp, #0x10]
000000010002f950	add	sp, sp, #0x20
000000010002f954	ret
000000010002f958	stp	x20, x19, [sp, #-0x20]!
000000010002f95c	stp	x29, x30, [sp, #0x10]
000000010002f960	add	x29, sp, #0x10
000000010002f964	mov	x19, x0
000000010002f968	orr	w1, wzr, #0x1f
000000010002f96c	bl	0x10000e3f4
000000010002f970	ldrh	w8, [x19, #0x80]
000000010002f974	and	w8, w8, #0xfffffffe
000000010002f978	orr	w8, w8, #0x20
000000010002f97c	strh	w8, [x19, #0x80]
000000010002f980	ldp	x8, x2, [x19, #0x70]
000000010002f984	orr	w1, wzr, #0x1
000000010002f988	mov	x0, x19
000000010002f98c	blr	x8
000000010002f990	ldr	x0, [x19, #0x68]
000000010002f994	mov	x1, x0
000000010002f998	bl	0x100030ea8 ; symbol stub for: _dispatch_set_context
000000010002f99c	ldr	x0, [x19, #0x68]
000000010002f9a0	bl	0x100030eb4 ; symbol stub for: _dispatch_source_cancel
000000010002f9a4	str	xzr, [x19, #0x68]
000000010002f9a8	orr	w1, wzr, #0x1f
000000010002f9ac	mov	x0, x19
000000010002f9b0	ldp	x29, x30, [sp, #0x10]
000000010002f9b4	ldp	x20, x19, [sp], #0x20
000000010002f9b8	b	0x10000e4a4
000000010002f9bc	stp	x20, x19, [sp, #-0x20]!
000000010002f9c0	stp	x29, x30, [sp, #0x10]
000000010002f9c4	add	x29, sp, #0x10
000000010002f9c8	mov	x19, x0
000000010002f9cc	bl	0x100030ed8 ; symbol stub for: _dispatch_source_get_handle
000000010002f9d0	bl	0x10000888c
000000010002f9d4	cbz	w0, 0x10002f9e4
000000010002f9d8	sxtw	x0, w0
000000010002f9dc	bl	0x100030b54 ; symbol stub for: __os_assumes_log
000000010002f9e0	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010002f9e4	mov	x0, x19
000000010002f9e8	ldp	x29, x30, [sp, #0x10]
000000010002f9ec	ldp	x20, x19, [sp], #0x20
000000010002f9f0	b	0x100030e60 ; symbol stub for: _dispatch_release
000000010002f9f4	sub	sp, sp, #0x70
000000010002f9f8	stp	x24, x23, [sp, #0x30]
000000010002f9fc	stp	x22, x21, [sp, #0x40]
000000010002fa00	stp	x20, x19, [sp, #0x50]
000000010002fa04	stp	x29, x30, [sp, #0x60]
000000010002fa08	add	x29, sp, #0x60
000000010002fa0c	str	xzr, [sp, #0x20]
000000010002fa10	adr	x0, #23579 ; literal pool for: "kern.bootargs"
000000010002fa14	nop
000000010002fa18	add	x1, sp, #0x20
000000010002fa1c	bl	0x100029448
000000010002fa20	mov	x19, x0
000000010002fa24	ldr	x0, [sp, #0x20]
000000010002fa28	cbz	x19, 0x100030090
000000010002fa2c	adrp	x23, 21 ; 0x100044000
000000010002fa30	str	x0, [x23, #0x130]
000000010002fa34	cbz	x0, 0x1000300a0
000000010002fa38	adr	x1, #22909 ; literal pool for: "__TEXT"
000000010002fa3c	nop
000000010002fa40	adr	x2, #56154 ; literal pool for: "__config"
000000010002fa44	nop
000000010002fa48	mov	x0, #0x0
000000010002fa4c	bl	0x100028e54
000000010002fa50	adrp	x22, 21 ; 0x100044000
000000010002fa54	str	x0, [x22, #0x138]
000000010002fa58	cbz	x0, 0x100030084
000000010002fa5c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002fa60	nop
000000010002fa64	ldr	x21, #0x1065c ; literal pool symbol address: __xpc_type_dictionary
000000010002fa68	cmp	x0, x21
000000010002fa6c	b.ne	0x100030084
000000010002fa70	adr	x0, #56160 ; literal pool for: "/com.apple.xpc.launchd.limits.plist"
000000010002fa74	nop
000000010002fa78	bl	0x100028a68
000000010002fa7c	mov	x20, x0
000000010002fa80	cbz	x20, 0x10002faa0
000000010002fa84	adr	x2, #1596
000000010002fa88	nop
000000010002fa8c	mov	x0, x20
000000010002fa90	mov	x1, #0x0
000000010002fa94	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010002fa98	mov	x0, x20
000000010002fa9c	bl	0x100031b68 ; symbol stub for: _xpc_release
000000010002faa0	adr	x0, #52247 ; literal pool for: "XPC_USERSPACE_REBOOTED"
000000010002faa4	nop
000000010002faa8	bl	0x1000310b8 ; symbol stub for: _getenv
000000010002faac	cmp	x0, #0x0
000000010002fab0	cset	w8, ne
000000010002fab4	adrp	x9, 21 ; 0x100044000
000000010002fab8	strb	w8, [x9, #0x486]
000000010002fabc	adr	x20, #56120 ; literal pool for: "com.apple.libxpc.launchd"
000000010002fac0	nop
000000010002fac4	mov	x0, x20
000000010002fac8	bl	0x10003143c ; symbol stub for: _os_variant_has_internal_content
000000010002facc	adrp	x8, 21 ; 0x100044000
000000010002fad0	strb	w0, [x8, #0x47a]
000000010002fad4	mov	x0, x20
000000010002fad8	bl	0x100031430 ; symbol stub for: _os_variant_allows_internal_security_policies
000000010002fadc	adrp	x8, 21 ; 0x100044000
000000010002fae0	strb	w0, [x8, #0x47b]
000000010002fae4	str	xzr, [sp, #0x28]
000000010002fae8	adr	x0, #23363 ; literal pool for: "kern.bootargs"
000000010002faec	nop
000000010002faf0	add	x1, sp, #0x28
000000010002faf4	bl	0x100029448
000000010002faf8	mov	x8, x0
000000010002fafc	cbz	x8, 0x10002fb20
000000010002fb00	ldr	x0, [sp, #0x28]
000000010002fb04	adr	x1, #56236 ; literal pool for: "rd=md0"
000000010002fb08	nop
000000010002fb0c	mov	x2, x8
000000010002fb10	bl	0x100031778 ; symbol stub for: _strnstr
000000010002fb14	cmp	x0, #0x0
000000010002fb18	mov	w20, #0x01
000000010002fb1c	b	0x10002fb24
000000010002fb20	mov	w20, #0x0
000000010002fb24	ldr	x0, [sp, #0x28]
000000010002fb28	bl	0x100031010 ; symbol stub for: _free
000000010002fb2c	adrp	x8, 21 ; 0x100044000
000000010002fb30	strb	w20, [x8, #0x479]
000000010002fb34	ldr	x0, [sp, #0x20]
000000010002fb38	cbz	x0, 0x10002fba4
000000010002fb3c	adr	x1, #56017 ; literal pool for: "-v"
000000010002fb40	nop
000000010002fb44	mov	x2, x19
000000010002fb48	bl	0x100031778 ; symbol stub for: _strnstr
000000010002fb4c	cmp	x0, #0x0
000000010002fb50	cset	w8, ne
000000010002fb54	adrp	x9, 21 ; 0x100044000
000000010002fb58	strb	w8, [x9, #0x47c]
000000010002fb5c	ldr	x0, [sp, #0x20]
000000010002fb60	adr	x1, #55984 ; literal pool for: "-no-corpses"
000000010002fb64	nop
000000010002fb68	mov	x2, x19
000000010002fb6c	bl	0x100031778 ; symbol stub for: _strnstr
000000010002fb70	cmp	x0, #0x0
000000010002fb74	cset	w8, ne
000000010002fb78	adrp	x19, 21 ; 0x100044000
000000010002fb7c	strb	w8, [x19, #0x488]
000000010002fb80	cbz	x0, 0x10002fba4
000000010002fb84	nop
000000010002fb88	ldr	x8, #0x104f0 ; literal pool symbol address: __os_alloc_once_table
000000010002fb8c	ldr	x9, [x8, #0x10]
000000010002fb90	cmn	x9, #0x1
000000010002fb94	b.ne	0x10003006c
000000010002fb98	ldr	x0, [x8, #0x18]
000000010002fb9c	orr	w8, wzr, #0x1
000000010002fba0	strb	w8, [x0, #0x2b]
000000010002fba4	str	wzr, [sp, #0x1c]
000000010002fba8	orr	w8, wzr, #0x4
000000010002fbac	str	x8, [sp, #0x10]
000000010002fbb0	adr	x0, #55916 ; literal pool for: "kern.minimalboot"
000000010002fbb4	nop
000000010002fbb8	add	x1, sp, #0x1c
000000010002fbbc	add	x2, sp, #0x10
000000010002fbc0	mov	x3, #0x0
000000010002fbc4	mov	x4, #0x0
000000010002fbc8	bl	0x1000317e4 ; symbol stub for: _sysctlbyname
000000010002fbcc	ldr	w8, [sp, #0x1c]
000000010002fbd0	cbz	w8, 0x10002fbe4
000000010002fbd4	adr	x8, #84054
000000010002fbd8	nop
000000010002fbdc	orr	w9, wzr, #0x1
000000010002fbe0	strb	w9, [x8]
000000010002fbe4	str	xzr, [sp, #0x8]
000000010002fbe8	adr	x0, #55877 ; literal pool for: "kern.osrelease"
000000010002fbec	nop
000000010002fbf0	add	x1, sp, #0x8
000000010002fbf4	bl	0x100029448
000000010002fbf8	cbz	x0, 0x10002fc14
000000010002fbfc	ldr	x0, [sp, #0x8]
000000010002fc00	mov	w2, #0x0
000000010002fc04	mov	x1, #0x0
000000010002fc08	bl	0x1000317b4 ; symbol stub for: _strtoul
000000010002fc0c	adrp	x8, 21 ; 0x100044000
000000010002fc10	str	x0, [x8, #0x448]
000000010002fc14	ldr	x0, [sp, #0x8]
000000010002fc18	bl	0x100031010 ; symbol stub for: _free
000000010002fc1c	orr	w8, wzr, #0x400
000000010002fc20	str	w8, [sp, #0x4]
000000010002fc24	adr	x19, #84956
000000010002fc28	nop
000000010002fc2c	add	x1, sp, #0x4
000000010002fc30	mov	x0, x19
000000010002fc34	bl	0x100030ac4 ; symbol stub for: __NSGetExecutablePath
000000010002fc38	mov	w1, #0x2f
000000010002fc3c	mov	x0, x19
000000010002fc40	bl	0x100031784 ; symbol stub for: _strrchr
000000010002fc44	adr	x8, #55800 ; literal pool for: "launchd"
000000010002fc48	nop
000000010002fc4c	cmp	x0, #0x0
000000010002fc50	csinc	x8, x8, x0, eq
000000010002fc54	adrp	x9, 21 ; 0x100044000
000000010002fc58	str	x8, [x9, #0x440]
000000010002fc5c	ldr	x0, [x22, #0x138]
000000010002fc60	adr	x1, #55895 ; literal pool for: "LogServiceLifecycle"
000000010002fc64	nop
000000010002fc68	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fc6c	adrp	x8, 21 ; 0x100044000
000000010002fc70	strb	w0, [x8, #0x489]
000000010002fc74	ldr	x0, [x22, #0x138]
000000010002fc78	adr	x1, #55891 ; literal pool for: "LogIPC"
000000010002fc7c	nop
000000010002fc80	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fc84	adrp	x8, 21 ; 0x100044000
000000010002fc88	strb	w0, [x8, #0x48c]
000000010002fc8c	ldr	x19, [x23, #0x130]
000000010002fc90	cbz	x19, 0x10002fcc4
000000010002fc94	adr	x1, #55883 ; literal pool for: "launchd_log_serial="
000000010002fc98	nop
000000010002fc9c	mov	x0, x19
000000010002fca0	bl	0x1000317a8 ; symbol stub for: _strstr
000000010002fca4	cbz	x0, 0x10002fcc4
000000010002fca8	adr	x1, #55863 ; literal pool for: "launchd_log_serial="
000000010002fcac	nop
000000010002fcb0	mov	x0, x19
000000010002fcb4	bl	0x1000295c0
000000010002fcb8	cmp	x0, #0x0
000000010002fcbc	cset	w0, ne
000000010002fcc0	b	0x10002fcd4
000000010002fcc4	ldr	x0, [x22, #0x138]
000000010002fcc8	adr	x1, #55818 ; literal pool for: "LogToConsole"
000000010002fccc	nop
000000010002fcd0	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fcd4	adrp	x8, 21 ; 0x100044000
000000010002fcd8	strb	w0, [x8, #0x48a]
000000010002fcdc	ldr	x0, [x22, #0x138]
000000010002fce0	adr	x1, #55827 ; literal pool for: "UseGuardMalloc"
000000010002fce4	nop
000000010002fce8	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fcec	adrp	x8, 21 ; 0x100044000
000000010002fcf0	strb	w0, [x8, #0x481]
000000010002fcf4	ldr	x0, [x22, #0x138]
000000010002fcf8	adr	x1, #55818 ; literal pool for: "UseNanoAllocator"
000000010002fcfc	nop
000000010002fd00	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fd04	adrp	x8, 21 ; 0x100044000
000000010002fd08	strb	w0, [x8, #0x482]
000000010002fd0c	ldr	x0, [x22, #0x138]
000000010002fd10	adr	x1, #55811 ; literal pool for: "AbortOnUnknownIPC"
000000010002fd14	nop
000000010002fd18	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fd1c	adrp	x8, 21 ; 0x100044000
000000010002fd20	strb	w0, [x8, #0x483]
000000010002fd24	ldr	x0, [x22, #0x138]
000000010002fd28	adr	x1, #55805 ; literal pool for: "RequireDomainBinding"
000000010002fd2c	nop
000000010002fd30	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fd34	adrp	x8, 21 ; 0x100044000
000000010002fd38	strb	w0, [x8, #0x484]
000000010002fd3c	ldr	x0, [x22, #0x138]
000000010002fd40	adr	x1, #55802 ; literal pool for: "LogToFlatFile"
000000010002fd44	nop
000000010002fd48	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fd4c	adrp	x8, 21 ; 0x100044000
000000010002fd50	strb	w0, [x8, #0x47d]
000000010002fd54	ldr	x0, [x22, #0x138]
000000010002fd58	adr	x1, #55792 ; literal pool for: "LogFileMaxSize"
000000010002fd5c	nop
000000010002fd60	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002fd64	mov	x19, x0
000000010002fd68	cbz	x19, 0x10002fd94
000000010002fd6c	mov	x0, x19
000000010002fd70	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002fd74	nop
000000010002fd78	ldr	x8, #0x10358 ; literal pool symbol address: __xpc_type_int64
000000010002fd7c	cmp	x0, x8
000000010002fd80	b.ne	0x10002fd94
000000010002fd84	mov	x0, x19
000000010002fd88	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010002fd8c	adrp	x8, 20 ; 0x100043000
000000010002fd90	str	x0, [x8, #0x518]
000000010002fd94	ldr	x0, [x22, #0x138]
000000010002fd98	adr	x1, #55743 ; literal pool for: "LogAllBootstrapErrors"
000000010002fd9c	nop
000000010002fda0	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fda4	adrp	x8, 21 ; 0x100044000
000000010002fda8	strb	w0, [x8, #0x47e]
000000010002fdac	ldr	x0, [x22, #0x138]
000000010002fdb0	adr	x1, #55741 ; literal pool for: "LogPerformanceStatistics"
000000010002fdb4	nop
000000010002fdb8	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fdbc	adrp	x8, 21 ; 0x100044000
000000010002fdc0	strb	w0, [x8, #0x48b]
000000010002fdc4	ldr	x0, [x22, #0x138]
000000010002fdc8	adr	x1, #55742 ; literal pool for: "PureOnDemand"
000000010002fdcc	nop
000000010002fdd0	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fdd4	adrp	x8, 21 ; 0x100044000
000000010002fdd8	strb	w0, [x8, #0x47f]
000000010002fddc	adr	x0, #79652
000000010002fde0	nop
000000010002fde4	adr	x1, #55727 ; literal pool for: "SIGTERMTimeout"
000000010002fde8	nop
000000010002fdec	mov	x2, #0x0
000000010002fdf0	bl	0x10003065c
000000010002fdf4	adr	x0, #79632
000000010002fdf8	nop
000000010002fdfc	adr	x1, #55718 ; literal pool for: "SIGKILLTimeout"
000000010002fe00	nop
000000010002fe04	mov	x2, #0x0
000000010002fe08	bl	0x10003065c
000000010002fe0c	ldr	x0, [x22, #0x138]
000000010002fe10	adr	x1, #55713 ; literal pool for: "ExtensionWatchdog"
000000010002fe14	nop
000000010002fe18	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
000000010002fe1c	adrp	x8, 21 ; 0x100044000
000000010002fe20	strb	w0, [x8, #0x4d0]
000000010002fe24	adr	x0, #79588
000000010002fe28	nop
000000010002fe2c	adr	x1, #55703 ; literal pool for: "ExtensionWatchdogTimeout"
000000010002fe30	nop
000000010002fe34	mov	x2, #0x0
000000010002fe38	bl	0x10003065c
000000010002fe3c	adr	x0, #79568
000000010002fe40	nop
000000010002fe44	adr	x1, #55704 ; literal pool for: "ShutdownTimeout"
000000010002fe48	nop
000000010002fe4c	mov	x2, #0x0
000000010002fe50	bl	0x10003065c
000000010002fe54	adr	x0, #79552
000000010002fe58	nop
000000010002fe5c	adr	x1, #55696 ; literal pool for: "HighWatermark"
000000010002fe60	nop
000000010002fe64	mov	x2, #0x0
000000010002fe68	bl	0x10003065c
000000010002fe6c	adr	x0, #79524
000000010002fe70	nop
000000010002fe74	adr	x1, #55686 ; literal pool for: "SyncInterval"
000000010002fe78	nop
000000010002fe7c	adr	x2, #55691 ; literal pool for: "launchd_sync_interval="
000000010002fe80	nop
000000010002fe84	bl	0x10003065c
000000010002fe88	ldr	x0, [x22, #0x138]
000000010002fe8c	adr	x1, #55698 ; literal pool for: "Bootstrap"
000000010002fe90	nop
000000010002fe94	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002fe98	mov	x19, x0
000000010002fe9c	cbz	x19, 0x10002feb0
000000010002fea0	mov	x0, x19
000000010002fea4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002fea8	cmp	x0, x21
000000010002feac	b.eq	0x10002fec0
000000010002feb0	nop
000000010002feb4	ldr	x19, #0x1428c
000000010002feb8	cbnz	x19, 0x10002fec8
000000010002febc	b	0x10002fff4
000000010002fec0	adrp	x8, 21 ; 0x100044000
000000010002fec4	str	x19, [x8, #0x140]
000000010002fec8	adr	x1, #55648 ; literal pool for: "Paths"
000000010002fecc	nop
000000010002fed0	mov	x0, x19
000000010002fed4	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002fed8	mov	x19, x0
000000010002fedc	cbz	x19, 0x10002ff00
000000010002fee0	mov	x0, x19
000000010002fee4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002fee8	nop
000000010002feec	ldr	x8, #0x101ac ; literal pool symbol address: __xpc_type_array
000000010002fef0	cmp	x0, x8
000000010002fef4	b.ne	0x10002ff00
000000010002fef8	adrp	x8, 21 ; 0x100044000
000000010002fefc	str	x19, [x8, #0x458]
000000010002ff00	adrp	x20, 21 ; 0x100044000
000000010002ff04	ldr	x0, [x20, #0x140]
000000010002ff08	adr	x1, #55590 ; literal pool for: "UserPaths"
000000010002ff0c	nop
000000010002ff10	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002ff14	mov	x19, x0
000000010002ff18	cbz	x19, 0x10002ff3c
000000010002ff1c	mov	x0, x19
000000010002ff20	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002ff24	nop
000000010002ff28	ldr	x8, #0x10170 ; literal pool symbol address: __xpc_type_array
000000010002ff2c	cmp	x0, x8
000000010002ff30	b.ne	0x10002ff3c
000000010002ff34	adrp	x8, 21 ; 0x100044000
000000010002ff38	str	x19, [x8, #0x460]
000000010002ff3c	bl	0x1000304cc
000000010002ff40	cbz	x0, 0x10002ff54
000000010002ff44	adr	x2, #1968
000000010002ff48	nop
000000010002ff4c	mov	x1, #0x0
000000010002ff50	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010002ff54	ldr	x0, [x20, #0x140]
000000010002ff58	adr	x1, #55520 ; literal pool for: "ChildDefaults"
000000010002ff5c	nop
000000010002ff60	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
000000010002ff64	mov	x19, x0
000000010002ff68	cbz	x19, 0x10002ff94
000000010002ff6c	mov	x0, x19
000000010002ff70	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010002ff74	cmp	x0, x21
000000010002ff78	b.ne	0x10002ff94
000000010002ff7c	adr	x1, #85132
000000010002ff80	nop
000000010002ff84	adr	x2, #1904
000000010002ff88	nop
000000010002ff8c	mov	x0, x19
000000010002ff90	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010002ff94	bl	0x100030474
000000010002ff98	mov	x19, x0
000000010002ff9c	cbz	x19, 0x10002fff4
000000010002ffa0	mov	x0, x19
000000010002ffa4	bl	0x100031a78 ; symbol stub for: _xpc_dictionary_get_count
000000010002ffa8	lsl	x8, x0, #3
000000010002ffac	add	x0, x8, #0x10
000000010002ffb0	bl	0x10000d464
000000010002ffb4	adrp	x20, 21 ; 0x100044000
000000010002ffb8	str	x0, [x20, #0x450]
000000010002ffbc	orr	w8, wzr, #0x1
000000010002ffc0	str	x8, [sp, #0x28]
000000010002ffc4	adr	x8, #54912 ; literal pool for: "XPC_FLAGS=0x0000000000000000"
000000010002ffc8	nop
000000010002ffcc	str	x8, [x0]
000000010002ffd0	adr	x2, #2024
000000010002ffd4	nop
000000010002ffd8	add	x1, sp, #0x28
000000010002ffdc	mov	x0, x19
000000010002ffe0	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
000000010002ffe4	ldr	x8, [x20, #0x450]
000000010002ffe8	ldr	x9, [sp, #0x28]
000000010002ffec	str	xzr, [x8, x9, lsl #3]
000000010002fff0	b	0x100030010
000000010002fff4	orr	w0, wzr, #0x10
000000010002fff8	bl	0x10000d464
000000010002fffc	adrp	x8, 21 ; 0x100044000
0000000100030000	str	x0, [x8, #0x450]
0000000100030004	adr	x8, #54848 ; literal pool for: "XPC_FLAGS=0x0000000000000000"
0000000100030008	nop
000000010003000c	stp	x8, xzr, [x0]
0000000100030010	ldr	x0, [x22, #0x138]
0000000100030014	cbz	x0, 0x1000300ac
0000000100030018	adr	x1, #54857 ; literal pool for: "Boot"
000000010003001c	nop
0000000100030020	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100030024	adrp	x8, 20 ; 0x100044000
0000000100030028	str	x0, [x8, #0x490]
000000010003002c	cbz	x0, 0x1000300b4
0000000100030030	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100030034	cmp	x0, x21
0000000100030038	b.ne	0x1000300b4
000000010003003c	adr	x0, #54840 ; literal pool for: "hw.targettype"
0000000100030040	nop
0000000100030044	adr	x1, #82988
0000000100030048	nop
000000010003004c	bl	0x100029448
0000000100030050	bl	0x1000092d8
0000000100030054	ldp	x29, x30, [sp, #0x60]
0000000100030058	ldp	x20, x19, [sp, #0x50]
000000010003005c	ldp	x22, x21, [sp, #0x40]
0000000100030060	ldp	x24, x23, [sp, #0x30]
0000000100030064	add	sp, sp, #0x70
0000000100030068	ret
000000010003006c	add	x0, x8, #0x10
0000000100030070	mov	w1, #0x1d8
0000000100030074	mov	x2, #0x0
0000000100030078	bl	0x100030b3c ; symbol stub for: __os_alloc_once
000000010003007c	ldrb	w8, [x19, #0x488]
0000000100030080	b	0x10002fba0
0000000100030084	adr	x0, #54559 ; literal pool for: "launchd built improperly: no __TEXT,__config"
0000000100030088	nop
000000010003008c	bl	0x100028f84
0000000100030090	bl	0x100031010 ; symbol stub for: _free
0000000100030094	str	xzr, [sp, #0x20]
0000000100030098	adrp	x8, 20 ; 0x100044000
000000010003009c	str	xzr, [x8, #0x130]
00000001000300a0	adr	x0, #54503 ; literal pool for: "no bootargs string"
00000001000300a4	nop
00000001000300a8	bl	0x100028f84
00000001000300ac	adrp	x8, 20 ; 0x100044000
00000001000300b0	str	xzr, [x8, #0x490]
00000001000300b4	adr	x0, #54706 ; literal pool for: "no boot tasks"
00000001000300b8	nop
00000001000300bc	bl	0x100028f84
00000001000300c0	stp	x22, x21, [sp, #-0x30]!
00000001000300c4	stp	x20, x19, [sp, #0x10]
00000001000300c8	stp	x29, x30, [sp, #0x20]
00000001000300cc	add	x29, sp, #0x20
00000001000300d0	mov	x20, x1
00000001000300d4	mov	x19, x0
00000001000300d8	mov	x0, x20
00000001000300dc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000300e0	nop
00000001000300e4	ldr	x22, #0xffec ; literal pool symbol address: __xpc_type_int64
00000001000300e8	cmp	x0, x22
00000001000300ec	b.eq	0x100030144
00000001000300f0	mov	x0, x20
00000001000300f4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000300f8	nop
00000001000300fc	ldr	x8, #0xff9c ; literal pool symbol address: __xpc_type_array
0000000100030100	cmp	x0, x8
0000000100030104	b.eq	0x100030118
0000000100030108	ldp	x29, x30, [sp, #0x20]
000000010003010c	ldp	x20, x19, [sp, #0x10]
0000000100030110	ldp	x22, x21, [sp], #0x30
0000000100030114	ret
0000000100030118	mov	x0, x20
000000010003011c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100030120	cmp	x0, #0x1
0000000100030124	b.ne	0x100030168
0000000100030128	mov	x0, x20
000000010003012c	mov	x1, #0x0
0000000100030130	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100030134	mov	x20, x0
0000000100030138	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010003013c	cmp	x0, x22
0000000100030140	b.ne	0x100030108
0000000100030144	mov	x0, x20
0000000100030148	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
000000010003014c	mov	x1, x0
0000000100030150	mov	x0, x19
0000000100030154	mov	x2, x1
0000000100030158	ldp	x29, x30, [sp, #0x20]
000000010003015c	ldp	x20, x19, [sp, #0x10]
0000000100030160	ldp	x22, x21, [sp], #0x30
0000000100030164	b	0x100029794
0000000100030168	mov	x0, x20
000000010003016c	bl	0x1000318d4 ; symbol stub for: _xpc_array_get_count
0000000100030170	cmp	x0, #0x2
0000000100030174	b.ne	0x100030108
0000000100030178	mov	x0, x20
000000010003017c	mov	x1, #0x0
0000000100030180	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100030184	mov	x21, x0
0000000100030188	orr	w1, wzr, #0x1
000000010003018c	mov	x0, x20
0000000100030190	bl	0x1000318ec ; symbol stub for: _xpc_array_get_value
0000000100030194	mov	x20, x0
0000000100030198	mov	x0, x21
000000010003019c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000301a0	cmp	x0, x22
00000001000301a4	b.ne	0x100030108
00000001000301a8	mov	x0, x20
00000001000301ac	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000301b0	cmp	x0, x22
00000001000301b4	b.ne	0x100030108
00000001000301b8	mov	x0, x21
00000001000301bc	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
00000001000301c0	mov	x21, x0
00000001000301c4	mov	x0, x20
00000001000301c8	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
00000001000301cc	mov	x2, x0
00000001000301d0	mov	x0, x19
00000001000301d4	mov	x1, x21
00000001000301d8	b	0x100030158
00000001000301dc	mov	x8, x0
00000001000301e0	nop
00000001000301e4	ldr	x0, #0x13f54
00000001000301e8	cbz	x0, 0x1000301f4
00000001000301ec	mov	x1, x8
00000001000301f0	b	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000301f4	ret
00000001000301f8	stp	x26, x25, [sp, #-0x50]!
00000001000301fc	stp	x24, x23, [sp, #0x10]
0000000100030200	stp	x22, x21, [sp, #0x20]
0000000100030204	stp	x20, x19, [sp, #0x30]
0000000100030208	stp	x29, x30, [sp, #0x40]
000000010003020c	add	x29, sp, #0x40
0000000100030210	sub	sp, sp, #0xca0
0000000100030214	nop
0000000100030218	ldr	x8, #0xfe00 ; literal pool symbol address: ___stack_chk_guard
000000010003021c	ldr	x8, [x8]
0000000100030220	stur	x8, [x29, #-0x48]
0000000100030224	adrp	x8, 20 ; 0x100044000
0000000100030228	ldrb	w8, [x8, #0x479]
000000010003022c	cbz	w8, 0x1000302a4
0000000100030230	nop
0000000100030234	ldr	x8, #0x1328c
0000000100030238	str	x8, [sp]
000000010003023c	adr	x0, #54342 ; literal pool for: "%s/disabled.plist"
0000000100030240	nop
0000000100030244	bl	0x10000d72c
0000000100030248	adrp	x8, 20 ; 0x100044000
000000010003024c	str	x0, [x8, #0x148]
0000000100030250	bl	0x100028a68
0000000100030254	adrp	x19, 20 ; 0x100044000
0000000100030258	str	x0, [x19, #0x150]
000000010003025c	cbnz	x0, 0x100030270
0000000100030260	mov	x1, #0x0
0000000100030264	mov	x2, #0x0
0000000100030268	bl	0x100031a24 ; symbol stub for: _xpc_dictionary_create
000000010003026c	str	x0, [x19, #0x150]
0000000100030270	ldur	x8, [x29, #-0x48]
0000000100030274	nop
0000000100030278	ldr	x9, #0xfda0 ; literal pool symbol address: ___stack_chk_guard
000000010003027c	ldr	x9, [x9]
0000000100030280	cmp	x9, x8
0000000100030284	b.ne	0x100030470
0000000100030288	add	sp, sp, #0xca0
000000010003028c	ldp	x29, x30, [sp, #0x40]
0000000100030290	ldp	x20, x19, [sp, #0x30]
0000000100030294	ldp	x22, x21, [sp, #0x20]
0000000100030298	ldp	x24, x23, [sp, #0x10]
000000010003029c	ldp	x26, x25, [sp], #0x50
00000001000302a0	ret
00000001000302a4	adrp	x24, 19 ; 0x100043000
00000001000302a8	ldr	x8, [x24, #0x4c0]
00000001000302ac	adr	x4, #54701 ; literal pool for: "%s/disabled.migrated"
00000001000302b0	nop
00000001000302b4	str	x8, [sp]
00000001000302b8	add	x0, sp, #0x898
00000001000302bc	orr	w1, wzr, #0x400
00000001000302c0	orr	w3, wzr, #0x400
00000001000302c4	mov	w2, #0x0
00000001000302c8	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
00000001000302cc	add	x0, sp, #0x898
00000001000302d0	add	x1, sp, #0x8
00000001000302d4	bl	0x1000316d0 ; symbol stub for: _stat
00000001000302d8	cbz	w0, 0x100030230
00000001000302dc	adr	x0, #73348
00000001000302e0	nop
00000001000302e4	mov	w1, #0x5c
00000001000302e8	mov	x2, #0x0
00000001000302ec	bl	0x100031064 ; symbol stub for: _fts_open
00000001000302f0	mov	x19, x0
00000001000302f4	bl	0x100031070 ; symbol stub for: _fts_read
00000001000302f8	mov	x23, x0
00000001000302fc	cbz	x23, 0x100030404
0000000100030300	mov	x25, #0x0
0000000100030304	adr	x20, #54661 ; literal pool for: "com.apple.launchd"
0000000100030308	nop
000000010003030c	adr	x21, #54671 ; literal pool for: "%s/overrides.plist"
0000000100030310	nop
0000000100030314	adr	x22, #54126 ; literal pool for: "%s/disabled.plist"
0000000100030318	nop
000000010003031c	ldrh	w8, [x23, #0x58]
0000000100030320	cmp	w8, #0x6
0000000100030324	b.eq	0x1000303f0
0000000100030328	cmp	w8, #0x1
000000010003032c	b.ne	0x1000303f4
0000000100030330	cbz	x25, 0x100030344
0000000100030334	orr	w2, wzr, #0x4
0000000100030338	mov	x0, x19
000000010003033c	mov	x1, x23
0000000100030340	bl	0x10003107c ; symbol stub for: _fts_set
0000000100030344	add	x25, x25, #0x1
0000000100030348	add	x0, x23, #0x68
000000010003034c	mov	x1, x20
0000000100030350	bl	0x100031700 ; symbol stub for: _strcmp
0000000100030354	cbnz	w0, 0x1000303f4
0000000100030358	ldr	x8, [x23, #0x30]
000000010003035c	str	x8, [sp]
0000000100030360	add	x0, sp, #0x498
0000000100030364	orr	w1, wzr, #0x400
0000000100030368	orr	w3, wzr, #0x400
000000010003036c	mov	w2, #0x0
0000000100030370	mov	x4, x21
0000000100030374	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100030378	ldr	x8, [x24, #0x4c0]
000000010003037c	str	x8, [sp]
0000000100030380	add	x0, sp, #0x98
0000000100030384	orr	w1, wzr, #0x400
0000000100030388	orr	w3, wzr, #0x400
000000010003038c	mov	w2, #0x0
0000000100030390	mov	x4, x22
0000000100030394	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100030398	bl	0x100030cec ; symbol stub for: _copyfile_state_alloc
000000010003039c	mov	x23, x0
00000001000303a0	orr	w3, wzr, #0x8
00000001000303a4	add	x0, sp, #0x498
00000001000303a8	add	x1, sp, #0x98
00000001000303ac	mov	x2, x23
00000001000303b0	bl	0x100030ce0 ; symbol stub for: _copyfile
00000001000303b4	cmn	w0, #0x1
00000001000303b8	b.ne	0x1000303cc
00000001000303bc	bl	0x100030adc ; symbol stub for: ___error
00000001000303c0	ldrsw	x0, [x0]
00000001000303c4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000303c8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000303cc	mov	x0, x23
00000001000303d0	bl	0x100030cf8 ; symbol stub for: _copyfile_state_free
00000001000303d4	cmn	w0, #0x1
00000001000303d8	b.ne	0x1000303f4
00000001000303dc	bl	0x100030adc ; symbol stub for: ___error
00000001000303e0	ldrsw	x0, [x0]
00000001000303e4	bl	0x100030b54 ; symbol stub for: __os_assumes_log
00000001000303e8	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
00000001000303ec	b	0x1000303f4
00000001000303f0	sub	x25, x25, #0x1
00000001000303f4	mov	x0, x19
00000001000303f8	bl	0x100031070 ; symbol stub for: _fts_read
00000001000303fc	mov	x23, x0
0000000100030400	cbnz	x23, 0x10003031c
0000000100030404	mov	x0, x19
0000000100030408	bl	0x100031058 ; symbol stub for: _fts_close
000000010003040c	mov	w8, #0x1b6
0000000100030410	str	x8, [sp]
0000000100030414	orr	w1, wzr, #0x200
0000000100030418	add	x0, sp, #0x898
000000010003041c	bl	0x1000313f4 ; symbol stub for: _open
0000000100030420	cmn	w0, #0x1
0000000100030424	b.eq	0x100030448
0000000100030428	bl	0x100030c74 ; symbol stub for: _close
000000010003042c	cmn	w0, #0x1
0000000100030430	b.ne	0x100030230
0000000100030434	bl	0x100030adc ; symbol stub for: ___error
0000000100030438	ldrsw	x0, [x0]
000000010003043c	bl	0x100030b48 ; symbol stub for: __os_assert_log
0000000100030440	bl	0x100030b78 ; symbol stub for: __os_crash
0000000100030444	brk	#0x1
0000000100030448	bl	0x100030adc ; symbol stub for: ___error
000000010003044c	ldr	w8, [x0]
0000000100030450	cmp	w8, #0x1e
0000000100030454	b.eq	0x100030230
0000000100030458	bl	0x100030adc ; symbol stub for: ___error
000000010003045c	ldrsw	x0, [x0]
0000000100030460	cbz	w0, 0x100030230
0000000100030464	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100030468	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
000000010003046c	b	0x100030230
0000000100030470	bl	0x100030b00 ; symbol stub for: ___stack_chk_fail
0000000100030474	stp	x20, x19, [sp, #-0x20]!
0000000100030478	stp	x29, x30, [sp, #0x10]
000000010003047c	add	x29, sp, #0x10
0000000100030480	nop
0000000100030484	ldr	x0, #0x13cbc
0000000100030488	cbz	x0, 0x1000304b8
000000010003048c	adr	x1, #53768 ; literal pool for: "Self"
0000000100030490	nop
0000000100030494	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
0000000100030498	mov	x19, x0
000000010003049c	cbz	x19, 0x1000304b8
00000001000304a0	mov	x0, x19
00000001000304a4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000304a8	nop
00000001000304ac	ldr	x8, #0xfc14 ; literal pool symbol address: __xpc_type_dictionary
00000001000304b0	cmp	x0, x8
00000001000304b4	b.eq	0x1000304bc
00000001000304b8	mov	x19, #0x0
00000001000304bc	mov	x0, x19
00000001000304c0	ldp	x29, x30, [sp, #0x10]
00000001000304c4	ldp	x20, x19, [sp], #0x20
00000001000304c8	ret
00000001000304cc	stp	x20, x19, [sp, #-0x20]!
00000001000304d0	stp	x29, x30, [sp, #0x10]
00000001000304d4	add	x29, sp, #0x10
00000001000304d8	nop
00000001000304dc	ldr	x0, #0x13c64
00000001000304e0	cbz	x0, 0x100030510
00000001000304e4	adr	x1, #53685 ; literal pool for: "Child"
00000001000304e8	nop
00000001000304ec	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000304f0	mov	x19, x0
00000001000304f4	cbz	x19, 0x100030510
00000001000304f8	mov	x0, x19
00000001000304fc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100030500	nop
0000000100030504	ldr	x8, #0xfbbc ; literal pool symbol address: __xpc_type_dictionary
0000000100030508	cmp	x0, x8
000000010003050c	b.eq	0x100030514
0000000100030510	mov	x19, #0x0
0000000100030514	mov	x0, x19
0000000100030518	ldp	x29, x30, [sp, #0x10]
000000010003051c	ldp	x20, x19, [sp], #0x20
0000000100030520	ret
0000000100030524	nop
0000000100030528	ldr	x0, #0x13c28
000000010003052c	ret
0000000100030530	sub	sp, sp, #0x30
0000000100030534	stp	x20, x19, [sp, #0x10]
0000000100030538	stp	x29, x30, [sp, #0x20]
000000010003053c	add	x29, sp, #0x20
0000000100030540	mov	x19, x1
0000000100030544	adr	x4, #53595 ; literal pool for: "XPC_FLAGS=0x%llx"
0000000100030548	nop
000000010003054c	str	x0, [sp]
0000000100030550	orr	w1, wzr, #0x40
0000000100030554	mov	x3, #-0x1
0000000100030558	mov	w2, #0x0
000000010003055c	mov	x0, x19
0000000100030560	bl	0x100030af4 ; symbol stub for: ___snprintf_chk
0000000100030564	nop
0000000100030568	ldr	x8, #0x13ee8
000000010003056c	str	x19, [x8]
0000000100030570	ldp	x29, x30, [sp, #0x20]
0000000100030574	ldp	x20, x19, [sp, #0x10]
0000000100030578	add	sp, sp, #0x30
000000010003057c	ret
0000000100030580	sub	sp, sp, #0x50
0000000100030584	stp	x20, x19, [sp, #0x30]
0000000100030588	stp	x29, x30, [sp, #0x40]
000000010003058c	add	x29, sp, #0x40
0000000100030590	nop
0000000100030594	ldr	x19, #0x13bbc
0000000100030598	cbz	x19, 0x100030624
000000010003059c	nop
00000001000305a0	ldr	x20, #0x13ba8
00000001000305a4	adr	x1, #33593 ; literal pool for: "_dirty"
00000001000305a8	nop
00000001000305ac	mov	x0, x19
00000001000305b0	bl	0x100031a6c ; symbol stub for: _xpc_dictionary_get_bool
00000001000305b4	cbz	w0, 0x100030624
00000001000305b8	adr	x1, #33573 ; literal pool for: "_dirty"
00000001000305bc	nop
00000001000305c0	mov	x0, x19
00000001000305c4	mov	x2, #0x0
00000001000305c8	bl	0x100031b20 ; symbol stub for: _xpc_dictionary_set_value
00000001000305cc	mov	x0, x19
00000001000305d0	bl	0x1000319ac ; symbol stub for: _xpc_copy
00000001000305d4	mov	x19, x0
00000001000305d8	mov	x0, x20
00000001000305dc	bl	0x10000d520
00000001000305e0	mov	x20, x0
00000001000305e4	bl	0x10000a2bc
00000001000305e8	nop
00000001000305ec	ldr	x8, #0xfa24 ; literal pool symbol address: __NSConcreteStackBlock
00000001000305f0	str	x8, [sp]
00000001000305f4	nop
00000001000305f8	ldr	d0, 0x10003de90
00000001000305fc	str	d0, [sp, #0x8]
0000000100030600	adr	x8, #584
0000000100030604	nop
0000000100030608	str	x8, [sp, #0x10]
000000010003060c	adr	x8, #72548
0000000100030610	nop
0000000100030614	stp	x8, x19, [sp, #0x18]
0000000100030618	str	x20, [sp, #0x28]
000000010003061c	mov	x1, sp
0000000100030620	bl	0x100030d28 ; symbol stub for: _dispatch_async
0000000100030624	ldp	x29, x30, [sp, #0x40]
0000000100030628	ldp	x20, x19, [sp, #0x30]
000000010003062c	add	sp, sp, #0x50
0000000100030630	ret
0000000100030634	stp	x29, x30, [sp, #-0x10]!
0000000100030638	mov	x29, sp
000000010003063c	bl	0x100030580
0000000100030640	bl	0x10000a2bc
0000000100030644	adr	x2, #20
0000000100030648	nop
000000010003064c	mov	x1, #0x0
0000000100030650	ldp	x29, x30, [sp], #0x10
0000000100030654	b	0x100030f2c ; symbol stub for: _dispatch_sync_f
0000000100030658	ret
000000010003065c	stp	x22, x21, [sp, #-0x30]!
0000000100030660	stp	x20, x19, [sp, #0x10]
0000000100030664	stp	x29, x30, [sp, #0x20]
0000000100030668	add	x29, sp, #0x20
000000010003066c	mov	x21, x2
0000000100030670	mov	x20, x1
0000000100030674	mov	x19, x0
0000000100030678	cbz	x21, 0x1000306a8
000000010003067c	nop
0000000100030680	ldr	x22, #0x13ab0
0000000100030684	cbz	x22, 0x1000306a8
0000000100030688	mov	x0, x22
000000010003068c	mov	x1, x21
0000000100030690	bl	0x1000317a8 ; symbol stub for: _strstr
0000000100030694	cbz	x0, 0x1000306a8
0000000100030698	mov	x0, x22
000000010003069c	mov	x1, x21
00000001000306a0	bl	0x1000295c0
00000001000306a4	b	0x1000306e0
00000001000306a8	nop
00000001000306ac	ldr	x0, #0x13a8c
00000001000306b0	mov	x1, x20
00000001000306b4	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000306b8	mov	x20, x0
00000001000306bc	cbz	x20, 0x1000306e4
00000001000306c0	mov	x0, x20
00000001000306c4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000306c8	nop
00000001000306cc	ldr	x8, #0xfa04 ; literal pool symbol address: __xpc_type_int64
00000001000306d0	cmp	x0, x8
00000001000306d4	b.ne	0x1000306e4
00000001000306d8	mov	x0, x20
00000001000306dc	bl	0x100031b50 ; symbol stub for: _xpc_int64_get_value
00000001000306e0	str	w0, [x19]
00000001000306e4	ldp	x29, x30, [sp, #0x20]
00000001000306e8	ldp	x20, x19, [sp, #0x10]
00000001000306ec	ldp	x22, x21, [sp], #0x30
00000001000306f0	ret
00000001000306f4	sub	sp, sp, #0x40
00000001000306f8	stp	x22, x21, [sp, #0x10]
00000001000306fc	stp	x20, x19, [sp, #0x20]
0000000100030700	stp	x29, x30, [sp, #0x30]
0000000100030704	add	x29, sp, #0x30
0000000100030708	mov	x19, x2
000000010003070c	mov	x21, x1
0000000100030710	mov	x20, x0
0000000100030714	mov	x0, x21
0000000100030718	bl	0x100031b38 ; symbol stub for: _xpc_get_type
000000010003071c	nop
0000000100030720	ldr	x8, #0xf9c0 ; literal pool symbol address: __xpc_type_string
0000000100030724	cmp	x0, x8
0000000100030728	b.ne	0x1000307a4
000000010003072c	str	xzr, [sp, #0x8]
0000000100030730	mov	x0, x21
0000000100030734	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100030738	mov	x1, x0
000000010003073c	orr	w3, wzr, #0x1
0000000100030740	add	x2, sp, #0x8
0000000100030744	mov	x0, x20
0000000100030748	mov	x4, #0x0
000000010003074c	bl	0x10000e4dc
0000000100030750	cbz	x0, 0x1000307a4
0000000100030754	cbz	x19, 0x10003077c
0000000100030758	adr	x8, #83120
000000010003075c	nop
0000000100030760	ldr	x9, [x8]
0000000100030764	str	x9, [x0]
0000000100030768	cbz	x9, 0x10003079c
000000010003076c	str	x0, [x9, #0x8]
0000000100030770	adr	x8, #83096
0000000100030774	nop
0000000100030778	b	0x10003079c
000000010003077c	adr	x8, #83092
0000000100030780	nop
0000000100030784	ldr	x9, [x8]
0000000100030788	str	x9, [x0]
000000010003078c	cbz	x9, 0x10003079c
0000000100030790	str	x0, [x9, #0x8]
0000000100030794	adr	x8, #83068
0000000100030798	nop
000000010003079c	str	x0, [x8]
00000001000307a0	str	x8, [x0, #0x8]
00000001000307a4	ldp	x29, x30, [sp, #0x30]
00000001000307a8	ldp	x20, x19, [sp, #0x20]
00000001000307ac	ldp	x22, x21, [sp, #0x10]
00000001000307b0	add	sp, sp, #0x40
00000001000307b4	ret
00000001000307b8	sub	sp, sp, #0x40
00000001000307bc	stp	x22, x21, [sp, #0x10]
00000001000307c0	stp	x20, x19, [sp, #0x20]
00000001000307c4	stp	x29, x30, [sp, #0x30]
00000001000307c8	add	x29, sp, #0x30
00000001000307cc	mov	x19, x2
00000001000307d0	mov	x21, x1
00000001000307d4	mov	x20, x0
00000001000307d8	mov	x0, x21
00000001000307dc	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000307e0	nop
00000001000307e4	ldr	x8, #0xf8fc ; literal pool symbol address: __xpc_type_string
00000001000307e8	cmp	x0, x8
00000001000307ec	b.ne	0x100030834
00000001000307f0	adr	x1, #53334 ; literal pool for: "MallocStackLogging"
00000001000307f4	nop
00000001000307f8	mov	x0, x20
00000001000307fc	bl	0x100031700 ; symbol stub for: _strcmp
0000000100030800	cbz	w0, 0x100030834
0000000100030804	mov	x0, x21
0000000100030808	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
000000010003080c	stp	x20, x0, [sp]
0000000100030810	adr	x0, #20195 ; literal pool for: "%s=%s"
0000000100030814	nop
0000000100030818	bl	0x10000d72c
000000010003081c	nop
0000000100030820	ldr	x8, #0x13c30
0000000100030824	ldr	x9, [x19]
0000000100030828	str	x0, [x8, x9, lsl #3]
000000010003082c	add	x8, x9, #0x1
0000000100030830	str	x8, [x19]
0000000100030834	ldp	x29, x30, [sp, #0x30]
0000000100030838	ldp	x20, x19, [sp, #0x20]
000000010003083c	ldp	x22, x21, [sp, #0x10]
0000000100030840	add	sp, sp, #0x40
0000000100030844	ret
0000000100030848	sub	sp, sp, #0x40
000000010003084c	stp	x22, x21, [sp, #0x10]
0000000100030850	stp	x20, x19, [sp, #0x20]
0000000100030854	stp	x29, x30, [sp, #0x30]
0000000100030858	add	x29, sp, #0x30
000000010003085c	mov	x19, x0
0000000100030860	ldp	x21, x0, [x19, #0x20]
0000000100030864	adr	x1, #41706 ; literal pool for: "w"
0000000100030868	nop
000000010003086c	bl	0x100030fec ; symbol stub for: _fopen
0000000100030870	mov	x20, x0
0000000100030874	cbz	x20, 0x1000308d8
0000000100030878	adr	x8, #53302 ; literal pool for: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">"
000000010003087c	nop
0000000100030880	str	x8, [sp]
0000000100030884	adr	x1, #45632 ; literal pool for: "%s\n"
0000000100030888	nop
000000010003088c	mov	x0, x20
0000000100030890	bl	0x100030ff8 ; symbol stub for: _fprintf
0000000100030894	mov	x0, x21
0000000100030898	bl	0x100031a78 ; symbol stub for: _xpc_dictionary_get_count
000000010003089c	cbz	x0, 0x1000308e8
00000001000308a0	adr	x0, #53426 ; literal pool for: "<dict>\n"
00000001000308a4	nop
00000001000308a8	orr	w1, wzr, #0x7
00000001000308ac	orr	w2, wzr, #0x1
00000001000308b0	mov	x3, x20
00000001000308b4	bl	0x100031088 ; symbol stub for: _fwrite
00000001000308b8	adr	x2, #160
00000001000308bc	nop
00000001000308c0	mov	x0, x21
00000001000308c4	mov	x1, x20
00000001000308c8	bl	0x100031a0c ; symbol stub for: _xpc_dictionary_apply_f
00000001000308cc	adr	x0, #53390 ; literal pool for: "</dict>\n"
00000001000308d0	nop
00000001000308d4	b	0x1000308f0
00000001000308d8	bl	0x100030adc ; symbol stub for: ___error
00000001000308dc	ldrsw	x0, [x0]
00000001000308e0	cbnz	w0, 0x100030930
00000001000308e4	b	0x100030938
00000001000308e8	adr	x0, #53371 ; literal pool for: "<dict/>\n"
00000001000308ec	nop
00000001000308f0	orr	w1, wzr, #0x8
00000001000308f4	orr	w2, wzr, #0x1
00000001000308f8	mov	x3, x20
00000001000308fc	bl	0x100031088 ; symbol stub for: _fwrite
0000000100030900	adr	x0, #53356 ; literal pool for: "</plist>\n"
0000000100030904	nop
0000000100030908	mov	w1, #0x9
000000010003090c	orr	w2, wzr, #0x1
0000000100030910	mov	x3, x20
0000000100030914	bl	0x100031088 ; symbol stub for: _fwrite
0000000100030918	mov	x0, x20
000000010003091c	bl	0x100030fa4 ; symbol stub for: _fclose
0000000100030920	cmn	w0, #0x1
0000000100030924	b.ne	0x100030938
0000000100030928	bl	0x100030adc ; symbol stub for: ___error
000000010003092c	ldrsw	x0, [x0]
0000000100030930	bl	0x100030b54 ; symbol stub for: __os_assumes_log
0000000100030934	bl	0x100030b6c ; symbol stub for: __os_avoid_tail_call
0000000100030938	ldr	x0, [x19, #0x20]
000000010003093c	bl	0x100031b68 ; symbol stub for: _xpc_release
0000000100030940	ldr	x0, [x19, #0x28]
0000000100030944	ldp	x29, x30, [sp, #0x30]
0000000100030948	ldp	x20, x19, [sp, #0x20]
000000010003094c	ldp	x22, x21, [sp, #0x10]
0000000100030950	add	sp, sp, #0x40
0000000100030954	b	0x100031010 ; symbol stub for: _free
0000000100030958	sub	sp, sp, #0x40
000000010003095c	stp	x22, x21, [sp, #0x10]
0000000100030960	stp	x20, x19, [sp, #0x20]
0000000100030964	stp	x29, x30, [sp, #0x30]
0000000100030968	add	x29, sp, #0x30
000000010003096c	mov	x19, x2
0000000100030970	mov	x20, x1
0000000100030974	mov	x21, x0
0000000100030978	mov	x0, x20
000000010003097c	bl	0x100031b38 ; symbol stub for: _xpc_get_type
0000000100030980	nop
0000000100030984	ldr	x8, #0xf73c ; literal pool symbol address: __xpc_type_dictionary
0000000100030988	cmp	x0, x8
000000010003098c	b.ne	0x1000309a8
0000000100030990	adr	x1, #12055 ; literal pool for: "Disabled"
0000000100030994	nop
0000000100030998	mov	x0, x20
000000010003099c	bl	0x100031ac0 ; symbol stub for: _xpc_dictionary_get_value
00000001000309a0	mov	x20, x0
00000001000309a4	cbz	x20, 0x1000309e8
00000001000309a8	mov	x0, x20
00000001000309ac	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000309b0	nop
00000001000309b4	ldr	x8, #0xf6ec ; literal pool symbol address: __xpc_type_bool
00000001000309b8	cmp	x0, x8
00000001000309bc	b.eq	0x1000309d8
00000001000309c0	mov	x0, x20
00000001000309c4	bl	0x100031b38 ; symbol stub for: _xpc_get_type
00000001000309c8	nop
00000001000309cc	ldr	x8, #0xf714 ; literal pool symbol address: __xpc_type_string
00000001000309d0	cmp	x0, x8
00000001000309d4	b.ne	0x1000309e8
00000001000309d8	orr	w1, wzr, #0x3c
00000001000309dc	mov	x0, x21
00000001000309e0	bl	0x1000316f4 ; symbol stub for: _strchr
00000001000309e4	cbz	x0, 0x1000309fc
00000001000309e8	ldp	x29, x30, [sp, #0x30]
00000001000309ec	ldp	x20, x19, [sp, #0x20]
00000001000309f0	ldp	x22, x21, [sp, #0x10]
00000001000309f4	add	sp, sp, #0x40
00000001000309f8	ret
00000001000309fc	str	x21, [sp]
0000000100030a00	adr	x1, #53110 ; literal pool for: "\t<key>%s</key>\n"
0000000100030a04	nop
0000000100030a08	mov	x0, x19
0000000100030a0c	bl	0x100030ff8 ; symbol stub for: _fprintf
0000000100030a10	nop
0000000100030a14	ldr	x8, #0xf67c ; literal pool symbol address: __xpc_bool_true
0000000100030a18	cmp	x20, x8
0000000100030a1c	b.eq	0x100030a50
0000000100030a20	nop
0000000100030a24	ldr	x8, #0xf664 ; literal pool symbol address: __xpc_bool_false
0000000100030a28	cmp	x20, x8
0000000100030a2c	b.eq	0x100030a60
0000000100030a30	mov	x0, x20
0000000100030a34	bl	0x100031bb0 ; symbol stub for: _xpc_string_get_string_ptr
0000000100030a38	str	x0, [sp]
0000000100030a3c	adr	x1, #53087 ; literal pool for: "\t<string>%s</string>\n"
0000000100030a40	nop
0000000100030a44	mov	x0, x19
0000000100030a48	bl	0x100030ff8 ; symbol stub for: _fprintf
0000000100030a4c	b	0x1000309e8
0000000100030a50	adr	x0, #53046 ; literal pool for: "\t<true/>\n"
0000000100030a54	nop
0000000100030a58	mov	w1, #0x9
0000000100030a5c	b	0x100030a6c
0000000100030a60	adr	x0, #53040 ; literal pool for: "\t<false/>\n"
0000000100030a64	nop
0000000100030a68	mov	w1, #0xa
0000000100030a6c	orr	w2, wzr, #0x1
0000000100030a70	mov	x3, x19
0000000100030a74	ldp	x29, x30, [sp, #0x30]
0000000100030a78	ldp	x20, x19, [sp, #0x20]
0000000100030a7c	ldp	x22, x21, [sp, #0x10]
0000000100030a80	add	sp, sp, #0x40
0000000100030a84	b	0x100031088 ; symbol stub for: _fwrite
